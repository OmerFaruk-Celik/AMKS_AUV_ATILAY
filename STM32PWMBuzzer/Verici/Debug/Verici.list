
Verici.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ae4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08008bf8  08008bf8  00009bf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009048  08009048  0000b1e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009048  08009048  0000a048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009050  08009050  0000b1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009050  08009050  0000a050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009054  08009054  0000a054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08009058  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  200001e8  0800923c  0000b1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  0800923c  0000b47c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009850  00000000  00000000  0000b20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d38  00000000  00000000  00014a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  00016798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008d2  00000000  00000000  00017318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001849e  00000000  00000000  00017bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b8ca  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a88b  00000000  00000000  0003b952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000c61dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004474  00000000  00000000  000c6264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000ca6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008bdc 	.word	0x08008bdc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08008bdc 	.word	0x08008bdc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	2200      	movs	r2, #0
 8001074:	2300      	movs	r3, #0
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
 800107a:	f7ff fc9f 	bl	80009bc <__aeabi_dcmplt>
 800107e:	b928      	cbnz	r0, 800108c <__aeabi_d2lz+0x1c>
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001088:	f000 b80a 	b.w	80010a0 <__aeabi_d2ulz>
 800108c:	4620      	mov	r0, r4
 800108e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001092:	f000 f805 	bl	80010a0 <__aeabi_d2ulz>
 8001096:	4240      	negs	r0, r0
 8001098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800109c:	bd38      	pop	{r3, r4, r5, pc}
 800109e:	bf00      	nop

080010a0 <__aeabi_d2ulz>:
 80010a0:	b5d0      	push	{r4, r6, r7, lr}
 80010a2:	2200      	movs	r2, #0
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <__aeabi_d2ulz+0x34>)
 80010a6:	4606      	mov	r6, r0
 80010a8:	460f      	mov	r7, r1
 80010aa:	f7ff fa15 	bl	80004d8 <__aeabi_dmul>
 80010ae:	f7ff fceb 	bl	8000a88 <__aeabi_d2uiz>
 80010b2:	4604      	mov	r4, r0
 80010b4:	f7ff f996 	bl	80003e4 <__aeabi_ui2d>
 80010b8:	2200      	movs	r2, #0
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <__aeabi_d2ulz+0x38>)
 80010bc:	f7ff fa0c 	bl	80004d8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4630      	mov	r0, r6
 80010c6:	4639      	mov	r1, r7
 80010c8:	f7ff f84e 	bl	8000168 <__aeabi_dsub>
 80010cc:	f7ff fcdc 	bl	8000a88 <__aeabi_d2uiz>
 80010d0:	4621      	mov	r1, r4
 80010d2:	bdd0      	pop	{r4, r6, r7, pc}
 80010d4:	3df00000 	.word	0x3df00000
 80010d8:	41f00000 	.word	0x41f00000
 80010dc:	00000000 	.word	0x00000000

080010e0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_3) {
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	2b08      	cmp	r3, #8
 80010ee:	d174      	bne.n	80011da <HAL_GPIO_EXTI_Callback+0xfa>
        if (GPIOA->IDR & GPIO_IDR_IDR3) {
 80010f0:	4b3f      	ldr	r3, [pc, #252]	@ (80011f0 <HAL_GPIO_EXTI_Callback+0x110>)
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 0308 	and.w	r3, r3, #8
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d06e      	beq.n	80011da <HAL_GPIO_EXTI_Callback+0xfa>
        	frekans+=ekle;
 80010fc:	4b3d      	ldr	r3, [pc, #244]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0x114>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fdeb 	bl	8000cdc <__aeabi_i2f>
 8001106:	4602      	mov	r2, r0
 8001108:	4b3b      	ldr	r3, [pc, #236]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0x118>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	4610      	mov	r0, r2
 8001110:	f7ff fd30 	bl	8000b74 <__addsf3>
 8001114:	4603      	mov	r3, r0
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff84 	bl	8001024 <__aeabi_f2iz>
 800111c:	4603      	mov	r3, r0
 800111e:	4a35      	ldr	r2, [pc, #212]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0x114>)
 8001120:	6013      	str	r3, [r2, #0]

        	txData++;
 8001122:	4b36      	ldr	r3, [pc, #216]	@ (80011fc <HAL_GPIO_EXTI_Callback+0x11c>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	3301      	adds	r3, #1
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b34      	ldr	r3, [pc, #208]	@ (80011fc <HAL_GPIO_EXTI_Callback+0x11c>)
 800112c:	701a      	strb	r2, [r3, #0]

        	ARR=(TIMCLOCK/(frekans*(PSC+1)))-1;
 800112e:	4b34      	ldr	r3, [pc, #208]	@ (8001200 <HAL_GPIO_EXTI_Callback+0x120>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	4a2f      	ldr	r2, [pc, #188]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0x114>)
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	fb02 f303 	mul.w	r3, r2, r3
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f961 	bl	8000404 <__aeabi_i2d>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	a128      	add	r1, pc, #160	@ (adr r1, 80011e8 <HAL_GPIO_EXTI_Callback+0x108>)
 8001148:	e9d1 0100 	ldrd	r0, r1, [r1]
 800114c:	f7ff faee 	bl	800072c <__aeabi_ddiv>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	4b29      	ldr	r3, [pc, #164]	@ (8001204 <HAL_GPIO_EXTI_Callback+0x124>)
 800115e:	f7ff f803 	bl	8000168 <__aeabi_dsub>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	f7ff fc65 	bl	8000a38 <__aeabi_d2iz>
 800116e:	4603      	mov	r3, r0
 8001170:	4a25      	ldr	r2, [pc, #148]	@ (8001208 <HAL_GPIO_EXTI_Callback+0x128>)
 8001172:	6013      	str	r3, [r2, #0]
      	    TIM1->CCR4=ARR*0.5;
 8001174:	4b24      	ldr	r3, [pc, #144]	@ (8001208 <HAL_GPIO_EXTI_Callback+0x128>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f943 	bl	8000404 <__aeabi_i2d>
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	4b22      	ldr	r3, [pc, #136]	@ (800120c <HAL_GPIO_EXTI_Callback+0x12c>)
 8001184:	f7ff f9a8 	bl	80004d8 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4c20      	ldr	r4, [pc, #128]	@ (8001210 <HAL_GPIO_EXTI_Callback+0x130>)
 800118e:	4610      	mov	r0, r2
 8001190:	4619      	mov	r1, r3
 8001192:	f7ff fc79 	bl	8000a88 <__aeabi_d2uiz>
 8001196:	4603      	mov	r3, r0
 8001198:	6423      	str	r3, [r4, #64]	@ 0x40
      	    TIM1->ARR=ARR;
 800119a:	4b1b      	ldr	r3, [pc, #108]	@ (8001208 <HAL_GPIO_EXTI_Callback+0x128>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b1c      	ldr	r3, [pc, #112]	@ (8001210 <HAL_GPIO_EXTI_Callback+0x130>)
 80011a0:	62da      	str	r2, [r3, #44]	@ 0x2c
      	    TIM1->PSC=PSC;
 80011a2:	4b17      	ldr	r3, [pc, #92]	@ (8001200 <HAL_GPIO_EXTI_Callback+0x120>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <HAL_GPIO_EXTI_Callback+0x130>)
 80011a8:	629a      	str	r2, [r3, #40]	@ 0x28

      	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80011aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011ae:	4819      	ldr	r0, [pc, #100]	@ (8001214 <HAL_GPIO_EXTI_Callback+0x134>)
 80011b0:	f001 fb01 	bl	80027b6 <HAL_GPIO_TogglePin>





        	if(frekans>=40000){
 80011b4:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0x114>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80011bc:	4293      	cmp	r3, r2
 80011be:	dd03      	ble.n	80011c8 <HAL_GPIO_EXTI_Callback+0xe8>
        		ekle=-100;
 80011c0:	4b0d      	ldr	r3, [pc, #52]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0x118>)
 80011c2:	4a15      	ldr	r2, [pc, #84]	@ (8001218 <HAL_GPIO_EXTI_Callback+0x138>)
 80011c4:	601a      	str	r2, [r3, #0]


        }
    }

}
 80011c6:	e008      	b.n	80011da <HAL_GPIO_EXTI_Callback+0xfa>
        	else if(frekans <= 35000){
 80011c8:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0x114>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f648 02b8 	movw	r2, #35000	@ 0x88b8
 80011d0:	4293      	cmp	r3, r2
 80011d2:	dc02      	bgt.n	80011da <HAL_GPIO_EXTI_Callback+0xfa>
        		ekle=100;
 80011d4:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0x118>)
 80011d6:	4a11      	ldr	r2, [pc, #68]	@ (800121c <HAL_GPIO_EXTI_Callback+0x13c>)
 80011d8:	601a      	str	r2, [r3, #0]
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd90      	pop	{r4, r7, pc}
 80011e2:	bf00      	nop
 80011e4:	f3af 8000 	nop.w
 80011e8:	00000000 	.word	0x00000000
 80011ec:	415e8480 	.word	0x415e8480
 80011f0:	40010800 	.word	0x40010800
 80011f4:	2000000c 	.word	0x2000000c
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000304 	.word	0x20000304
 8001200:	20000008 	.word	0x20000008
 8001204:	3ff00000 	.word	0x3ff00000
 8001208:	20000004 	.word	0x20000004
 800120c:	3fe00000 	.word	0x3fe00000
 8001210:	40012c00 	.word	0x40012c00
 8001214:	40011000 	.word	0x40011000
 8001218:	c2c80000 	.word	0xc2c80000
 800121c:	42c80000 	.word	0x42c80000

08001220 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a05      	ldr	r2, [pc, #20]	@ (8001244 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d103      	bne.n	800123a <HAL_TIM_PeriodElapsedCallback+0x1a>

  	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  	  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);

    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001232:	2101      	movs	r1, #1
 8001234:	4804      	ldr	r0, [pc, #16]	@ (8001248 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001236:	f001 fabe 	bl	80027b6 <HAL_GPIO_TogglePin>

    }

}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40000400 	.word	0x40000400
 8001248:	40010c00 	.word	0x40010c00

0800124c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

	if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1){
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7f1b      	ldrb	r3, [r3, #28]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d144      	bne.n	80012e6 <HAL_TIM_IC_CaptureCallback+0x9a>

		if(is_first_captured==0){
 800125c:	4b24      	ldr	r3, [pc, #144]	@ (80012f0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d108      	bne.n	8001276 <HAL_TIM_IC_CaptureCallback+0x2a>

			IC_Val1=__HAL_TIM_GET_COMPARE(htim,TIM_CHANNEL_1);  //HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800126a:	4a22      	ldr	r2, [pc, #136]	@ (80012f4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800126c:	6013      	str	r3, [r2, #0]
			is_first_captured=1;
 800126e:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]
			is_first_captured=0;
		}
	}


}
 8001274:	e037      	b.n	80012e6 <HAL_TIM_IC_CaptureCallback+0x9a>
			IC_Val2=__HAL_TIM_GET_COMPARE(htim,TIM_CHANNEL_1); //HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800127c:	4a1e      	ldr	r2, [pc, #120]	@ (80012f8 <HAL_TIM_IC_CaptureCallback+0xac>)
 800127e:	6013      	str	r3, [r2, #0]
			if(IC_Val2 > IC_Val1){
 8001280:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b1b      	ldr	r3, [pc, #108]	@ (80012f4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	429a      	cmp	r2, r3
 800128a:	d907      	bls.n	800129c <HAL_TIM_IC_CaptureCallback+0x50>
				Difference=IC_Val2-IC_Val1;
 800128c:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <HAL_TIM_IC_CaptureCallback+0xac>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	4a19      	ldr	r2, [pc, #100]	@ (80012fc <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e007      	b.n	80012ac <HAL_TIM_IC_CaptureCallback+0x60>
				Difference=(0xffffffff - IC_Val1) + IC_Val2;
 800129c:	4b16      	ldr	r3, [pc, #88]	@ (80012f8 <HAL_TIM_IC_CaptureCallback+0xac>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b14      	ldr	r3, [pc, #80]	@ (80012f4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	3b01      	subs	r3, #1
 80012a8:	4a14      	ldr	r2, [pc, #80]	@ (80012fc <HAL_TIM_IC_CaptureCallback+0xb0>)
 80012aa:	6013      	str	r3, [r2, #0]
			refClock = TIMCLOCK/(PRESCALAR);
 80012ac:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80012ae:	4a15      	ldr	r2, [pc, #84]	@ (8001304 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80012b0:	601a      	str	r2, [r3, #0]
			freq=refClock/Difference;
 80012b2:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80012b4:	681c      	ldr	r4, [r3, #0]
 80012b6:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <HAL_TIM_IC_CaptureCallback+0xb0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fd0a 	bl	8000cd4 <__aeabi_ui2f>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4619      	mov	r1, r3
 80012c4:	4620      	mov	r0, r4
 80012c6:	f7ff fe11 	bl	8000eec <__aeabi_fdiv>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fea9 	bl	8001024 <__aeabi_f2iz>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001308 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80012d6:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim,0);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	@ 0x24
			is_first_captured=0;
 80012e0:	4b03      	ldr	r3, [pc, #12]	@ (80012f0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200002f4 	.word	0x200002f4
 80012f4:	200002e8 	.word	0x200002e8
 80012f8:	200002ec 	.word	0x200002ec
 80012fc:	200002f0 	.word	0x200002f0
 8001300:	200002f8 	.word	0x200002f8
 8001304:	49742400 	.word	0x49742400
 8001308:	200002fc 	.word	0x200002fc
 800130c:	00000000 	.word	0x00000000

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b598      	push	{r3, r4, r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001314:	f000 fdae 	bl	8001e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001318:	f000 f8c6 	bl	80014a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131c:	f000 fa80 	bl	8001820 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001320:	f000 f8fc 	bl	800151c <MX_TIM1_Init>
  MX_TIM4_Init();
 8001324:	f000 fa0c 	bl	8001740 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001328:	f000 f996 	bl	8001658 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

 // HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_Base_Start(&htim1);
 800132c:	4850      	ldr	r0, [pc, #320]	@ (8001470 <main+0x160>)
 800132e:	f001 fea1 	bl	8003074 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001332:	210c      	movs	r1, #12
 8001334:	484e      	ldr	r0, [pc, #312]	@ (8001470 <main+0x160>)
 8001336:	f001 ff3f 	bl	80031b8 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim2);
 800133a:	484e      	ldr	r0, [pc, #312]	@ (8001474 <main+0x164>)
 800133c:	f001 fe9a 	bl	8003074 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001340:	210c      	movs	r1, #12
 8001342:	484c      	ldr	r0, [pc, #304]	@ (8001474 <main+0x164>)
 8001344:	f001 ff38 	bl	80031b8 <HAL_TIM_PWM_Start>
  TIM2->CCR4=200*0.5;
 8001348:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800134c:	2264      	movs	r2, #100	@ 0x64
 800134e:	641a      	str	r2, [r3, #64]	@ 0x40


  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001350:	2100      	movs	r1, #0
 8001352:	4849      	ldr	r0, [pc, #292]	@ (8001478 <main+0x168>)
 8001354:	f002 f82a 	bl	80033ac <HAL_TIM_IC_Start_IT>

  ARR=(TIMCLOCK/(frekans*(PSC+1)))-1;
 8001358:	4b48      	ldr	r3, [pc, #288]	@ (800147c <main+0x16c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	4a48      	ldr	r2, [pc, #288]	@ (8001480 <main+0x170>)
 8001360:	6812      	ldr	r2, [r2, #0]
 8001362:	fb02 f303 	mul.w	r3, r2, r3
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f84c 	bl	8000404 <__aeabi_i2d>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	a13b      	add	r1, pc, #236	@ (adr r1, 8001460 <main+0x150>)
 8001372:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001376:	f7ff f9d9 	bl	800072c <__aeabi_ddiv>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	4b3f      	ldr	r3, [pc, #252]	@ (8001484 <main+0x174>)
 8001388:	f7fe feee 	bl	8000168 <__aeabi_dsub>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fb50 	bl	8000a38 <__aeabi_d2iz>
 8001398:	4603      	mov	r3, r0
 800139a:	4a3b      	ldr	r2, [pc, #236]	@ (8001488 <main+0x178>)
 800139c:	6013      	str	r3, [r2, #0]
  TIM1->CCR4=ARR*0.6;
 800139e:	4b3a      	ldr	r3, [pc, #232]	@ (8001488 <main+0x178>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f82e 	bl	8000404 <__aeabi_i2d>
 80013a8:	a32f      	add	r3, pc, #188	@ (adr r3, 8001468 <main+0x158>)
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	f7ff f893 	bl	80004d8 <__aeabi_dmul>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4c35      	ldr	r4, [pc, #212]	@ (800148c <main+0x17c>)
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	f7ff fb64 	bl	8000a88 <__aeabi_d2uiz>
 80013c0:	4603      	mov	r3, r0
 80013c2:	6423      	str	r3, [r4, #64]	@ 0x40
  TIM1->ARR=ARR;
 80013c4:	4b30      	ldr	r3, [pc, #192]	@ (8001488 <main+0x178>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b30      	ldr	r3, [pc, #192]	@ (800148c <main+0x17c>)
 80013ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM1->PSC=PSC;
 80013cc:	4b2b      	ldr	r3, [pc, #172]	@ (800147c <main+0x16c>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b2e      	ldr	r3, [pc, #184]	@ (800148c <main+0x17c>)
 80013d2:	629a      	str	r2, [r3, #40]	@ 0x28


  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013da:	482d      	ldr	r0, [pc, #180]	@ (8001490 <main+0x180>)
 80013dc:	f001 f9d3 	bl	8002786 <HAL_GPIO_WritePin>
			//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
			HAL_Delay(20);
  	}
*/

	  gpio9=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 80013e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013e4:	482b      	ldr	r0, [pc, #172]	@ (8001494 <main+0x184>)
 80013e6:	f001 f9b7 	bl	8002758 <HAL_GPIO_ReadPin>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001498 <main+0x188>)
 80013f0:	601a      	str	r2, [r3, #0]

	  if(gpio9){
 80013f2:	4b29      	ldr	r3, [pc, #164]	@ (8001498 <main+0x188>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d011      	beq.n	800141e <main+0x10e>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001400:	4823      	ldr	r0, [pc, #140]	@ (8001490 <main+0x180>)
 8001402:	f001 f9c0 	bl	8002786 <HAL_GPIO_WritePin>
		  F_sayisi++;
 8001406:	4b25      	ldr	r3, [pc, #148]	@ (800149c <main+0x18c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fbb0 	bl	8000b74 <__addsf3>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	4b20      	ldr	r3, [pc, #128]	@ (800149c <main+0x18c>)
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	e010      	b.n	8001440 <main+0x130>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 800141e:	2201      	movs	r2, #1
 8001420:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001424:	481a      	ldr	r0, [pc, #104]	@ (8001490 <main+0x180>)
 8001426:	f001 f9ae 	bl	8002786 <HAL_GPIO_WritePin>
		  toplam++;
 800142a:	4b1d      	ldr	r3, [pc, #116]	@ (80014a0 <main+0x190>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fb9e 	bl	8000b74 <__addsf3>
 8001438:	4603      	mov	r3, r0
 800143a:	461a      	mov	r2, r3
 800143c:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <main+0x190>)
 800143e:	601a      	str	r2, [r3, #0]
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
	  }

	  */
	  oran=F_sayisi/toplam;
 8001440:	4b16      	ldr	r3, [pc, #88]	@ (800149c <main+0x18c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a16      	ldr	r2, [pc, #88]	@ (80014a0 <main+0x190>)
 8001446:	6812      	ldr	r2, [r2, #0]
 8001448:	4611      	mov	r1, r2
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fd4e 	bl	8000eec <__aeabi_fdiv>
 8001450:	4603      	mov	r3, r0
 8001452:	461a      	mov	r2, r3
 8001454:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <main+0x194>)
 8001456:	601a      	str	r2, [r3, #0]
	  gpio9=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8001458:	e7c2      	b.n	80013e0 <main+0xd0>
 800145a:	bf00      	nop
 800145c:	f3af 8000 	nop.w
 8001460:	00000000 	.word	0x00000000
 8001464:	415e8480 	.word	0x415e8480
 8001468:	33333333 	.word	0x33333333
 800146c:	3fe33333 	.word	0x3fe33333
 8001470:	20000204 	.word	0x20000204
 8001474:	2000024c 	.word	0x2000024c
 8001478:	20000294 	.word	0x20000294
 800147c:	20000008 	.word	0x20000008
 8001480:	2000000c 	.word	0x2000000c
 8001484:	3ff00000 	.word	0x3ff00000
 8001488:	20000004 	.word	0x20000004
 800148c:	40012c00 	.word	0x40012c00
 8001490:	40011000 	.word	0x40011000
 8001494:	40010800 	.word	0x40010800
 8001498:	20000300 	.word	0x20000300
 800149c:	200002dc 	.word	0x200002dc
 80014a0:	200002e0 	.word	0x200002e0
 80014a4:	200002e4 	.word	0x200002e4

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b090      	sub	sp, #64	@ 0x40
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0318 	add.w	r3, r7, #24
 80014b2:	2228      	movs	r2, #40	@ 0x28
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f003 ffc5 	bl	8005446 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014ca:	2301      	movs	r3, #1
 80014cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d8:	f107 0318 	add.w	r3, r7, #24
 80014dc:	4618      	mov	r0, r3
 80014de:	f001 f99b 	bl	8002818 <HAL_RCC_OscConfig>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <SystemClock_Config+0x44>
  {
    Error_Handler();
 80014e8:	f000 fa16 	bl	8001918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ec:	230f      	movs	r3, #15
 80014ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80014f0:	2301      	movs	r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f001 fc09 	bl	8002d1c <HAL_RCC_ClockConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001510:	f000 fa02 	bl	8001918 <Error_Handler>
  }
}
 8001514:	bf00      	nop
 8001516:	3740      	adds	r7, #64	@ 0x40
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b096      	sub	sp, #88	@ 0x58
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001522:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800153a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	611a      	str	r2, [r3, #16]
 800154a:	615a      	str	r2, [r3, #20]
 800154c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2220      	movs	r2, #32
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f003 ff76 	bl	8005446 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800155a:	4b3d      	ldr	r3, [pc, #244]	@ (8001650 <MX_TIM1_Init+0x134>)
 800155c:	4a3d      	ldr	r2, [pc, #244]	@ (8001654 <MX_TIM1_Init+0x138>)
 800155e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 8001560:	4b3b      	ldr	r3, [pc, #236]	@ (8001650 <MX_TIM1_Init+0x134>)
 8001562:	2201      	movs	r2, #1
 8001564:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001566:	4b3a      	ldr	r3, [pc, #232]	@ (8001650 <MX_TIM1_Init+0x134>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000-1;
 800156c:	4b38      	ldr	r3, [pc, #224]	@ (8001650 <MX_TIM1_Init+0x134>)
 800156e:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001572:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001574:	4b36      	ldr	r3, [pc, #216]	@ (8001650 <MX_TIM1_Init+0x134>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800157a:	4b35      	ldr	r3, [pc, #212]	@ (8001650 <MX_TIM1_Init+0x134>)
 800157c:	2200      	movs	r2, #0
 800157e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001580:	4b33      	ldr	r3, [pc, #204]	@ (8001650 <MX_TIM1_Init+0x134>)
 8001582:	2280      	movs	r2, #128	@ 0x80
 8001584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001586:	4832      	ldr	r0, [pc, #200]	@ (8001650 <MX_TIM1_Init+0x134>)
 8001588:	f001 fd24 	bl	8002fd4 <HAL_TIM_Base_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001592:	f000 f9c1 	bl	8001918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001596:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800159a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800159c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015a0:	4619      	mov	r1, r3
 80015a2:	482b      	ldr	r0, [pc, #172]	@ (8001650 <MX_TIM1_Init+0x134>)
 80015a4:	f002 fa5c 	bl	8003a60 <HAL_TIM_ConfigClockSource>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80015ae:	f000 f9b3 	bl	8001918 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015b2:	4827      	ldr	r0, [pc, #156]	@ (8001650 <MX_TIM1_Init+0x134>)
 80015b4:	f001 fda8 	bl	8003108 <HAL_TIM_PWM_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80015be:	f000 f9ab 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c2:	2300      	movs	r3, #0
 80015c4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015ce:	4619      	mov	r1, r3
 80015d0:	481f      	ldr	r0, [pc, #124]	@ (8001650 <MX_TIM1_Init+0x134>)
 80015d2:	f002 fee5 	bl	80043a0 <HAL_TIMEx_MasterConfigSynchronization>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015dc:	f000 f99c 	bl	8001918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e0:	2360      	movs	r3, #96	@ 0x60
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015fc:	220c      	movs	r2, #12
 80015fe:	4619      	mov	r1, r3
 8001600:	4813      	ldr	r0, [pc, #76]	@ (8001650 <MX_TIM1_Init+0x134>)
 8001602:	f002 f96b 	bl	80038dc <HAL_TIM_PWM_ConfigChannel>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 800160c:	f000 f984 	bl	8001918 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001624:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001628:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	4619      	mov	r1, r3
 8001632:	4807      	ldr	r0, [pc, #28]	@ (8001650 <MX_TIM1_Init+0x134>)
 8001634:	f002 ff12 	bl	800445c <HAL_TIMEx_ConfigBreakDeadTime>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800163e:	f000 f96b 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001642:	4803      	ldr	r0, [pc, #12]	@ (8001650 <MX_TIM1_Init+0x134>)
 8001644:	f000 fa44 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 8001648:	bf00      	nop
 800164a:	3758      	adds	r7, #88	@ 0x58
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000204 	.word	0x20000204
 8001654:	40012c00 	.word	0x40012c00

08001658 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08e      	sub	sp, #56	@ 0x38
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166c:	f107 0320 	add.w	r3, r7, #32
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
 8001684:	615a      	str	r2, [r3, #20]
 8001686:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001688:	4b2c      	ldr	r3, [pc, #176]	@ (800173c <MX_TIM2_Init+0xe4>)
 800168a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800168e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40-1;
 8001690:	4b2a      	ldr	r3, [pc, #168]	@ (800173c <MX_TIM2_Init+0xe4>)
 8001692:	2227      	movs	r2, #39	@ 0x27
 8001694:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001696:	4b29      	ldr	r3, [pc, #164]	@ (800173c <MX_TIM2_Init+0xe4>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 800169c:	4b27      	ldr	r3, [pc, #156]	@ (800173c <MX_TIM2_Init+0xe4>)
 800169e:	22c7      	movs	r2, #199	@ 0xc7
 80016a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a2:	4b26      	ldr	r3, [pc, #152]	@ (800173c <MX_TIM2_Init+0xe4>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016a8:	4b24      	ldr	r3, [pc, #144]	@ (800173c <MX_TIM2_Init+0xe4>)
 80016aa:	2280      	movs	r2, #128	@ 0x80
 80016ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ae:	4823      	ldr	r0, [pc, #140]	@ (800173c <MX_TIM2_Init+0xe4>)
 80016b0:	f001 fc90 	bl	8002fd4 <HAL_TIM_Base_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80016ba:	f000 f92d 	bl	8001918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016c8:	4619      	mov	r1, r3
 80016ca:	481c      	ldr	r0, [pc, #112]	@ (800173c <MX_TIM2_Init+0xe4>)
 80016cc:	f002 f9c8 	bl	8003a60 <HAL_TIM_ConfigClockSource>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80016d6:	f000 f91f 	bl	8001918 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016da:	4818      	ldr	r0, [pc, #96]	@ (800173c <MX_TIM2_Init+0xe4>)
 80016dc:	f001 fd14 	bl	8003108 <HAL_TIM_PWM_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80016e6:	f000 f917 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016f2:	f107 0320 	add.w	r3, r7, #32
 80016f6:	4619      	mov	r1, r3
 80016f8:	4810      	ldr	r0, [pc, #64]	@ (800173c <MX_TIM2_Init+0xe4>)
 80016fa:	f002 fe51 	bl	80043a0 <HAL_TIMEx_MasterConfigSynchronization>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001704:	f000 f908 	bl	8001918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001708:	2360      	movs	r3, #96	@ 0x60
 800170a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	220c      	movs	r2, #12
 800171c:	4619      	mov	r1, r3
 800171e:	4807      	ldr	r0, [pc, #28]	@ (800173c <MX_TIM2_Init+0xe4>)
 8001720:	f002 f8dc 	bl	80038dc <HAL_TIM_PWM_ConfigChannel>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800172a:	f000 f8f5 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800172e:	4803      	ldr	r0, [pc, #12]	@ (800173c <MX_TIM2_Init+0xe4>)
 8001730:	f000 f9ce 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 8001734:	bf00      	nop
 8001736:	3738      	adds	r7, #56	@ 0x38
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	2000024c 	.word	0x2000024c

08001740 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	@ 0x28
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001746:	f107 0318 	add.w	r3, r7, #24
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800175e:	463b      	mov	r3, r7
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800176a:	4b2b      	ldr	r3, [pc, #172]	@ (8001818 <MX_TIM4_Init+0xd8>)
 800176c:	4a2b      	ldr	r2, [pc, #172]	@ (800181c <MX_TIM4_Init+0xdc>)
 800176e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8-1;
 8001770:	4b29      	ldr	r3, [pc, #164]	@ (8001818 <MX_TIM4_Init+0xd8>)
 8001772:	2207      	movs	r2, #7
 8001774:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001776:	4b28      	ldr	r3, [pc, #160]	@ (8001818 <MX_TIM4_Init+0xd8>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800177c:	4b26      	ldr	r3, [pc, #152]	@ (8001818 <MX_TIM4_Init+0xd8>)
 800177e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001782:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001784:	4b24      	ldr	r3, [pc, #144]	@ (8001818 <MX_TIM4_Init+0xd8>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178a:	4b23      	ldr	r3, [pc, #140]	@ (8001818 <MX_TIM4_Init+0xd8>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001790:	4821      	ldr	r0, [pc, #132]	@ (8001818 <MX_TIM4_Init+0xd8>)
 8001792:	f001 fc1f 	bl	8002fd4 <HAL_TIM_Base_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 800179c:	f000 f8bc 	bl	8001918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017a4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017a6:	f107 0318 	add.w	r3, r7, #24
 80017aa:	4619      	mov	r1, r3
 80017ac:	481a      	ldr	r0, [pc, #104]	@ (8001818 <MX_TIM4_Init+0xd8>)
 80017ae:	f002 f957 	bl	8003a60 <HAL_TIM_ConfigClockSource>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80017b8:	f000 f8ae 	bl	8001918 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80017bc:	4816      	ldr	r0, [pc, #88]	@ (8001818 <MX_TIM4_Init+0xd8>)
 80017be:	f001 fd9d 	bl	80032fc <HAL_TIM_IC_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80017c8:	f000 f8a6 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017cc:	2300      	movs	r3, #0
 80017ce:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	4619      	mov	r1, r3
 80017da:	480f      	ldr	r0, [pc, #60]	@ (8001818 <MX_TIM4_Init+0xd8>)
 80017dc:	f002 fde0 	bl	80043a0 <HAL_TIMEx_MasterConfigSynchronization>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80017e6:	f000 f897 	bl	8001918 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017ea:	2300      	movs	r3, #0
 80017ec:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017ee:	2301      	movs	r3, #1
 80017f0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017fa:	463b      	mov	r3, r7
 80017fc:	2200      	movs	r2, #0
 80017fe:	4619      	mov	r1, r3
 8001800:	4805      	ldr	r0, [pc, #20]	@ (8001818 <MX_TIM4_Init+0xd8>)
 8001802:	f001 ffcf 	bl	80037a4 <HAL_TIM_IC_ConfigChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 800180c:	f000 f884 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	3728      	adds	r7, #40	@ 0x28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000294 	.word	0x20000294
 800181c:	40000800 	.word	0x40000800

08001820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001826:	f107 0310 	add.w	r3, r7, #16
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001834:	4b34      	ldr	r3, [pc, #208]	@ (8001908 <MX_GPIO_Init+0xe8>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	4a33      	ldr	r2, [pc, #204]	@ (8001908 <MX_GPIO_Init+0xe8>)
 800183a:	f043 0310 	orr.w	r3, r3, #16
 800183e:	6193      	str	r3, [r2, #24]
 8001840:	4b31      	ldr	r3, [pc, #196]	@ (8001908 <MX_GPIO_Init+0xe8>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800184c:	4b2e      	ldr	r3, [pc, #184]	@ (8001908 <MX_GPIO_Init+0xe8>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4a2d      	ldr	r2, [pc, #180]	@ (8001908 <MX_GPIO_Init+0xe8>)
 8001852:	f043 0320 	orr.w	r3, r3, #32
 8001856:	6193      	str	r3, [r2, #24]
 8001858:	4b2b      	ldr	r3, [pc, #172]	@ (8001908 <MX_GPIO_Init+0xe8>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0320 	and.w	r3, r3, #32
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001864:	4b28      	ldr	r3, [pc, #160]	@ (8001908 <MX_GPIO_Init+0xe8>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	4a27      	ldr	r2, [pc, #156]	@ (8001908 <MX_GPIO_Init+0xe8>)
 800186a:	f043 0304 	orr.w	r3, r3, #4
 800186e:	6193      	str	r3, [r2, #24]
 8001870:	4b25      	ldr	r3, [pc, #148]	@ (8001908 <MX_GPIO_Init+0xe8>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187c:	4b22      	ldr	r3, [pc, #136]	@ (8001908 <MX_GPIO_Init+0xe8>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a21      	ldr	r2, [pc, #132]	@ (8001908 <MX_GPIO_Init+0xe8>)
 8001882:	f043 0308 	orr.w	r3, r3, #8
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b1f      	ldr	r3, [pc, #124]	@ (8001908 <MX_GPIO_Init+0xe8>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800189a:	481c      	ldr	r0, [pc, #112]	@ (800190c <MX_GPIO_Init+0xec>)
 800189c:	f000 ff73 	bl	8002786 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a6:	2301      	movs	r3, #1
 80018a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2302      	movs	r3, #2
 80018b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b2:	f107 0310 	add.w	r3, r7, #16
 80018b6:	4619      	mov	r1, r3
 80018b8:	4814      	ldr	r0, [pc, #80]	@ (800190c <MX_GPIO_Init+0xec>)
 80018ba:	f000 fdc9 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018be:	2308      	movs	r3, #8
 80018c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018c2:	4b13      	ldr	r3, [pc, #76]	@ (8001910 <MX_GPIO_Init+0xf0>)
 80018c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 0310 	add.w	r3, r7, #16
 80018ce:	4619      	mov	r1, r3
 80018d0:	4810      	ldr	r0, [pc, #64]	@ (8001914 <MX_GPIO_Init+0xf4>)
 80018d2:	f000 fdbd 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e4:	f107 0310 	add.w	r3, r7, #16
 80018e8:	4619      	mov	r1, r3
 80018ea:	480a      	ldr	r0, [pc, #40]	@ (8001914 <MX_GPIO_Init+0xf4>)
 80018ec:	f000 fdb0 	bl	8002450 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2100      	movs	r1, #0
 80018f4:	2009      	movs	r0, #9
 80018f6:	f000 fbf6 	bl	80020e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80018fa:	2009      	movs	r0, #9
 80018fc:	f000 fc0f 	bl	800211e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001900:	bf00      	nop
 8001902:	3720      	adds	r7, #32
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40021000 	.word	0x40021000
 800190c:	40011000 	.word	0x40011000
 8001910:	10110000 	.word	0x10110000
 8001914:	40010800 	.word	0x40010800

08001918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800191c:	b672      	cpsid	i
}
 800191e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <Error_Handler+0x8>

08001924 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800192a:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <HAL_MspInit+0x7c>)
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	4a1c      	ldr	r2, [pc, #112]	@ (80019a0 <HAL_MspInit+0x7c>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6193      	str	r3, [r2, #24]
 8001936:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <HAL_MspInit+0x7c>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	4b17      	ldr	r3, [pc, #92]	@ (80019a0 <HAL_MspInit+0x7c>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	4a16      	ldr	r2, [pc, #88]	@ (80019a0 <HAL_MspInit+0x7c>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800194c:	61d3      	str	r3, [r2, #28]
 800194e:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <HAL_MspInit+0x7c>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	2004      	movs	r0, #4
 8001960:	f000 fbc1 	bl	80020e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001964:	2004      	movs	r0, #4
 8001966:	f000 fbda 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	2005      	movs	r0, #5
 8001970:	f000 fbb9 	bl	80020e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001974:	2005      	movs	r0, #5
 8001976:	f000 fbd2 	bl	800211e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800197a:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <HAL_MspInit+0x80>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	4a04      	ldr	r2, [pc, #16]	@ (80019a4 <HAL_MspInit+0x80>)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010000 	.word	0x40010000

080019a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08a      	sub	sp, #40	@ 0x28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 0318 	add.w	r3, r7, #24
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x118>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d12c      	bne.n	8001a22 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019c8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x11c>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	4a3d      	ldr	r2, [pc, #244]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x11c>)
 80019ce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019d2:	6193      	str	r3, [r2, #24]
 80019d4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x11c>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2100      	movs	r1, #0
 80019e4:	2018      	movs	r0, #24
 80019e6:	f000 fb7e 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80019ea:	2018      	movs	r0, #24
 80019ec:	f000 fb97 	bl	800211e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2100      	movs	r1, #0
 80019f4:	2019      	movs	r0, #25
 80019f6:	f000 fb76 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80019fa:	2019      	movs	r0, #25
 80019fc:	f000 fb8f 	bl	800211e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2100      	movs	r1, #0
 8001a04:	201a      	movs	r0, #26
 8001a06:	f000 fb6e 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001a0a:	201a      	movs	r0, #26
 8001a0c:	f000 fb87 	bl	800211e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2100      	movs	r1, #0
 8001a14:	201b      	movs	r0, #27
 8001a16:	f000 fb66 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001a1a:	201b      	movs	r0, #27
 8001a1c:	f000 fb7f 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a20:	e04a      	b.n	8001ab8 <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM2)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a2a:	d114      	bne.n	8001a56 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x11c>)
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	4a24      	ldr	r2, [pc, #144]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x11c>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	61d3      	str	r3, [r2, #28]
 8001a38:	4b22      	ldr	r3, [pc, #136]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x11c>)
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2100      	movs	r1, #0
 8001a48:	201c      	movs	r0, #28
 8001a4a:	f000 fb4c 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a4e:	201c      	movs	r0, #28
 8001a50:	f000 fb65 	bl	800211e <HAL_NVIC_EnableIRQ>
}
 8001a54:	e030      	b.n	8001ab8 <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM4)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x120>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d12b      	bne.n	8001ab8 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a60:	4b18      	ldr	r3, [pc, #96]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x11c>)
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	4a17      	ldr	r2, [pc, #92]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x11c>)
 8001a66:	f043 0304 	orr.w	r3, r3, #4
 8001a6a:	61d3      	str	r3, [r2, #28]
 8001a6c:	4b15      	ldr	r3, [pc, #84]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x11c>)
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a78:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x11c>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4a11      	ldr	r2, [pc, #68]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x11c>)
 8001a7e:	f043 0308 	orr.w	r3, r3, #8
 8001a82:	6193      	str	r3, [r2, #24]
 8001a84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x11c>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a90:	2340      	movs	r3, #64	@ 0x40
 8001a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9c:	f107 0318 	add.w	r3, r7, #24
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	480a      	ldr	r0, [pc, #40]	@ (8001acc <HAL_TIM_Base_MspInit+0x124>)
 8001aa4:	f000 fcd4 	bl	8002450 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2100      	movs	r1, #0
 8001aac:	201e      	movs	r0, #30
 8001aae:	f000 fb1a 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ab2:	201e      	movs	r0, #30
 8001ab4:	f000 fb33 	bl	800211e <HAL_NVIC_EnableIRQ>
}
 8001ab8:	bf00      	nop
 8001aba:	3728      	adds	r7, #40	@ 0x28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40012c00 	.word	0x40012c00
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40000800 	.word	0x40000800
 8001acc:	40010c00 	.word	0x40010c00

08001ad0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	@ 0x28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a28      	ldr	r2, [pc, #160]	@ (8001b8c <HAL_TIM_MspPostInit+0xbc>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d119      	bne.n	8001b24 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af0:	4b27      	ldr	r3, [pc, #156]	@ (8001b90 <HAL_TIM_MspPostInit+0xc0>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a26      	ldr	r2, [pc, #152]	@ (8001b90 <HAL_TIM_MspPostInit+0xc0>)
 8001af6:	f043 0304 	orr.w	r3, r3, #4
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <HAL_TIM_MspPostInit+0xc0>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b08:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2302      	movs	r3, #2
 8001b14:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	481d      	ldr	r0, [pc, #116]	@ (8001b94 <HAL_TIM_MspPostInit+0xc4>)
 8001b1e:	f000 fc97 	bl	8002450 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b22:	e02f      	b.n	8001b84 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b2c:	d12a      	bne.n	8001b84 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2e:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <HAL_TIM_MspPostInit+0xc0>)
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	4a17      	ldr	r2, [pc, #92]	@ (8001b90 <HAL_TIM_MspPostInit+0xc0>)
 8001b34:	f043 0308 	orr.w	r3, r3, #8
 8001b38:	6193      	str	r3, [r2, #24]
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <HAL_TIM_MspPostInit+0xc0>)
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b46:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	2302      	movs	r3, #2
 8001b52:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4619      	mov	r1, r3
 8001b5a:	480f      	ldr	r0, [pc, #60]	@ (8001b98 <HAL_TIM_MspPostInit+0xc8>)
 8001b5c:	f000 fc78 	bl	8002450 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001b60:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <HAL_TIM_MspPostInit+0xcc>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b70:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b7e:	4a07      	ldr	r2, [pc, #28]	@ (8001b9c <HAL_TIM_MspPostInit+0xcc>)
 8001b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b82:	6053      	str	r3, [r2, #4]
}
 8001b84:	bf00      	nop
 8001b86:	3728      	adds	r7, #40	@ 0x28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40012c00 	.word	0x40012c00
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40010800 	.word	0x40010800
 8001b98:	40010c00 	.word	0x40010c00
 8001b9c:	40010000 	.word	0x40010000

08001ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <NMI_Handler+0x4>

08001ba8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <HardFault_Handler+0x4>

08001bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <MemManage_Handler+0x4>

08001bb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <BusFault_Handler+0x4>

08001bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <UsageFault_Handler+0x4>

08001bc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf0:	f000 f986 	bl	8001f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001bfc:	f000 faaa 	bl	8002154 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001c14:	2008      	movs	r0, #8
 8001c16:	f000 fde7 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c24:	4802      	ldr	r0, [pc, #8]	@ (8001c30 <TIM1_BRK_IRQHandler+0x10>)
 8001c26:	f001 fccd 	bl	80035c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000204 	.word	0x20000204

08001c34 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c38:	4802      	ldr	r0, [pc, #8]	@ (8001c44 <TIM1_UP_IRQHandler+0x10>)
 8001c3a:	f001 fcc3 	bl	80035c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000204 	.word	0x20000204

08001c48 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c4c:	4802      	ldr	r0, [pc, #8]	@ (8001c58 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001c4e:	f001 fcb9 	bl	80035c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000204 	.word	0x20000204

08001c5c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c60:	4802      	ldr	r0, [pc, #8]	@ (8001c6c <TIM1_CC_IRQHandler+0x10>)
 8001c62:	f001 fcaf 	bl	80035c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000204 	.word	0x20000204

08001c70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c74:	4802      	ldr	r0, [pc, #8]	@ (8001c80 <TIM2_IRQHandler+0x10>)
 8001c76:	f001 fca5 	bl	80035c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	2000024c 	.word	0x2000024c

08001c84 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c88:	4802      	ldr	r0, [pc, #8]	@ (8001c94 <TIM4_IRQHandler+0x10>)
 8001c8a:	f001 fc9b 	bl	80035c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000294 	.word	0x20000294

08001c98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return 1;
 8001c9c:	2301      	movs	r3, #1
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr

08001ca6 <_kill>:

int _kill(int pid, int sig)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cb0:	f003 fc1c 	bl	80054ec <__errno>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2216      	movs	r2, #22
 8001cb8:	601a      	str	r2, [r3, #0]
  return -1;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <_exit>:

void _exit (int status)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cce:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ffe7 	bl	8001ca6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <_exit+0x12>

08001cdc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	e00a      	b.n	8001d04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cee:	f3af 8000 	nop.w
 8001cf2:	4601      	mov	r1, r0
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	60ba      	str	r2, [r7, #8]
 8001cfa:	b2ca      	uxtb	r2, r1
 8001cfc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	3301      	adds	r3, #1
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	dbf0      	blt.n	8001cee <_read+0x12>
  }

  return len;
 8001d0c:	687b      	ldr	r3, [r7, #4]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	e009      	b.n	8001d3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	60ba      	str	r2, [r7, #8]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	dbf1      	blt.n	8001d28 <_write+0x12>
  }
  return len;
 8001d44:	687b      	ldr	r3, [r7, #4]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <_close>:

int _close(int file)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d74:	605a      	str	r2, [r3, #4]
  return 0;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr

08001d82 <_isatty>:

int _isatty(int file)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d8a:	2301      	movs	r3, #1
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr

08001d96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b085      	sub	sp, #20
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
	...

08001db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db8:	4a14      	ldr	r2, [pc, #80]	@ (8001e0c <_sbrk+0x5c>)
 8001dba:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <_sbrk+0x60>)
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc4:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d102      	bne.n	8001dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <_sbrk+0x64>)
 8001dce:	4a12      	ldr	r2, [pc, #72]	@ (8001e18 <_sbrk+0x68>)
 8001dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dd2:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <_sbrk+0x64>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d207      	bcs.n	8001df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001de0:	f003 fb84 	bl	80054ec <__errno>
 8001de4:	4603      	mov	r3, r0
 8001de6:	220c      	movs	r2, #12
 8001de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dee:	e009      	b.n	8001e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001df0:	4b08      	ldr	r3, [pc, #32]	@ (8001e14 <_sbrk+0x64>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001df6:	4b07      	ldr	r3, [pc, #28]	@ (8001e14 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4a05      	ldr	r2, [pc, #20]	@ (8001e14 <_sbrk+0x64>)
 8001e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e02:	68fb      	ldr	r3, [r7, #12]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20005000 	.word	0x20005000
 8001e10:	00000400 	.word	0x00000400
 8001e14:	20000308 	.word	0x20000308
 8001e18:	20000480 	.word	0x20000480

08001e1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e28:	f7ff fff8 	bl	8001e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e2c:	480b      	ldr	r0, [pc, #44]	@ (8001e5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e2e:	490c      	ldr	r1, [pc, #48]	@ (8001e60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e30:	4a0c      	ldr	r2, [pc, #48]	@ (8001e64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e34:	e002      	b.n	8001e3c <LoopCopyDataInit>

08001e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3a:	3304      	adds	r3, #4

08001e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e40:	d3f9      	bcc.n	8001e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e42:	4a09      	ldr	r2, [pc, #36]	@ (8001e68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e44:	4c09      	ldr	r4, [pc, #36]	@ (8001e6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e48:	e001      	b.n	8001e4e <LoopFillZerobss>

08001e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e4c:	3204      	adds	r2, #4

08001e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e50:	d3fb      	bcc.n	8001e4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e52:	f003 fb51 	bl	80054f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e56:	f7ff fa5b 	bl	8001310 <main>
  bx lr
 8001e5a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e60:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001e64:	08009058 	.word	0x08009058
  ldr r2, =_sbss
 8001e68:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001e6c:	2000047c 	.word	0x2000047c

08001e70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e70:	e7fe      	b.n	8001e70 <ADC1_2_IRQHandler>
	...

08001e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e78:	4b08      	ldr	r3, [pc, #32]	@ (8001e9c <HAL_Init+0x28>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a07      	ldr	r2, [pc, #28]	@ (8001e9c <HAL_Init+0x28>)
 8001e7e:	f043 0310 	orr.w	r3, r3, #16
 8001e82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e84:	2003      	movs	r0, #3
 8001e86:	f000 f923 	bl	80020d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e8a:	200f      	movs	r0, #15
 8001e8c:	f000 f808 	bl	8001ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e90:	f7ff fd48 	bl	8001924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40022000 	.word	0x40022000

08001ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea8:	4b12      	ldr	r3, [pc, #72]	@ (8001ef4 <HAL_InitTick+0x54>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <HAL_InitTick+0x58>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f93b 	bl	800213a <HAL_SYSTICK_Config>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00e      	b.n	8001eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b0f      	cmp	r3, #15
 8001ed2:	d80a      	bhi.n	8001eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001edc:	f000 f903 	bl	80020e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee0:	4a06      	ldr	r2, [pc, #24]	@ (8001efc <HAL_InitTick+0x5c>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e000      	b.n	8001eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000010 	.word	0x20000010
 8001ef8:	20000018 	.word	0x20000018
 8001efc:	20000014 	.word	0x20000014

08001f00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f04:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <HAL_IncTick+0x1c>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <HAL_IncTick+0x20>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a03      	ldr	r2, [pc, #12]	@ (8001f20 <HAL_IncTick+0x20>)
 8001f12:	6013      	str	r3, [r2, #0]
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	20000018 	.word	0x20000018
 8001f20:	2000030c 	.word	0x2000030c

08001f24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b02      	ldr	r3, [pc, #8]	@ (8001f34 <HAL_GetTick+0x10>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	2000030c 	.word	0x2000030c

08001f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f48:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f54:	4013      	ands	r3, r2
 8001f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6a:	4a04      	ldr	r2, [pc, #16]	@ (8001f7c <__NVIC_SetPriorityGrouping+0x44>)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	60d3      	str	r3, [r2, #12]
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f84:	4b04      	ldr	r3, [pc, #16]	@ (8001f98 <__NVIC_GetPriorityGrouping+0x18>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	0a1b      	lsrs	r3, r3, #8
 8001f8a:	f003 0307 	and.w	r3, r3, #7
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	db0b      	blt.n	8001fc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	f003 021f 	and.w	r2, r3, #31
 8001fb4:	4906      	ldr	r1, [pc, #24]	@ (8001fd0 <__NVIC_EnableIRQ+0x34>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	095b      	lsrs	r3, r3, #5
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	e000e100 	.word	0xe000e100

08001fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	db0a      	blt.n	8001ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	490c      	ldr	r1, [pc, #48]	@ (8002020 <__NVIC_SetPriority+0x4c>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	0112      	lsls	r2, r2, #4
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ffc:	e00a      	b.n	8002014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4908      	ldr	r1, [pc, #32]	@ (8002024 <__NVIC_SetPriority+0x50>)
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	3b04      	subs	r3, #4
 800200c:	0112      	lsls	r2, r2, #4
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	440b      	add	r3, r1
 8002012:	761a      	strb	r2, [r3, #24]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000e100 	.word	0xe000e100
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	@ 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f1c3 0307 	rsb	r3, r3, #7
 8002042:	2b04      	cmp	r3, #4
 8002044:	bf28      	it	cs
 8002046:	2304      	movcs	r3, #4
 8002048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3304      	adds	r3, #4
 800204e:	2b06      	cmp	r3, #6
 8002050:	d902      	bls.n	8002058 <NVIC_EncodePriority+0x30>
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3b03      	subs	r3, #3
 8002056:	e000      	b.n	800205a <NVIC_EncodePriority+0x32>
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	401a      	ands	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002070:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43d9      	mvns	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	4313      	orrs	r3, r2
         );
}
 8002082:	4618      	mov	r0, r3
 8002084:	3724      	adds	r7, #36	@ 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800209c:	d301      	bcc.n	80020a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209e:	2301      	movs	r3, #1
 80020a0:	e00f      	b.n	80020c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a2:	4a0a      	ldr	r2, [pc, #40]	@ (80020cc <SysTick_Config+0x40>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020aa:	210f      	movs	r1, #15
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020b0:	f7ff ff90 	bl	8001fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b4:	4b05      	ldr	r3, [pc, #20]	@ (80020cc <SysTick_Config+0x40>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ba:	4b04      	ldr	r3, [pc, #16]	@ (80020cc <SysTick_Config+0x40>)
 80020bc:	2207      	movs	r2, #7
 80020be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	e000e010 	.word	0xe000e010

080020d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ff2d 	bl	8001f38 <__NVIC_SetPriorityGrouping>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f8:	f7ff ff42 	bl	8001f80 <__NVIC_GetPriorityGrouping>
 80020fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	6978      	ldr	r0, [r7, #20]
 8002104:	f7ff ff90 	bl	8002028 <NVIC_EncodePriority>
 8002108:	4602      	mov	r2, r0
 800210a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff5f 	bl	8001fd4 <__NVIC_SetPriority>
}
 8002116:	bf00      	nop
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff35 	bl	8001f9c <__NVIC_EnableIRQ>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ffa2 	bl	800208c <SysTick_Config>
 8002148:	4603      	mov	r3, r0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800215e:	4b6b      	ldr	r3, [pc, #428]	@ (800230c <HAL_FLASH_IRQHandler+0x1b8>)
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	f003 0310 	and.w	r3, r3, #16
 8002166:	2b00      	cmp	r3, #0
 8002168:	d105      	bne.n	8002176 <HAL_FLASH_IRQHandler+0x22>
 800216a:	4b68      	ldr	r3, [pc, #416]	@ (800230c <HAL_FLASH_IRQHandler+0x1b8>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00e      	beq.n	8002194 <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 8002176:	4b66      	ldr	r3, [pc, #408]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 800217c:	4b64      	ldr	r3, [pc, #400]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 800217e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002182:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8002184:	f000 f8f4 	bl	8002370 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f8cc 	bl	8002326 <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800218e:	4b60      	ldr	r3, [pc, #384]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002194:	4b5d      	ldr	r3, [pc, #372]	@ (800230c <HAL_FLASH_IRQHandler+0x1b8>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 80a0 	beq.w	80022e2 <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80021a2:	4b5a      	ldr	r3, [pc, #360]	@ (800230c <HAL_FLASH_IRQHandler+0x1b8>)
 80021a4:	2220      	movs	r2, #32
 80021a6:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 80021a8:	4b59      	ldr	r3, [pc, #356]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 8097 	beq.w	80022e2 <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 80021b4:	4b56      	ldr	r3, [pc, #344]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d12d      	bne.n	800221a <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 80021be:	4b54      	ldr	r3, [pc, #336]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	4a52      	ldr	r2, [pc, #328]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 80021c6:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 80021c8:	4b51      	ldr	r3, [pc, #324]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d017      	beq.n	8002200 <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 80021d0:	4b4f      	ldr	r3, [pc, #316]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f89c 	bl	8002314 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 80021dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80021e4:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 80021e6:	4a4a      	ldr	r2, [pc, #296]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80021ec:	4b47      	ldr	r3, [pc, #284]	@ (800230c <HAL_FLASH_IRQHandler+0x1b8>)
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	4a46      	ldr	r2, [pc, #280]	@ (800230c <HAL_FLASH_IRQHandler+0x1b8>)
 80021f2:	f023 0302 	bic.w	r3, r3, #2
 80021f6:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f909 	bl	8002410 <FLASH_PageErase>
 80021fe:	e070      	b.n	80022e2 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8002200:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002204:	607b      	str	r3, [r7, #4]
 8002206:	4a42      	ldr	r2, [pc, #264]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800220c:	4b40      	ldr	r3, [pc, #256]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f87e 	bl	8002314 <HAL_FLASH_EndOfOperationCallback>
 8002218:	e063      	b.n	80022e2 <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800221a:	4b3d      	ldr	r3, [pc, #244]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d10c      	bne.n	800223e <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002224:	4b39      	ldr	r3, [pc, #228]	@ (800230c <HAL_FLASH_IRQHandler+0x1b8>)
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	4a38      	ldr	r2, [pc, #224]	@ (800230c <HAL_FLASH_IRQHandler+0x1b8>)
 800222a:	f023 0304 	bic.w	r3, r3, #4
 800222e:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 8002230:	2000      	movs	r0, #0
 8002232:	f000 f86f 	bl	8002314 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002236:	4b36      	ldr	r3, [pc, #216]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
 800223c:	e051      	b.n	80022e2 <HAL_FLASH_IRQHandler+0x18e>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 800223e:	4b34      	ldr	r3, [pc, #208]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	3b01      	subs	r3, #1
 8002244:	4a32      	ldr	r2, [pc, #200]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 8002246:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8002248:	4b31      	ldr	r3, [pc, #196]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d024      	beq.n	800229a <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 8002250:	4b2f      	ldr	r3, [pc, #188]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	3302      	adds	r3, #2
 8002256:	4a2e      	ldr	r2, [pc, #184]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 8002258:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 800225a:	4b2d      	ldr	r3, [pc, #180]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8002260:	4b2b      	ldr	r3, [pc, #172]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 8002262:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	0c02      	lsrs	r2, r0, #16
 8002270:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002274:	0c0b      	lsrs	r3, r1, #16
 8002276:	4926      	ldr	r1, [pc, #152]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 8002278:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800227c:	4b23      	ldr	r3, [pc, #140]	@ (800230c <HAL_FLASH_IRQHandler+0x1b8>)
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	4a22      	ldr	r2, [pc, #136]	@ (800230c <HAL_FLASH_IRQHandler+0x1b8>)
 8002282:	f023 0301 	bic.w	r3, r3, #1
 8002286:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8002288:	4b21      	ldr	r3, [pc, #132]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 800228a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800228e:	b293      	uxth	r3, r2
 8002290:	4619      	mov	r1, r3
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f850 	bl	8002338 <FLASH_Program_HalfWord>
 8002298:	e023      	b.n	80022e2 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 800229a:	4b1d      	ldr	r3, [pc, #116]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d105      	bne.n	80022b0 <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80022a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 f833 	bl	8002314 <HAL_FLASH_EndOfOperationCallback>
 80022ae:	e011      	b.n	80022d4 <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 80022b0:	4b17      	ldr	r3, [pc, #92]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d106      	bne.n	80022c8 <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 80022ba:	4b15      	ldr	r3, [pc, #84]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	3b02      	subs	r3, #2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 f827 	bl	8002314 <HAL_FLASH_EndOfOperationCallback>
 80022c6:	e005      	b.n	80022d4 <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 80022c8:	4b11      	ldr	r3, [pc, #68]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	3b06      	subs	r3, #6
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f820 	bl	8002314 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 80022d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 80022d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022da:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80022dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 80022de:	2200      	movs	r2, #0
 80022e0:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80022e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002310 <HAL_FLASH_IRQHandler+0x1bc>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10b      	bne.n	8002304 <HAL_FLASH_IRQHandler+0x1b0>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 80022ec:	4b07      	ldr	r3, [pc, #28]	@ (800230c <HAL_FLASH_IRQHandler+0x1b8>)
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	4a06      	ldr	r2, [pc, #24]	@ (800230c <HAL_FLASH_IRQHandler+0x1b8>)
 80022f2:	f023 0307 	bic.w	r3, r3, #7
 80022f6:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 80022f8:	4b04      	ldr	r3, [pc, #16]	@ (800230c <HAL_FLASH_IRQHandler+0x1b8>)
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	4a03      	ldr	r2, [pc, #12]	@ (800230c <HAL_FLASH_IRQHandler+0x1b8>)
 80022fe:	f423 53a0 	bic.w	r3, r3, #5120	@ 0x1400
 8002302:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

  }
}
 8002304:	bf00      	nop
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40022000 	.word	0x40022000
 8002310:	20000310 	.word	0x20000310

08002314 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002344:	4b08      	ldr	r3, [pc, #32]	@ (8002368 <FLASH_Program_HalfWord+0x30>)
 8002346:	2200      	movs	r2, #0
 8002348:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800234a:	4b08      	ldr	r3, [pc, #32]	@ (800236c <FLASH_Program_HalfWord+0x34>)
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	4a07      	ldr	r2, [pc, #28]	@ (800236c <FLASH_Program_HalfWord+0x34>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	887a      	ldrh	r2, [r7, #2]
 800235a:	801a      	strh	r2, [r3, #0]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000310 	.word	0x20000310
 800236c:	40022000 	.word	0x40022000

08002370 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002376:	2300      	movs	r3, #0
 8002378:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800237a:	4b23      	ldr	r3, [pc, #140]	@ (8002408 <FLASH_SetErrorCode+0x98>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002386:	4b21      	ldr	r3, [pc, #132]	@ (800240c <FLASH_SetErrorCode+0x9c>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	f043 0302 	orr.w	r3, r3, #2
 800238e:	4a1f      	ldr	r2, [pc, #124]	@ (800240c <FLASH_SetErrorCode+0x9c>)
 8002390:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f043 0310 	orr.w	r3, r3, #16
 8002398:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800239a:	4b1b      	ldr	r3, [pc, #108]	@ (8002408 <FLASH_SetErrorCode+0x98>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d009      	beq.n	80023ba <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80023a6:	4b19      	ldr	r3, [pc, #100]	@ (800240c <FLASH_SetErrorCode+0x9c>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	4a17      	ldr	r2, [pc, #92]	@ (800240c <FLASH_SetErrorCode+0x9c>)
 80023b0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f043 0304 	orr.w	r3, r3, #4
 80023b8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80023ba:	4b13      	ldr	r3, [pc, #76]	@ (8002408 <FLASH_SetErrorCode+0x98>)
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00b      	beq.n	80023de <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80023c6:	4b11      	ldr	r3, [pc, #68]	@ (800240c <FLASH_SetErrorCode+0x9c>)
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	f043 0304 	orr.w	r3, r3, #4
 80023ce:	4a0f      	ldr	r2, [pc, #60]	@ (800240c <FLASH_SetErrorCode+0x9c>)
 80023d0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80023d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002408 <FLASH_SetErrorCode+0x98>)
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002408 <FLASH_SetErrorCode+0x98>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f240 1201 	movw	r2, #257	@ 0x101
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d106      	bne.n	80023f6 <FLASH_SetErrorCode+0x86>
 80023e8:	4b07      	ldr	r3, [pc, #28]	@ (8002408 <FLASH_SetErrorCode+0x98>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	4a06      	ldr	r2, [pc, #24]	@ (8002408 <FLASH_SetErrorCode+0x98>)
 80023ee:	f023 0301 	bic.w	r3, r3, #1
 80023f2:	61d3      	str	r3, [r2, #28]
}  
 80023f4:	e002      	b.n	80023fc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80023f6:	4a04      	ldr	r2, [pc, #16]	@ (8002408 <FLASH_SetErrorCode+0x98>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	60d3      	str	r3, [r2, #12]
}  
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40022000 	.word	0x40022000
 800240c:	20000310 	.word	0x20000310

08002410 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002418:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <FLASH_PageErase+0x38>)
 800241a:	2200      	movs	r2, #0
 800241c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800241e:	4b0b      	ldr	r3, [pc, #44]	@ (800244c <FLASH_PageErase+0x3c>)
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	4a0a      	ldr	r2, [pc, #40]	@ (800244c <FLASH_PageErase+0x3c>)
 8002424:	f043 0302 	orr.w	r3, r3, #2
 8002428:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800242a:	4a08      	ldr	r2, [pc, #32]	@ (800244c <FLASH_PageErase+0x3c>)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002430:	4b06      	ldr	r3, [pc, #24]	@ (800244c <FLASH_PageErase+0x3c>)
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	4a05      	ldr	r2, [pc, #20]	@ (800244c <FLASH_PageErase+0x3c>)
 8002436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800243a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	20000310 	.word	0x20000310
 800244c:	40022000 	.word	0x40022000

08002450 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002450:	b480      	push	{r7}
 8002452:	b08b      	sub	sp, #44	@ 0x2c
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800245a:	2300      	movs	r3, #0
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800245e:	2300      	movs	r3, #0
 8002460:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002462:	e169      	b.n	8002738 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002464:	2201      	movs	r2, #1
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	69fa      	ldr	r2, [r7, #28]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	429a      	cmp	r2, r3
 800247e:	f040 8158 	bne.w	8002732 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4a9a      	ldr	r2, [pc, #616]	@ (80026f0 <HAL_GPIO_Init+0x2a0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d05e      	beq.n	800254a <HAL_GPIO_Init+0xfa>
 800248c:	4a98      	ldr	r2, [pc, #608]	@ (80026f0 <HAL_GPIO_Init+0x2a0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d875      	bhi.n	800257e <HAL_GPIO_Init+0x12e>
 8002492:	4a98      	ldr	r2, [pc, #608]	@ (80026f4 <HAL_GPIO_Init+0x2a4>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d058      	beq.n	800254a <HAL_GPIO_Init+0xfa>
 8002498:	4a96      	ldr	r2, [pc, #600]	@ (80026f4 <HAL_GPIO_Init+0x2a4>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d86f      	bhi.n	800257e <HAL_GPIO_Init+0x12e>
 800249e:	4a96      	ldr	r2, [pc, #600]	@ (80026f8 <HAL_GPIO_Init+0x2a8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d052      	beq.n	800254a <HAL_GPIO_Init+0xfa>
 80024a4:	4a94      	ldr	r2, [pc, #592]	@ (80026f8 <HAL_GPIO_Init+0x2a8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d869      	bhi.n	800257e <HAL_GPIO_Init+0x12e>
 80024aa:	4a94      	ldr	r2, [pc, #592]	@ (80026fc <HAL_GPIO_Init+0x2ac>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d04c      	beq.n	800254a <HAL_GPIO_Init+0xfa>
 80024b0:	4a92      	ldr	r2, [pc, #584]	@ (80026fc <HAL_GPIO_Init+0x2ac>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d863      	bhi.n	800257e <HAL_GPIO_Init+0x12e>
 80024b6:	4a92      	ldr	r2, [pc, #584]	@ (8002700 <HAL_GPIO_Init+0x2b0>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d046      	beq.n	800254a <HAL_GPIO_Init+0xfa>
 80024bc:	4a90      	ldr	r2, [pc, #576]	@ (8002700 <HAL_GPIO_Init+0x2b0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d85d      	bhi.n	800257e <HAL_GPIO_Init+0x12e>
 80024c2:	2b12      	cmp	r3, #18
 80024c4:	d82a      	bhi.n	800251c <HAL_GPIO_Init+0xcc>
 80024c6:	2b12      	cmp	r3, #18
 80024c8:	d859      	bhi.n	800257e <HAL_GPIO_Init+0x12e>
 80024ca:	a201      	add	r2, pc, #4	@ (adr r2, 80024d0 <HAL_GPIO_Init+0x80>)
 80024cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d0:	0800254b 	.word	0x0800254b
 80024d4:	08002525 	.word	0x08002525
 80024d8:	08002537 	.word	0x08002537
 80024dc:	08002579 	.word	0x08002579
 80024e0:	0800257f 	.word	0x0800257f
 80024e4:	0800257f 	.word	0x0800257f
 80024e8:	0800257f 	.word	0x0800257f
 80024ec:	0800257f 	.word	0x0800257f
 80024f0:	0800257f 	.word	0x0800257f
 80024f4:	0800257f 	.word	0x0800257f
 80024f8:	0800257f 	.word	0x0800257f
 80024fc:	0800257f 	.word	0x0800257f
 8002500:	0800257f 	.word	0x0800257f
 8002504:	0800257f 	.word	0x0800257f
 8002508:	0800257f 	.word	0x0800257f
 800250c:	0800257f 	.word	0x0800257f
 8002510:	0800257f 	.word	0x0800257f
 8002514:	0800252d 	.word	0x0800252d
 8002518:	08002541 	.word	0x08002541
 800251c:	4a79      	ldr	r2, [pc, #484]	@ (8002704 <HAL_GPIO_Init+0x2b4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d013      	beq.n	800254a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002522:	e02c      	b.n	800257e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	623b      	str	r3, [r7, #32]
          break;
 800252a:	e029      	b.n	8002580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	3304      	adds	r3, #4
 8002532:	623b      	str	r3, [r7, #32]
          break;
 8002534:	e024      	b.n	8002580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	3308      	adds	r3, #8
 800253c:	623b      	str	r3, [r7, #32]
          break;
 800253e:	e01f      	b.n	8002580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	330c      	adds	r3, #12
 8002546:	623b      	str	r3, [r7, #32]
          break;
 8002548:	e01a      	b.n	8002580 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d102      	bne.n	8002558 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002552:	2304      	movs	r3, #4
 8002554:	623b      	str	r3, [r7, #32]
          break;
 8002556:	e013      	b.n	8002580 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d105      	bne.n	800256c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002560:	2308      	movs	r3, #8
 8002562:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	611a      	str	r2, [r3, #16]
          break;
 800256a:	e009      	b.n	8002580 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800256c:	2308      	movs	r3, #8
 800256e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	615a      	str	r2, [r3, #20]
          break;
 8002576:	e003      	b.n	8002580 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002578:	2300      	movs	r3, #0
 800257a:	623b      	str	r3, [r7, #32]
          break;
 800257c:	e000      	b.n	8002580 <HAL_GPIO_Init+0x130>
          break;
 800257e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	2bff      	cmp	r3, #255	@ 0xff
 8002584:	d801      	bhi.n	800258a <HAL_GPIO_Init+0x13a>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	e001      	b.n	800258e <HAL_GPIO_Init+0x13e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3304      	adds	r3, #4
 800258e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2bff      	cmp	r3, #255	@ 0xff
 8002594:	d802      	bhi.n	800259c <HAL_GPIO_Init+0x14c>
 8002596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	e002      	b.n	80025a2 <HAL_GPIO_Init+0x152>
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259e:	3b08      	subs	r3, #8
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	210f      	movs	r1, #15
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	fa01 f303 	lsl.w	r3, r1, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	401a      	ands	r2, r3
 80025b4:	6a39      	ldr	r1, [r7, #32]
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	fa01 f303 	lsl.w	r3, r1, r3
 80025bc:	431a      	orrs	r2, r3
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 80b1 	beq.w	8002732 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002708 <HAL_GPIO_Init+0x2b8>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	4a4c      	ldr	r2, [pc, #304]	@ (8002708 <HAL_GPIO_Init+0x2b8>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6193      	str	r3, [r2, #24]
 80025dc:	4b4a      	ldr	r3, [pc, #296]	@ (8002708 <HAL_GPIO_Init+0x2b8>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025e8:	4a48      	ldr	r2, [pc, #288]	@ (800270c <HAL_GPIO_Init+0x2bc>)
 80025ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ec:	089b      	lsrs	r3, r3, #2
 80025ee:	3302      	adds	r3, #2
 80025f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	220f      	movs	r2, #15
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4013      	ands	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a40      	ldr	r2, [pc, #256]	@ (8002710 <HAL_GPIO_Init+0x2c0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d013      	beq.n	800263c <HAL_GPIO_Init+0x1ec>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a3f      	ldr	r2, [pc, #252]	@ (8002714 <HAL_GPIO_Init+0x2c4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d00d      	beq.n	8002638 <HAL_GPIO_Init+0x1e8>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a3e      	ldr	r2, [pc, #248]	@ (8002718 <HAL_GPIO_Init+0x2c8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d007      	beq.n	8002634 <HAL_GPIO_Init+0x1e4>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a3d      	ldr	r2, [pc, #244]	@ (800271c <HAL_GPIO_Init+0x2cc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d101      	bne.n	8002630 <HAL_GPIO_Init+0x1e0>
 800262c:	2303      	movs	r3, #3
 800262e:	e006      	b.n	800263e <HAL_GPIO_Init+0x1ee>
 8002630:	2304      	movs	r3, #4
 8002632:	e004      	b.n	800263e <HAL_GPIO_Init+0x1ee>
 8002634:	2302      	movs	r3, #2
 8002636:	e002      	b.n	800263e <HAL_GPIO_Init+0x1ee>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <HAL_GPIO_Init+0x1ee>
 800263c:	2300      	movs	r3, #0
 800263e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002640:	f002 0203 	and.w	r2, r2, #3
 8002644:	0092      	lsls	r2, r2, #2
 8002646:	4093      	lsls	r3, r2
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4313      	orrs	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800264e:	492f      	ldr	r1, [pc, #188]	@ (800270c <HAL_GPIO_Init+0x2bc>)
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002652:	089b      	lsrs	r3, r3, #2
 8002654:	3302      	adds	r3, #2
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d006      	beq.n	8002676 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002668:	4b2d      	ldr	r3, [pc, #180]	@ (8002720 <HAL_GPIO_Init+0x2d0>)
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	492c      	ldr	r1, [pc, #176]	@ (8002720 <HAL_GPIO_Init+0x2d0>)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	608b      	str	r3, [r1, #8]
 8002674:	e006      	b.n	8002684 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002676:	4b2a      	ldr	r3, [pc, #168]	@ (8002720 <HAL_GPIO_Init+0x2d0>)
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	43db      	mvns	r3, r3
 800267e:	4928      	ldr	r1, [pc, #160]	@ (8002720 <HAL_GPIO_Init+0x2d0>)
 8002680:	4013      	ands	r3, r2
 8002682:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d006      	beq.n	800269e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002690:	4b23      	ldr	r3, [pc, #140]	@ (8002720 <HAL_GPIO_Init+0x2d0>)
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	4922      	ldr	r1, [pc, #136]	@ (8002720 <HAL_GPIO_Init+0x2d0>)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	60cb      	str	r3, [r1, #12]
 800269c:	e006      	b.n	80026ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800269e:	4b20      	ldr	r3, [pc, #128]	@ (8002720 <HAL_GPIO_Init+0x2d0>)
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	491e      	ldr	r1, [pc, #120]	@ (8002720 <HAL_GPIO_Init+0x2d0>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d006      	beq.n	80026c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026b8:	4b19      	ldr	r3, [pc, #100]	@ (8002720 <HAL_GPIO_Init+0x2d0>)
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	4918      	ldr	r1, [pc, #96]	@ (8002720 <HAL_GPIO_Init+0x2d0>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
 80026c4:	e006      	b.n	80026d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026c6:	4b16      	ldr	r3, [pc, #88]	@ (8002720 <HAL_GPIO_Init+0x2d0>)
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	4914      	ldr	r1, [pc, #80]	@ (8002720 <HAL_GPIO_Init+0x2d0>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d021      	beq.n	8002724 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002720 <HAL_GPIO_Init+0x2d0>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	490e      	ldr	r1, [pc, #56]	@ (8002720 <HAL_GPIO_Init+0x2d0>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	600b      	str	r3, [r1, #0]
 80026ec:	e021      	b.n	8002732 <HAL_GPIO_Init+0x2e2>
 80026ee:	bf00      	nop
 80026f0:	10320000 	.word	0x10320000
 80026f4:	10310000 	.word	0x10310000
 80026f8:	10220000 	.word	0x10220000
 80026fc:	10210000 	.word	0x10210000
 8002700:	10120000 	.word	0x10120000
 8002704:	10110000 	.word	0x10110000
 8002708:	40021000 	.word	0x40021000
 800270c:	40010000 	.word	0x40010000
 8002710:	40010800 	.word	0x40010800
 8002714:	40010c00 	.word	0x40010c00
 8002718:	40011000 	.word	0x40011000
 800271c:	40011400 	.word	0x40011400
 8002720:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002724:	4b0b      	ldr	r3, [pc, #44]	@ (8002754 <HAL_GPIO_Init+0x304>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	43db      	mvns	r3, r3
 800272c:	4909      	ldr	r1, [pc, #36]	@ (8002754 <HAL_GPIO_Init+0x304>)
 800272e:	4013      	ands	r3, r2
 8002730:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002734:	3301      	adds	r3, #1
 8002736:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	fa22 f303 	lsr.w	r3, r2, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	f47f ae8e 	bne.w	8002464 <HAL_GPIO_Init+0x14>
  }
}
 8002748:	bf00      	nop
 800274a:	bf00      	nop
 800274c:	372c      	adds	r7, #44	@ 0x2c
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr
 8002754:	40010400 	.word	0x40010400

08002758 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	887b      	ldrh	r3, [r7, #2]
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
 8002774:	e001      	b.n	800277a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002776:	2300      	movs	r3, #0
 8002778:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800277a:	7bfb      	ldrb	r3, [r7, #15]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr

08002786 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	460b      	mov	r3, r1
 8002790:	807b      	strh	r3, [r7, #2]
 8002792:	4613      	mov	r3, r2
 8002794:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002796:	787b      	ldrb	r3, [r7, #1]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800279c:	887a      	ldrh	r2, [r7, #2]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027a2:	e003      	b.n	80027ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027a4:	887b      	ldrh	r3, [r7, #2]
 80027a6:	041a      	lsls	r2, r3, #16
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	611a      	str	r2, [r3, #16]
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b085      	sub	sp, #20
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	460b      	mov	r3, r1
 80027c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027c8:	887a      	ldrh	r2, [r7, #2]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4013      	ands	r3, r2
 80027ce:	041a      	lsls	r2, r3, #16
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	43d9      	mvns	r1, r3
 80027d4:	887b      	ldrh	r3, [r7, #2]
 80027d6:	400b      	ands	r3, r1
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	611a      	str	r2, [r3, #16]
}
 80027de:	bf00      	nop
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027f2:	4b08      	ldr	r3, [pc, #32]	@ (8002814 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027f4:	695a      	ldr	r2, [r3, #20]
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d006      	beq.n	800280c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027fe:	4a05      	ldr	r2, [pc, #20]	@ (8002814 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe fc6a 	bl	80010e0 <HAL_GPIO_EXTI_Callback>
  }
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40010400 	.word	0x40010400

08002818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e272      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 8087 	beq.w	8002946 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002838:	4b92      	ldr	r3, [pc, #584]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 030c 	and.w	r3, r3, #12
 8002840:	2b04      	cmp	r3, #4
 8002842:	d00c      	beq.n	800285e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002844:	4b8f      	ldr	r3, [pc, #572]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 030c 	and.w	r3, r3, #12
 800284c:	2b08      	cmp	r3, #8
 800284e:	d112      	bne.n	8002876 <HAL_RCC_OscConfig+0x5e>
 8002850:	4b8c      	ldr	r3, [pc, #560]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800285c:	d10b      	bne.n	8002876 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285e:	4b89      	ldr	r3, [pc, #548]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d06c      	beq.n	8002944 <HAL_RCC_OscConfig+0x12c>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d168      	bne.n	8002944 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e24c      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800287e:	d106      	bne.n	800288e <HAL_RCC_OscConfig+0x76>
 8002880:	4b80      	ldr	r3, [pc, #512]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a7f      	ldr	r2, [pc, #508]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002886:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	e02e      	b.n	80028ec <HAL_RCC_OscConfig+0xd4>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x98>
 8002896:	4b7b      	ldr	r3, [pc, #492]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a7a      	ldr	r2, [pc, #488]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800289c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	4b78      	ldr	r3, [pc, #480]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a77      	ldr	r2, [pc, #476]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e01d      	b.n	80028ec <HAL_RCC_OscConfig+0xd4>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0xbc>
 80028ba:	4b72      	ldr	r3, [pc, #456]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a71      	ldr	r2, [pc, #452]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b6f      	ldr	r3, [pc, #444]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e00b      	b.n	80028ec <HAL_RCC_OscConfig+0xd4>
 80028d4:	4b6b      	ldr	r3, [pc, #428]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a6a      	ldr	r2, [pc, #424]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	4b68      	ldr	r3, [pc, #416]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a67      	ldr	r2, [pc, #412]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d013      	beq.n	800291c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7ff fb16 	bl	8001f24 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028fc:	f7ff fb12 	bl	8001f24 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	@ 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e200      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	4b5d      	ldr	r3, [pc, #372]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0xe4>
 800291a:	e014      	b.n	8002946 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7ff fb02 	bl	8001f24 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002924:	f7ff fafe 	bl	8001f24 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	@ 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e1ec      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002936:	4b53      	ldr	r3, [pc, #332]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x10c>
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d063      	beq.n	8002a1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002952:	4b4c      	ldr	r3, [pc, #304]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800295e:	4b49      	ldr	r3, [pc, #292]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b08      	cmp	r3, #8
 8002968:	d11c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x18c>
 800296a:	4b46      	ldr	r3, [pc, #280]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d116      	bne.n	80029a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002976:	4b43      	ldr	r3, [pc, #268]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_RCC_OscConfig+0x176>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d001      	beq.n	800298e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e1c0      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4939      	ldr	r1, [pc, #228]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	e03a      	b.n	8002a1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ac:	4b36      	ldr	r3, [pc, #216]	@ (8002a88 <HAL_RCC_OscConfig+0x270>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b2:	f7ff fab7 	bl	8001f24 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ba:	f7ff fab3 	bl	8001f24 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e1a1      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4927      	ldr	r1, [pc, #156]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	600b      	str	r3, [r1, #0]
 80029ec:	e015      	b.n	8002a1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ee:	4b26      	ldr	r3, [pc, #152]	@ (8002a88 <HAL_RCC_OscConfig+0x270>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7ff fa96 	bl	8001f24 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029fc:	f7ff fa92 	bl	8001f24 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e180      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d03a      	beq.n	8002a9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d019      	beq.n	8002a62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2e:	4b17      	ldr	r3, [pc, #92]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a34:	f7ff fa76 	bl	8001f24 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a3c:	f7ff fa72 	bl	8001f24 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e160      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	f000 fa9c 	bl	8002f98 <RCC_Delay>
 8002a60:	e01c      	b.n	8002a9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a62:	4b0a      	ldr	r3, [pc, #40]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a68:	f7ff fa5c 	bl	8001f24 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a6e:	e00f      	b.n	8002a90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a70:	f7ff fa58 	bl	8001f24 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d908      	bls.n	8002a90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e146      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000
 8002a88:	42420000 	.word	0x42420000
 8002a8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a90:	4b92      	ldr	r3, [pc, #584]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1e9      	bne.n	8002a70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80a6 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aae:	4b8b      	ldr	r3, [pc, #556]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10d      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	4b88      	ldr	r3, [pc, #544]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	4a87      	ldr	r2, [pc, #540]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	61d3      	str	r3, [r2, #28]
 8002ac6:	4b85      	ldr	r3, [pc, #532]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad6:	4b82      	ldr	r3, [pc, #520]	@ (8002ce0 <HAL_RCC_OscConfig+0x4c8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d118      	bne.n	8002b14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ce0 <HAL_RCC_OscConfig+0x4c8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ce0 <HAL_RCC_OscConfig+0x4c8>)
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aee:	f7ff fa19 	bl	8001f24 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af6:	f7ff fa15 	bl	8001f24 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b64      	cmp	r3, #100	@ 0x64
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e103      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b08:	4b75      	ldr	r3, [pc, #468]	@ (8002ce0 <HAL_RCC_OscConfig+0x4c8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d106      	bne.n	8002b2a <HAL_RCC_OscConfig+0x312>
 8002b1c:	4b6f      	ldr	r3, [pc, #444]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4a6e      	ldr	r2, [pc, #440]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6213      	str	r3, [r2, #32]
 8002b28:	e02d      	b.n	8002b86 <HAL_RCC_OscConfig+0x36e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCC_OscConfig+0x334>
 8002b32:	4b6a      	ldr	r3, [pc, #424]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	4a69      	ldr	r2, [pc, #420]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	6213      	str	r3, [r2, #32]
 8002b3e:	4b67      	ldr	r3, [pc, #412]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	4a66      	ldr	r2, [pc, #408]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	f023 0304 	bic.w	r3, r3, #4
 8002b48:	6213      	str	r3, [r2, #32]
 8002b4a:	e01c      	b.n	8002b86 <HAL_RCC_OscConfig+0x36e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2b05      	cmp	r3, #5
 8002b52:	d10c      	bne.n	8002b6e <HAL_RCC_OscConfig+0x356>
 8002b54:	4b61      	ldr	r3, [pc, #388]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	4a60      	ldr	r2, [pc, #384]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b5a:	f043 0304 	orr.w	r3, r3, #4
 8002b5e:	6213      	str	r3, [r2, #32]
 8002b60:	4b5e      	ldr	r3, [pc, #376]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	4a5d      	ldr	r2, [pc, #372]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6213      	str	r3, [r2, #32]
 8002b6c:	e00b      	b.n	8002b86 <HAL_RCC_OscConfig+0x36e>
 8002b6e:	4b5b      	ldr	r3, [pc, #364]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	4a5a      	ldr	r2, [pc, #360]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	6213      	str	r3, [r2, #32]
 8002b7a:	4b58      	ldr	r3, [pc, #352]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	4a57      	ldr	r2, [pc, #348]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b80:	f023 0304 	bic.w	r3, r3, #4
 8002b84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d015      	beq.n	8002bba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8e:	f7ff f9c9 	bl	8001f24 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b94:	e00a      	b.n	8002bac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b96:	f7ff f9c5 	bl	8001f24 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e0b1      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bac:	4b4b      	ldr	r3, [pc, #300]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0ee      	beq.n	8002b96 <HAL_RCC_OscConfig+0x37e>
 8002bb8:	e014      	b.n	8002be4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bba:	f7ff f9b3 	bl	8001f24 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc0:	e00a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc2:	f7ff f9af 	bl	8001f24 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e09b      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd8:	4b40      	ldr	r3, [pc, #256]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1ee      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d105      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bea:	4b3c      	ldr	r3, [pc, #240]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	4a3b      	ldr	r2, [pc, #236]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bf4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 8087 	beq.w	8002d0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c00:	4b36      	ldr	r3, [pc, #216]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d061      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d146      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c14:	4b33      	ldr	r3, [pc, #204]	@ (8002ce4 <HAL_RCC_OscConfig+0x4cc>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1a:	f7ff f983 	bl	8001f24 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c22:	f7ff f97f 	bl	8001f24 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e06d      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c34:	4b29      	ldr	r3, [pc, #164]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f0      	bne.n	8002c22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c48:	d108      	bne.n	8002c5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c4a:	4b24      	ldr	r3, [pc, #144]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	4921      	ldr	r1, [pc, #132]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a19      	ldr	r1, [r3, #32]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	491b      	ldr	r1, [pc, #108]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce4 <HAL_RCC_OscConfig+0x4cc>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7a:	f7ff f953 	bl	8001f24 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c82:	f7ff f94f 	bl	8001f24 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e03d      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c94:	4b11      	ldr	r3, [pc, #68]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x46a>
 8002ca0:	e035      	b.n	8002d0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca2:	4b10      	ldr	r3, [pc, #64]	@ (8002ce4 <HAL_RCC_OscConfig+0x4cc>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7ff f93c 	bl	8001f24 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7ff f938 	bl	8001f24 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e026      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc2:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x498>
 8002cce:	e01e      	b.n	8002d0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d107      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e019      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40007000 	.word	0x40007000
 8002ce4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d18 <HAL_RCC_OscConfig+0x500>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d106      	bne.n	8002d0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40021000 	.word	0x40021000

08002d1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0d0      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d30:	4b6a      	ldr	r3, [pc, #424]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d910      	bls.n	8002d60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b67      	ldr	r3, [pc, #412]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 0207 	bic.w	r2, r3, #7
 8002d46:	4965      	ldr	r1, [pc, #404]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b63      	ldr	r3, [pc, #396]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0b8      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d020      	beq.n	8002dae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d78:	4b59      	ldr	r3, [pc, #356]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	4a58      	ldr	r2, [pc, #352]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d90:	4b53      	ldr	r3, [pc, #332]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4a52      	ldr	r2, [pc, #328]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d96:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002d9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d9c:	4b50      	ldr	r3, [pc, #320]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	494d      	ldr	r1, [pc, #308]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d040      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	4b47      	ldr	r3, [pc, #284]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d115      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e07f      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d107      	bne.n	8002dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dda:	4b41      	ldr	r3, [pc, #260]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e073      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dea:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e06b      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dfa:	4b39      	ldr	r3, [pc, #228]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f023 0203 	bic.w	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4936      	ldr	r1, [pc, #216]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e0c:	f7ff f88a 	bl	8001f24 <HAL_GetTick>
 8002e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	e00a      	b.n	8002e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e14:	f7ff f886 	bl	8001f24 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e053      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 020c 	and.w	r2, r3, #12
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d1eb      	bne.n	8002e14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e3c:	4b27      	ldr	r3, [pc, #156]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d210      	bcs.n	8002e6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4a:	4b24      	ldr	r3, [pc, #144]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 0207 	bic.w	r2, r3, #7
 8002e52:	4922      	ldr	r1, [pc, #136]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5a:	4b20      	ldr	r3, [pc, #128]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e032      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e78:	4b19      	ldr	r3, [pc, #100]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4916      	ldr	r1, [pc, #88]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d009      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e96:	4b12      	ldr	r3, [pc, #72]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	490e      	ldr	r1, [pc, #56]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eaa:	f000 f821 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	490a      	ldr	r1, [pc, #40]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ebc:	5ccb      	ldrb	r3, [r1, r3]
 8002ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec2:	4a09      	ldr	r2, [pc, #36]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1cc>)
 8002ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ec6:	4b09      	ldr	r3, [pc, #36]	@ (8002eec <HAL_RCC_ClockConfig+0x1d0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe ffe8 	bl	8001ea0 <HAL_InitTick>

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40022000 	.word	0x40022000
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	08008bf8 	.word	0x08008bf8
 8002ee8:	20000010 	.word	0x20000010
 8002eec:	20000014 	.word	0x20000014

08002ef0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	2300      	movs	r3, #0
 8002f04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d002      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x30>
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_GetSysClockFreq+0x36>
 8002f1e:	e027      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f20:	4b19      	ldr	r3, [pc, #100]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f22:	613b      	str	r3, [r7, #16]
      break;
 8002f24:	e027      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	0c9b      	lsrs	r3, r3, #18
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	4a17      	ldr	r2, [pc, #92]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f30:	5cd3      	ldrb	r3, [r2, r3]
 8002f32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d010      	beq.n	8002f60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f3e:	4b11      	ldr	r3, [pc, #68]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	0c5b      	lsrs	r3, r3, #17
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	4a11      	ldr	r2, [pc, #68]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f4a:	5cd3      	ldrb	r3, [r2, r3]
 8002f4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a0d      	ldr	r2, [pc, #52]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f52:	fb03 f202 	mul.w	r2, r3, r2
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	e004      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a0c      	ldr	r2, [pc, #48]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f64:	fb02 f303 	mul.w	r3, r2, r3
 8002f68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	613b      	str	r3, [r7, #16]
      break;
 8002f6e:	e002      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f70:	4b05      	ldr	r3, [pc, #20]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f72:	613b      	str	r3, [r7, #16]
      break;
 8002f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f76:	693b      	ldr	r3, [r7, #16]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	371c      	adds	r7, #28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	007a1200 	.word	0x007a1200
 8002f8c:	08008c08 	.word	0x08008c08
 8002f90:	08008c18 	.word	0x08008c18
 8002f94:	003d0900 	.word	0x003d0900

08002f98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8002fcc <RCC_Delay+0x34>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd0 <RCC_Delay+0x38>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	0a5b      	lsrs	r3, r3, #9
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	fb02 f303 	mul.w	r3, r2, r3
 8002fb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fb4:	bf00      	nop
  }
  while (Delay --);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1e5a      	subs	r2, r3, #1
 8002fba:	60fa      	str	r2, [r7, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1f9      	bne.n	8002fb4 <RCC_Delay+0x1c>
}
 8002fc0:	bf00      	nop
 8002fc2:	bf00      	nop
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr
 8002fcc:	20000010 	.word	0x20000010
 8002fd0:	10624dd3 	.word	0x10624dd3

08002fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e041      	b.n	800306a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fe fcd4 	bl	80019a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3304      	adds	r3, #4
 8003010:	4619      	mov	r1, r3
 8003012:	4610      	mov	r0, r2
 8003014:	f000 fe06 	bl	8003c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b01      	cmp	r3, #1
 8003086:	d001      	beq.n	800308c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e032      	b.n	80030f2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a18      	ldr	r2, [pc, #96]	@ (80030fc <HAL_TIM_Base_Start+0x88>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d00e      	beq.n	80030bc <HAL_TIM_Base_Start+0x48>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030a6:	d009      	beq.n	80030bc <HAL_TIM_Base_Start+0x48>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a14      	ldr	r2, [pc, #80]	@ (8003100 <HAL_TIM_Base_Start+0x8c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d004      	beq.n	80030bc <HAL_TIM_Base_Start+0x48>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a13      	ldr	r2, [pc, #76]	@ (8003104 <HAL_TIM_Base_Start+0x90>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d111      	bne.n	80030e0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b06      	cmp	r3, #6
 80030cc:	d010      	beq.n	80030f0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 0201 	orr.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030de:	e007      	b.n	80030f0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr
 80030fc:	40012c00 	.word	0x40012c00
 8003100:	40000400 	.word	0x40000400
 8003104:	40000800 	.word	0x40000800

08003108 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e041      	b.n	800319e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f839 	bl	80031a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3304      	adds	r3, #4
 8003144:	4619      	mov	r1, r3
 8003146:	4610      	mov	r0, r2
 8003148:	f000 fd6c 	bl	8003c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr

080031b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d109      	bne.n	80031dc <HAL_TIM_PWM_Start+0x24>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	bf14      	ite	ne
 80031d4:	2301      	movne	r3, #1
 80031d6:	2300      	moveq	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	e022      	b.n	8003222 <HAL_TIM_PWM_Start+0x6a>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d109      	bne.n	80031f6 <HAL_TIM_PWM_Start+0x3e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	bf14      	ite	ne
 80031ee:	2301      	movne	r3, #1
 80031f0:	2300      	moveq	r3, #0
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	e015      	b.n	8003222 <HAL_TIM_PWM_Start+0x6a>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d109      	bne.n	8003210 <HAL_TIM_PWM_Start+0x58>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b01      	cmp	r3, #1
 8003206:	bf14      	ite	ne
 8003208:	2301      	movne	r3, #1
 800320a:	2300      	moveq	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	e008      	b.n	8003222 <HAL_TIM_PWM_Start+0x6a>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b01      	cmp	r3, #1
 800321a:	bf14      	ite	ne
 800321c:	2301      	movne	r3, #1
 800321e:	2300      	moveq	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e05e      	b.n	80032e8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d104      	bne.n	800323a <HAL_TIM_PWM_Start+0x82>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003238:	e013      	b.n	8003262 <HAL_TIM_PWM_Start+0xaa>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b04      	cmp	r3, #4
 800323e:	d104      	bne.n	800324a <HAL_TIM_PWM_Start+0x92>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003248:	e00b      	b.n	8003262 <HAL_TIM_PWM_Start+0xaa>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b08      	cmp	r3, #8
 800324e:	d104      	bne.n	800325a <HAL_TIM_PWM_Start+0xa2>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003258:	e003      	b.n	8003262 <HAL_TIM_PWM_Start+0xaa>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2202      	movs	r2, #2
 800325e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2201      	movs	r2, #1
 8003268:	6839      	ldr	r1, [r7, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f001 f873 	bl	8004356 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a1e      	ldr	r2, [pc, #120]	@ (80032f0 <HAL_TIM_PWM_Start+0x138>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d107      	bne.n	800328a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003288:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a18      	ldr	r2, [pc, #96]	@ (80032f0 <HAL_TIM_PWM_Start+0x138>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00e      	beq.n	80032b2 <HAL_TIM_PWM_Start+0xfa>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800329c:	d009      	beq.n	80032b2 <HAL_TIM_PWM_Start+0xfa>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a14      	ldr	r2, [pc, #80]	@ (80032f4 <HAL_TIM_PWM_Start+0x13c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d004      	beq.n	80032b2 <HAL_TIM_PWM_Start+0xfa>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a12      	ldr	r2, [pc, #72]	@ (80032f8 <HAL_TIM_PWM_Start+0x140>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d111      	bne.n	80032d6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b06      	cmp	r3, #6
 80032c2:	d010      	beq.n	80032e6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d4:	e007      	b.n	80032e6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0201 	orr.w	r2, r2, #1
 80032e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40012c00 	.word	0x40012c00
 80032f4:	40000400 	.word	0x40000400
 80032f8:	40000800 	.word	0x40000800

080032fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e041      	b.n	8003392 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f839 	bl	800339a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3304      	adds	r3, #4
 8003338:	4619      	mov	r1, r3
 800333a:	4610      	mov	r0, r2
 800333c:	f000 fc72 	bl	8003c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d104      	bne.n	80033ca <HAL_TIM_IC_Start_IT+0x1e>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	e013      	b.n	80033f2 <HAL_TIM_IC_Start_IT+0x46>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d104      	bne.n	80033da <HAL_TIM_IC_Start_IT+0x2e>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	e00b      	b.n	80033f2 <HAL_TIM_IC_Start_IT+0x46>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d104      	bne.n	80033ea <HAL_TIM_IC_Start_IT+0x3e>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	e003      	b.n	80033f2 <HAL_TIM_IC_Start_IT+0x46>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d104      	bne.n	8003404 <HAL_TIM_IC_Start_IT+0x58>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e013      	b.n	800342c <HAL_TIM_IC_Start_IT+0x80>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	2b04      	cmp	r3, #4
 8003408:	d104      	bne.n	8003414 <HAL_TIM_IC_Start_IT+0x68>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003410:	b2db      	uxtb	r3, r3
 8003412:	e00b      	b.n	800342c <HAL_TIM_IC_Start_IT+0x80>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2b08      	cmp	r3, #8
 8003418:	d104      	bne.n	8003424 <HAL_TIM_IC_Start_IT+0x78>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003420:	b2db      	uxtb	r3, r3
 8003422:	e003      	b.n	800342c <HAL_TIM_IC_Start_IT+0x80>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800342a:	b2db      	uxtb	r3, r3
 800342c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800342e:	7bbb      	ldrb	r3, [r7, #14]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d102      	bne.n	800343a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003434:	7b7b      	ldrb	r3, [r7, #13]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d001      	beq.n	800343e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e0b8      	b.n	80035b0 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d104      	bne.n	800344e <HAL_TIM_IC_Start_IT+0xa2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800344c:	e013      	b.n	8003476 <HAL_TIM_IC_Start_IT+0xca>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b04      	cmp	r3, #4
 8003452:	d104      	bne.n	800345e <HAL_TIM_IC_Start_IT+0xb2>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800345c:	e00b      	b.n	8003476 <HAL_TIM_IC_Start_IT+0xca>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b08      	cmp	r3, #8
 8003462:	d104      	bne.n	800346e <HAL_TIM_IC_Start_IT+0xc2>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800346c:	e003      	b.n	8003476 <HAL_TIM_IC_Start_IT+0xca>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2202      	movs	r2, #2
 8003472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d104      	bne.n	8003486 <HAL_TIM_IC_Start_IT+0xda>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003484:	e013      	b.n	80034ae <HAL_TIM_IC_Start_IT+0x102>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b04      	cmp	r3, #4
 800348a:	d104      	bne.n	8003496 <HAL_TIM_IC_Start_IT+0xea>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003494:	e00b      	b.n	80034ae <HAL_TIM_IC_Start_IT+0x102>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b08      	cmp	r3, #8
 800349a:	d104      	bne.n	80034a6 <HAL_TIM_IC_Start_IT+0xfa>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034a4:	e003      	b.n	80034ae <HAL_TIM_IC_Start_IT+0x102>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2202      	movs	r2, #2
 80034aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b0c      	cmp	r3, #12
 80034b2:	d841      	bhi.n	8003538 <HAL_TIM_IC_Start_IT+0x18c>
 80034b4:	a201      	add	r2, pc, #4	@ (adr r2, 80034bc <HAL_TIM_IC_Start_IT+0x110>)
 80034b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ba:	bf00      	nop
 80034bc:	080034f1 	.word	0x080034f1
 80034c0:	08003539 	.word	0x08003539
 80034c4:	08003539 	.word	0x08003539
 80034c8:	08003539 	.word	0x08003539
 80034cc:	08003503 	.word	0x08003503
 80034d0:	08003539 	.word	0x08003539
 80034d4:	08003539 	.word	0x08003539
 80034d8:	08003539 	.word	0x08003539
 80034dc:	08003515 	.word	0x08003515
 80034e0:	08003539 	.word	0x08003539
 80034e4:	08003539 	.word	0x08003539
 80034e8:	08003539 	.word	0x08003539
 80034ec:	08003527 	.word	0x08003527
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0202 	orr.w	r2, r2, #2
 80034fe:	60da      	str	r2, [r3, #12]
      break;
 8003500:	e01d      	b.n	800353e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f042 0204 	orr.w	r2, r2, #4
 8003510:	60da      	str	r2, [r3, #12]
      break;
 8003512:	e014      	b.n	800353e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0208 	orr.w	r2, r2, #8
 8003522:	60da      	str	r2, [r3, #12]
      break;
 8003524:	e00b      	b.n	800353e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0210 	orr.w	r2, r2, #16
 8003534:	60da      	str	r2, [r3, #12]
      break;
 8003536:	e002      	b.n	800353e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	73fb      	strb	r3, [r7, #15]
      break;
 800353c:	bf00      	nop
  }

  if (status == HAL_OK)
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d134      	bne.n	80035ae <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2201      	movs	r2, #1
 800354a:	6839      	ldr	r1, [r7, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f000 ff02 	bl	8004356 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a18      	ldr	r2, [pc, #96]	@ (80035b8 <HAL_TIM_IC_Start_IT+0x20c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d00e      	beq.n	800357a <HAL_TIM_IC_Start_IT+0x1ce>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003564:	d009      	beq.n	800357a <HAL_TIM_IC_Start_IT+0x1ce>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a14      	ldr	r2, [pc, #80]	@ (80035bc <HAL_TIM_IC_Start_IT+0x210>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d004      	beq.n	800357a <HAL_TIM_IC_Start_IT+0x1ce>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a12      	ldr	r2, [pc, #72]	@ (80035c0 <HAL_TIM_IC_Start_IT+0x214>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d111      	bne.n	800359e <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2b06      	cmp	r3, #6
 800358a:	d010      	beq.n	80035ae <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359c:	e007      	b.n	80035ae <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f042 0201 	orr.w	r2, r2, #1
 80035ac:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40012c00 	.word	0x40012c00
 80035bc:	40000400 	.word	0x40000400
 80035c0:	40000800 	.word	0x40000800

080035c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d020      	beq.n	8003628 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d01b      	beq.n	8003628 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0202 	mvn.w	r2, #2
 80035f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7fd fe1c 	bl	800124c <HAL_TIM_IC_CaptureCallback>
 8003614:	e005      	b.n	8003622 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fae9 	bl	8003bee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 faef 	bl	8003c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b00      	cmp	r3, #0
 8003630:	d020      	beq.n	8003674 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01b      	beq.n	8003674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0204 	mvn.w	r2, #4
 8003644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fd fdf6 	bl	800124c <HAL_TIM_IC_CaptureCallback>
 8003660:	e005      	b.n	800366e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fac3 	bl	8003bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fac9 	bl	8003c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d020      	beq.n	80036c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01b      	beq.n	80036c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0208 	mvn.w	r2, #8
 8003690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2204      	movs	r2, #4
 8003696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fd fdd0 	bl	800124c <HAL_TIM_IC_CaptureCallback>
 80036ac:	e005      	b.n	80036ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fa9d 	bl	8003bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 faa3 	bl	8003c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 0310 	and.w	r3, r3, #16
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d020      	beq.n	800370c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01b      	beq.n	800370c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0210 	mvn.w	r2, #16
 80036dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2208      	movs	r2, #8
 80036e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fd fdaa 	bl	800124c <HAL_TIM_IC_CaptureCallback>
 80036f8:	e005      	b.n	8003706 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fa77 	bl	8003bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fa7d 	bl	8003c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00c      	beq.n	8003730 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d007      	beq.n	8003730 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0201 	mvn.w	r2, #1
 8003728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fd fd78 	bl	8001220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00c      	beq.n	8003754 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003740:	2b00      	cmp	r3, #0
 8003742:	d007      	beq.n	8003754 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800374c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fede 	bl	8004510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00c      	beq.n	8003778 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003764:	2b00      	cmp	r3, #0
 8003766:	d007      	beq.n	8003778 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fa4d 	bl	8003c12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f003 0320 	and.w	r3, r3, #32
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00c      	beq.n	800379c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d007      	beq.n	800379c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0220 	mvn.w	r2, #32
 8003794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 feb1 	bl	80044fe <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800379c:	bf00      	nop
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b0:	2300      	movs	r3, #0
 80037b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80037be:	2302      	movs	r3, #2
 80037c0:	e088      	b.n	80038d4 <HAL_TIM_IC_ConfigChannel+0x130>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d11b      	bne.n	8003808 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80037e0:	f000 fc16 	bl	8004010 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699a      	ldr	r2, [r3, #24]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 020c 	bic.w	r2, r2, #12
 80037f2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6999      	ldr	r1, [r3, #24]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	619a      	str	r2, [r3, #24]
 8003806:	e060      	b.n	80038ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b04      	cmp	r3, #4
 800380c:	d11c      	bne.n	8003848 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800381e:	f000 fc7f 	bl	8004120 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699a      	ldr	r2, [r3, #24]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003830:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6999      	ldr	r1, [r3, #24]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	021a      	lsls	r2, r3, #8
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	619a      	str	r2, [r3, #24]
 8003846:	e040      	b.n	80038ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b08      	cmp	r3, #8
 800384c:	d11b      	bne.n	8003886 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800385e:	f000 fcca 	bl	80041f6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69da      	ldr	r2, [r3, #28]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 020c 	bic.w	r2, r2, #12
 8003870:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69d9      	ldr	r1, [r3, #28]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	61da      	str	r2, [r3, #28]
 8003884:	e021      	b.n	80038ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b0c      	cmp	r3, #12
 800388a:	d11c      	bne.n	80038c6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800389c:	f000 fce6 	bl	800426c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69da      	ldr	r2, [r3, #28]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80038ae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69d9      	ldr	r1, [r3, #28]
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	021a      	lsls	r2, r3, #8
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	61da      	str	r2, [r3, #28]
 80038c4:	e001      	b.n	80038ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e0ae      	b.n	8003a58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b0c      	cmp	r3, #12
 8003906:	f200 809f 	bhi.w	8003a48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800390a:	a201      	add	r2, pc, #4	@ (adr r2, 8003910 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003910:	08003945 	.word	0x08003945
 8003914:	08003a49 	.word	0x08003a49
 8003918:	08003a49 	.word	0x08003a49
 800391c:	08003a49 	.word	0x08003a49
 8003920:	08003985 	.word	0x08003985
 8003924:	08003a49 	.word	0x08003a49
 8003928:	08003a49 	.word	0x08003a49
 800392c:	08003a49 	.word	0x08003a49
 8003930:	080039c7 	.word	0x080039c7
 8003934:	08003a49 	.word	0x08003a49
 8003938:	08003a49 	.word	0x08003a49
 800393c:	08003a49 	.word	0x08003a49
 8003940:	08003a07 	.word	0x08003a07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f9d8 	bl	8003d00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699a      	ldr	r2, [r3, #24]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0208 	orr.w	r2, r2, #8
 800395e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0204 	bic.w	r2, r2, #4
 800396e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6999      	ldr	r1, [r3, #24]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	619a      	str	r2, [r3, #24]
      break;
 8003982:	e064      	b.n	8003a4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fa1e 	bl	8003dcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800399e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6999      	ldr	r1, [r3, #24]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	021a      	lsls	r2, r3, #8
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	619a      	str	r2, [r3, #24]
      break;
 80039c4:	e043      	b.n	8003a4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68b9      	ldr	r1, [r7, #8]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fa67 	bl	8003ea0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69da      	ldr	r2, [r3, #28]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 0208 	orr.w	r2, r2, #8
 80039e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69da      	ldr	r2, [r3, #28]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0204 	bic.w	r2, r2, #4
 80039f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69d9      	ldr	r1, [r3, #28]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	61da      	str	r2, [r3, #28]
      break;
 8003a04:	e023      	b.n	8003a4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68b9      	ldr	r1, [r7, #8]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fab1 	bl	8003f74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69da      	ldr	r2, [r3, #28]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69d9      	ldr	r1, [r3, #28]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	021a      	lsls	r2, r3, #8
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	61da      	str	r2, [r3, #28]
      break;
 8003a46:	e002      	b.n	8003a4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_TIM_ConfigClockSource+0x1c>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e0b4      	b.n	8003be6 <HAL_TIM_ConfigClockSource+0x186>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003aa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ab4:	d03e      	beq.n	8003b34 <HAL_TIM_ConfigClockSource+0xd4>
 8003ab6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aba:	f200 8087 	bhi.w	8003bcc <HAL_TIM_ConfigClockSource+0x16c>
 8003abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ac2:	f000 8086 	beq.w	8003bd2 <HAL_TIM_ConfigClockSource+0x172>
 8003ac6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aca:	d87f      	bhi.n	8003bcc <HAL_TIM_ConfigClockSource+0x16c>
 8003acc:	2b70      	cmp	r3, #112	@ 0x70
 8003ace:	d01a      	beq.n	8003b06 <HAL_TIM_ConfigClockSource+0xa6>
 8003ad0:	2b70      	cmp	r3, #112	@ 0x70
 8003ad2:	d87b      	bhi.n	8003bcc <HAL_TIM_ConfigClockSource+0x16c>
 8003ad4:	2b60      	cmp	r3, #96	@ 0x60
 8003ad6:	d050      	beq.n	8003b7a <HAL_TIM_ConfigClockSource+0x11a>
 8003ad8:	2b60      	cmp	r3, #96	@ 0x60
 8003ada:	d877      	bhi.n	8003bcc <HAL_TIM_ConfigClockSource+0x16c>
 8003adc:	2b50      	cmp	r3, #80	@ 0x50
 8003ade:	d03c      	beq.n	8003b5a <HAL_TIM_ConfigClockSource+0xfa>
 8003ae0:	2b50      	cmp	r3, #80	@ 0x50
 8003ae2:	d873      	bhi.n	8003bcc <HAL_TIM_ConfigClockSource+0x16c>
 8003ae4:	2b40      	cmp	r3, #64	@ 0x40
 8003ae6:	d058      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x13a>
 8003ae8:	2b40      	cmp	r3, #64	@ 0x40
 8003aea:	d86f      	bhi.n	8003bcc <HAL_TIM_ConfigClockSource+0x16c>
 8003aec:	2b30      	cmp	r3, #48	@ 0x30
 8003aee:	d064      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0x15a>
 8003af0:	2b30      	cmp	r3, #48	@ 0x30
 8003af2:	d86b      	bhi.n	8003bcc <HAL_TIM_ConfigClockSource+0x16c>
 8003af4:	2b20      	cmp	r3, #32
 8003af6:	d060      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0x15a>
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	d867      	bhi.n	8003bcc <HAL_TIM_ConfigClockSource+0x16c>
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d05c      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0x15a>
 8003b00:	2b10      	cmp	r3, #16
 8003b02:	d05a      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0x15a>
 8003b04:	e062      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b16:	f000 fbff 	bl	8004318 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	609a      	str	r2, [r3, #8]
      break;
 8003b32:	e04f      	b.n	8003bd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b44:	f000 fbe8 	bl	8004318 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689a      	ldr	r2, [r3, #8]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b56:	609a      	str	r2, [r3, #8]
      break;
 8003b58:	e03c      	b.n	8003bd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b66:	461a      	mov	r2, r3
 8003b68:	f000 faac 	bl	80040c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2150      	movs	r1, #80	@ 0x50
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fbb6 	bl	80042e4 <TIM_ITRx_SetConfig>
      break;
 8003b78:	e02c      	b.n	8003bd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b86:	461a      	mov	r2, r3
 8003b88:	f000 fb06 	bl	8004198 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2160      	movs	r1, #96	@ 0x60
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fba6 	bl	80042e4 <TIM_ITRx_SetConfig>
      break;
 8003b98:	e01c      	b.n	8003bd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f000 fa8c 	bl	80040c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2140      	movs	r1, #64	@ 0x40
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fb96 	bl	80042e4 <TIM_ITRx_SetConfig>
      break;
 8003bb8:	e00c      	b.n	8003bd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	f000 fb8d 	bl	80042e4 <TIM_ITRx_SetConfig>
      break;
 8003bca:	e003      	b.n	8003bd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd0:	e000      	b.n	8003bd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr

08003c12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a2f      	ldr	r2, [pc, #188]	@ (8003cf4 <TIM_Base_SetConfig+0xd0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00b      	beq.n	8003c54 <TIM_Base_SetConfig+0x30>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c42:	d007      	beq.n	8003c54 <TIM_Base_SetConfig+0x30>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a2c      	ldr	r2, [pc, #176]	@ (8003cf8 <TIM_Base_SetConfig+0xd4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d003      	beq.n	8003c54 <TIM_Base_SetConfig+0x30>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a2b      	ldr	r2, [pc, #172]	@ (8003cfc <TIM_Base_SetConfig+0xd8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d108      	bne.n	8003c66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a22      	ldr	r2, [pc, #136]	@ (8003cf4 <TIM_Base_SetConfig+0xd0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00b      	beq.n	8003c86 <TIM_Base_SetConfig+0x62>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c74:	d007      	beq.n	8003c86 <TIM_Base_SetConfig+0x62>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a1f      	ldr	r2, [pc, #124]	@ (8003cf8 <TIM_Base_SetConfig+0xd4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d003      	beq.n	8003c86 <TIM_Base_SetConfig+0x62>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a1e      	ldr	r2, [pc, #120]	@ (8003cfc <TIM_Base_SetConfig+0xd8>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d108      	bne.n	8003c98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8003cf4 <TIM_Base_SetConfig+0xd0>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d103      	bne.n	8003ccc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f023 0201 	bic.w	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	611a      	str	r2, [r3, #16]
  }
}
 8003cea:	bf00      	nop
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	40000800 	.word	0x40000800

08003d00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	f023 0201 	bic.w	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0303 	bic.w	r3, r3, #3
 8003d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f023 0302 	bic.w	r3, r3, #2
 8003d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a1c      	ldr	r2, [pc, #112]	@ (8003dc8 <TIM_OC1_SetConfig+0xc8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d10c      	bne.n	8003d76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f023 0308 	bic.w	r3, r3, #8
 8003d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f023 0304 	bic.w	r3, r3, #4
 8003d74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a13      	ldr	r2, [pc, #76]	@ (8003dc8 <TIM_OC1_SetConfig+0xc8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d111      	bne.n	8003da2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	621a      	str	r2, [r3, #32]
}
 8003dbc:	bf00      	nop
 8003dbe:	371c      	adds	r7, #28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40012c00 	.word	0x40012c00

08003dcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	f023 0210 	bic.w	r2, r3, #16
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	021b      	lsls	r3, r3, #8
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f023 0320 	bic.w	r3, r3, #32
 8003e16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a1d      	ldr	r2, [pc, #116]	@ (8003e9c <TIM_OC2_SetConfig+0xd0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d10d      	bne.n	8003e48 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a14      	ldr	r2, [pc, #80]	@ (8003e9c <TIM_OC2_SetConfig+0xd0>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d113      	bne.n	8003e78 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	621a      	str	r2, [r3, #32]
}
 8003e92:	bf00      	nop
 8003e94:	371c      	adds	r7, #28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr
 8003e9c:	40012c00 	.word	0x40012c00

08003ea0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0303 	bic.w	r3, r3, #3
 8003ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	021b      	lsls	r3, r3, #8
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8003f70 <TIM_OC3_SetConfig+0xd0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d10d      	bne.n	8003f1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a14      	ldr	r2, [pc, #80]	@ (8003f70 <TIM_OC3_SetConfig+0xd0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d113      	bne.n	8003f4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	621a      	str	r2, [r3, #32]
}
 8003f64:	bf00      	nop
 8003f66:	371c      	adds	r7, #28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40012c00 	.word	0x40012c00

08003f74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	021b      	lsls	r3, r3, #8
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	031b      	lsls	r3, r3, #12
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a0f      	ldr	r2, [pc, #60]	@ (800400c <TIM_OC4_SetConfig+0x98>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d109      	bne.n	8003fe8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	019b      	lsls	r3, r3, #6
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	621a      	str	r2, [r3, #32]
}
 8004002:	bf00      	nop
 8004004:	371c      	adds	r7, #28
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr
 800400c:	40012c00 	.word	0x40012c00

08004010 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004010:	b480      	push	{r7}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
 800401c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	f023 0201 	bic.w	r2, r3, #1
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4a1f      	ldr	r2, [pc, #124]	@ (80040b8 <TIM_TI1_SetConfig+0xa8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00b      	beq.n	8004056 <TIM_TI1_SetConfig+0x46>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004044:	d007      	beq.n	8004056 <TIM_TI1_SetConfig+0x46>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4a1c      	ldr	r2, [pc, #112]	@ (80040bc <TIM_TI1_SetConfig+0xac>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d003      	beq.n	8004056 <TIM_TI1_SetConfig+0x46>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4a1b      	ldr	r2, [pc, #108]	@ (80040c0 <TIM_TI1_SetConfig+0xb0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d101      	bne.n	800405a <TIM_TI1_SetConfig+0x4a>
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <TIM_TI1_SetConfig+0x4c>
 800405a:	2300      	movs	r3, #0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d008      	beq.n	8004072 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f023 0303 	bic.w	r3, r3, #3
 8004066:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	e003      	b.n	800407a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004080:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	b2db      	uxtb	r3, r3
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f023 030a 	bic.w	r3, r3, #10
 8004094:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f003 030a 	and.w	r3, r3, #10
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4313      	orrs	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	621a      	str	r2, [r3, #32]
}
 80040ae:	bf00      	nop
 80040b0:	371c      	adds	r7, #28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr
 80040b8:	40012c00 	.word	0x40012c00
 80040bc:	40000400 	.word	0x40000400
 80040c0:	40000800 	.word	0x40000800

080040c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	f023 0201 	bic.w	r2, r3, #1
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f023 030a 	bic.w	r3, r3, #10
 8004100:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4313      	orrs	r3, r2
 8004108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	621a      	str	r2, [r3, #32]
}
 8004116:	bf00      	nop
 8004118:	371c      	adds	r7, #28
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	f023 0210 	bic.w	r2, r3, #16
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800414c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	021b      	lsls	r3, r3, #8
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800415e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	031b      	lsls	r3, r3, #12
 8004164:	b29b      	uxth	r3, r3
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004172:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	621a      	str	r2, [r3, #32]
}
 800418e:	bf00      	nop
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f023 0210 	bic.w	r2, r3, #16
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	031b      	lsls	r3, r3, #12
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4313      	orrs	r3, r2
 80041de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	621a      	str	r2, [r3, #32]
}
 80041ec:	bf00      	nop
 80041ee:	371c      	adds	r7, #28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr

080041f6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b087      	sub	sp, #28
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
 8004202:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f023 0303 	bic.w	r3, r3, #3
 8004222:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4313      	orrs	r3, r2
 800422a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004232:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	b2db      	uxtb	r3, r3
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004246:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	021b      	lsls	r3, r3, #8
 800424c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	621a      	str	r2, [r3, #32]
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr

0800426c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
 8004278:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004298:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	021b      	lsls	r3, r3, #8
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042aa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	031b      	lsls	r3, r3, #12
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	031b      	lsls	r3, r3, #12
 80042c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	621a      	str	r2, [r3, #32]
}
 80042da:	bf00      	nop
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr

080042e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4313      	orrs	r3, r2
 8004302:	f043 0307 	orr.w	r3, r3, #7
 8004306:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	609a      	str	r2, [r3, #8]
}
 800430e:	bf00      	nop
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr

08004318 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
 8004324:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004332:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	021a      	lsls	r2, r3, #8
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	431a      	orrs	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4313      	orrs	r3, r2
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	4313      	orrs	r3, r2
 8004344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	609a      	str	r2, [r3, #8]
}
 800434c:	bf00      	nop
 800434e:	371c      	adds	r7, #28
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr

08004356 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004356:	b480      	push	{r7}
 8004358:	b087      	sub	sp, #28
 800435a:	af00      	add	r7, sp, #0
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	f003 031f 	and.w	r3, r3, #31
 8004368:	2201      	movs	r2, #1
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a1a      	ldr	r2, [r3, #32]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	43db      	mvns	r3, r3
 8004378:	401a      	ands	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a1a      	ldr	r2, [r3, #32]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f003 031f 	and.w	r3, r3, #31
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	fa01 f303 	lsl.w	r3, r1, r3
 800438e:	431a      	orrs	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	621a      	str	r2, [r3, #32]
}
 8004394:	bf00      	nop
 8004396:	371c      	adds	r7, #28
 8004398:	46bd      	mov	sp, r7
 800439a:	bc80      	pop	{r7}
 800439c:	4770      	bx	lr
	...

080043a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d101      	bne.n	80043b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043b4:	2302      	movs	r3, #2
 80043b6:	e046      	b.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a16      	ldr	r2, [pc, #88]	@ (8004450 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00e      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004404:	d009      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a12      	ldr	r2, [pc, #72]	@ (8004454 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d004      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a10      	ldr	r2, [pc, #64]	@ (8004458 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d10c      	bne.n	8004434 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004420:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	4313      	orrs	r3, r2
 800442a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr
 8004450:	40012c00 	.word	0x40012c00
 8004454:	40000400 	.word	0x40000400
 8004458:	40000800 	.word	0x40000800

0800445c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004474:	2302      	movs	r3, #2
 8004476:	e03d      	b.n	80044f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bc80      	pop	{r7}
 80044fc:	4770      	bx	lr

080044fe <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr

08004510 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	bc80      	pop	{r7}
 8004520:	4770      	bx	lr

08004522 <__cvt>:
 8004522:	2b00      	cmp	r3, #0
 8004524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004528:	461d      	mov	r5, r3
 800452a:	bfbb      	ittet	lt
 800452c:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004530:	461d      	movlt	r5, r3
 8004532:	2300      	movge	r3, #0
 8004534:	232d      	movlt	r3, #45	@ 0x2d
 8004536:	b088      	sub	sp, #32
 8004538:	4614      	mov	r4, r2
 800453a:	bfb8      	it	lt
 800453c:	4614      	movlt	r4, r2
 800453e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004540:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004542:	7013      	strb	r3, [r2, #0]
 8004544:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004546:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800454a:	f023 0820 	bic.w	r8, r3, #32
 800454e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004552:	d005      	beq.n	8004560 <__cvt+0x3e>
 8004554:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004558:	d100      	bne.n	800455c <__cvt+0x3a>
 800455a:	3601      	adds	r6, #1
 800455c:	2302      	movs	r3, #2
 800455e:	e000      	b.n	8004562 <__cvt+0x40>
 8004560:	2303      	movs	r3, #3
 8004562:	aa07      	add	r2, sp, #28
 8004564:	9204      	str	r2, [sp, #16]
 8004566:	aa06      	add	r2, sp, #24
 8004568:	e9cd a202 	strd	sl, r2, [sp, #8]
 800456c:	e9cd 3600 	strd	r3, r6, [sp]
 8004570:	4622      	mov	r2, r4
 8004572:	462b      	mov	r3, r5
 8004574:	f001 f884 	bl	8005680 <_dtoa_r>
 8004578:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800457c:	4607      	mov	r7, r0
 800457e:	d119      	bne.n	80045b4 <__cvt+0x92>
 8004580:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004582:	07db      	lsls	r3, r3, #31
 8004584:	d50e      	bpl.n	80045a4 <__cvt+0x82>
 8004586:	eb00 0906 	add.w	r9, r0, r6
 800458a:	2200      	movs	r2, #0
 800458c:	2300      	movs	r3, #0
 800458e:	4620      	mov	r0, r4
 8004590:	4629      	mov	r1, r5
 8004592:	f7fc fa09 	bl	80009a8 <__aeabi_dcmpeq>
 8004596:	b108      	cbz	r0, 800459c <__cvt+0x7a>
 8004598:	f8cd 901c 	str.w	r9, [sp, #28]
 800459c:	2230      	movs	r2, #48	@ 0x30
 800459e:	9b07      	ldr	r3, [sp, #28]
 80045a0:	454b      	cmp	r3, r9
 80045a2:	d31e      	bcc.n	80045e2 <__cvt+0xc0>
 80045a4:	4638      	mov	r0, r7
 80045a6:	9b07      	ldr	r3, [sp, #28]
 80045a8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80045aa:	1bdb      	subs	r3, r3, r7
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	b008      	add	sp, #32
 80045b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80045b8:	eb00 0906 	add.w	r9, r0, r6
 80045bc:	d1e5      	bne.n	800458a <__cvt+0x68>
 80045be:	7803      	ldrb	r3, [r0, #0]
 80045c0:	2b30      	cmp	r3, #48	@ 0x30
 80045c2:	d10a      	bne.n	80045da <__cvt+0xb8>
 80045c4:	2200      	movs	r2, #0
 80045c6:	2300      	movs	r3, #0
 80045c8:	4620      	mov	r0, r4
 80045ca:	4629      	mov	r1, r5
 80045cc:	f7fc f9ec 	bl	80009a8 <__aeabi_dcmpeq>
 80045d0:	b918      	cbnz	r0, 80045da <__cvt+0xb8>
 80045d2:	f1c6 0601 	rsb	r6, r6, #1
 80045d6:	f8ca 6000 	str.w	r6, [sl]
 80045da:	f8da 3000 	ldr.w	r3, [sl]
 80045de:	4499      	add	r9, r3
 80045e0:	e7d3      	b.n	800458a <__cvt+0x68>
 80045e2:	1c59      	adds	r1, r3, #1
 80045e4:	9107      	str	r1, [sp, #28]
 80045e6:	701a      	strb	r2, [r3, #0]
 80045e8:	e7d9      	b.n	800459e <__cvt+0x7c>

080045ea <__exponent>:
 80045ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045ec:	2900      	cmp	r1, #0
 80045ee:	bfb6      	itet	lt
 80045f0:	232d      	movlt	r3, #45	@ 0x2d
 80045f2:	232b      	movge	r3, #43	@ 0x2b
 80045f4:	4249      	neglt	r1, r1
 80045f6:	2909      	cmp	r1, #9
 80045f8:	7002      	strb	r2, [r0, #0]
 80045fa:	7043      	strb	r3, [r0, #1]
 80045fc:	dd29      	ble.n	8004652 <__exponent+0x68>
 80045fe:	f10d 0307 	add.w	r3, sp, #7
 8004602:	461d      	mov	r5, r3
 8004604:	270a      	movs	r7, #10
 8004606:	fbb1 f6f7 	udiv	r6, r1, r7
 800460a:	461a      	mov	r2, r3
 800460c:	fb07 1416 	mls	r4, r7, r6, r1
 8004610:	3430      	adds	r4, #48	@ 0x30
 8004612:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004616:	460c      	mov	r4, r1
 8004618:	2c63      	cmp	r4, #99	@ 0x63
 800461a:	4631      	mov	r1, r6
 800461c:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004620:	dcf1      	bgt.n	8004606 <__exponent+0x1c>
 8004622:	3130      	adds	r1, #48	@ 0x30
 8004624:	1e94      	subs	r4, r2, #2
 8004626:	f803 1c01 	strb.w	r1, [r3, #-1]
 800462a:	4623      	mov	r3, r4
 800462c:	1c41      	adds	r1, r0, #1
 800462e:	42ab      	cmp	r3, r5
 8004630:	d30a      	bcc.n	8004648 <__exponent+0x5e>
 8004632:	f10d 0309 	add.w	r3, sp, #9
 8004636:	1a9b      	subs	r3, r3, r2
 8004638:	42ac      	cmp	r4, r5
 800463a:	bf88      	it	hi
 800463c:	2300      	movhi	r3, #0
 800463e:	3302      	adds	r3, #2
 8004640:	4403      	add	r3, r0
 8004642:	1a18      	subs	r0, r3, r0
 8004644:	b003      	add	sp, #12
 8004646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004648:	f813 6b01 	ldrb.w	r6, [r3], #1
 800464c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004650:	e7ed      	b.n	800462e <__exponent+0x44>
 8004652:	2330      	movs	r3, #48	@ 0x30
 8004654:	3130      	adds	r1, #48	@ 0x30
 8004656:	7083      	strb	r3, [r0, #2]
 8004658:	70c1      	strb	r1, [r0, #3]
 800465a:	1d03      	adds	r3, r0, #4
 800465c:	e7f1      	b.n	8004642 <__exponent+0x58>
	...

08004660 <_printf_float>:
 8004660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004664:	b091      	sub	sp, #68	@ 0x44
 8004666:	460c      	mov	r4, r1
 8004668:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800466c:	4616      	mov	r6, r2
 800466e:	461f      	mov	r7, r3
 8004670:	4605      	mov	r5, r0
 8004672:	f000 fef1 	bl	8005458 <_localeconv_r>
 8004676:	6803      	ldr	r3, [r0, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	9308      	str	r3, [sp, #32]
 800467c:	f7fb fd68 	bl	8000150 <strlen>
 8004680:	2300      	movs	r3, #0
 8004682:	930e      	str	r3, [sp, #56]	@ 0x38
 8004684:	f8d8 3000 	ldr.w	r3, [r8]
 8004688:	9009      	str	r0, [sp, #36]	@ 0x24
 800468a:	3307      	adds	r3, #7
 800468c:	f023 0307 	bic.w	r3, r3, #7
 8004690:	f103 0208 	add.w	r2, r3, #8
 8004694:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004698:	f8d4 b000 	ldr.w	fp, [r4]
 800469c:	f8c8 2000 	str.w	r2, [r8]
 80046a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80046a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80046a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80046aa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80046ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80046b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80046b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80046ba:	4b9c      	ldr	r3, [pc, #624]	@ (800492c <_printf_float+0x2cc>)
 80046bc:	f7fc f9a6 	bl	8000a0c <__aeabi_dcmpun>
 80046c0:	bb70      	cbnz	r0, 8004720 <_printf_float+0xc0>
 80046c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80046c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80046ca:	4b98      	ldr	r3, [pc, #608]	@ (800492c <_printf_float+0x2cc>)
 80046cc:	f7fc f980 	bl	80009d0 <__aeabi_dcmple>
 80046d0:	bb30      	cbnz	r0, 8004720 <_printf_float+0xc0>
 80046d2:	2200      	movs	r2, #0
 80046d4:	2300      	movs	r3, #0
 80046d6:	4640      	mov	r0, r8
 80046d8:	4649      	mov	r1, r9
 80046da:	f7fc f96f 	bl	80009bc <__aeabi_dcmplt>
 80046de:	b110      	cbz	r0, 80046e6 <_printf_float+0x86>
 80046e0:	232d      	movs	r3, #45	@ 0x2d
 80046e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046e6:	4a92      	ldr	r2, [pc, #584]	@ (8004930 <_printf_float+0x2d0>)
 80046e8:	4b92      	ldr	r3, [pc, #584]	@ (8004934 <_printf_float+0x2d4>)
 80046ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80046ee:	bf94      	ite	ls
 80046f0:	4690      	movls	r8, r2
 80046f2:	4698      	movhi	r8, r3
 80046f4:	2303      	movs	r3, #3
 80046f6:	f04f 0900 	mov.w	r9, #0
 80046fa:	6123      	str	r3, [r4, #16]
 80046fc:	f02b 0304 	bic.w	r3, fp, #4
 8004700:	6023      	str	r3, [r4, #0]
 8004702:	4633      	mov	r3, r6
 8004704:	4621      	mov	r1, r4
 8004706:	4628      	mov	r0, r5
 8004708:	9700      	str	r7, [sp, #0]
 800470a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800470c:	f000 f9d4 	bl	8004ab8 <_printf_common>
 8004710:	3001      	adds	r0, #1
 8004712:	f040 8090 	bne.w	8004836 <_printf_float+0x1d6>
 8004716:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800471a:	b011      	add	sp, #68	@ 0x44
 800471c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004720:	4642      	mov	r2, r8
 8004722:	464b      	mov	r3, r9
 8004724:	4640      	mov	r0, r8
 8004726:	4649      	mov	r1, r9
 8004728:	f7fc f970 	bl	8000a0c <__aeabi_dcmpun>
 800472c:	b148      	cbz	r0, 8004742 <_printf_float+0xe2>
 800472e:	464b      	mov	r3, r9
 8004730:	2b00      	cmp	r3, #0
 8004732:	bfb8      	it	lt
 8004734:	232d      	movlt	r3, #45	@ 0x2d
 8004736:	4a80      	ldr	r2, [pc, #512]	@ (8004938 <_printf_float+0x2d8>)
 8004738:	bfb8      	it	lt
 800473a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800473e:	4b7f      	ldr	r3, [pc, #508]	@ (800493c <_printf_float+0x2dc>)
 8004740:	e7d3      	b.n	80046ea <_printf_float+0x8a>
 8004742:	6863      	ldr	r3, [r4, #4]
 8004744:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	d13f      	bne.n	80047cc <_printf_float+0x16c>
 800474c:	2306      	movs	r3, #6
 800474e:	6063      	str	r3, [r4, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004756:	6023      	str	r3, [r4, #0]
 8004758:	9206      	str	r2, [sp, #24]
 800475a:	aa0e      	add	r2, sp, #56	@ 0x38
 800475c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004760:	aa0d      	add	r2, sp, #52	@ 0x34
 8004762:	9203      	str	r2, [sp, #12]
 8004764:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004768:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800476c:	6863      	ldr	r3, [r4, #4]
 800476e:	4642      	mov	r2, r8
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	4628      	mov	r0, r5
 8004774:	464b      	mov	r3, r9
 8004776:	910a      	str	r1, [sp, #40]	@ 0x28
 8004778:	f7ff fed3 	bl	8004522 <__cvt>
 800477c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800477e:	4680      	mov	r8, r0
 8004780:	2947      	cmp	r1, #71	@ 0x47
 8004782:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004784:	d128      	bne.n	80047d8 <_printf_float+0x178>
 8004786:	1cc8      	adds	r0, r1, #3
 8004788:	db02      	blt.n	8004790 <_printf_float+0x130>
 800478a:	6863      	ldr	r3, [r4, #4]
 800478c:	4299      	cmp	r1, r3
 800478e:	dd40      	ble.n	8004812 <_printf_float+0x1b2>
 8004790:	f1aa 0a02 	sub.w	sl, sl, #2
 8004794:	fa5f fa8a 	uxtb.w	sl, sl
 8004798:	4652      	mov	r2, sl
 800479a:	3901      	subs	r1, #1
 800479c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80047a0:	910d      	str	r1, [sp, #52]	@ 0x34
 80047a2:	f7ff ff22 	bl	80045ea <__exponent>
 80047a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80047a8:	4681      	mov	r9, r0
 80047aa:	1813      	adds	r3, r2, r0
 80047ac:	2a01      	cmp	r2, #1
 80047ae:	6123      	str	r3, [r4, #16]
 80047b0:	dc02      	bgt.n	80047b8 <_printf_float+0x158>
 80047b2:	6822      	ldr	r2, [r4, #0]
 80047b4:	07d2      	lsls	r2, r2, #31
 80047b6:	d501      	bpl.n	80047bc <_printf_float+0x15c>
 80047b8:	3301      	adds	r3, #1
 80047ba:	6123      	str	r3, [r4, #16]
 80047bc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d09e      	beq.n	8004702 <_printf_float+0xa2>
 80047c4:	232d      	movs	r3, #45	@ 0x2d
 80047c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047ca:	e79a      	b.n	8004702 <_printf_float+0xa2>
 80047cc:	2947      	cmp	r1, #71	@ 0x47
 80047ce:	d1bf      	bne.n	8004750 <_printf_float+0xf0>
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1bd      	bne.n	8004750 <_printf_float+0xf0>
 80047d4:	2301      	movs	r3, #1
 80047d6:	e7ba      	b.n	800474e <_printf_float+0xee>
 80047d8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80047dc:	d9dc      	bls.n	8004798 <_printf_float+0x138>
 80047de:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80047e2:	d118      	bne.n	8004816 <_printf_float+0x1b6>
 80047e4:	2900      	cmp	r1, #0
 80047e6:	6863      	ldr	r3, [r4, #4]
 80047e8:	dd0b      	ble.n	8004802 <_printf_float+0x1a2>
 80047ea:	6121      	str	r1, [r4, #16]
 80047ec:	b913      	cbnz	r3, 80047f4 <_printf_float+0x194>
 80047ee:	6822      	ldr	r2, [r4, #0]
 80047f0:	07d0      	lsls	r0, r2, #31
 80047f2:	d502      	bpl.n	80047fa <_printf_float+0x19a>
 80047f4:	3301      	adds	r3, #1
 80047f6:	440b      	add	r3, r1
 80047f8:	6123      	str	r3, [r4, #16]
 80047fa:	f04f 0900 	mov.w	r9, #0
 80047fe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004800:	e7dc      	b.n	80047bc <_printf_float+0x15c>
 8004802:	b913      	cbnz	r3, 800480a <_printf_float+0x1aa>
 8004804:	6822      	ldr	r2, [r4, #0]
 8004806:	07d2      	lsls	r2, r2, #31
 8004808:	d501      	bpl.n	800480e <_printf_float+0x1ae>
 800480a:	3302      	adds	r3, #2
 800480c:	e7f4      	b.n	80047f8 <_printf_float+0x198>
 800480e:	2301      	movs	r3, #1
 8004810:	e7f2      	b.n	80047f8 <_printf_float+0x198>
 8004812:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004816:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004818:	4299      	cmp	r1, r3
 800481a:	db05      	blt.n	8004828 <_printf_float+0x1c8>
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	6121      	str	r1, [r4, #16]
 8004820:	07d8      	lsls	r0, r3, #31
 8004822:	d5ea      	bpl.n	80047fa <_printf_float+0x19a>
 8004824:	1c4b      	adds	r3, r1, #1
 8004826:	e7e7      	b.n	80047f8 <_printf_float+0x198>
 8004828:	2900      	cmp	r1, #0
 800482a:	bfcc      	ite	gt
 800482c:	2201      	movgt	r2, #1
 800482e:	f1c1 0202 	rsble	r2, r1, #2
 8004832:	4413      	add	r3, r2
 8004834:	e7e0      	b.n	80047f8 <_printf_float+0x198>
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	055a      	lsls	r2, r3, #21
 800483a:	d407      	bmi.n	800484c <_printf_float+0x1ec>
 800483c:	6923      	ldr	r3, [r4, #16]
 800483e:	4642      	mov	r2, r8
 8004840:	4631      	mov	r1, r6
 8004842:	4628      	mov	r0, r5
 8004844:	47b8      	blx	r7
 8004846:	3001      	adds	r0, #1
 8004848:	d12b      	bne.n	80048a2 <_printf_float+0x242>
 800484a:	e764      	b.n	8004716 <_printf_float+0xb6>
 800484c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004850:	f240 80dc 	bls.w	8004a0c <_printf_float+0x3ac>
 8004854:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004858:	2200      	movs	r2, #0
 800485a:	2300      	movs	r3, #0
 800485c:	f7fc f8a4 	bl	80009a8 <__aeabi_dcmpeq>
 8004860:	2800      	cmp	r0, #0
 8004862:	d033      	beq.n	80048cc <_printf_float+0x26c>
 8004864:	2301      	movs	r3, #1
 8004866:	4631      	mov	r1, r6
 8004868:	4628      	mov	r0, r5
 800486a:	4a35      	ldr	r2, [pc, #212]	@ (8004940 <_printf_float+0x2e0>)
 800486c:	47b8      	blx	r7
 800486e:	3001      	adds	r0, #1
 8004870:	f43f af51 	beq.w	8004716 <_printf_float+0xb6>
 8004874:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004878:	4543      	cmp	r3, r8
 800487a:	db02      	blt.n	8004882 <_printf_float+0x222>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	07d8      	lsls	r0, r3, #31
 8004880:	d50f      	bpl.n	80048a2 <_printf_float+0x242>
 8004882:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004886:	4631      	mov	r1, r6
 8004888:	4628      	mov	r0, r5
 800488a:	47b8      	blx	r7
 800488c:	3001      	adds	r0, #1
 800488e:	f43f af42 	beq.w	8004716 <_printf_float+0xb6>
 8004892:	f04f 0900 	mov.w	r9, #0
 8004896:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800489a:	f104 0a1a 	add.w	sl, r4, #26
 800489e:	45c8      	cmp	r8, r9
 80048a0:	dc09      	bgt.n	80048b6 <_printf_float+0x256>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	079b      	lsls	r3, r3, #30
 80048a6:	f100 8102 	bmi.w	8004aae <_printf_float+0x44e>
 80048aa:	68e0      	ldr	r0, [r4, #12]
 80048ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80048ae:	4298      	cmp	r0, r3
 80048b0:	bfb8      	it	lt
 80048b2:	4618      	movlt	r0, r3
 80048b4:	e731      	b.n	800471a <_printf_float+0xba>
 80048b6:	2301      	movs	r3, #1
 80048b8:	4652      	mov	r2, sl
 80048ba:	4631      	mov	r1, r6
 80048bc:	4628      	mov	r0, r5
 80048be:	47b8      	blx	r7
 80048c0:	3001      	adds	r0, #1
 80048c2:	f43f af28 	beq.w	8004716 <_printf_float+0xb6>
 80048c6:	f109 0901 	add.w	r9, r9, #1
 80048ca:	e7e8      	b.n	800489e <_printf_float+0x23e>
 80048cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	dc38      	bgt.n	8004944 <_printf_float+0x2e4>
 80048d2:	2301      	movs	r3, #1
 80048d4:	4631      	mov	r1, r6
 80048d6:	4628      	mov	r0, r5
 80048d8:	4a19      	ldr	r2, [pc, #100]	@ (8004940 <_printf_float+0x2e0>)
 80048da:	47b8      	blx	r7
 80048dc:	3001      	adds	r0, #1
 80048de:	f43f af1a 	beq.w	8004716 <_printf_float+0xb6>
 80048e2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80048e6:	ea59 0303 	orrs.w	r3, r9, r3
 80048ea:	d102      	bne.n	80048f2 <_printf_float+0x292>
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	07d9      	lsls	r1, r3, #31
 80048f0:	d5d7      	bpl.n	80048a2 <_printf_float+0x242>
 80048f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80048f6:	4631      	mov	r1, r6
 80048f8:	4628      	mov	r0, r5
 80048fa:	47b8      	blx	r7
 80048fc:	3001      	adds	r0, #1
 80048fe:	f43f af0a 	beq.w	8004716 <_printf_float+0xb6>
 8004902:	f04f 0a00 	mov.w	sl, #0
 8004906:	f104 0b1a 	add.w	fp, r4, #26
 800490a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800490c:	425b      	negs	r3, r3
 800490e:	4553      	cmp	r3, sl
 8004910:	dc01      	bgt.n	8004916 <_printf_float+0x2b6>
 8004912:	464b      	mov	r3, r9
 8004914:	e793      	b.n	800483e <_printf_float+0x1de>
 8004916:	2301      	movs	r3, #1
 8004918:	465a      	mov	r2, fp
 800491a:	4631      	mov	r1, r6
 800491c:	4628      	mov	r0, r5
 800491e:	47b8      	blx	r7
 8004920:	3001      	adds	r0, #1
 8004922:	f43f aef8 	beq.w	8004716 <_printf_float+0xb6>
 8004926:	f10a 0a01 	add.w	sl, sl, #1
 800492a:	e7ee      	b.n	800490a <_printf_float+0x2aa>
 800492c:	7fefffff 	.word	0x7fefffff
 8004930:	08008c1a 	.word	0x08008c1a
 8004934:	08008c1e 	.word	0x08008c1e
 8004938:	08008c22 	.word	0x08008c22
 800493c:	08008c26 	.word	0x08008c26
 8004940:	08008c2a 	.word	0x08008c2a
 8004944:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004946:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800494a:	4553      	cmp	r3, sl
 800494c:	bfa8      	it	ge
 800494e:	4653      	movge	r3, sl
 8004950:	2b00      	cmp	r3, #0
 8004952:	4699      	mov	r9, r3
 8004954:	dc36      	bgt.n	80049c4 <_printf_float+0x364>
 8004956:	f04f 0b00 	mov.w	fp, #0
 800495a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800495e:	f104 021a 	add.w	r2, r4, #26
 8004962:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004964:	930a      	str	r3, [sp, #40]	@ 0x28
 8004966:	eba3 0309 	sub.w	r3, r3, r9
 800496a:	455b      	cmp	r3, fp
 800496c:	dc31      	bgt.n	80049d2 <_printf_float+0x372>
 800496e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004970:	459a      	cmp	sl, r3
 8004972:	dc3a      	bgt.n	80049ea <_printf_float+0x38a>
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	07da      	lsls	r2, r3, #31
 8004978:	d437      	bmi.n	80049ea <_printf_float+0x38a>
 800497a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800497c:	ebaa 0903 	sub.w	r9, sl, r3
 8004980:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004982:	ebaa 0303 	sub.w	r3, sl, r3
 8004986:	4599      	cmp	r9, r3
 8004988:	bfa8      	it	ge
 800498a:	4699      	movge	r9, r3
 800498c:	f1b9 0f00 	cmp.w	r9, #0
 8004990:	dc33      	bgt.n	80049fa <_printf_float+0x39a>
 8004992:	f04f 0800 	mov.w	r8, #0
 8004996:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800499a:	f104 0b1a 	add.w	fp, r4, #26
 800499e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049a0:	ebaa 0303 	sub.w	r3, sl, r3
 80049a4:	eba3 0309 	sub.w	r3, r3, r9
 80049a8:	4543      	cmp	r3, r8
 80049aa:	f77f af7a 	ble.w	80048a2 <_printf_float+0x242>
 80049ae:	2301      	movs	r3, #1
 80049b0:	465a      	mov	r2, fp
 80049b2:	4631      	mov	r1, r6
 80049b4:	4628      	mov	r0, r5
 80049b6:	47b8      	blx	r7
 80049b8:	3001      	adds	r0, #1
 80049ba:	f43f aeac 	beq.w	8004716 <_printf_float+0xb6>
 80049be:	f108 0801 	add.w	r8, r8, #1
 80049c2:	e7ec      	b.n	800499e <_printf_float+0x33e>
 80049c4:	4642      	mov	r2, r8
 80049c6:	4631      	mov	r1, r6
 80049c8:	4628      	mov	r0, r5
 80049ca:	47b8      	blx	r7
 80049cc:	3001      	adds	r0, #1
 80049ce:	d1c2      	bne.n	8004956 <_printf_float+0x2f6>
 80049d0:	e6a1      	b.n	8004716 <_printf_float+0xb6>
 80049d2:	2301      	movs	r3, #1
 80049d4:	4631      	mov	r1, r6
 80049d6:	4628      	mov	r0, r5
 80049d8:	920a      	str	r2, [sp, #40]	@ 0x28
 80049da:	47b8      	blx	r7
 80049dc:	3001      	adds	r0, #1
 80049de:	f43f ae9a 	beq.w	8004716 <_printf_float+0xb6>
 80049e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80049e4:	f10b 0b01 	add.w	fp, fp, #1
 80049e8:	e7bb      	b.n	8004962 <_printf_float+0x302>
 80049ea:	4631      	mov	r1, r6
 80049ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80049f0:	4628      	mov	r0, r5
 80049f2:	47b8      	blx	r7
 80049f4:	3001      	adds	r0, #1
 80049f6:	d1c0      	bne.n	800497a <_printf_float+0x31a>
 80049f8:	e68d      	b.n	8004716 <_printf_float+0xb6>
 80049fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80049fc:	464b      	mov	r3, r9
 80049fe:	4631      	mov	r1, r6
 8004a00:	4628      	mov	r0, r5
 8004a02:	4442      	add	r2, r8
 8004a04:	47b8      	blx	r7
 8004a06:	3001      	adds	r0, #1
 8004a08:	d1c3      	bne.n	8004992 <_printf_float+0x332>
 8004a0a:	e684      	b.n	8004716 <_printf_float+0xb6>
 8004a0c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004a10:	f1ba 0f01 	cmp.w	sl, #1
 8004a14:	dc01      	bgt.n	8004a1a <_printf_float+0x3ba>
 8004a16:	07db      	lsls	r3, r3, #31
 8004a18:	d536      	bpl.n	8004a88 <_printf_float+0x428>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	4642      	mov	r2, r8
 8004a1e:	4631      	mov	r1, r6
 8004a20:	4628      	mov	r0, r5
 8004a22:	47b8      	blx	r7
 8004a24:	3001      	adds	r0, #1
 8004a26:	f43f ae76 	beq.w	8004716 <_printf_float+0xb6>
 8004a2a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a2e:	4631      	mov	r1, r6
 8004a30:	4628      	mov	r0, r5
 8004a32:	47b8      	blx	r7
 8004a34:	3001      	adds	r0, #1
 8004a36:	f43f ae6e 	beq.w	8004716 <_printf_float+0xb6>
 8004a3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a3e:	2200      	movs	r2, #0
 8004a40:	2300      	movs	r3, #0
 8004a42:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004a46:	f7fb ffaf 	bl	80009a8 <__aeabi_dcmpeq>
 8004a4a:	b9c0      	cbnz	r0, 8004a7e <_printf_float+0x41e>
 8004a4c:	4653      	mov	r3, sl
 8004a4e:	f108 0201 	add.w	r2, r8, #1
 8004a52:	4631      	mov	r1, r6
 8004a54:	4628      	mov	r0, r5
 8004a56:	47b8      	blx	r7
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d10c      	bne.n	8004a76 <_printf_float+0x416>
 8004a5c:	e65b      	b.n	8004716 <_printf_float+0xb6>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	465a      	mov	r2, fp
 8004a62:	4631      	mov	r1, r6
 8004a64:	4628      	mov	r0, r5
 8004a66:	47b8      	blx	r7
 8004a68:	3001      	adds	r0, #1
 8004a6a:	f43f ae54 	beq.w	8004716 <_printf_float+0xb6>
 8004a6e:	f108 0801 	add.w	r8, r8, #1
 8004a72:	45d0      	cmp	r8, sl
 8004a74:	dbf3      	blt.n	8004a5e <_printf_float+0x3fe>
 8004a76:	464b      	mov	r3, r9
 8004a78:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004a7c:	e6e0      	b.n	8004840 <_printf_float+0x1e0>
 8004a7e:	f04f 0800 	mov.w	r8, #0
 8004a82:	f104 0b1a 	add.w	fp, r4, #26
 8004a86:	e7f4      	b.n	8004a72 <_printf_float+0x412>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	4642      	mov	r2, r8
 8004a8c:	e7e1      	b.n	8004a52 <_printf_float+0x3f2>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	464a      	mov	r2, r9
 8004a92:	4631      	mov	r1, r6
 8004a94:	4628      	mov	r0, r5
 8004a96:	47b8      	blx	r7
 8004a98:	3001      	adds	r0, #1
 8004a9a:	f43f ae3c 	beq.w	8004716 <_printf_float+0xb6>
 8004a9e:	f108 0801 	add.w	r8, r8, #1
 8004aa2:	68e3      	ldr	r3, [r4, #12]
 8004aa4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004aa6:	1a5b      	subs	r3, r3, r1
 8004aa8:	4543      	cmp	r3, r8
 8004aaa:	dcf0      	bgt.n	8004a8e <_printf_float+0x42e>
 8004aac:	e6fd      	b.n	80048aa <_printf_float+0x24a>
 8004aae:	f04f 0800 	mov.w	r8, #0
 8004ab2:	f104 0919 	add.w	r9, r4, #25
 8004ab6:	e7f4      	b.n	8004aa2 <_printf_float+0x442>

08004ab8 <_printf_common>:
 8004ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004abc:	4616      	mov	r6, r2
 8004abe:	4698      	mov	r8, r3
 8004ac0:	688a      	ldr	r2, [r1, #8]
 8004ac2:	690b      	ldr	r3, [r1, #16]
 8004ac4:	4607      	mov	r7, r0
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	bfb8      	it	lt
 8004aca:	4613      	movlt	r3, r2
 8004acc:	6033      	str	r3, [r6, #0]
 8004ace:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ad2:	460c      	mov	r4, r1
 8004ad4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ad8:	b10a      	cbz	r2, 8004ade <_printf_common+0x26>
 8004ada:	3301      	adds	r3, #1
 8004adc:	6033      	str	r3, [r6, #0]
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	0699      	lsls	r1, r3, #26
 8004ae2:	bf42      	ittt	mi
 8004ae4:	6833      	ldrmi	r3, [r6, #0]
 8004ae6:	3302      	addmi	r3, #2
 8004ae8:	6033      	strmi	r3, [r6, #0]
 8004aea:	6825      	ldr	r5, [r4, #0]
 8004aec:	f015 0506 	ands.w	r5, r5, #6
 8004af0:	d106      	bne.n	8004b00 <_printf_common+0x48>
 8004af2:	f104 0a19 	add.w	sl, r4, #25
 8004af6:	68e3      	ldr	r3, [r4, #12]
 8004af8:	6832      	ldr	r2, [r6, #0]
 8004afa:	1a9b      	subs	r3, r3, r2
 8004afc:	42ab      	cmp	r3, r5
 8004afe:	dc2b      	bgt.n	8004b58 <_printf_common+0xa0>
 8004b00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b04:	6822      	ldr	r2, [r4, #0]
 8004b06:	3b00      	subs	r3, #0
 8004b08:	bf18      	it	ne
 8004b0a:	2301      	movne	r3, #1
 8004b0c:	0692      	lsls	r2, r2, #26
 8004b0e:	d430      	bmi.n	8004b72 <_printf_common+0xba>
 8004b10:	4641      	mov	r1, r8
 8004b12:	4638      	mov	r0, r7
 8004b14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b18:	47c8      	blx	r9
 8004b1a:	3001      	adds	r0, #1
 8004b1c:	d023      	beq.n	8004b66 <_printf_common+0xae>
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	6922      	ldr	r2, [r4, #16]
 8004b22:	f003 0306 	and.w	r3, r3, #6
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	bf14      	ite	ne
 8004b2a:	2500      	movne	r5, #0
 8004b2c:	6833      	ldreq	r3, [r6, #0]
 8004b2e:	f04f 0600 	mov.w	r6, #0
 8004b32:	bf08      	it	eq
 8004b34:	68e5      	ldreq	r5, [r4, #12]
 8004b36:	f104 041a 	add.w	r4, r4, #26
 8004b3a:	bf08      	it	eq
 8004b3c:	1aed      	subeq	r5, r5, r3
 8004b3e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004b42:	bf08      	it	eq
 8004b44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	bfc4      	itt	gt
 8004b4c:	1a9b      	subgt	r3, r3, r2
 8004b4e:	18ed      	addgt	r5, r5, r3
 8004b50:	42b5      	cmp	r5, r6
 8004b52:	d11a      	bne.n	8004b8a <_printf_common+0xd2>
 8004b54:	2000      	movs	r0, #0
 8004b56:	e008      	b.n	8004b6a <_printf_common+0xb2>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	4652      	mov	r2, sl
 8004b5c:	4641      	mov	r1, r8
 8004b5e:	4638      	mov	r0, r7
 8004b60:	47c8      	blx	r9
 8004b62:	3001      	adds	r0, #1
 8004b64:	d103      	bne.n	8004b6e <_printf_common+0xb6>
 8004b66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b6e:	3501      	adds	r5, #1
 8004b70:	e7c1      	b.n	8004af6 <_printf_common+0x3e>
 8004b72:	2030      	movs	r0, #48	@ 0x30
 8004b74:	18e1      	adds	r1, r4, r3
 8004b76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b80:	4422      	add	r2, r4
 8004b82:	3302      	adds	r3, #2
 8004b84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b88:	e7c2      	b.n	8004b10 <_printf_common+0x58>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	4622      	mov	r2, r4
 8004b8e:	4641      	mov	r1, r8
 8004b90:	4638      	mov	r0, r7
 8004b92:	47c8      	blx	r9
 8004b94:	3001      	adds	r0, #1
 8004b96:	d0e6      	beq.n	8004b66 <_printf_common+0xae>
 8004b98:	3601      	adds	r6, #1
 8004b9a:	e7d9      	b.n	8004b50 <_printf_common+0x98>

08004b9c <_printf_i>:
 8004b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba0:	7e0f      	ldrb	r7, [r1, #24]
 8004ba2:	4691      	mov	r9, r2
 8004ba4:	2f78      	cmp	r7, #120	@ 0x78
 8004ba6:	4680      	mov	r8, r0
 8004ba8:	460c      	mov	r4, r1
 8004baa:	469a      	mov	sl, r3
 8004bac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004bae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bb2:	d807      	bhi.n	8004bc4 <_printf_i+0x28>
 8004bb4:	2f62      	cmp	r7, #98	@ 0x62
 8004bb6:	d80a      	bhi.n	8004bce <_printf_i+0x32>
 8004bb8:	2f00      	cmp	r7, #0
 8004bba:	f000 80d3 	beq.w	8004d64 <_printf_i+0x1c8>
 8004bbe:	2f58      	cmp	r7, #88	@ 0x58
 8004bc0:	f000 80ba 	beq.w	8004d38 <_printf_i+0x19c>
 8004bc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004bcc:	e03a      	b.n	8004c44 <_printf_i+0xa8>
 8004bce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004bd2:	2b15      	cmp	r3, #21
 8004bd4:	d8f6      	bhi.n	8004bc4 <_printf_i+0x28>
 8004bd6:	a101      	add	r1, pc, #4	@ (adr r1, 8004bdc <_printf_i+0x40>)
 8004bd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bdc:	08004c35 	.word	0x08004c35
 8004be0:	08004c49 	.word	0x08004c49
 8004be4:	08004bc5 	.word	0x08004bc5
 8004be8:	08004bc5 	.word	0x08004bc5
 8004bec:	08004bc5 	.word	0x08004bc5
 8004bf0:	08004bc5 	.word	0x08004bc5
 8004bf4:	08004c49 	.word	0x08004c49
 8004bf8:	08004bc5 	.word	0x08004bc5
 8004bfc:	08004bc5 	.word	0x08004bc5
 8004c00:	08004bc5 	.word	0x08004bc5
 8004c04:	08004bc5 	.word	0x08004bc5
 8004c08:	08004d4b 	.word	0x08004d4b
 8004c0c:	08004c73 	.word	0x08004c73
 8004c10:	08004d05 	.word	0x08004d05
 8004c14:	08004bc5 	.word	0x08004bc5
 8004c18:	08004bc5 	.word	0x08004bc5
 8004c1c:	08004d6d 	.word	0x08004d6d
 8004c20:	08004bc5 	.word	0x08004bc5
 8004c24:	08004c73 	.word	0x08004c73
 8004c28:	08004bc5 	.word	0x08004bc5
 8004c2c:	08004bc5 	.word	0x08004bc5
 8004c30:	08004d0d 	.word	0x08004d0d
 8004c34:	6833      	ldr	r3, [r6, #0]
 8004c36:	1d1a      	adds	r2, r3, #4
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6032      	str	r2, [r6, #0]
 8004c3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c44:	2301      	movs	r3, #1
 8004c46:	e09e      	b.n	8004d86 <_printf_i+0x1ea>
 8004c48:	6833      	ldr	r3, [r6, #0]
 8004c4a:	6820      	ldr	r0, [r4, #0]
 8004c4c:	1d19      	adds	r1, r3, #4
 8004c4e:	6031      	str	r1, [r6, #0]
 8004c50:	0606      	lsls	r6, r0, #24
 8004c52:	d501      	bpl.n	8004c58 <_printf_i+0xbc>
 8004c54:	681d      	ldr	r5, [r3, #0]
 8004c56:	e003      	b.n	8004c60 <_printf_i+0xc4>
 8004c58:	0645      	lsls	r5, r0, #25
 8004c5a:	d5fb      	bpl.n	8004c54 <_printf_i+0xb8>
 8004c5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c60:	2d00      	cmp	r5, #0
 8004c62:	da03      	bge.n	8004c6c <_printf_i+0xd0>
 8004c64:	232d      	movs	r3, #45	@ 0x2d
 8004c66:	426d      	negs	r5, r5
 8004c68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c6c:	230a      	movs	r3, #10
 8004c6e:	4859      	ldr	r0, [pc, #356]	@ (8004dd4 <_printf_i+0x238>)
 8004c70:	e011      	b.n	8004c96 <_printf_i+0xfa>
 8004c72:	6821      	ldr	r1, [r4, #0]
 8004c74:	6833      	ldr	r3, [r6, #0]
 8004c76:	0608      	lsls	r0, r1, #24
 8004c78:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c7c:	d402      	bmi.n	8004c84 <_printf_i+0xe8>
 8004c7e:	0649      	lsls	r1, r1, #25
 8004c80:	bf48      	it	mi
 8004c82:	b2ad      	uxthmi	r5, r5
 8004c84:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c86:	6033      	str	r3, [r6, #0]
 8004c88:	bf14      	ite	ne
 8004c8a:	230a      	movne	r3, #10
 8004c8c:	2308      	moveq	r3, #8
 8004c8e:	4851      	ldr	r0, [pc, #324]	@ (8004dd4 <_printf_i+0x238>)
 8004c90:	2100      	movs	r1, #0
 8004c92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c96:	6866      	ldr	r6, [r4, #4]
 8004c98:	2e00      	cmp	r6, #0
 8004c9a:	bfa8      	it	ge
 8004c9c:	6821      	ldrge	r1, [r4, #0]
 8004c9e:	60a6      	str	r6, [r4, #8]
 8004ca0:	bfa4      	itt	ge
 8004ca2:	f021 0104 	bicge.w	r1, r1, #4
 8004ca6:	6021      	strge	r1, [r4, #0]
 8004ca8:	b90d      	cbnz	r5, 8004cae <_printf_i+0x112>
 8004caa:	2e00      	cmp	r6, #0
 8004cac:	d04b      	beq.n	8004d46 <_printf_i+0x1aa>
 8004cae:	4616      	mov	r6, r2
 8004cb0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cb4:	fb03 5711 	mls	r7, r3, r1, r5
 8004cb8:	5dc7      	ldrb	r7, [r0, r7]
 8004cba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cbe:	462f      	mov	r7, r5
 8004cc0:	42bb      	cmp	r3, r7
 8004cc2:	460d      	mov	r5, r1
 8004cc4:	d9f4      	bls.n	8004cb0 <_printf_i+0x114>
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d10b      	bne.n	8004ce2 <_printf_i+0x146>
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	07df      	lsls	r7, r3, #31
 8004cce:	d508      	bpl.n	8004ce2 <_printf_i+0x146>
 8004cd0:	6923      	ldr	r3, [r4, #16]
 8004cd2:	6861      	ldr	r1, [r4, #4]
 8004cd4:	4299      	cmp	r1, r3
 8004cd6:	bfde      	ittt	le
 8004cd8:	2330      	movle	r3, #48	@ 0x30
 8004cda:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cde:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004ce2:	1b92      	subs	r2, r2, r6
 8004ce4:	6122      	str	r2, [r4, #16]
 8004ce6:	464b      	mov	r3, r9
 8004ce8:	4621      	mov	r1, r4
 8004cea:	4640      	mov	r0, r8
 8004cec:	f8cd a000 	str.w	sl, [sp]
 8004cf0:	aa03      	add	r2, sp, #12
 8004cf2:	f7ff fee1 	bl	8004ab8 <_printf_common>
 8004cf6:	3001      	adds	r0, #1
 8004cf8:	d14a      	bne.n	8004d90 <_printf_i+0x1f4>
 8004cfa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004cfe:	b004      	add	sp, #16
 8004d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	f043 0320 	orr.w	r3, r3, #32
 8004d0a:	6023      	str	r3, [r4, #0]
 8004d0c:	2778      	movs	r7, #120	@ 0x78
 8004d0e:	4832      	ldr	r0, [pc, #200]	@ (8004dd8 <_printf_i+0x23c>)
 8004d10:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	6831      	ldr	r1, [r6, #0]
 8004d18:	061f      	lsls	r7, r3, #24
 8004d1a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d1e:	d402      	bmi.n	8004d26 <_printf_i+0x18a>
 8004d20:	065f      	lsls	r7, r3, #25
 8004d22:	bf48      	it	mi
 8004d24:	b2ad      	uxthmi	r5, r5
 8004d26:	6031      	str	r1, [r6, #0]
 8004d28:	07d9      	lsls	r1, r3, #31
 8004d2a:	bf44      	itt	mi
 8004d2c:	f043 0320 	orrmi.w	r3, r3, #32
 8004d30:	6023      	strmi	r3, [r4, #0]
 8004d32:	b11d      	cbz	r5, 8004d3c <_printf_i+0x1a0>
 8004d34:	2310      	movs	r3, #16
 8004d36:	e7ab      	b.n	8004c90 <_printf_i+0xf4>
 8004d38:	4826      	ldr	r0, [pc, #152]	@ (8004dd4 <_printf_i+0x238>)
 8004d3a:	e7e9      	b.n	8004d10 <_printf_i+0x174>
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	f023 0320 	bic.w	r3, r3, #32
 8004d42:	6023      	str	r3, [r4, #0]
 8004d44:	e7f6      	b.n	8004d34 <_printf_i+0x198>
 8004d46:	4616      	mov	r6, r2
 8004d48:	e7bd      	b.n	8004cc6 <_printf_i+0x12a>
 8004d4a:	6833      	ldr	r3, [r6, #0]
 8004d4c:	6825      	ldr	r5, [r4, #0]
 8004d4e:	1d18      	adds	r0, r3, #4
 8004d50:	6961      	ldr	r1, [r4, #20]
 8004d52:	6030      	str	r0, [r6, #0]
 8004d54:	062e      	lsls	r6, r5, #24
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	d501      	bpl.n	8004d5e <_printf_i+0x1c2>
 8004d5a:	6019      	str	r1, [r3, #0]
 8004d5c:	e002      	b.n	8004d64 <_printf_i+0x1c8>
 8004d5e:	0668      	lsls	r0, r5, #25
 8004d60:	d5fb      	bpl.n	8004d5a <_printf_i+0x1be>
 8004d62:	8019      	strh	r1, [r3, #0]
 8004d64:	2300      	movs	r3, #0
 8004d66:	4616      	mov	r6, r2
 8004d68:	6123      	str	r3, [r4, #16]
 8004d6a:	e7bc      	b.n	8004ce6 <_printf_i+0x14a>
 8004d6c:	6833      	ldr	r3, [r6, #0]
 8004d6e:	2100      	movs	r1, #0
 8004d70:	1d1a      	adds	r2, r3, #4
 8004d72:	6032      	str	r2, [r6, #0]
 8004d74:	681e      	ldr	r6, [r3, #0]
 8004d76:	6862      	ldr	r2, [r4, #4]
 8004d78:	4630      	mov	r0, r6
 8004d7a:	f000 fbe4 	bl	8005546 <memchr>
 8004d7e:	b108      	cbz	r0, 8004d84 <_printf_i+0x1e8>
 8004d80:	1b80      	subs	r0, r0, r6
 8004d82:	6060      	str	r0, [r4, #4]
 8004d84:	6863      	ldr	r3, [r4, #4]
 8004d86:	6123      	str	r3, [r4, #16]
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d8e:	e7aa      	b.n	8004ce6 <_printf_i+0x14a>
 8004d90:	4632      	mov	r2, r6
 8004d92:	4649      	mov	r1, r9
 8004d94:	4640      	mov	r0, r8
 8004d96:	6923      	ldr	r3, [r4, #16]
 8004d98:	47d0      	blx	sl
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	d0ad      	beq.n	8004cfa <_printf_i+0x15e>
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	079b      	lsls	r3, r3, #30
 8004da2:	d413      	bmi.n	8004dcc <_printf_i+0x230>
 8004da4:	68e0      	ldr	r0, [r4, #12]
 8004da6:	9b03      	ldr	r3, [sp, #12]
 8004da8:	4298      	cmp	r0, r3
 8004daa:	bfb8      	it	lt
 8004dac:	4618      	movlt	r0, r3
 8004dae:	e7a6      	b.n	8004cfe <_printf_i+0x162>
 8004db0:	2301      	movs	r3, #1
 8004db2:	4632      	mov	r2, r6
 8004db4:	4649      	mov	r1, r9
 8004db6:	4640      	mov	r0, r8
 8004db8:	47d0      	blx	sl
 8004dba:	3001      	adds	r0, #1
 8004dbc:	d09d      	beq.n	8004cfa <_printf_i+0x15e>
 8004dbe:	3501      	adds	r5, #1
 8004dc0:	68e3      	ldr	r3, [r4, #12]
 8004dc2:	9903      	ldr	r1, [sp, #12]
 8004dc4:	1a5b      	subs	r3, r3, r1
 8004dc6:	42ab      	cmp	r3, r5
 8004dc8:	dcf2      	bgt.n	8004db0 <_printf_i+0x214>
 8004dca:	e7eb      	b.n	8004da4 <_printf_i+0x208>
 8004dcc:	2500      	movs	r5, #0
 8004dce:	f104 0619 	add.w	r6, r4, #25
 8004dd2:	e7f5      	b.n	8004dc0 <_printf_i+0x224>
 8004dd4:	08008c2c 	.word	0x08008c2c
 8004dd8:	08008c3d 	.word	0x08008c3d

08004ddc <_scanf_float>:
 8004ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de0:	b087      	sub	sp, #28
 8004de2:	9303      	str	r3, [sp, #12]
 8004de4:	688b      	ldr	r3, [r1, #8]
 8004de6:	4617      	mov	r7, r2
 8004de8:	1e5a      	subs	r2, r3, #1
 8004dea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004dee:	bf82      	ittt	hi
 8004df0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004df4:	eb03 0b05 	addhi.w	fp, r3, r5
 8004df8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004dfc:	460a      	mov	r2, r1
 8004dfe:	f04f 0500 	mov.w	r5, #0
 8004e02:	bf88      	it	hi
 8004e04:	608b      	strhi	r3, [r1, #8]
 8004e06:	680b      	ldr	r3, [r1, #0]
 8004e08:	4680      	mov	r8, r0
 8004e0a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004e0e:	f842 3b1c 	str.w	r3, [r2], #28
 8004e12:	460c      	mov	r4, r1
 8004e14:	bf98      	it	ls
 8004e16:	f04f 0b00 	movls.w	fp, #0
 8004e1a:	4616      	mov	r6, r2
 8004e1c:	46aa      	mov	sl, r5
 8004e1e:	46a9      	mov	r9, r5
 8004e20:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004e24:	9201      	str	r2, [sp, #4]
 8004e26:	9502      	str	r5, [sp, #8]
 8004e28:	68a2      	ldr	r2, [r4, #8]
 8004e2a:	b152      	cbz	r2, 8004e42 <_scanf_float+0x66>
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b4e      	cmp	r3, #78	@ 0x4e
 8004e32:	d865      	bhi.n	8004f00 <_scanf_float+0x124>
 8004e34:	2b40      	cmp	r3, #64	@ 0x40
 8004e36:	d83d      	bhi.n	8004eb4 <_scanf_float+0xd8>
 8004e38:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004e3c:	b2c8      	uxtb	r0, r1
 8004e3e:	280e      	cmp	r0, #14
 8004e40:	d93b      	bls.n	8004eba <_scanf_float+0xde>
 8004e42:	f1b9 0f00 	cmp.w	r9, #0
 8004e46:	d003      	beq.n	8004e50 <_scanf_float+0x74>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e4e:	6023      	str	r3, [r4, #0]
 8004e50:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004e54:	f1ba 0f01 	cmp.w	sl, #1
 8004e58:	f200 8118 	bhi.w	800508c <_scanf_float+0x2b0>
 8004e5c:	9b01      	ldr	r3, [sp, #4]
 8004e5e:	429e      	cmp	r6, r3
 8004e60:	f200 8109 	bhi.w	8005076 <_scanf_float+0x29a>
 8004e64:	2001      	movs	r0, #1
 8004e66:	b007      	add	sp, #28
 8004e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e6c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004e70:	2a0d      	cmp	r2, #13
 8004e72:	d8e6      	bhi.n	8004e42 <_scanf_float+0x66>
 8004e74:	a101      	add	r1, pc, #4	@ (adr r1, 8004e7c <_scanf_float+0xa0>)
 8004e76:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004e7a:	bf00      	nop
 8004e7c:	08004fc3 	.word	0x08004fc3
 8004e80:	08004e43 	.word	0x08004e43
 8004e84:	08004e43 	.word	0x08004e43
 8004e88:	08004e43 	.word	0x08004e43
 8004e8c:	08005023 	.word	0x08005023
 8004e90:	08004ffb 	.word	0x08004ffb
 8004e94:	08004e43 	.word	0x08004e43
 8004e98:	08004e43 	.word	0x08004e43
 8004e9c:	08004fd1 	.word	0x08004fd1
 8004ea0:	08004e43 	.word	0x08004e43
 8004ea4:	08004e43 	.word	0x08004e43
 8004ea8:	08004e43 	.word	0x08004e43
 8004eac:	08004e43 	.word	0x08004e43
 8004eb0:	08004f89 	.word	0x08004f89
 8004eb4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004eb8:	e7da      	b.n	8004e70 <_scanf_float+0x94>
 8004eba:	290e      	cmp	r1, #14
 8004ebc:	d8c1      	bhi.n	8004e42 <_scanf_float+0x66>
 8004ebe:	a001      	add	r0, pc, #4	@ (adr r0, 8004ec4 <_scanf_float+0xe8>)
 8004ec0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004ec4:	08004f79 	.word	0x08004f79
 8004ec8:	08004e43 	.word	0x08004e43
 8004ecc:	08004f79 	.word	0x08004f79
 8004ed0:	0800500f 	.word	0x0800500f
 8004ed4:	08004e43 	.word	0x08004e43
 8004ed8:	08004f21 	.word	0x08004f21
 8004edc:	08004f5f 	.word	0x08004f5f
 8004ee0:	08004f5f 	.word	0x08004f5f
 8004ee4:	08004f5f 	.word	0x08004f5f
 8004ee8:	08004f5f 	.word	0x08004f5f
 8004eec:	08004f5f 	.word	0x08004f5f
 8004ef0:	08004f5f 	.word	0x08004f5f
 8004ef4:	08004f5f 	.word	0x08004f5f
 8004ef8:	08004f5f 	.word	0x08004f5f
 8004efc:	08004f5f 	.word	0x08004f5f
 8004f00:	2b6e      	cmp	r3, #110	@ 0x6e
 8004f02:	d809      	bhi.n	8004f18 <_scanf_float+0x13c>
 8004f04:	2b60      	cmp	r3, #96	@ 0x60
 8004f06:	d8b1      	bhi.n	8004e6c <_scanf_float+0x90>
 8004f08:	2b54      	cmp	r3, #84	@ 0x54
 8004f0a:	d07b      	beq.n	8005004 <_scanf_float+0x228>
 8004f0c:	2b59      	cmp	r3, #89	@ 0x59
 8004f0e:	d198      	bne.n	8004e42 <_scanf_float+0x66>
 8004f10:	2d07      	cmp	r5, #7
 8004f12:	d196      	bne.n	8004e42 <_scanf_float+0x66>
 8004f14:	2508      	movs	r5, #8
 8004f16:	e02c      	b.n	8004f72 <_scanf_float+0x196>
 8004f18:	2b74      	cmp	r3, #116	@ 0x74
 8004f1a:	d073      	beq.n	8005004 <_scanf_float+0x228>
 8004f1c:	2b79      	cmp	r3, #121	@ 0x79
 8004f1e:	e7f6      	b.n	8004f0e <_scanf_float+0x132>
 8004f20:	6821      	ldr	r1, [r4, #0]
 8004f22:	05c8      	lsls	r0, r1, #23
 8004f24:	d51b      	bpl.n	8004f5e <_scanf_float+0x182>
 8004f26:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004f2a:	6021      	str	r1, [r4, #0]
 8004f2c:	f109 0901 	add.w	r9, r9, #1
 8004f30:	f1bb 0f00 	cmp.w	fp, #0
 8004f34:	d003      	beq.n	8004f3e <_scanf_float+0x162>
 8004f36:	3201      	adds	r2, #1
 8004f38:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8004f3c:	60a2      	str	r2, [r4, #8]
 8004f3e:	68a3      	ldr	r3, [r4, #8]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	60a3      	str	r3, [r4, #8]
 8004f44:	6923      	ldr	r3, [r4, #16]
 8004f46:	3301      	adds	r3, #1
 8004f48:	6123      	str	r3, [r4, #16]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	607b      	str	r3, [r7, #4]
 8004f52:	f340 8087 	ble.w	8005064 <_scanf_float+0x288>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	603b      	str	r3, [r7, #0]
 8004f5c:	e764      	b.n	8004e28 <_scanf_float+0x4c>
 8004f5e:	eb1a 0105 	adds.w	r1, sl, r5
 8004f62:	f47f af6e 	bne.w	8004e42 <_scanf_float+0x66>
 8004f66:	460d      	mov	r5, r1
 8004f68:	468a      	mov	sl, r1
 8004f6a:	6822      	ldr	r2, [r4, #0]
 8004f6c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004f70:	6022      	str	r2, [r4, #0]
 8004f72:	f806 3b01 	strb.w	r3, [r6], #1
 8004f76:	e7e2      	b.n	8004f3e <_scanf_float+0x162>
 8004f78:	6822      	ldr	r2, [r4, #0]
 8004f7a:	0610      	lsls	r0, r2, #24
 8004f7c:	f57f af61 	bpl.w	8004e42 <_scanf_float+0x66>
 8004f80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f84:	6022      	str	r2, [r4, #0]
 8004f86:	e7f4      	b.n	8004f72 <_scanf_float+0x196>
 8004f88:	f1ba 0f00 	cmp.w	sl, #0
 8004f8c:	d10e      	bne.n	8004fac <_scanf_float+0x1d0>
 8004f8e:	f1b9 0f00 	cmp.w	r9, #0
 8004f92:	d10e      	bne.n	8004fb2 <_scanf_float+0x1d6>
 8004f94:	6822      	ldr	r2, [r4, #0]
 8004f96:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004f9a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004f9e:	d108      	bne.n	8004fb2 <_scanf_float+0x1d6>
 8004fa0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004fa4:	f04f 0a01 	mov.w	sl, #1
 8004fa8:	6022      	str	r2, [r4, #0]
 8004faa:	e7e2      	b.n	8004f72 <_scanf_float+0x196>
 8004fac:	f1ba 0f02 	cmp.w	sl, #2
 8004fb0:	d055      	beq.n	800505e <_scanf_float+0x282>
 8004fb2:	2d01      	cmp	r5, #1
 8004fb4:	d002      	beq.n	8004fbc <_scanf_float+0x1e0>
 8004fb6:	2d04      	cmp	r5, #4
 8004fb8:	f47f af43 	bne.w	8004e42 <_scanf_float+0x66>
 8004fbc:	3501      	adds	r5, #1
 8004fbe:	b2ed      	uxtb	r5, r5
 8004fc0:	e7d7      	b.n	8004f72 <_scanf_float+0x196>
 8004fc2:	f1ba 0f01 	cmp.w	sl, #1
 8004fc6:	f47f af3c 	bne.w	8004e42 <_scanf_float+0x66>
 8004fca:	f04f 0a02 	mov.w	sl, #2
 8004fce:	e7d0      	b.n	8004f72 <_scanf_float+0x196>
 8004fd0:	b97d      	cbnz	r5, 8004ff2 <_scanf_float+0x216>
 8004fd2:	f1b9 0f00 	cmp.w	r9, #0
 8004fd6:	f47f af37 	bne.w	8004e48 <_scanf_float+0x6c>
 8004fda:	6822      	ldr	r2, [r4, #0]
 8004fdc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004fe0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004fe4:	f040 8103 	bne.w	80051ee <_scanf_float+0x412>
 8004fe8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004fec:	2501      	movs	r5, #1
 8004fee:	6022      	str	r2, [r4, #0]
 8004ff0:	e7bf      	b.n	8004f72 <_scanf_float+0x196>
 8004ff2:	2d03      	cmp	r5, #3
 8004ff4:	d0e2      	beq.n	8004fbc <_scanf_float+0x1e0>
 8004ff6:	2d05      	cmp	r5, #5
 8004ff8:	e7de      	b.n	8004fb8 <_scanf_float+0x1dc>
 8004ffa:	2d02      	cmp	r5, #2
 8004ffc:	f47f af21 	bne.w	8004e42 <_scanf_float+0x66>
 8005000:	2503      	movs	r5, #3
 8005002:	e7b6      	b.n	8004f72 <_scanf_float+0x196>
 8005004:	2d06      	cmp	r5, #6
 8005006:	f47f af1c 	bne.w	8004e42 <_scanf_float+0x66>
 800500a:	2507      	movs	r5, #7
 800500c:	e7b1      	b.n	8004f72 <_scanf_float+0x196>
 800500e:	6822      	ldr	r2, [r4, #0]
 8005010:	0591      	lsls	r1, r2, #22
 8005012:	f57f af16 	bpl.w	8004e42 <_scanf_float+0x66>
 8005016:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800501a:	6022      	str	r2, [r4, #0]
 800501c:	f8cd 9008 	str.w	r9, [sp, #8]
 8005020:	e7a7      	b.n	8004f72 <_scanf_float+0x196>
 8005022:	6822      	ldr	r2, [r4, #0]
 8005024:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005028:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800502c:	d006      	beq.n	800503c <_scanf_float+0x260>
 800502e:	0550      	lsls	r0, r2, #21
 8005030:	f57f af07 	bpl.w	8004e42 <_scanf_float+0x66>
 8005034:	f1b9 0f00 	cmp.w	r9, #0
 8005038:	f000 80d9 	beq.w	80051ee <_scanf_float+0x412>
 800503c:	0591      	lsls	r1, r2, #22
 800503e:	bf58      	it	pl
 8005040:	9902      	ldrpl	r1, [sp, #8]
 8005042:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005046:	bf58      	it	pl
 8005048:	eba9 0101 	subpl.w	r1, r9, r1
 800504c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005050:	f04f 0900 	mov.w	r9, #0
 8005054:	bf58      	it	pl
 8005056:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800505a:	6022      	str	r2, [r4, #0]
 800505c:	e789      	b.n	8004f72 <_scanf_float+0x196>
 800505e:	f04f 0a03 	mov.w	sl, #3
 8005062:	e786      	b.n	8004f72 <_scanf_float+0x196>
 8005064:	4639      	mov	r1, r7
 8005066:	4640      	mov	r0, r8
 8005068:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800506c:	4798      	blx	r3
 800506e:	2800      	cmp	r0, #0
 8005070:	f43f aeda 	beq.w	8004e28 <_scanf_float+0x4c>
 8005074:	e6e5      	b.n	8004e42 <_scanf_float+0x66>
 8005076:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800507a:	463a      	mov	r2, r7
 800507c:	4640      	mov	r0, r8
 800507e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005082:	4798      	blx	r3
 8005084:	6923      	ldr	r3, [r4, #16]
 8005086:	3b01      	subs	r3, #1
 8005088:	6123      	str	r3, [r4, #16]
 800508a:	e6e7      	b.n	8004e5c <_scanf_float+0x80>
 800508c:	1e6b      	subs	r3, r5, #1
 800508e:	2b06      	cmp	r3, #6
 8005090:	d824      	bhi.n	80050dc <_scanf_float+0x300>
 8005092:	2d02      	cmp	r5, #2
 8005094:	d836      	bhi.n	8005104 <_scanf_float+0x328>
 8005096:	9b01      	ldr	r3, [sp, #4]
 8005098:	429e      	cmp	r6, r3
 800509a:	f67f aee3 	bls.w	8004e64 <_scanf_float+0x88>
 800509e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80050a2:	463a      	mov	r2, r7
 80050a4:	4640      	mov	r0, r8
 80050a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80050aa:	4798      	blx	r3
 80050ac:	6923      	ldr	r3, [r4, #16]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	6123      	str	r3, [r4, #16]
 80050b2:	e7f0      	b.n	8005096 <_scanf_float+0x2ba>
 80050b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80050b8:	463a      	mov	r2, r7
 80050ba:	4640      	mov	r0, r8
 80050bc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80050c0:	4798      	blx	r3
 80050c2:	6923      	ldr	r3, [r4, #16]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	6123      	str	r3, [r4, #16]
 80050c8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80050cc:	fa5f fa8a 	uxtb.w	sl, sl
 80050d0:	f1ba 0f02 	cmp.w	sl, #2
 80050d4:	d1ee      	bne.n	80050b4 <_scanf_float+0x2d8>
 80050d6:	3d03      	subs	r5, #3
 80050d8:	b2ed      	uxtb	r5, r5
 80050da:	1b76      	subs	r6, r6, r5
 80050dc:	6823      	ldr	r3, [r4, #0]
 80050de:	05da      	lsls	r2, r3, #23
 80050e0:	d530      	bpl.n	8005144 <_scanf_float+0x368>
 80050e2:	055b      	lsls	r3, r3, #21
 80050e4:	d511      	bpl.n	800510a <_scanf_float+0x32e>
 80050e6:	9b01      	ldr	r3, [sp, #4]
 80050e8:	429e      	cmp	r6, r3
 80050ea:	f67f aebb 	bls.w	8004e64 <_scanf_float+0x88>
 80050ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80050f2:	463a      	mov	r2, r7
 80050f4:	4640      	mov	r0, r8
 80050f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80050fa:	4798      	blx	r3
 80050fc:	6923      	ldr	r3, [r4, #16]
 80050fe:	3b01      	subs	r3, #1
 8005100:	6123      	str	r3, [r4, #16]
 8005102:	e7f0      	b.n	80050e6 <_scanf_float+0x30a>
 8005104:	46aa      	mov	sl, r5
 8005106:	46b3      	mov	fp, r6
 8005108:	e7de      	b.n	80050c8 <_scanf_float+0x2ec>
 800510a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800510e:	6923      	ldr	r3, [r4, #16]
 8005110:	2965      	cmp	r1, #101	@ 0x65
 8005112:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005116:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800511a:	6123      	str	r3, [r4, #16]
 800511c:	d00c      	beq.n	8005138 <_scanf_float+0x35c>
 800511e:	2945      	cmp	r1, #69	@ 0x45
 8005120:	d00a      	beq.n	8005138 <_scanf_float+0x35c>
 8005122:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005126:	463a      	mov	r2, r7
 8005128:	4640      	mov	r0, r8
 800512a:	4798      	blx	r3
 800512c:	6923      	ldr	r3, [r4, #16]
 800512e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005132:	3b01      	subs	r3, #1
 8005134:	1eb5      	subs	r5, r6, #2
 8005136:	6123      	str	r3, [r4, #16]
 8005138:	463a      	mov	r2, r7
 800513a:	4640      	mov	r0, r8
 800513c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005140:	4798      	blx	r3
 8005142:	462e      	mov	r6, r5
 8005144:	6822      	ldr	r2, [r4, #0]
 8005146:	f012 0210 	ands.w	r2, r2, #16
 800514a:	d001      	beq.n	8005150 <_scanf_float+0x374>
 800514c:	2000      	movs	r0, #0
 800514e:	e68a      	b.n	8004e66 <_scanf_float+0x8a>
 8005150:	7032      	strb	r2, [r6, #0]
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005158:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800515c:	d11c      	bne.n	8005198 <_scanf_float+0x3bc>
 800515e:	9b02      	ldr	r3, [sp, #8]
 8005160:	454b      	cmp	r3, r9
 8005162:	eba3 0209 	sub.w	r2, r3, r9
 8005166:	d123      	bne.n	80051b0 <_scanf_float+0x3d4>
 8005168:	2200      	movs	r2, #0
 800516a:	4640      	mov	r0, r8
 800516c:	9901      	ldr	r1, [sp, #4]
 800516e:	f002 fbef 	bl	8007950 <_strtod_r>
 8005172:	9b03      	ldr	r3, [sp, #12]
 8005174:	6825      	ldr	r5, [r4, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f015 0f02 	tst.w	r5, #2
 800517c:	4606      	mov	r6, r0
 800517e:	460f      	mov	r7, r1
 8005180:	f103 0204 	add.w	r2, r3, #4
 8005184:	d01f      	beq.n	80051c6 <_scanf_float+0x3ea>
 8005186:	9903      	ldr	r1, [sp, #12]
 8005188:	600a      	str	r2, [r1, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	e9c3 6700 	strd	r6, r7, [r3]
 8005190:	68e3      	ldr	r3, [r4, #12]
 8005192:	3301      	adds	r3, #1
 8005194:	60e3      	str	r3, [r4, #12]
 8005196:	e7d9      	b.n	800514c <_scanf_float+0x370>
 8005198:	9b04      	ldr	r3, [sp, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0e4      	beq.n	8005168 <_scanf_float+0x38c>
 800519e:	9905      	ldr	r1, [sp, #20]
 80051a0:	230a      	movs	r3, #10
 80051a2:	4640      	mov	r0, r8
 80051a4:	3101      	adds	r1, #1
 80051a6:	f002 fc53 	bl	8007a50 <_strtol_r>
 80051aa:	9b04      	ldr	r3, [sp, #16]
 80051ac:	9e05      	ldr	r6, [sp, #20]
 80051ae:	1ac2      	subs	r2, r0, r3
 80051b0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80051b4:	429e      	cmp	r6, r3
 80051b6:	bf28      	it	cs
 80051b8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80051bc:	4630      	mov	r0, r6
 80051be:	490d      	ldr	r1, [pc, #52]	@ (80051f4 <_scanf_float+0x418>)
 80051c0:	f000 f8de 	bl	8005380 <siprintf>
 80051c4:	e7d0      	b.n	8005168 <_scanf_float+0x38c>
 80051c6:	076d      	lsls	r5, r5, #29
 80051c8:	d4dd      	bmi.n	8005186 <_scanf_float+0x3aa>
 80051ca:	9d03      	ldr	r5, [sp, #12]
 80051cc:	602a      	str	r2, [r5, #0]
 80051ce:	681d      	ldr	r5, [r3, #0]
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	f7fb fc1a 	bl	8000a0c <__aeabi_dcmpun>
 80051d8:	b120      	cbz	r0, 80051e4 <_scanf_float+0x408>
 80051da:	4807      	ldr	r0, [pc, #28]	@ (80051f8 <_scanf_float+0x41c>)
 80051dc:	f000 f9c2 	bl	8005564 <nanf>
 80051e0:	6028      	str	r0, [r5, #0]
 80051e2:	e7d5      	b.n	8005190 <_scanf_float+0x3b4>
 80051e4:	4630      	mov	r0, r6
 80051e6:	4639      	mov	r1, r7
 80051e8:	f7fb fc6e 	bl	8000ac8 <__aeabi_d2f>
 80051ec:	e7f8      	b.n	80051e0 <_scanf_float+0x404>
 80051ee:	f04f 0900 	mov.w	r9, #0
 80051f2:	e62d      	b.n	8004e50 <_scanf_float+0x74>
 80051f4:	08008c4e 	.word	0x08008c4e
 80051f8:	08008fe5 	.word	0x08008fe5

080051fc <std>:
 80051fc:	2300      	movs	r3, #0
 80051fe:	b510      	push	{r4, lr}
 8005200:	4604      	mov	r4, r0
 8005202:	e9c0 3300 	strd	r3, r3, [r0]
 8005206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800520a:	6083      	str	r3, [r0, #8]
 800520c:	8181      	strh	r1, [r0, #12]
 800520e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005210:	81c2      	strh	r2, [r0, #14]
 8005212:	6183      	str	r3, [r0, #24]
 8005214:	4619      	mov	r1, r3
 8005216:	2208      	movs	r2, #8
 8005218:	305c      	adds	r0, #92	@ 0x5c
 800521a:	f000 f914 	bl	8005446 <memset>
 800521e:	4b0d      	ldr	r3, [pc, #52]	@ (8005254 <std+0x58>)
 8005220:	6224      	str	r4, [r4, #32]
 8005222:	6263      	str	r3, [r4, #36]	@ 0x24
 8005224:	4b0c      	ldr	r3, [pc, #48]	@ (8005258 <std+0x5c>)
 8005226:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005228:	4b0c      	ldr	r3, [pc, #48]	@ (800525c <std+0x60>)
 800522a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800522c:	4b0c      	ldr	r3, [pc, #48]	@ (8005260 <std+0x64>)
 800522e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005230:	4b0c      	ldr	r3, [pc, #48]	@ (8005264 <std+0x68>)
 8005232:	429c      	cmp	r4, r3
 8005234:	d006      	beq.n	8005244 <std+0x48>
 8005236:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800523a:	4294      	cmp	r4, r2
 800523c:	d002      	beq.n	8005244 <std+0x48>
 800523e:	33d0      	adds	r3, #208	@ 0xd0
 8005240:	429c      	cmp	r4, r3
 8005242:	d105      	bne.n	8005250 <std+0x54>
 8005244:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800524c:	f000 b978 	b.w	8005540 <__retarget_lock_init_recursive>
 8005250:	bd10      	pop	{r4, pc}
 8005252:	bf00      	nop
 8005254:	080053c1 	.word	0x080053c1
 8005258:	080053e3 	.word	0x080053e3
 800525c:	0800541b 	.word	0x0800541b
 8005260:	0800543f 	.word	0x0800543f
 8005264:	20000330 	.word	0x20000330

08005268 <stdio_exit_handler>:
 8005268:	4a02      	ldr	r2, [pc, #8]	@ (8005274 <stdio_exit_handler+0xc>)
 800526a:	4903      	ldr	r1, [pc, #12]	@ (8005278 <stdio_exit_handler+0x10>)
 800526c:	4803      	ldr	r0, [pc, #12]	@ (800527c <stdio_exit_handler+0x14>)
 800526e:	f000 b869 	b.w	8005344 <_fwalk_sglue>
 8005272:	bf00      	nop
 8005274:	2000001c 	.word	0x2000001c
 8005278:	08007e05 	.word	0x08007e05
 800527c:	2000002c 	.word	0x2000002c

08005280 <cleanup_stdio>:
 8005280:	6841      	ldr	r1, [r0, #4]
 8005282:	4b0c      	ldr	r3, [pc, #48]	@ (80052b4 <cleanup_stdio+0x34>)
 8005284:	b510      	push	{r4, lr}
 8005286:	4299      	cmp	r1, r3
 8005288:	4604      	mov	r4, r0
 800528a:	d001      	beq.n	8005290 <cleanup_stdio+0x10>
 800528c:	f002 fdba 	bl	8007e04 <_fflush_r>
 8005290:	68a1      	ldr	r1, [r4, #8]
 8005292:	4b09      	ldr	r3, [pc, #36]	@ (80052b8 <cleanup_stdio+0x38>)
 8005294:	4299      	cmp	r1, r3
 8005296:	d002      	beq.n	800529e <cleanup_stdio+0x1e>
 8005298:	4620      	mov	r0, r4
 800529a:	f002 fdb3 	bl	8007e04 <_fflush_r>
 800529e:	68e1      	ldr	r1, [r4, #12]
 80052a0:	4b06      	ldr	r3, [pc, #24]	@ (80052bc <cleanup_stdio+0x3c>)
 80052a2:	4299      	cmp	r1, r3
 80052a4:	d004      	beq.n	80052b0 <cleanup_stdio+0x30>
 80052a6:	4620      	mov	r0, r4
 80052a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052ac:	f002 bdaa 	b.w	8007e04 <_fflush_r>
 80052b0:	bd10      	pop	{r4, pc}
 80052b2:	bf00      	nop
 80052b4:	20000330 	.word	0x20000330
 80052b8:	20000398 	.word	0x20000398
 80052bc:	20000400 	.word	0x20000400

080052c0 <global_stdio_init.part.0>:
 80052c0:	b510      	push	{r4, lr}
 80052c2:	4b0b      	ldr	r3, [pc, #44]	@ (80052f0 <global_stdio_init.part.0+0x30>)
 80052c4:	4c0b      	ldr	r4, [pc, #44]	@ (80052f4 <global_stdio_init.part.0+0x34>)
 80052c6:	4a0c      	ldr	r2, [pc, #48]	@ (80052f8 <global_stdio_init.part.0+0x38>)
 80052c8:	4620      	mov	r0, r4
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	2104      	movs	r1, #4
 80052ce:	2200      	movs	r2, #0
 80052d0:	f7ff ff94 	bl	80051fc <std>
 80052d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80052d8:	2201      	movs	r2, #1
 80052da:	2109      	movs	r1, #9
 80052dc:	f7ff ff8e 	bl	80051fc <std>
 80052e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80052e4:	2202      	movs	r2, #2
 80052e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052ea:	2112      	movs	r1, #18
 80052ec:	f7ff bf86 	b.w	80051fc <std>
 80052f0:	20000468 	.word	0x20000468
 80052f4:	20000330 	.word	0x20000330
 80052f8:	08005269 	.word	0x08005269

080052fc <__sfp_lock_acquire>:
 80052fc:	4801      	ldr	r0, [pc, #4]	@ (8005304 <__sfp_lock_acquire+0x8>)
 80052fe:	f000 b920 	b.w	8005542 <__retarget_lock_acquire_recursive>
 8005302:	bf00      	nop
 8005304:	20000471 	.word	0x20000471

08005308 <__sfp_lock_release>:
 8005308:	4801      	ldr	r0, [pc, #4]	@ (8005310 <__sfp_lock_release+0x8>)
 800530a:	f000 b91b 	b.w	8005544 <__retarget_lock_release_recursive>
 800530e:	bf00      	nop
 8005310:	20000471 	.word	0x20000471

08005314 <__sinit>:
 8005314:	b510      	push	{r4, lr}
 8005316:	4604      	mov	r4, r0
 8005318:	f7ff fff0 	bl	80052fc <__sfp_lock_acquire>
 800531c:	6a23      	ldr	r3, [r4, #32]
 800531e:	b11b      	cbz	r3, 8005328 <__sinit+0x14>
 8005320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005324:	f7ff bff0 	b.w	8005308 <__sfp_lock_release>
 8005328:	4b04      	ldr	r3, [pc, #16]	@ (800533c <__sinit+0x28>)
 800532a:	6223      	str	r3, [r4, #32]
 800532c:	4b04      	ldr	r3, [pc, #16]	@ (8005340 <__sinit+0x2c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1f5      	bne.n	8005320 <__sinit+0xc>
 8005334:	f7ff ffc4 	bl	80052c0 <global_stdio_init.part.0>
 8005338:	e7f2      	b.n	8005320 <__sinit+0xc>
 800533a:	bf00      	nop
 800533c:	08005281 	.word	0x08005281
 8005340:	20000468 	.word	0x20000468

08005344 <_fwalk_sglue>:
 8005344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005348:	4607      	mov	r7, r0
 800534a:	4688      	mov	r8, r1
 800534c:	4614      	mov	r4, r2
 800534e:	2600      	movs	r6, #0
 8005350:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005354:	f1b9 0901 	subs.w	r9, r9, #1
 8005358:	d505      	bpl.n	8005366 <_fwalk_sglue+0x22>
 800535a:	6824      	ldr	r4, [r4, #0]
 800535c:	2c00      	cmp	r4, #0
 800535e:	d1f7      	bne.n	8005350 <_fwalk_sglue+0xc>
 8005360:	4630      	mov	r0, r6
 8005362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005366:	89ab      	ldrh	r3, [r5, #12]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d907      	bls.n	800537c <_fwalk_sglue+0x38>
 800536c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005370:	3301      	adds	r3, #1
 8005372:	d003      	beq.n	800537c <_fwalk_sglue+0x38>
 8005374:	4629      	mov	r1, r5
 8005376:	4638      	mov	r0, r7
 8005378:	47c0      	blx	r8
 800537a:	4306      	orrs	r6, r0
 800537c:	3568      	adds	r5, #104	@ 0x68
 800537e:	e7e9      	b.n	8005354 <_fwalk_sglue+0x10>

08005380 <siprintf>:
 8005380:	b40e      	push	{r1, r2, r3}
 8005382:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005386:	b500      	push	{lr}
 8005388:	b09c      	sub	sp, #112	@ 0x70
 800538a:	ab1d      	add	r3, sp, #116	@ 0x74
 800538c:	9002      	str	r0, [sp, #8]
 800538e:	9006      	str	r0, [sp, #24]
 8005390:	9107      	str	r1, [sp, #28]
 8005392:	9104      	str	r1, [sp, #16]
 8005394:	4808      	ldr	r0, [pc, #32]	@ (80053b8 <siprintf+0x38>)
 8005396:	4909      	ldr	r1, [pc, #36]	@ (80053bc <siprintf+0x3c>)
 8005398:	f853 2b04 	ldr.w	r2, [r3], #4
 800539c:	9105      	str	r1, [sp, #20]
 800539e:	6800      	ldr	r0, [r0, #0]
 80053a0:	a902      	add	r1, sp, #8
 80053a2:	9301      	str	r3, [sp, #4]
 80053a4:	f002 fbb2 	bl	8007b0c <_svfiprintf_r>
 80053a8:	2200      	movs	r2, #0
 80053aa:	9b02      	ldr	r3, [sp, #8]
 80053ac:	701a      	strb	r2, [r3, #0]
 80053ae:	b01c      	add	sp, #112	@ 0x70
 80053b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80053b4:	b003      	add	sp, #12
 80053b6:	4770      	bx	lr
 80053b8:	20000028 	.word	0x20000028
 80053bc:	ffff0208 	.word	0xffff0208

080053c0 <__sread>:
 80053c0:	b510      	push	{r4, lr}
 80053c2:	460c      	mov	r4, r1
 80053c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053c8:	f000 f86c 	bl	80054a4 <_read_r>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	bfab      	itete	ge
 80053d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80053d2:	89a3      	ldrhlt	r3, [r4, #12]
 80053d4:	181b      	addge	r3, r3, r0
 80053d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80053da:	bfac      	ite	ge
 80053dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80053de:	81a3      	strhlt	r3, [r4, #12]
 80053e0:	bd10      	pop	{r4, pc}

080053e2 <__swrite>:
 80053e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053e6:	461f      	mov	r7, r3
 80053e8:	898b      	ldrh	r3, [r1, #12]
 80053ea:	4605      	mov	r5, r0
 80053ec:	05db      	lsls	r3, r3, #23
 80053ee:	460c      	mov	r4, r1
 80053f0:	4616      	mov	r6, r2
 80053f2:	d505      	bpl.n	8005400 <__swrite+0x1e>
 80053f4:	2302      	movs	r3, #2
 80053f6:	2200      	movs	r2, #0
 80053f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053fc:	f000 f840 	bl	8005480 <_lseek_r>
 8005400:	89a3      	ldrh	r3, [r4, #12]
 8005402:	4632      	mov	r2, r6
 8005404:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005408:	81a3      	strh	r3, [r4, #12]
 800540a:	4628      	mov	r0, r5
 800540c:	463b      	mov	r3, r7
 800540e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005416:	f000 b857 	b.w	80054c8 <_write_r>

0800541a <__sseek>:
 800541a:	b510      	push	{r4, lr}
 800541c:	460c      	mov	r4, r1
 800541e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005422:	f000 f82d 	bl	8005480 <_lseek_r>
 8005426:	1c43      	adds	r3, r0, #1
 8005428:	89a3      	ldrh	r3, [r4, #12]
 800542a:	bf15      	itete	ne
 800542c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800542e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005432:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005436:	81a3      	strheq	r3, [r4, #12]
 8005438:	bf18      	it	ne
 800543a:	81a3      	strhne	r3, [r4, #12]
 800543c:	bd10      	pop	{r4, pc}

0800543e <__sclose>:
 800543e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005442:	f000 b80d 	b.w	8005460 <_close_r>

08005446 <memset>:
 8005446:	4603      	mov	r3, r0
 8005448:	4402      	add	r2, r0
 800544a:	4293      	cmp	r3, r2
 800544c:	d100      	bne.n	8005450 <memset+0xa>
 800544e:	4770      	bx	lr
 8005450:	f803 1b01 	strb.w	r1, [r3], #1
 8005454:	e7f9      	b.n	800544a <memset+0x4>
	...

08005458 <_localeconv_r>:
 8005458:	4800      	ldr	r0, [pc, #0]	@ (800545c <_localeconv_r+0x4>)
 800545a:	4770      	bx	lr
 800545c:	20000168 	.word	0x20000168

08005460 <_close_r>:
 8005460:	b538      	push	{r3, r4, r5, lr}
 8005462:	2300      	movs	r3, #0
 8005464:	4d05      	ldr	r5, [pc, #20]	@ (800547c <_close_r+0x1c>)
 8005466:	4604      	mov	r4, r0
 8005468:	4608      	mov	r0, r1
 800546a:	602b      	str	r3, [r5, #0]
 800546c:	f7fc fc6f 	bl	8001d4e <_close>
 8005470:	1c43      	adds	r3, r0, #1
 8005472:	d102      	bne.n	800547a <_close_r+0x1a>
 8005474:	682b      	ldr	r3, [r5, #0]
 8005476:	b103      	cbz	r3, 800547a <_close_r+0x1a>
 8005478:	6023      	str	r3, [r4, #0]
 800547a:	bd38      	pop	{r3, r4, r5, pc}
 800547c:	2000046c 	.word	0x2000046c

08005480 <_lseek_r>:
 8005480:	b538      	push	{r3, r4, r5, lr}
 8005482:	4604      	mov	r4, r0
 8005484:	4608      	mov	r0, r1
 8005486:	4611      	mov	r1, r2
 8005488:	2200      	movs	r2, #0
 800548a:	4d05      	ldr	r5, [pc, #20]	@ (80054a0 <_lseek_r+0x20>)
 800548c:	602a      	str	r2, [r5, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	f7fc fc81 	bl	8001d96 <_lseek>
 8005494:	1c43      	adds	r3, r0, #1
 8005496:	d102      	bne.n	800549e <_lseek_r+0x1e>
 8005498:	682b      	ldr	r3, [r5, #0]
 800549a:	b103      	cbz	r3, 800549e <_lseek_r+0x1e>
 800549c:	6023      	str	r3, [r4, #0]
 800549e:	bd38      	pop	{r3, r4, r5, pc}
 80054a0:	2000046c 	.word	0x2000046c

080054a4 <_read_r>:
 80054a4:	b538      	push	{r3, r4, r5, lr}
 80054a6:	4604      	mov	r4, r0
 80054a8:	4608      	mov	r0, r1
 80054aa:	4611      	mov	r1, r2
 80054ac:	2200      	movs	r2, #0
 80054ae:	4d05      	ldr	r5, [pc, #20]	@ (80054c4 <_read_r+0x20>)
 80054b0:	602a      	str	r2, [r5, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	f7fc fc12 	bl	8001cdc <_read>
 80054b8:	1c43      	adds	r3, r0, #1
 80054ba:	d102      	bne.n	80054c2 <_read_r+0x1e>
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	b103      	cbz	r3, 80054c2 <_read_r+0x1e>
 80054c0:	6023      	str	r3, [r4, #0]
 80054c2:	bd38      	pop	{r3, r4, r5, pc}
 80054c4:	2000046c 	.word	0x2000046c

080054c8 <_write_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	4604      	mov	r4, r0
 80054cc:	4608      	mov	r0, r1
 80054ce:	4611      	mov	r1, r2
 80054d0:	2200      	movs	r2, #0
 80054d2:	4d05      	ldr	r5, [pc, #20]	@ (80054e8 <_write_r+0x20>)
 80054d4:	602a      	str	r2, [r5, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	f7fc fc1d 	bl	8001d16 <_write>
 80054dc:	1c43      	adds	r3, r0, #1
 80054de:	d102      	bne.n	80054e6 <_write_r+0x1e>
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	b103      	cbz	r3, 80054e6 <_write_r+0x1e>
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	bd38      	pop	{r3, r4, r5, pc}
 80054e8:	2000046c 	.word	0x2000046c

080054ec <__errno>:
 80054ec:	4b01      	ldr	r3, [pc, #4]	@ (80054f4 <__errno+0x8>)
 80054ee:	6818      	ldr	r0, [r3, #0]
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	20000028 	.word	0x20000028

080054f8 <__libc_init_array>:
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	2600      	movs	r6, #0
 80054fc:	4d0c      	ldr	r5, [pc, #48]	@ (8005530 <__libc_init_array+0x38>)
 80054fe:	4c0d      	ldr	r4, [pc, #52]	@ (8005534 <__libc_init_array+0x3c>)
 8005500:	1b64      	subs	r4, r4, r5
 8005502:	10a4      	asrs	r4, r4, #2
 8005504:	42a6      	cmp	r6, r4
 8005506:	d109      	bne.n	800551c <__libc_init_array+0x24>
 8005508:	f003 fb68 	bl	8008bdc <_init>
 800550c:	2600      	movs	r6, #0
 800550e:	4d0a      	ldr	r5, [pc, #40]	@ (8005538 <__libc_init_array+0x40>)
 8005510:	4c0a      	ldr	r4, [pc, #40]	@ (800553c <__libc_init_array+0x44>)
 8005512:	1b64      	subs	r4, r4, r5
 8005514:	10a4      	asrs	r4, r4, #2
 8005516:	42a6      	cmp	r6, r4
 8005518:	d105      	bne.n	8005526 <__libc_init_array+0x2e>
 800551a:	bd70      	pop	{r4, r5, r6, pc}
 800551c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005520:	4798      	blx	r3
 8005522:	3601      	adds	r6, #1
 8005524:	e7ee      	b.n	8005504 <__libc_init_array+0xc>
 8005526:	f855 3b04 	ldr.w	r3, [r5], #4
 800552a:	4798      	blx	r3
 800552c:	3601      	adds	r6, #1
 800552e:	e7f2      	b.n	8005516 <__libc_init_array+0x1e>
 8005530:	08009050 	.word	0x08009050
 8005534:	08009050 	.word	0x08009050
 8005538:	08009050 	.word	0x08009050
 800553c:	08009054 	.word	0x08009054

08005540 <__retarget_lock_init_recursive>:
 8005540:	4770      	bx	lr

08005542 <__retarget_lock_acquire_recursive>:
 8005542:	4770      	bx	lr

08005544 <__retarget_lock_release_recursive>:
 8005544:	4770      	bx	lr

08005546 <memchr>:
 8005546:	4603      	mov	r3, r0
 8005548:	b510      	push	{r4, lr}
 800554a:	b2c9      	uxtb	r1, r1
 800554c:	4402      	add	r2, r0
 800554e:	4293      	cmp	r3, r2
 8005550:	4618      	mov	r0, r3
 8005552:	d101      	bne.n	8005558 <memchr+0x12>
 8005554:	2000      	movs	r0, #0
 8005556:	e003      	b.n	8005560 <memchr+0x1a>
 8005558:	7804      	ldrb	r4, [r0, #0]
 800555a:	3301      	adds	r3, #1
 800555c:	428c      	cmp	r4, r1
 800555e:	d1f6      	bne.n	800554e <memchr+0x8>
 8005560:	bd10      	pop	{r4, pc}
	...

08005564 <nanf>:
 8005564:	4800      	ldr	r0, [pc, #0]	@ (8005568 <nanf+0x4>)
 8005566:	4770      	bx	lr
 8005568:	7fc00000 	.word	0x7fc00000

0800556c <quorem>:
 800556c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005570:	6903      	ldr	r3, [r0, #16]
 8005572:	690c      	ldr	r4, [r1, #16]
 8005574:	4607      	mov	r7, r0
 8005576:	42a3      	cmp	r3, r4
 8005578:	db7e      	blt.n	8005678 <quorem+0x10c>
 800557a:	3c01      	subs	r4, #1
 800557c:	00a3      	lsls	r3, r4, #2
 800557e:	f100 0514 	add.w	r5, r0, #20
 8005582:	f101 0814 	add.w	r8, r1, #20
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800558c:	9301      	str	r3, [sp, #4]
 800558e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005592:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005596:	3301      	adds	r3, #1
 8005598:	429a      	cmp	r2, r3
 800559a:	fbb2 f6f3 	udiv	r6, r2, r3
 800559e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055a2:	d32e      	bcc.n	8005602 <quorem+0x96>
 80055a4:	f04f 0a00 	mov.w	sl, #0
 80055a8:	46c4      	mov	ip, r8
 80055aa:	46ae      	mov	lr, r5
 80055ac:	46d3      	mov	fp, sl
 80055ae:	f85c 3b04 	ldr.w	r3, [ip], #4
 80055b2:	b298      	uxth	r0, r3
 80055b4:	fb06 a000 	mla	r0, r6, r0, sl
 80055b8:	0c1b      	lsrs	r3, r3, #16
 80055ba:	0c02      	lsrs	r2, r0, #16
 80055bc:	fb06 2303 	mla	r3, r6, r3, r2
 80055c0:	f8de 2000 	ldr.w	r2, [lr]
 80055c4:	b280      	uxth	r0, r0
 80055c6:	b292      	uxth	r2, r2
 80055c8:	1a12      	subs	r2, r2, r0
 80055ca:	445a      	add	r2, fp
 80055cc:	f8de 0000 	ldr.w	r0, [lr]
 80055d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80055da:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80055de:	b292      	uxth	r2, r2
 80055e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80055e4:	45e1      	cmp	r9, ip
 80055e6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80055ea:	f84e 2b04 	str.w	r2, [lr], #4
 80055ee:	d2de      	bcs.n	80055ae <quorem+0x42>
 80055f0:	9b00      	ldr	r3, [sp, #0]
 80055f2:	58eb      	ldr	r3, [r5, r3]
 80055f4:	b92b      	cbnz	r3, 8005602 <quorem+0x96>
 80055f6:	9b01      	ldr	r3, [sp, #4]
 80055f8:	3b04      	subs	r3, #4
 80055fa:	429d      	cmp	r5, r3
 80055fc:	461a      	mov	r2, r3
 80055fe:	d32f      	bcc.n	8005660 <quorem+0xf4>
 8005600:	613c      	str	r4, [r7, #16]
 8005602:	4638      	mov	r0, r7
 8005604:	f001 f9c4 	bl	8006990 <__mcmp>
 8005608:	2800      	cmp	r0, #0
 800560a:	db25      	blt.n	8005658 <quorem+0xec>
 800560c:	4629      	mov	r1, r5
 800560e:	2000      	movs	r0, #0
 8005610:	f858 2b04 	ldr.w	r2, [r8], #4
 8005614:	f8d1 c000 	ldr.w	ip, [r1]
 8005618:	fa1f fe82 	uxth.w	lr, r2
 800561c:	fa1f f38c 	uxth.w	r3, ip
 8005620:	eba3 030e 	sub.w	r3, r3, lr
 8005624:	4403      	add	r3, r0
 8005626:	0c12      	lsrs	r2, r2, #16
 8005628:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800562c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005630:	b29b      	uxth	r3, r3
 8005632:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005636:	45c1      	cmp	r9, r8
 8005638:	ea4f 4022 	mov.w	r0, r2, asr #16
 800563c:	f841 3b04 	str.w	r3, [r1], #4
 8005640:	d2e6      	bcs.n	8005610 <quorem+0xa4>
 8005642:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005646:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800564a:	b922      	cbnz	r2, 8005656 <quorem+0xea>
 800564c:	3b04      	subs	r3, #4
 800564e:	429d      	cmp	r5, r3
 8005650:	461a      	mov	r2, r3
 8005652:	d30b      	bcc.n	800566c <quorem+0x100>
 8005654:	613c      	str	r4, [r7, #16]
 8005656:	3601      	adds	r6, #1
 8005658:	4630      	mov	r0, r6
 800565a:	b003      	add	sp, #12
 800565c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005660:	6812      	ldr	r2, [r2, #0]
 8005662:	3b04      	subs	r3, #4
 8005664:	2a00      	cmp	r2, #0
 8005666:	d1cb      	bne.n	8005600 <quorem+0x94>
 8005668:	3c01      	subs	r4, #1
 800566a:	e7c6      	b.n	80055fa <quorem+0x8e>
 800566c:	6812      	ldr	r2, [r2, #0]
 800566e:	3b04      	subs	r3, #4
 8005670:	2a00      	cmp	r2, #0
 8005672:	d1ef      	bne.n	8005654 <quorem+0xe8>
 8005674:	3c01      	subs	r4, #1
 8005676:	e7ea      	b.n	800564e <quorem+0xe2>
 8005678:	2000      	movs	r0, #0
 800567a:	e7ee      	b.n	800565a <quorem+0xee>
 800567c:	0000      	movs	r0, r0
	...

08005680 <_dtoa_r>:
 8005680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005684:	4614      	mov	r4, r2
 8005686:	461d      	mov	r5, r3
 8005688:	69c7      	ldr	r7, [r0, #28]
 800568a:	b097      	sub	sp, #92	@ 0x5c
 800568c:	4683      	mov	fp, r0
 800568e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005692:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005694:	b97f      	cbnz	r7, 80056b6 <_dtoa_r+0x36>
 8005696:	2010      	movs	r0, #16
 8005698:	f000 fe02 	bl	80062a0 <malloc>
 800569c:	4602      	mov	r2, r0
 800569e:	f8cb 001c 	str.w	r0, [fp, #28]
 80056a2:	b920      	cbnz	r0, 80056ae <_dtoa_r+0x2e>
 80056a4:	21ef      	movs	r1, #239	@ 0xef
 80056a6:	4ba8      	ldr	r3, [pc, #672]	@ (8005948 <_dtoa_r+0x2c8>)
 80056a8:	48a8      	ldr	r0, [pc, #672]	@ (800594c <_dtoa_r+0x2cc>)
 80056aa:	f002 fc23 	bl	8007ef4 <__assert_func>
 80056ae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80056b2:	6007      	str	r7, [r0, #0]
 80056b4:	60c7      	str	r7, [r0, #12]
 80056b6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056ba:	6819      	ldr	r1, [r3, #0]
 80056bc:	b159      	cbz	r1, 80056d6 <_dtoa_r+0x56>
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	2301      	movs	r3, #1
 80056c2:	4093      	lsls	r3, r2
 80056c4:	604a      	str	r2, [r1, #4]
 80056c6:	608b      	str	r3, [r1, #8]
 80056c8:	4658      	mov	r0, fp
 80056ca:	f000 fedf 	bl	800648c <_Bfree>
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	1e2b      	subs	r3, r5, #0
 80056d8:	bfaf      	iteee	ge
 80056da:	2300      	movge	r3, #0
 80056dc:	2201      	movlt	r2, #1
 80056de:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80056e2:	9303      	strlt	r3, [sp, #12]
 80056e4:	bfa8      	it	ge
 80056e6:	6033      	strge	r3, [r6, #0]
 80056e8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80056ec:	4b98      	ldr	r3, [pc, #608]	@ (8005950 <_dtoa_r+0x2d0>)
 80056ee:	bfb8      	it	lt
 80056f0:	6032      	strlt	r2, [r6, #0]
 80056f2:	ea33 0308 	bics.w	r3, r3, r8
 80056f6:	d112      	bne.n	800571e <_dtoa_r+0x9e>
 80056f8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80056fc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005704:	4323      	orrs	r3, r4
 8005706:	f000 8550 	beq.w	80061aa <_dtoa_r+0xb2a>
 800570a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800570c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005954 <_dtoa_r+0x2d4>
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 8552 	beq.w	80061ba <_dtoa_r+0xb3a>
 8005716:	f10a 0303 	add.w	r3, sl, #3
 800571a:	f000 bd4c 	b.w	80061b6 <_dtoa_r+0xb36>
 800571e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005722:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800572a:	2200      	movs	r2, #0
 800572c:	2300      	movs	r3, #0
 800572e:	f7fb f93b 	bl	80009a8 <__aeabi_dcmpeq>
 8005732:	4607      	mov	r7, r0
 8005734:	b158      	cbz	r0, 800574e <_dtoa_r+0xce>
 8005736:	2301      	movs	r3, #1
 8005738:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800573a:	6013      	str	r3, [r2, #0]
 800573c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800573e:	b113      	cbz	r3, 8005746 <_dtoa_r+0xc6>
 8005740:	4b85      	ldr	r3, [pc, #532]	@ (8005958 <_dtoa_r+0x2d8>)
 8005742:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800595c <_dtoa_r+0x2dc>
 800574a:	f000 bd36 	b.w	80061ba <_dtoa_r+0xb3a>
 800574e:	ab14      	add	r3, sp, #80	@ 0x50
 8005750:	9301      	str	r3, [sp, #4]
 8005752:	ab15      	add	r3, sp, #84	@ 0x54
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	4658      	mov	r0, fp
 8005758:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800575c:	f001 fa30 	bl	8006bc0 <__d2b>
 8005760:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005764:	4681      	mov	r9, r0
 8005766:	2e00      	cmp	r6, #0
 8005768:	d077      	beq.n	800585a <_dtoa_r+0x1da>
 800576a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800576e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005770:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005778:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800577c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005780:	9712      	str	r7, [sp, #72]	@ 0x48
 8005782:	4619      	mov	r1, r3
 8005784:	2200      	movs	r2, #0
 8005786:	4b76      	ldr	r3, [pc, #472]	@ (8005960 <_dtoa_r+0x2e0>)
 8005788:	f7fa fcee 	bl	8000168 <__aeabi_dsub>
 800578c:	a368      	add	r3, pc, #416	@ (adr r3, 8005930 <_dtoa_r+0x2b0>)
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	f7fa fea1 	bl	80004d8 <__aeabi_dmul>
 8005796:	a368      	add	r3, pc, #416	@ (adr r3, 8005938 <_dtoa_r+0x2b8>)
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	f7fa fce6 	bl	800016c <__adddf3>
 80057a0:	4604      	mov	r4, r0
 80057a2:	4630      	mov	r0, r6
 80057a4:	460d      	mov	r5, r1
 80057a6:	f7fa fe2d 	bl	8000404 <__aeabi_i2d>
 80057aa:	a365      	add	r3, pc, #404	@ (adr r3, 8005940 <_dtoa_r+0x2c0>)
 80057ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b0:	f7fa fe92 	bl	80004d8 <__aeabi_dmul>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4620      	mov	r0, r4
 80057ba:	4629      	mov	r1, r5
 80057bc:	f7fa fcd6 	bl	800016c <__adddf3>
 80057c0:	4604      	mov	r4, r0
 80057c2:	460d      	mov	r5, r1
 80057c4:	f7fb f938 	bl	8000a38 <__aeabi_d2iz>
 80057c8:	2200      	movs	r2, #0
 80057ca:	4607      	mov	r7, r0
 80057cc:	2300      	movs	r3, #0
 80057ce:	4620      	mov	r0, r4
 80057d0:	4629      	mov	r1, r5
 80057d2:	f7fb f8f3 	bl	80009bc <__aeabi_dcmplt>
 80057d6:	b140      	cbz	r0, 80057ea <_dtoa_r+0x16a>
 80057d8:	4638      	mov	r0, r7
 80057da:	f7fa fe13 	bl	8000404 <__aeabi_i2d>
 80057de:	4622      	mov	r2, r4
 80057e0:	462b      	mov	r3, r5
 80057e2:	f7fb f8e1 	bl	80009a8 <__aeabi_dcmpeq>
 80057e6:	b900      	cbnz	r0, 80057ea <_dtoa_r+0x16a>
 80057e8:	3f01      	subs	r7, #1
 80057ea:	2f16      	cmp	r7, #22
 80057ec:	d853      	bhi.n	8005896 <_dtoa_r+0x216>
 80057ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057f2:	4b5c      	ldr	r3, [pc, #368]	@ (8005964 <_dtoa_r+0x2e4>)
 80057f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fc:	f7fb f8de 	bl	80009bc <__aeabi_dcmplt>
 8005800:	2800      	cmp	r0, #0
 8005802:	d04a      	beq.n	800589a <_dtoa_r+0x21a>
 8005804:	2300      	movs	r3, #0
 8005806:	3f01      	subs	r7, #1
 8005808:	930f      	str	r3, [sp, #60]	@ 0x3c
 800580a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800580c:	1b9b      	subs	r3, r3, r6
 800580e:	1e5a      	subs	r2, r3, #1
 8005810:	bf46      	itte	mi
 8005812:	f1c3 0801 	rsbmi	r8, r3, #1
 8005816:	2300      	movmi	r3, #0
 8005818:	f04f 0800 	movpl.w	r8, #0
 800581c:	9209      	str	r2, [sp, #36]	@ 0x24
 800581e:	bf48      	it	mi
 8005820:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005822:	2f00      	cmp	r7, #0
 8005824:	db3b      	blt.n	800589e <_dtoa_r+0x21e>
 8005826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005828:	970e      	str	r7, [sp, #56]	@ 0x38
 800582a:	443b      	add	r3, r7
 800582c:	9309      	str	r3, [sp, #36]	@ 0x24
 800582e:	2300      	movs	r3, #0
 8005830:	930a      	str	r3, [sp, #40]	@ 0x28
 8005832:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005834:	2b09      	cmp	r3, #9
 8005836:	d866      	bhi.n	8005906 <_dtoa_r+0x286>
 8005838:	2b05      	cmp	r3, #5
 800583a:	bfc4      	itt	gt
 800583c:	3b04      	subgt	r3, #4
 800583e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005840:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005842:	bfc8      	it	gt
 8005844:	2400      	movgt	r4, #0
 8005846:	f1a3 0302 	sub.w	r3, r3, #2
 800584a:	bfd8      	it	le
 800584c:	2401      	movle	r4, #1
 800584e:	2b03      	cmp	r3, #3
 8005850:	d864      	bhi.n	800591c <_dtoa_r+0x29c>
 8005852:	e8df f003 	tbb	[pc, r3]
 8005856:	382b      	.short	0x382b
 8005858:	5636      	.short	0x5636
 800585a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800585e:	441e      	add	r6, r3
 8005860:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005864:	2b20      	cmp	r3, #32
 8005866:	bfc1      	itttt	gt
 8005868:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800586c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005870:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005874:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005878:	bfd6      	itet	le
 800587a:	f1c3 0320 	rsble	r3, r3, #32
 800587e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005882:	fa04 f003 	lslle.w	r0, r4, r3
 8005886:	f7fa fdad 	bl	80003e4 <__aeabi_ui2d>
 800588a:	2201      	movs	r2, #1
 800588c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005890:	3e01      	subs	r6, #1
 8005892:	9212      	str	r2, [sp, #72]	@ 0x48
 8005894:	e775      	b.n	8005782 <_dtoa_r+0x102>
 8005896:	2301      	movs	r3, #1
 8005898:	e7b6      	b.n	8005808 <_dtoa_r+0x188>
 800589a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800589c:	e7b5      	b.n	800580a <_dtoa_r+0x18a>
 800589e:	427b      	negs	r3, r7
 80058a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80058a2:	2300      	movs	r3, #0
 80058a4:	eba8 0807 	sub.w	r8, r8, r7
 80058a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80058aa:	e7c2      	b.n	8005832 <_dtoa_r+0x1b2>
 80058ac:	2300      	movs	r3, #0
 80058ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	dc35      	bgt.n	8005922 <_dtoa_r+0x2a2>
 80058b6:	2301      	movs	r3, #1
 80058b8:	461a      	mov	r2, r3
 80058ba:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80058be:	9221      	str	r2, [sp, #132]	@ 0x84
 80058c0:	e00b      	b.n	80058da <_dtoa_r+0x25a>
 80058c2:	2301      	movs	r3, #1
 80058c4:	e7f3      	b.n	80058ae <_dtoa_r+0x22e>
 80058c6:	2300      	movs	r3, #0
 80058c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80058cc:	18fb      	adds	r3, r7, r3
 80058ce:	9308      	str	r3, [sp, #32]
 80058d0:	3301      	adds	r3, #1
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	9307      	str	r3, [sp, #28]
 80058d6:	bfb8      	it	lt
 80058d8:	2301      	movlt	r3, #1
 80058da:	2100      	movs	r1, #0
 80058dc:	2204      	movs	r2, #4
 80058de:	f8db 001c 	ldr.w	r0, [fp, #28]
 80058e2:	f102 0514 	add.w	r5, r2, #20
 80058e6:	429d      	cmp	r5, r3
 80058e8:	d91f      	bls.n	800592a <_dtoa_r+0x2aa>
 80058ea:	6041      	str	r1, [r0, #4]
 80058ec:	4658      	mov	r0, fp
 80058ee:	f000 fd8d 	bl	800640c <_Balloc>
 80058f2:	4682      	mov	sl, r0
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d139      	bne.n	800596c <_dtoa_r+0x2ec>
 80058f8:	4602      	mov	r2, r0
 80058fa:	f240 11af 	movw	r1, #431	@ 0x1af
 80058fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005968 <_dtoa_r+0x2e8>)
 8005900:	e6d2      	b.n	80056a8 <_dtoa_r+0x28>
 8005902:	2301      	movs	r3, #1
 8005904:	e7e0      	b.n	80058c8 <_dtoa_r+0x248>
 8005906:	2401      	movs	r4, #1
 8005908:	2300      	movs	r3, #0
 800590a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800590c:	9320      	str	r3, [sp, #128]	@ 0x80
 800590e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005912:	2200      	movs	r2, #0
 8005914:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005918:	2312      	movs	r3, #18
 800591a:	e7d0      	b.n	80058be <_dtoa_r+0x23e>
 800591c:	2301      	movs	r3, #1
 800591e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005920:	e7f5      	b.n	800590e <_dtoa_r+0x28e>
 8005922:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005924:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005928:	e7d7      	b.n	80058da <_dtoa_r+0x25a>
 800592a:	3101      	adds	r1, #1
 800592c:	0052      	lsls	r2, r2, #1
 800592e:	e7d8      	b.n	80058e2 <_dtoa_r+0x262>
 8005930:	636f4361 	.word	0x636f4361
 8005934:	3fd287a7 	.word	0x3fd287a7
 8005938:	8b60c8b3 	.word	0x8b60c8b3
 800593c:	3fc68a28 	.word	0x3fc68a28
 8005940:	509f79fb 	.word	0x509f79fb
 8005944:	3fd34413 	.word	0x3fd34413
 8005948:	08008c60 	.word	0x08008c60
 800594c:	08008c77 	.word	0x08008c77
 8005950:	7ff00000 	.word	0x7ff00000
 8005954:	08008c5c 	.word	0x08008c5c
 8005958:	08008c2b 	.word	0x08008c2b
 800595c:	08008c2a 	.word	0x08008c2a
 8005960:	3ff80000 	.word	0x3ff80000
 8005964:	08008d70 	.word	0x08008d70
 8005968:	08008ccf 	.word	0x08008ccf
 800596c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005970:	6018      	str	r0, [r3, #0]
 8005972:	9b07      	ldr	r3, [sp, #28]
 8005974:	2b0e      	cmp	r3, #14
 8005976:	f200 80a4 	bhi.w	8005ac2 <_dtoa_r+0x442>
 800597a:	2c00      	cmp	r4, #0
 800597c:	f000 80a1 	beq.w	8005ac2 <_dtoa_r+0x442>
 8005980:	2f00      	cmp	r7, #0
 8005982:	dd33      	ble.n	80059ec <_dtoa_r+0x36c>
 8005984:	4b86      	ldr	r3, [pc, #536]	@ (8005ba0 <_dtoa_r+0x520>)
 8005986:	f007 020f 	and.w	r2, r7, #15
 800598a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800598e:	05f8      	lsls	r0, r7, #23
 8005990:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005994:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005998:	ea4f 1427 	mov.w	r4, r7, asr #4
 800599c:	d516      	bpl.n	80059cc <_dtoa_r+0x34c>
 800599e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059a2:	4b80      	ldr	r3, [pc, #512]	@ (8005ba4 <_dtoa_r+0x524>)
 80059a4:	2603      	movs	r6, #3
 80059a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059aa:	f7fa febf 	bl	800072c <__aeabi_ddiv>
 80059ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059b2:	f004 040f 	and.w	r4, r4, #15
 80059b6:	4d7b      	ldr	r5, [pc, #492]	@ (8005ba4 <_dtoa_r+0x524>)
 80059b8:	b954      	cbnz	r4, 80059d0 <_dtoa_r+0x350>
 80059ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059c2:	f7fa feb3 	bl	800072c <__aeabi_ddiv>
 80059c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059ca:	e028      	b.n	8005a1e <_dtoa_r+0x39e>
 80059cc:	2602      	movs	r6, #2
 80059ce:	e7f2      	b.n	80059b6 <_dtoa_r+0x336>
 80059d0:	07e1      	lsls	r1, r4, #31
 80059d2:	d508      	bpl.n	80059e6 <_dtoa_r+0x366>
 80059d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059dc:	f7fa fd7c 	bl	80004d8 <__aeabi_dmul>
 80059e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059e4:	3601      	adds	r6, #1
 80059e6:	1064      	asrs	r4, r4, #1
 80059e8:	3508      	adds	r5, #8
 80059ea:	e7e5      	b.n	80059b8 <_dtoa_r+0x338>
 80059ec:	f000 80d2 	beq.w	8005b94 <_dtoa_r+0x514>
 80059f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059f4:	427c      	negs	r4, r7
 80059f6:	4b6a      	ldr	r3, [pc, #424]	@ (8005ba0 <_dtoa_r+0x520>)
 80059f8:	f004 020f 	and.w	r2, r4, #15
 80059fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a04:	f7fa fd68 	bl	80004d8 <__aeabi_dmul>
 8005a08:	2602      	movs	r6, #2
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a10:	4d64      	ldr	r5, [pc, #400]	@ (8005ba4 <_dtoa_r+0x524>)
 8005a12:	1124      	asrs	r4, r4, #4
 8005a14:	2c00      	cmp	r4, #0
 8005a16:	f040 80b2 	bne.w	8005b7e <_dtoa_r+0x4fe>
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1d3      	bne.n	80059c6 <_dtoa_r+0x346>
 8005a1e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005a22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 80b7 	beq.w	8005b98 <_dtoa_r+0x518>
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	4629      	mov	r1, r5
 8005a30:	4b5d      	ldr	r3, [pc, #372]	@ (8005ba8 <_dtoa_r+0x528>)
 8005a32:	f7fa ffc3 	bl	80009bc <__aeabi_dcmplt>
 8005a36:	2800      	cmp	r0, #0
 8005a38:	f000 80ae 	beq.w	8005b98 <_dtoa_r+0x518>
 8005a3c:	9b07      	ldr	r3, [sp, #28]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 80aa 	beq.w	8005b98 <_dtoa_r+0x518>
 8005a44:	9b08      	ldr	r3, [sp, #32]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	dd37      	ble.n	8005aba <_dtoa_r+0x43a>
 8005a4a:	1e7b      	subs	r3, r7, #1
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	9304      	str	r3, [sp, #16]
 8005a50:	2200      	movs	r2, #0
 8005a52:	4629      	mov	r1, r5
 8005a54:	4b55      	ldr	r3, [pc, #340]	@ (8005bac <_dtoa_r+0x52c>)
 8005a56:	f7fa fd3f 	bl	80004d8 <__aeabi_dmul>
 8005a5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a5e:	9c08      	ldr	r4, [sp, #32]
 8005a60:	3601      	adds	r6, #1
 8005a62:	4630      	mov	r0, r6
 8005a64:	f7fa fcce 	bl	8000404 <__aeabi_i2d>
 8005a68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a6c:	f7fa fd34 	bl	80004d8 <__aeabi_dmul>
 8005a70:	2200      	movs	r2, #0
 8005a72:	4b4f      	ldr	r3, [pc, #316]	@ (8005bb0 <_dtoa_r+0x530>)
 8005a74:	f7fa fb7a 	bl	800016c <__adddf3>
 8005a78:	4605      	mov	r5, r0
 8005a7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a7e:	2c00      	cmp	r4, #0
 8005a80:	f040 809a 	bne.w	8005bb8 <_dtoa_r+0x538>
 8005a84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8005bb4 <_dtoa_r+0x534>)
 8005a8c:	f7fa fb6c 	bl	8000168 <__aeabi_dsub>
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a98:	462a      	mov	r2, r5
 8005a9a:	4633      	mov	r3, r6
 8005a9c:	f7fa ffac 	bl	80009f8 <__aeabi_dcmpgt>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	f040 828e 	bne.w	8005fc2 <_dtoa_r+0x942>
 8005aa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005aaa:	462a      	mov	r2, r5
 8005aac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005ab0:	f7fa ff84 	bl	80009bc <__aeabi_dcmplt>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	f040 8127 	bne.w	8005d08 <_dtoa_r+0x688>
 8005aba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005abe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005ac2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f2c0 8163 	blt.w	8005d90 <_dtoa_r+0x710>
 8005aca:	2f0e      	cmp	r7, #14
 8005acc:	f300 8160 	bgt.w	8005d90 <_dtoa_r+0x710>
 8005ad0:	4b33      	ldr	r3, [pc, #204]	@ (8005ba0 <_dtoa_r+0x520>)
 8005ad2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ad6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ada:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005ade:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	da03      	bge.n	8005aec <_dtoa_r+0x46c>
 8005ae4:	9b07      	ldr	r3, [sp, #28]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f340 8100 	ble.w	8005cec <_dtoa_r+0x66c>
 8005aec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005af0:	4656      	mov	r6, sl
 8005af2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005af6:	4620      	mov	r0, r4
 8005af8:	4629      	mov	r1, r5
 8005afa:	f7fa fe17 	bl	800072c <__aeabi_ddiv>
 8005afe:	f7fa ff9b 	bl	8000a38 <__aeabi_d2iz>
 8005b02:	4680      	mov	r8, r0
 8005b04:	f7fa fc7e 	bl	8000404 <__aeabi_i2d>
 8005b08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b0c:	f7fa fce4 	bl	80004d8 <__aeabi_dmul>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	4620      	mov	r0, r4
 8005b16:	4629      	mov	r1, r5
 8005b18:	f7fa fb26 	bl	8000168 <__aeabi_dsub>
 8005b1c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005b20:	9d07      	ldr	r5, [sp, #28]
 8005b22:	f806 4b01 	strb.w	r4, [r6], #1
 8005b26:	eba6 040a 	sub.w	r4, r6, sl
 8005b2a:	42a5      	cmp	r5, r4
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	f040 8116 	bne.w	8005d60 <_dtoa_r+0x6e0>
 8005b34:	f7fa fb1a 	bl	800016c <__adddf3>
 8005b38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	460d      	mov	r5, r1
 8005b40:	f7fa ff5a 	bl	80009f8 <__aeabi_dcmpgt>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	f040 80f8 	bne.w	8005d3a <_dtoa_r+0x6ba>
 8005b4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b4e:	4620      	mov	r0, r4
 8005b50:	4629      	mov	r1, r5
 8005b52:	f7fa ff29 	bl	80009a8 <__aeabi_dcmpeq>
 8005b56:	b118      	cbz	r0, 8005b60 <_dtoa_r+0x4e0>
 8005b58:	f018 0f01 	tst.w	r8, #1
 8005b5c:	f040 80ed 	bne.w	8005d3a <_dtoa_r+0x6ba>
 8005b60:	4649      	mov	r1, r9
 8005b62:	4658      	mov	r0, fp
 8005b64:	f000 fc92 	bl	800648c <_Bfree>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	7033      	strb	r3, [r6, #0]
 8005b6c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005b6e:	3701      	adds	r7, #1
 8005b70:	601f      	str	r7, [r3, #0]
 8005b72:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8320 	beq.w	80061ba <_dtoa_r+0xb3a>
 8005b7a:	601e      	str	r6, [r3, #0]
 8005b7c:	e31d      	b.n	80061ba <_dtoa_r+0xb3a>
 8005b7e:	07e2      	lsls	r2, r4, #31
 8005b80:	d505      	bpl.n	8005b8e <_dtoa_r+0x50e>
 8005b82:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b86:	f7fa fca7 	bl	80004d8 <__aeabi_dmul>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	3601      	adds	r6, #1
 8005b8e:	1064      	asrs	r4, r4, #1
 8005b90:	3508      	adds	r5, #8
 8005b92:	e73f      	b.n	8005a14 <_dtoa_r+0x394>
 8005b94:	2602      	movs	r6, #2
 8005b96:	e742      	b.n	8005a1e <_dtoa_r+0x39e>
 8005b98:	9c07      	ldr	r4, [sp, #28]
 8005b9a:	9704      	str	r7, [sp, #16]
 8005b9c:	e761      	b.n	8005a62 <_dtoa_r+0x3e2>
 8005b9e:	bf00      	nop
 8005ba0:	08008d70 	.word	0x08008d70
 8005ba4:	08008d48 	.word	0x08008d48
 8005ba8:	3ff00000 	.word	0x3ff00000
 8005bac:	40240000 	.word	0x40240000
 8005bb0:	401c0000 	.word	0x401c0000
 8005bb4:	40140000 	.word	0x40140000
 8005bb8:	4b70      	ldr	r3, [pc, #448]	@ (8005d7c <_dtoa_r+0x6fc>)
 8005bba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005bbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005bc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005bc4:	4454      	add	r4, sl
 8005bc6:	2900      	cmp	r1, #0
 8005bc8:	d045      	beq.n	8005c56 <_dtoa_r+0x5d6>
 8005bca:	2000      	movs	r0, #0
 8005bcc:	496c      	ldr	r1, [pc, #432]	@ (8005d80 <_dtoa_r+0x700>)
 8005bce:	f7fa fdad 	bl	800072c <__aeabi_ddiv>
 8005bd2:	4633      	mov	r3, r6
 8005bd4:	462a      	mov	r2, r5
 8005bd6:	f7fa fac7 	bl	8000168 <__aeabi_dsub>
 8005bda:	4656      	mov	r6, sl
 8005bdc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005be0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005be4:	f7fa ff28 	bl	8000a38 <__aeabi_d2iz>
 8005be8:	4605      	mov	r5, r0
 8005bea:	f7fa fc0b 	bl	8000404 <__aeabi_i2d>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bf6:	f7fa fab7 	bl	8000168 <__aeabi_dsub>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	3530      	adds	r5, #48	@ 0x30
 8005c00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c08:	f806 5b01 	strb.w	r5, [r6], #1
 8005c0c:	f7fa fed6 	bl	80009bc <__aeabi_dcmplt>
 8005c10:	2800      	cmp	r0, #0
 8005c12:	d163      	bne.n	8005cdc <_dtoa_r+0x65c>
 8005c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c18:	2000      	movs	r0, #0
 8005c1a:	495a      	ldr	r1, [pc, #360]	@ (8005d84 <_dtoa_r+0x704>)
 8005c1c:	f7fa faa4 	bl	8000168 <__aeabi_dsub>
 8005c20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c24:	f7fa feca 	bl	80009bc <__aeabi_dcmplt>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	f040 8087 	bne.w	8005d3c <_dtoa_r+0x6bc>
 8005c2e:	42a6      	cmp	r6, r4
 8005c30:	f43f af43 	beq.w	8005aba <_dtoa_r+0x43a>
 8005c34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4b53      	ldr	r3, [pc, #332]	@ (8005d88 <_dtoa_r+0x708>)
 8005c3c:	f7fa fc4c 	bl	80004d8 <__aeabi_dmul>
 8005c40:	2200      	movs	r2, #0
 8005c42:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c4a:	4b4f      	ldr	r3, [pc, #316]	@ (8005d88 <_dtoa_r+0x708>)
 8005c4c:	f7fa fc44 	bl	80004d8 <__aeabi_dmul>
 8005c50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c54:	e7c4      	b.n	8005be0 <_dtoa_r+0x560>
 8005c56:	4631      	mov	r1, r6
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f7fa fc3d 	bl	80004d8 <__aeabi_dmul>
 8005c5e:	4656      	mov	r6, sl
 8005c60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c64:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c6a:	f7fa fee5 	bl	8000a38 <__aeabi_d2iz>
 8005c6e:	4605      	mov	r5, r0
 8005c70:	f7fa fbc8 	bl	8000404 <__aeabi_i2d>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c7c:	f7fa fa74 	bl	8000168 <__aeabi_dsub>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	3530      	adds	r5, #48	@ 0x30
 8005c86:	f806 5b01 	strb.w	r5, [r6], #1
 8005c8a:	42a6      	cmp	r6, r4
 8005c8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	d124      	bne.n	8005ce0 <_dtoa_r+0x660>
 8005c96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c9a:	4b39      	ldr	r3, [pc, #228]	@ (8005d80 <_dtoa_r+0x700>)
 8005c9c:	f7fa fa66 	bl	800016c <__adddf3>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ca8:	f7fa fea6 	bl	80009f8 <__aeabi_dcmpgt>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	d145      	bne.n	8005d3c <_dtoa_r+0x6bc>
 8005cb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	4932      	ldr	r1, [pc, #200]	@ (8005d80 <_dtoa_r+0x700>)
 8005cb8:	f7fa fa56 	bl	8000168 <__aeabi_dsub>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cc4:	f7fa fe7a 	bl	80009bc <__aeabi_dcmplt>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	f43f aef6 	beq.w	8005aba <_dtoa_r+0x43a>
 8005cce:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005cd0:	1e73      	subs	r3, r6, #1
 8005cd2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005cd4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005cd8:	2b30      	cmp	r3, #48	@ 0x30
 8005cda:	d0f8      	beq.n	8005cce <_dtoa_r+0x64e>
 8005cdc:	9f04      	ldr	r7, [sp, #16]
 8005cde:	e73f      	b.n	8005b60 <_dtoa_r+0x4e0>
 8005ce0:	4b29      	ldr	r3, [pc, #164]	@ (8005d88 <_dtoa_r+0x708>)
 8005ce2:	f7fa fbf9 	bl	80004d8 <__aeabi_dmul>
 8005ce6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cea:	e7bc      	b.n	8005c66 <_dtoa_r+0x5e6>
 8005cec:	d10c      	bne.n	8005d08 <_dtoa_r+0x688>
 8005cee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	4b25      	ldr	r3, [pc, #148]	@ (8005d8c <_dtoa_r+0x70c>)
 8005cf6:	f7fa fbef 	bl	80004d8 <__aeabi_dmul>
 8005cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cfe:	f7fa fe71 	bl	80009e4 <__aeabi_dcmpge>
 8005d02:	2800      	cmp	r0, #0
 8005d04:	f000 815b 	beq.w	8005fbe <_dtoa_r+0x93e>
 8005d08:	2400      	movs	r4, #0
 8005d0a:	4625      	mov	r5, r4
 8005d0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d0e:	4656      	mov	r6, sl
 8005d10:	43db      	mvns	r3, r3
 8005d12:	9304      	str	r3, [sp, #16]
 8005d14:	2700      	movs	r7, #0
 8005d16:	4621      	mov	r1, r4
 8005d18:	4658      	mov	r0, fp
 8005d1a:	f000 fbb7 	bl	800648c <_Bfree>
 8005d1e:	2d00      	cmp	r5, #0
 8005d20:	d0dc      	beq.n	8005cdc <_dtoa_r+0x65c>
 8005d22:	b12f      	cbz	r7, 8005d30 <_dtoa_r+0x6b0>
 8005d24:	42af      	cmp	r7, r5
 8005d26:	d003      	beq.n	8005d30 <_dtoa_r+0x6b0>
 8005d28:	4639      	mov	r1, r7
 8005d2a:	4658      	mov	r0, fp
 8005d2c:	f000 fbae 	bl	800648c <_Bfree>
 8005d30:	4629      	mov	r1, r5
 8005d32:	4658      	mov	r0, fp
 8005d34:	f000 fbaa 	bl	800648c <_Bfree>
 8005d38:	e7d0      	b.n	8005cdc <_dtoa_r+0x65c>
 8005d3a:	9704      	str	r7, [sp, #16]
 8005d3c:	4633      	mov	r3, r6
 8005d3e:	461e      	mov	r6, r3
 8005d40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d44:	2a39      	cmp	r2, #57	@ 0x39
 8005d46:	d107      	bne.n	8005d58 <_dtoa_r+0x6d8>
 8005d48:	459a      	cmp	sl, r3
 8005d4a:	d1f8      	bne.n	8005d3e <_dtoa_r+0x6be>
 8005d4c:	9a04      	ldr	r2, [sp, #16]
 8005d4e:	3201      	adds	r2, #1
 8005d50:	9204      	str	r2, [sp, #16]
 8005d52:	2230      	movs	r2, #48	@ 0x30
 8005d54:	f88a 2000 	strb.w	r2, [sl]
 8005d58:	781a      	ldrb	r2, [r3, #0]
 8005d5a:	3201      	adds	r2, #1
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	e7bd      	b.n	8005cdc <_dtoa_r+0x65c>
 8005d60:	2200      	movs	r2, #0
 8005d62:	4b09      	ldr	r3, [pc, #36]	@ (8005d88 <_dtoa_r+0x708>)
 8005d64:	f7fa fbb8 	bl	80004d8 <__aeabi_dmul>
 8005d68:	2200      	movs	r2, #0
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	460d      	mov	r5, r1
 8005d70:	f7fa fe1a 	bl	80009a8 <__aeabi_dcmpeq>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	f43f aebc 	beq.w	8005af2 <_dtoa_r+0x472>
 8005d7a:	e6f1      	b.n	8005b60 <_dtoa_r+0x4e0>
 8005d7c:	08008d70 	.word	0x08008d70
 8005d80:	3fe00000 	.word	0x3fe00000
 8005d84:	3ff00000 	.word	0x3ff00000
 8005d88:	40240000 	.word	0x40240000
 8005d8c:	40140000 	.word	0x40140000
 8005d90:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005d92:	2a00      	cmp	r2, #0
 8005d94:	f000 80db 	beq.w	8005f4e <_dtoa_r+0x8ce>
 8005d98:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005d9a:	2a01      	cmp	r2, #1
 8005d9c:	f300 80bf 	bgt.w	8005f1e <_dtoa_r+0x89e>
 8005da0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005da2:	2a00      	cmp	r2, #0
 8005da4:	f000 80b7 	beq.w	8005f16 <_dtoa_r+0x896>
 8005da8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005dac:	4646      	mov	r6, r8
 8005dae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005db0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005db2:	2101      	movs	r1, #1
 8005db4:	441a      	add	r2, r3
 8005db6:	4658      	mov	r0, fp
 8005db8:	4498      	add	r8, r3
 8005dba:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dbc:	f000 fc64 	bl	8006688 <__i2b>
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	b15e      	cbz	r6, 8005ddc <_dtoa_r+0x75c>
 8005dc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	dd08      	ble.n	8005ddc <_dtoa_r+0x75c>
 8005dca:	42b3      	cmp	r3, r6
 8005dcc:	bfa8      	it	ge
 8005dce:	4633      	movge	r3, r6
 8005dd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dd2:	eba8 0803 	sub.w	r8, r8, r3
 8005dd6:	1af6      	subs	r6, r6, r3
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dde:	b1f3      	cbz	r3, 8005e1e <_dtoa_r+0x79e>
 8005de0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 80b7 	beq.w	8005f56 <_dtoa_r+0x8d6>
 8005de8:	b18c      	cbz	r4, 8005e0e <_dtoa_r+0x78e>
 8005dea:	4629      	mov	r1, r5
 8005dec:	4622      	mov	r2, r4
 8005dee:	4658      	mov	r0, fp
 8005df0:	f000 fd08 	bl	8006804 <__pow5mult>
 8005df4:	464a      	mov	r2, r9
 8005df6:	4601      	mov	r1, r0
 8005df8:	4605      	mov	r5, r0
 8005dfa:	4658      	mov	r0, fp
 8005dfc:	f000 fc5a 	bl	80066b4 <__multiply>
 8005e00:	4649      	mov	r1, r9
 8005e02:	9004      	str	r0, [sp, #16]
 8005e04:	4658      	mov	r0, fp
 8005e06:	f000 fb41 	bl	800648c <_Bfree>
 8005e0a:	9b04      	ldr	r3, [sp, #16]
 8005e0c:	4699      	mov	r9, r3
 8005e0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e10:	1b1a      	subs	r2, r3, r4
 8005e12:	d004      	beq.n	8005e1e <_dtoa_r+0x79e>
 8005e14:	4649      	mov	r1, r9
 8005e16:	4658      	mov	r0, fp
 8005e18:	f000 fcf4 	bl	8006804 <__pow5mult>
 8005e1c:	4681      	mov	r9, r0
 8005e1e:	2101      	movs	r1, #1
 8005e20:	4658      	mov	r0, fp
 8005e22:	f000 fc31 	bl	8006688 <__i2b>
 8005e26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e28:	4604      	mov	r4, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 81c9 	beq.w	80061c2 <_dtoa_r+0xb42>
 8005e30:	461a      	mov	r2, r3
 8005e32:	4601      	mov	r1, r0
 8005e34:	4658      	mov	r0, fp
 8005e36:	f000 fce5 	bl	8006804 <__pow5mult>
 8005e3a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	f300 808f 	bgt.w	8005f62 <_dtoa_r+0x8e2>
 8005e44:	9b02      	ldr	r3, [sp, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f040 8087 	bne.w	8005f5a <_dtoa_r+0x8da>
 8005e4c:	9b03      	ldr	r3, [sp, #12]
 8005e4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f040 8083 	bne.w	8005f5e <_dtoa_r+0x8de>
 8005e58:	9b03      	ldr	r3, [sp, #12]
 8005e5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e5e:	0d1b      	lsrs	r3, r3, #20
 8005e60:	051b      	lsls	r3, r3, #20
 8005e62:	b12b      	cbz	r3, 8005e70 <_dtoa_r+0x7f0>
 8005e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e66:	f108 0801 	add.w	r8, r8, #1
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e6e:	2301      	movs	r3, #1
 8005e70:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 81aa 	beq.w	80061ce <_dtoa_r+0xb4e>
 8005e7a:	6923      	ldr	r3, [r4, #16]
 8005e7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e80:	6918      	ldr	r0, [r3, #16]
 8005e82:	f000 fbb5 	bl	80065f0 <__hi0bits>
 8005e86:	f1c0 0020 	rsb	r0, r0, #32
 8005e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e8c:	4418      	add	r0, r3
 8005e8e:	f010 001f 	ands.w	r0, r0, #31
 8005e92:	d071      	beq.n	8005f78 <_dtoa_r+0x8f8>
 8005e94:	f1c0 0320 	rsb	r3, r0, #32
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	dd65      	ble.n	8005f68 <_dtoa_r+0x8e8>
 8005e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e9e:	f1c0 001c 	rsb	r0, r0, #28
 8005ea2:	4403      	add	r3, r0
 8005ea4:	4480      	add	r8, r0
 8005ea6:	4406      	add	r6, r0
 8005ea8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eaa:	f1b8 0f00 	cmp.w	r8, #0
 8005eae:	dd05      	ble.n	8005ebc <_dtoa_r+0x83c>
 8005eb0:	4649      	mov	r1, r9
 8005eb2:	4642      	mov	r2, r8
 8005eb4:	4658      	mov	r0, fp
 8005eb6:	f000 fcff 	bl	80068b8 <__lshift>
 8005eba:	4681      	mov	r9, r0
 8005ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	dd05      	ble.n	8005ece <_dtoa_r+0x84e>
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	4658      	mov	r0, fp
 8005ec8:	f000 fcf6 	bl	80068b8 <__lshift>
 8005ecc:	4604      	mov	r4, r0
 8005ece:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d053      	beq.n	8005f7c <_dtoa_r+0x8fc>
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	4648      	mov	r0, r9
 8005ed8:	f000 fd5a 	bl	8006990 <__mcmp>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	da4d      	bge.n	8005f7c <_dtoa_r+0x8fc>
 8005ee0:	1e7b      	subs	r3, r7, #1
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	9304      	str	r3, [sp, #16]
 8005ee6:	220a      	movs	r2, #10
 8005ee8:	2300      	movs	r3, #0
 8005eea:	4658      	mov	r0, fp
 8005eec:	f000 faf0 	bl	80064d0 <__multadd>
 8005ef0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ef2:	4681      	mov	r9, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 816c 	beq.w	80061d2 <_dtoa_r+0xb52>
 8005efa:	2300      	movs	r3, #0
 8005efc:	4629      	mov	r1, r5
 8005efe:	220a      	movs	r2, #10
 8005f00:	4658      	mov	r0, fp
 8005f02:	f000 fae5 	bl	80064d0 <__multadd>
 8005f06:	9b08      	ldr	r3, [sp, #32]
 8005f08:	4605      	mov	r5, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	dc61      	bgt.n	8005fd2 <_dtoa_r+0x952>
 8005f0e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	dc3b      	bgt.n	8005f8c <_dtoa_r+0x90c>
 8005f14:	e05d      	b.n	8005fd2 <_dtoa_r+0x952>
 8005f16:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f18:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005f1c:	e746      	b.n	8005dac <_dtoa_r+0x72c>
 8005f1e:	9b07      	ldr	r3, [sp, #28]
 8005f20:	1e5c      	subs	r4, r3, #1
 8005f22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f24:	42a3      	cmp	r3, r4
 8005f26:	bfbf      	itttt	lt
 8005f28:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005f2a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005f2c:	1ae3      	sublt	r3, r4, r3
 8005f2e:	18d2      	addlt	r2, r2, r3
 8005f30:	bfa8      	it	ge
 8005f32:	1b1c      	subge	r4, r3, r4
 8005f34:	9b07      	ldr	r3, [sp, #28]
 8005f36:	bfbe      	ittt	lt
 8005f38:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005f3a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005f3c:	2400      	movlt	r4, #0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	bfb5      	itete	lt
 8005f42:	eba8 0603 	sublt.w	r6, r8, r3
 8005f46:	4646      	movge	r6, r8
 8005f48:	2300      	movlt	r3, #0
 8005f4a:	9b07      	ldrge	r3, [sp, #28]
 8005f4c:	e730      	b.n	8005db0 <_dtoa_r+0x730>
 8005f4e:	4646      	mov	r6, r8
 8005f50:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f52:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005f54:	e735      	b.n	8005dc2 <_dtoa_r+0x742>
 8005f56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f58:	e75c      	b.n	8005e14 <_dtoa_r+0x794>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e788      	b.n	8005e70 <_dtoa_r+0x7f0>
 8005f5e:	9b02      	ldr	r3, [sp, #8]
 8005f60:	e786      	b.n	8005e70 <_dtoa_r+0x7f0>
 8005f62:	2300      	movs	r3, #0
 8005f64:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f66:	e788      	b.n	8005e7a <_dtoa_r+0x7fa>
 8005f68:	d09f      	beq.n	8005eaa <_dtoa_r+0x82a>
 8005f6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f6c:	331c      	adds	r3, #28
 8005f6e:	441a      	add	r2, r3
 8005f70:	4498      	add	r8, r3
 8005f72:	441e      	add	r6, r3
 8005f74:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f76:	e798      	b.n	8005eaa <_dtoa_r+0x82a>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	e7f6      	b.n	8005f6a <_dtoa_r+0x8ea>
 8005f7c:	9b07      	ldr	r3, [sp, #28]
 8005f7e:	9704      	str	r7, [sp, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	dc20      	bgt.n	8005fc6 <_dtoa_r+0x946>
 8005f84:	9308      	str	r3, [sp, #32]
 8005f86:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	dd1e      	ble.n	8005fca <_dtoa_r+0x94a>
 8005f8c:	9b08      	ldr	r3, [sp, #32]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f47f aebc 	bne.w	8005d0c <_dtoa_r+0x68c>
 8005f94:	4621      	mov	r1, r4
 8005f96:	2205      	movs	r2, #5
 8005f98:	4658      	mov	r0, fp
 8005f9a:	f000 fa99 	bl	80064d0 <__multadd>
 8005f9e:	4601      	mov	r1, r0
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	4648      	mov	r0, r9
 8005fa4:	f000 fcf4 	bl	8006990 <__mcmp>
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	f77f aeaf 	ble.w	8005d0c <_dtoa_r+0x68c>
 8005fae:	2331      	movs	r3, #49	@ 0x31
 8005fb0:	4656      	mov	r6, sl
 8005fb2:	f806 3b01 	strb.w	r3, [r6], #1
 8005fb6:	9b04      	ldr	r3, [sp, #16]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	9304      	str	r3, [sp, #16]
 8005fbc:	e6aa      	b.n	8005d14 <_dtoa_r+0x694>
 8005fbe:	9c07      	ldr	r4, [sp, #28]
 8005fc0:	9704      	str	r7, [sp, #16]
 8005fc2:	4625      	mov	r5, r4
 8005fc4:	e7f3      	b.n	8005fae <_dtoa_r+0x92e>
 8005fc6:	9b07      	ldr	r3, [sp, #28]
 8005fc8:	9308      	str	r3, [sp, #32]
 8005fca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 8104 	beq.w	80061da <_dtoa_r+0xb5a>
 8005fd2:	2e00      	cmp	r6, #0
 8005fd4:	dd05      	ble.n	8005fe2 <_dtoa_r+0x962>
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	4632      	mov	r2, r6
 8005fda:	4658      	mov	r0, fp
 8005fdc:	f000 fc6c 	bl	80068b8 <__lshift>
 8005fe0:	4605      	mov	r5, r0
 8005fe2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d05a      	beq.n	800609e <_dtoa_r+0xa1e>
 8005fe8:	4658      	mov	r0, fp
 8005fea:	6869      	ldr	r1, [r5, #4]
 8005fec:	f000 fa0e 	bl	800640c <_Balloc>
 8005ff0:	4606      	mov	r6, r0
 8005ff2:	b928      	cbnz	r0, 8006000 <_dtoa_r+0x980>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005ffa:	4b83      	ldr	r3, [pc, #524]	@ (8006208 <_dtoa_r+0xb88>)
 8005ffc:	f7ff bb54 	b.w	80056a8 <_dtoa_r+0x28>
 8006000:	692a      	ldr	r2, [r5, #16]
 8006002:	f105 010c 	add.w	r1, r5, #12
 8006006:	3202      	adds	r2, #2
 8006008:	0092      	lsls	r2, r2, #2
 800600a:	300c      	adds	r0, #12
 800600c:	f001 ff5e 	bl	8007ecc <memcpy>
 8006010:	2201      	movs	r2, #1
 8006012:	4631      	mov	r1, r6
 8006014:	4658      	mov	r0, fp
 8006016:	f000 fc4f 	bl	80068b8 <__lshift>
 800601a:	462f      	mov	r7, r5
 800601c:	4605      	mov	r5, r0
 800601e:	f10a 0301 	add.w	r3, sl, #1
 8006022:	9307      	str	r3, [sp, #28]
 8006024:	9b08      	ldr	r3, [sp, #32]
 8006026:	4453      	add	r3, sl
 8006028:	930b      	str	r3, [sp, #44]	@ 0x2c
 800602a:	9b02      	ldr	r3, [sp, #8]
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	930a      	str	r3, [sp, #40]	@ 0x28
 8006032:	9b07      	ldr	r3, [sp, #28]
 8006034:	4621      	mov	r1, r4
 8006036:	3b01      	subs	r3, #1
 8006038:	4648      	mov	r0, r9
 800603a:	9302      	str	r3, [sp, #8]
 800603c:	f7ff fa96 	bl	800556c <quorem>
 8006040:	4639      	mov	r1, r7
 8006042:	9008      	str	r0, [sp, #32]
 8006044:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006048:	4648      	mov	r0, r9
 800604a:	f000 fca1 	bl	8006990 <__mcmp>
 800604e:	462a      	mov	r2, r5
 8006050:	9009      	str	r0, [sp, #36]	@ 0x24
 8006052:	4621      	mov	r1, r4
 8006054:	4658      	mov	r0, fp
 8006056:	f000 fcb7 	bl	80069c8 <__mdiff>
 800605a:	68c2      	ldr	r2, [r0, #12]
 800605c:	4606      	mov	r6, r0
 800605e:	bb02      	cbnz	r2, 80060a2 <_dtoa_r+0xa22>
 8006060:	4601      	mov	r1, r0
 8006062:	4648      	mov	r0, r9
 8006064:	f000 fc94 	bl	8006990 <__mcmp>
 8006068:	4602      	mov	r2, r0
 800606a:	4631      	mov	r1, r6
 800606c:	4658      	mov	r0, fp
 800606e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006070:	f000 fa0c 	bl	800648c <_Bfree>
 8006074:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006076:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006078:	9e07      	ldr	r6, [sp, #28]
 800607a:	ea43 0102 	orr.w	r1, r3, r2
 800607e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006080:	4319      	orrs	r1, r3
 8006082:	d110      	bne.n	80060a6 <_dtoa_r+0xa26>
 8006084:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006088:	d029      	beq.n	80060de <_dtoa_r+0xa5e>
 800608a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800608c:	2b00      	cmp	r3, #0
 800608e:	dd02      	ble.n	8006096 <_dtoa_r+0xa16>
 8006090:	9b08      	ldr	r3, [sp, #32]
 8006092:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006096:	9b02      	ldr	r3, [sp, #8]
 8006098:	f883 8000 	strb.w	r8, [r3]
 800609c:	e63b      	b.n	8005d16 <_dtoa_r+0x696>
 800609e:	4628      	mov	r0, r5
 80060a0:	e7bb      	b.n	800601a <_dtoa_r+0x99a>
 80060a2:	2201      	movs	r2, #1
 80060a4:	e7e1      	b.n	800606a <_dtoa_r+0x9ea>
 80060a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	db04      	blt.n	80060b6 <_dtoa_r+0xa36>
 80060ac:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80060ae:	430b      	orrs	r3, r1
 80060b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060b2:	430b      	orrs	r3, r1
 80060b4:	d120      	bne.n	80060f8 <_dtoa_r+0xa78>
 80060b6:	2a00      	cmp	r2, #0
 80060b8:	dded      	ble.n	8006096 <_dtoa_r+0xa16>
 80060ba:	4649      	mov	r1, r9
 80060bc:	2201      	movs	r2, #1
 80060be:	4658      	mov	r0, fp
 80060c0:	f000 fbfa 	bl	80068b8 <__lshift>
 80060c4:	4621      	mov	r1, r4
 80060c6:	4681      	mov	r9, r0
 80060c8:	f000 fc62 	bl	8006990 <__mcmp>
 80060cc:	2800      	cmp	r0, #0
 80060ce:	dc03      	bgt.n	80060d8 <_dtoa_r+0xa58>
 80060d0:	d1e1      	bne.n	8006096 <_dtoa_r+0xa16>
 80060d2:	f018 0f01 	tst.w	r8, #1
 80060d6:	d0de      	beq.n	8006096 <_dtoa_r+0xa16>
 80060d8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060dc:	d1d8      	bne.n	8006090 <_dtoa_r+0xa10>
 80060de:	2339      	movs	r3, #57	@ 0x39
 80060e0:	9a02      	ldr	r2, [sp, #8]
 80060e2:	7013      	strb	r3, [r2, #0]
 80060e4:	4633      	mov	r3, r6
 80060e6:	461e      	mov	r6, r3
 80060e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80060ec:	3b01      	subs	r3, #1
 80060ee:	2a39      	cmp	r2, #57	@ 0x39
 80060f0:	d052      	beq.n	8006198 <_dtoa_r+0xb18>
 80060f2:	3201      	adds	r2, #1
 80060f4:	701a      	strb	r2, [r3, #0]
 80060f6:	e60e      	b.n	8005d16 <_dtoa_r+0x696>
 80060f8:	2a00      	cmp	r2, #0
 80060fa:	dd07      	ble.n	800610c <_dtoa_r+0xa8c>
 80060fc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006100:	d0ed      	beq.n	80060de <_dtoa_r+0xa5e>
 8006102:	9a02      	ldr	r2, [sp, #8]
 8006104:	f108 0301 	add.w	r3, r8, #1
 8006108:	7013      	strb	r3, [r2, #0]
 800610a:	e604      	b.n	8005d16 <_dtoa_r+0x696>
 800610c:	9b07      	ldr	r3, [sp, #28]
 800610e:	9a07      	ldr	r2, [sp, #28]
 8006110:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006114:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006116:	4293      	cmp	r3, r2
 8006118:	d028      	beq.n	800616c <_dtoa_r+0xaec>
 800611a:	4649      	mov	r1, r9
 800611c:	2300      	movs	r3, #0
 800611e:	220a      	movs	r2, #10
 8006120:	4658      	mov	r0, fp
 8006122:	f000 f9d5 	bl	80064d0 <__multadd>
 8006126:	42af      	cmp	r7, r5
 8006128:	4681      	mov	r9, r0
 800612a:	f04f 0300 	mov.w	r3, #0
 800612e:	f04f 020a 	mov.w	r2, #10
 8006132:	4639      	mov	r1, r7
 8006134:	4658      	mov	r0, fp
 8006136:	d107      	bne.n	8006148 <_dtoa_r+0xac8>
 8006138:	f000 f9ca 	bl	80064d0 <__multadd>
 800613c:	4607      	mov	r7, r0
 800613e:	4605      	mov	r5, r0
 8006140:	9b07      	ldr	r3, [sp, #28]
 8006142:	3301      	adds	r3, #1
 8006144:	9307      	str	r3, [sp, #28]
 8006146:	e774      	b.n	8006032 <_dtoa_r+0x9b2>
 8006148:	f000 f9c2 	bl	80064d0 <__multadd>
 800614c:	4629      	mov	r1, r5
 800614e:	4607      	mov	r7, r0
 8006150:	2300      	movs	r3, #0
 8006152:	220a      	movs	r2, #10
 8006154:	4658      	mov	r0, fp
 8006156:	f000 f9bb 	bl	80064d0 <__multadd>
 800615a:	4605      	mov	r5, r0
 800615c:	e7f0      	b.n	8006140 <_dtoa_r+0xac0>
 800615e:	9b08      	ldr	r3, [sp, #32]
 8006160:	2700      	movs	r7, #0
 8006162:	2b00      	cmp	r3, #0
 8006164:	bfcc      	ite	gt
 8006166:	461e      	movgt	r6, r3
 8006168:	2601      	movle	r6, #1
 800616a:	4456      	add	r6, sl
 800616c:	4649      	mov	r1, r9
 800616e:	2201      	movs	r2, #1
 8006170:	4658      	mov	r0, fp
 8006172:	f000 fba1 	bl	80068b8 <__lshift>
 8006176:	4621      	mov	r1, r4
 8006178:	4681      	mov	r9, r0
 800617a:	f000 fc09 	bl	8006990 <__mcmp>
 800617e:	2800      	cmp	r0, #0
 8006180:	dcb0      	bgt.n	80060e4 <_dtoa_r+0xa64>
 8006182:	d102      	bne.n	800618a <_dtoa_r+0xb0a>
 8006184:	f018 0f01 	tst.w	r8, #1
 8006188:	d1ac      	bne.n	80060e4 <_dtoa_r+0xa64>
 800618a:	4633      	mov	r3, r6
 800618c:	461e      	mov	r6, r3
 800618e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006192:	2a30      	cmp	r2, #48	@ 0x30
 8006194:	d0fa      	beq.n	800618c <_dtoa_r+0xb0c>
 8006196:	e5be      	b.n	8005d16 <_dtoa_r+0x696>
 8006198:	459a      	cmp	sl, r3
 800619a:	d1a4      	bne.n	80060e6 <_dtoa_r+0xa66>
 800619c:	9b04      	ldr	r3, [sp, #16]
 800619e:	3301      	adds	r3, #1
 80061a0:	9304      	str	r3, [sp, #16]
 80061a2:	2331      	movs	r3, #49	@ 0x31
 80061a4:	f88a 3000 	strb.w	r3, [sl]
 80061a8:	e5b5      	b.n	8005d16 <_dtoa_r+0x696>
 80061aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80061ac:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800620c <_dtoa_r+0xb8c>
 80061b0:	b11b      	cbz	r3, 80061ba <_dtoa_r+0xb3a>
 80061b2:	f10a 0308 	add.w	r3, sl, #8
 80061b6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	4650      	mov	r0, sl
 80061bc:	b017      	add	sp, #92	@ 0x5c
 80061be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	f77f ae3d 	ble.w	8005e44 <_dtoa_r+0x7c4>
 80061ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80061ce:	2001      	movs	r0, #1
 80061d0:	e65b      	b.n	8005e8a <_dtoa_r+0x80a>
 80061d2:	9b08      	ldr	r3, [sp, #32]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f77f aed6 	ble.w	8005f86 <_dtoa_r+0x906>
 80061da:	4656      	mov	r6, sl
 80061dc:	4621      	mov	r1, r4
 80061de:	4648      	mov	r0, r9
 80061e0:	f7ff f9c4 	bl	800556c <quorem>
 80061e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80061e8:	9b08      	ldr	r3, [sp, #32]
 80061ea:	f806 8b01 	strb.w	r8, [r6], #1
 80061ee:	eba6 020a 	sub.w	r2, r6, sl
 80061f2:	4293      	cmp	r3, r2
 80061f4:	ddb3      	ble.n	800615e <_dtoa_r+0xade>
 80061f6:	4649      	mov	r1, r9
 80061f8:	2300      	movs	r3, #0
 80061fa:	220a      	movs	r2, #10
 80061fc:	4658      	mov	r0, fp
 80061fe:	f000 f967 	bl	80064d0 <__multadd>
 8006202:	4681      	mov	r9, r0
 8006204:	e7ea      	b.n	80061dc <_dtoa_r+0xb5c>
 8006206:	bf00      	nop
 8006208:	08008ccf 	.word	0x08008ccf
 800620c:	08008c53 	.word	0x08008c53

08006210 <_free_r>:
 8006210:	b538      	push	{r3, r4, r5, lr}
 8006212:	4605      	mov	r5, r0
 8006214:	2900      	cmp	r1, #0
 8006216:	d040      	beq.n	800629a <_free_r+0x8a>
 8006218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800621c:	1f0c      	subs	r4, r1, #4
 800621e:	2b00      	cmp	r3, #0
 8006220:	bfb8      	it	lt
 8006222:	18e4      	addlt	r4, r4, r3
 8006224:	f000 f8e6 	bl	80063f4 <__malloc_lock>
 8006228:	4a1c      	ldr	r2, [pc, #112]	@ (800629c <_free_r+0x8c>)
 800622a:	6813      	ldr	r3, [r2, #0]
 800622c:	b933      	cbnz	r3, 800623c <_free_r+0x2c>
 800622e:	6063      	str	r3, [r4, #4]
 8006230:	6014      	str	r4, [r2, #0]
 8006232:	4628      	mov	r0, r5
 8006234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006238:	f000 b8e2 	b.w	8006400 <__malloc_unlock>
 800623c:	42a3      	cmp	r3, r4
 800623e:	d908      	bls.n	8006252 <_free_r+0x42>
 8006240:	6820      	ldr	r0, [r4, #0]
 8006242:	1821      	adds	r1, r4, r0
 8006244:	428b      	cmp	r3, r1
 8006246:	bf01      	itttt	eq
 8006248:	6819      	ldreq	r1, [r3, #0]
 800624a:	685b      	ldreq	r3, [r3, #4]
 800624c:	1809      	addeq	r1, r1, r0
 800624e:	6021      	streq	r1, [r4, #0]
 8006250:	e7ed      	b.n	800622e <_free_r+0x1e>
 8006252:	461a      	mov	r2, r3
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	b10b      	cbz	r3, 800625c <_free_r+0x4c>
 8006258:	42a3      	cmp	r3, r4
 800625a:	d9fa      	bls.n	8006252 <_free_r+0x42>
 800625c:	6811      	ldr	r1, [r2, #0]
 800625e:	1850      	adds	r0, r2, r1
 8006260:	42a0      	cmp	r0, r4
 8006262:	d10b      	bne.n	800627c <_free_r+0x6c>
 8006264:	6820      	ldr	r0, [r4, #0]
 8006266:	4401      	add	r1, r0
 8006268:	1850      	adds	r0, r2, r1
 800626a:	4283      	cmp	r3, r0
 800626c:	6011      	str	r1, [r2, #0]
 800626e:	d1e0      	bne.n	8006232 <_free_r+0x22>
 8006270:	6818      	ldr	r0, [r3, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	4408      	add	r0, r1
 8006276:	6010      	str	r0, [r2, #0]
 8006278:	6053      	str	r3, [r2, #4]
 800627a:	e7da      	b.n	8006232 <_free_r+0x22>
 800627c:	d902      	bls.n	8006284 <_free_r+0x74>
 800627e:	230c      	movs	r3, #12
 8006280:	602b      	str	r3, [r5, #0]
 8006282:	e7d6      	b.n	8006232 <_free_r+0x22>
 8006284:	6820      	ldr	r0, [r4, #0]
 8006286:	1821      	adds	r1, r4, r0
 8006288:	428b      	cmp	r3, r1
 800628a:	bf01      	itttt	eq
 800628c:	6819      	ldreq	r1, [r3, #0]
 800628e:	685b      	ldreq	r3, [r3, #4]
 8006290:	1809      	addeq	r1, r1, r0
 8006292:	6021      	streq	r1, [r4, #0]
 8006294:	6063      	str	r3, [r4, #4]
 8006296:	6054      	str	r4, [r2, #4]
 8006298:	e7cb      	b.n	8006232 <_free_r+0x22>
 800629a:	bd38      	pop	{r3, r4, r5, pc}
 800629c:	20000478 	.word	0x20000478

080062a0 <malloc>:
 80062a0:	4b02      	ldr	r3, [pc, #8]	@ (80062ac <malloc+0xc>)
 80062a2:	4601      	mov	r1, r0
 80062a4:	6818      	ldr	r0, [r3, #0]
 80062a6:	f000 b825 	b.w	80062f4 <_malloc_r>
 80062aa:	bf00      	nop
 80062ac:	20000028 	.word	0x20000028

080062b0 <sbrk_aligned>:
 80062b0:	b570      	push	{r4, r5, r6, lr}
 80062b2:	4e0f      	ldr	r6, [pc, #60]	@ (80062f0 <sbrk_aligned+0x40>)
 80062b4:	460c      	mov	r4, r1
 80062b6:	6831      	ldr	r1, [r6, #0]
 80062b8:	4605      	mov	r5, r0
 80062ba:	b911      	cbnz	r1, 80062c2 <sbrk_aligned+0x12>
 80062bc:	f001 fdf6 	bl	8007eac <_sbrk_r>
 80062c0:	6030      	str	r0, [r6, #0]
 80062c2:	4621      	mov	r1, r4
 80062c4:	4628      	mov	r0, r5
 80062c6:	f001 fdf1 	bl	8007eac <_sbrk_r>
 80062ca:	1c43      	adds	r3, r0, #1
 80062cc:	d103      	bne.n	80062d6 <sbrk_aligned+0x26>
 80062ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80062d2:	4620      	mov	r0, r4
 80062d4:	bd70      	pop	{r4, r5, r6, pc}
 80062d6:	1cc4      	adds	r4, r0, #3
 80062d8:	f024 0403 	bic.w	r4, r4, #3
 80062dc:	42a0      	cmp	r0, r4
 80062de:	d0f8      	beq.n	80062d2 <sbrk_aligned+0x22>
 80062e0:	1a21      	subs	r1, r4, r0
 80062e2:	4628      	mov	r0, r5
 80062e4:	f001 fde2 	bl	8007eac <_sbrk_r>
 80062e8:	3001      	adds	r0, #1
 80062ea:	d1f2      	bne.n	80062d2 <sbrk_aligned+0x22>
 80062ec:	e7ef      	b.n	80062ce <sbrk_aligned+0x1e>
 80062ee:	bf00      	nop
 80062f0:	20000474 	.word	0x20000474

080062f4 <_malloc_r>:
 80062f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062f8:	1ccd      	adds	r5, r1, #3
 80062fa:	f025 0503 	bic.w	r5, r5, #3
 80062fe:	3508      	adds	r5, #8
 8006300:	2d0c      	cmp	r5, #12
 8006302:	bf38      	it	cc
 8006304:	250c      	movcc	r5, #12
 8006306:	2d00      	cmp	r5, #0
 8006308:	4606      	mov	r6, r0
 800630a:	db01      	blt.n	8006310 <_malloc_r+0x1c>
 800630c:	42a9      	cmp	r1, r5
 800630e:	d904      	bls.n	800631a <_malloc_r+0x26>
 8006310:	230c      	movs	r3, #12
 8006312:	6033      	str	r3, [r6, #0]
 8006314:	2000      	movs	r0, #0
 8006316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800631a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063f0 <_malloc_r+0xfc>
 800631e:	f000 f869 	bl	80063f4 <__malloc_lock>
 8006322:	f8d8 3000 	ldr.w	r3, [r8]
 8006326:	461c      	mov	r4, r3
 8006328:	bb44      	cbnz	r4, 800637c <_malloc_r+0x88>
 800632a:	4629      	mov	r1, r5
 800632c:	4630      	mov	r0, r6
 800632e:	f7ff ffbf 	bl	80062b0 <sbrk_aligned>
 8006332:	1c43      	adds	r3, r0, #1
 8006334:	4604      	mov	r4, r0
 8006336:	d158      	bne.n	80063ea <_malloc_r+0xf6>
 8006338:	f8d8 4000 	ldr.w	r4, [r8]
 800633c:	4627      	mov	r7, r4
 800633e:	2f00      	cmp	r7, #0
 8006340:	d143      	bne.n	80063ca <_malloc_r+0xd6>
 8006342:	2c00      	cmp	r4, #0
 8006344:	d04b      	beq.n	80063de <_malloc_r+0xea>
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	4639      	mov	r1, r7
 800634a:	4630      	mov	r0, r6
 800634c:	eb04 0903 	add.w	r9, r4, r3
 8006350:	f001 fdac 	bl	8007eac <_sbrk_r>
 8006354:	4581      	cmp	r9, r0
 8006356:	d142      	bne.n	80063de <_malloc_r+0xea>
 8006358:	6821      	ldr	r1, [r4, #0]
 800635a:	4630      	mov	r0, r6
 800635c:	1a6d      	subs	r5, r5, r1
 800635e:	4629      	mov	r1, r5
 8006360:	f7ff ffa6 	bl	80062b0 <sbrk_aligned>
 8006364:	3001      	adds	r0, #1
 8006366:	d03a      	beq.n	80063de <_malloc_r+0xea>
 8006368:	6823      	ldr	r3, [r4, #0]
 800636a:	442b      	add	r3, r5
 800636c:	6023      	str	r3, [r4, #0]
 800636e:	f8d8 3000 	ldr.w	r3, [r8]
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	bb62      	cbnz	r2, 80063d0 <_malloc_r+0xdc>
 8006376:	f8c8 7000 	str.w	r7, [r8]
 800637a:	e00f      	b.n	800639c <_malloc_r+0xa8>
 800637c:	6822      	ldr	r2, [r4, #0]
 800637e:	1b52      	subs	r2, r2, r5
 8006380:	d420      	bmi.n	80063c4 <_malloc_r+0xd0>
 8006382:	2a0b      	cmp	r2, #11
 8006384:	d917      	bls.n	80063b6 <_malloc_r+0xc2>
 8006386:	1961      	adds	r1, r4, r5
 8006388:	42a3      	cmp	r3, r4
 800638a:	6025      	str	r5, [r4, #0]
 800638c:	bf18      	it	ne
 800638e:	6059      	strne	r1, [r3, #4]
 8006390:	6863      	ldr	r3, [r4, #4]
 8006392:	bf08      	it	eq
 8006394:	f8c8 1000 	streq.w	r1, [r8]
 8006398:	5162      	str	r2, [r4, r5]
 800639a:	604b      	str	r3, [r1, #4]
 800639c:	4630      	mov	r0, r6
 800639e:	f000 f82f 	bl	8006400 <__malloc_unlock>
 80063a2:	f104 000b 	add.w	r0, r4, #11
 80063a6:	1d23      	adds	r3, r4, #4
 80063a8:	f020 0007 	bic.w	r0, r0, #7
 80063ac:	1ac2      	subs	r2, r0, r3
 80063ae:	bf1c      	itt	ne
 80063b0:	1a1b      	subne	r3, r3, r0
 80063b2:	50a3      	strne	r3, [r4, r2]
 80063b4:	e7af      	b.n	8006316 <_malloc_r+0x22>
 80063b6:	6862      	ldr	r2, [r4, #4]
 80063b8:	42a3      	cmp	r3, r4
 80063ba:	bf0c      	ite	eq
 80063bc:	f8c8 2000 	streq.w	r2, [r8]
 80063c0:	605a      	strne	r2, [r3, #4]
 80063c2:	e7eb      	b.n	800639c <_malloc_r+0xa8>
 80063c4:	4623      	mov	r3, r4
 80063c6:	6864      	ldr	r4, [r4, #4]
 80063c8:	e7ae      	b.n	8006328 <_malloc_r+0x34>
 80063ca:	463c      	mov	r4, r7
 80063cc:	687f      	ldr	r7, [r7, #4]
 80063ce:	e7b6      	b.n	800633e <_malloc_r+0x4a>
 80063d0:	461a      	mov	r2, r3
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	42a3      	cmp	r3, r4
 80063d6:	d1fb      	bne.n	80063d0 <_malloc_r+0xdc>
 80063d8:	2300      	movs	r3, #0
 80063da:	6053      	str	r3, [r2, #4]
 80063dc:	e7de      	b.n	800639c <_malloc_r+0xa8>
 80063de:	230c      	movs	r3, #12
 80063e0:	4630      	mov	r0, r6
 80063e2:	6033      	str	r3, [r6, #0]
 80063e4:	f000 f80c 	bl	8006400 <__malloc_unlock>
 80063e8:	e794      	b.n	8006314 <_malloc_r+0x20>
 80063ea:	6005      	str	r5, [r0, #0]
 80063ec:	e7d6      	b.n	800639c <_malloc_r+0xa8>
 80063ee:	bf00      	nop
 80063f0:	20000478 	.word	0x20000478

080063f4 <__malloc_lock>:
 80063f4:	4801      	ldr	r0, [pc, #4]	@ (80063fc <__malloc_lock+0x8>)
 80063f6:	f7ff b8a4 	b.w	8005542 <__retarget_lock_acquire_recursive>
 80063fa:	bf00      	nop
 80063fc:	20000470 	.word	0x20000470

08006400 <__malloc_unlock>:
 8006400:	4801      	ldr	r0, [pc, #4]	@ (8006408 <__malloc_unlock+0x8>)
 8006402:	f7ff b89f 	b.w	8005544 <__retarget_lock_release_recursive>
 8006406:	bf00      	nop
 8006408:	20000470 	.word	0x20000470

0800640c <_Balloc>:
 800640c:	b570      	push	{r4, r5, r6, lr}
 800640e:	69c6      	ldr	r6, [r0, #28]
 8006410:	4604      	mov	r4, r0
 8006412:	460d      	mov	r5, r1
 8006414:	b976      	cbnz	r6, 8006434 <_Balloc+0x28>
 8006416:	2010      	movs	r0, #16
 8006418:	f7ff ff42 	bl	80062a0 <malloc>
 800641c:	4602      	mov	r2, r0
 800641e:	61e0      	str	r0, [r4, #28]
 8006420:	b920      	cbnz	r0, 800642c <_Balloc+0x20>
 8006422:	216b      	movs	r1, #107	@ 0x6b
 8006424:	4b17      	ldr	r3, [pc, #92]	@ (8006484 <_Balloc+0x78>)
 8006426:	4818      	ldr	r0, [pc, #96]	@ (8006488 <_Balloc+0x7c>)
 8006428:	f001 fd64 	bl	8007ef4 <__assert_func>
 800642c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006430:	6006      	str	r6, [r0, #0]
 8006432:	60c6      	str	r6, [r0, #12]
 8006434:	69e6      	ldr	r6, [r4, #28]
 8006436:	68f3      	ldr	r3, [r6, #12]
 8006438:	b183      	cbz	r3, 800645c <_Balloc+0x50>
 800643a:	69e3      	ldr	r3, [r4, #28]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006442:	b9b8      	cbnz	r0, 8006474 <_Balloc+0x68>
 8006444:	2101      	movs	r1, #1
 8006446:	fa01 f605 	lsl.w	r6, r1, r5
 800644a:	1d72      	adds	r2, r6, #5
 800644c:	4620      	mov	r0, r4
 800644e:	0092      	lsls	r2, r2, #2
 8006450:	f001 fd6e 	bl	8007f30 <_calloc_r>
 8006454:	b160      	cbz	r0, 8006470 <_Balloc+0x64>
 8006456:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800645a:	e00e      	b.n	800647a <_Balloc+0x6e>
 800645c:	2221      	movs	r2, #33	@ 0x21
 800645e:	2104      	movs	r1, #4
 8006460:	4620      	mov	r0, r4
 8006462:	f001 fd65 	bl	8007f30 <_calloc_r>
 8006466:	69e3      	ldr	r3, [r4, #28]
 8006468:	60f0      	str	r0, [r6, #12]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e4      	bne.n	800643a <_Balloc+0x2e>
 8006470:	2000      	movs	r0, #0
 8006472:	bd70      	pop	{r4, r5, r6, pc}
 8006474:	6802      	ldr	r2, [r0, #0]
 8006476:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800647a:	2300      	movs	r3, #0
 800647c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006480:	e7f7      	b.n	8006472 <_Balloc+0x66>
 8006482:	bf00      	nop
 8006484:	08008c60 	.word	0x08008c60
 8006488:	08008ce0 	.word	0x08008ce0

0800648c <_Bfree>:
 800648c:	b570      	push	{r4, r5, r6, lr}
 800648e:	69c6      	ldr	r6, [r0, #28]
 8006490:	4605      	mov	r5, r0
 8006492:	460c      	mov	r4, r1
 8006494:	b976      	cbnz	r6, 80064b4 <_Bfree+0x28>
 8006496:	2010      	movs	r0, #16
 8006498:	f7ff ff02 	bl	80062a0 <malloc>
 800649c:	4602      	mov	r2, r0
 800649e:	61e8      	str	r0, [r5, #28]
 80064a0:	b920      	cbnz	r0, 80064ac <_Bfree+0x20>
 80064a2:	218f      	movs	r1, #143	@ 0x8f
 80064a4:	4b08      	ldr	r3, [pc, #32]	@ (80064c8 <_Bfree+0x3c>)
 80064a6:	4809      	ldr	r0, [pc, #36]	@ (80064cc <_Bfree+0x40>)
 80064a8:	f001 fd24 	bl	8007ef4 <__assert_func>
 80064ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064b0:	6006      	str	r6, [r0, #0]
 80064b2:	60c6      	str	r6, [r0, #12]
 80064b4:	b13c      	cbz	r4, 80064c6 <_Bfree+0x3a>
 80064b6:	69eb      	ldr	r3, [r5, #28]
 80064b8:	6862      	ldr	r2, [r4, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064c0:	6021      	str	r1, [r4, #0]
 80064c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064c6:	bd70      	pop	{r4, r5, r6, pc}
 80064c8:	08008c60 	.word	0x08008c60
 80064cc:	08008ce0 	.word	0x08008ce0

080064d0 <__multadd>:
 80064d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d4:	4607      	mov	r7, r0
 80064d6:	460c      	mov	r4, r1
 80064d8:	461e      	mov	r6, r3
 80064da:	2000      	movs	r0, #0
 80064dc:	690d      	ldr	r5, [r1, #16]
 80064de:	f101 0c14 	add.w	ip, r1, #20
 80064e2:	f8dc 3000 	ldr.w	r3, [ip]
 80064e6:	3001      	adds	r0, #1
 80064e8:	b299      	uxth	r1, r3
 80064ea:	fb02 6101 	mla	r1, r2, r1, r6
 80064ee:	0c1e      	lsrs	r6, r3, #16
 80064f0:	0c0b      	lsrs	r3, r1, #16
 80064f2:	fb02 3306 	mla	r3, r2, r6, r3
 80064f6:	b289      	uxth	r1, r1
 80064f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80064fc:	4285      	cmp	r5, r0
 80064fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006502:	f84c 1b04 	str.w	r1, [ip], #4
 8006506:	dcec      	bgt.n	80064e2 <__multadd+0x12>
 8006508:	b30e      	cbz	r6, 800654e <__multadd+0x7e>
 800650a:	68a3      	ldr	r3, [r4, #8]
 800650c:	42ab      	cmp	r3, r5
 800650e:	dc19      	bgt.n	8006544 <__multadd+0x74>
 8006510:	6861      	ldr	r1, [r4, #4]
 8006512:	4638      	mov	r0, r7
 8006514:	3101      	adds	r1, #1
 8006516:	f7ff ff79 	bl	800640c <_Balloc>
 800651a:	4680      	mov	r8, r0
 800651c:	b928      	cbnz	r0, 800652a <__multadd+0x5a>
 800651e:	4602      	mov	r2, r0
 8006520:	21ba      	movs	r1, #186	@ 0xba
 8006522:	4b0c      	ldr	r3, [pc, #48]	@ (8006554 <__multadd+0x84>)
 8006524:	480c      	ldr	r0, [pc, #48]	@ (8006558 <__multadd+0x88>)
 8006526:	f001 fce5 	bl	8007ef4 <__assert_func>
 800652a:	6922      	ldr	r2, [r4, #16]
 800652c:	f104 010c 	add.w	r1, r4, #12
 8006530:	3202      	adds	r2, #2
 8006532:	0092      	lsls	r2, r2, #2
 8006534:	300c      	adds	r0, #12
 8006536:	f001 fcc9 	bl	8007ecc <memcpy>
 800653a:	4621      	mov	r1, r4
 800653c:	4638      	mov	r0, r7
 800653e:	f7ff ffa5 	bl	800648c <_Bfree>
 8006542:	4644      	mov	r4, r8
 8006544:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006548:	3501      	adds	r5, #1
 800654a:	615e      	str	r6, [r3, #20]
 800654c:	6125      	str	r5, [r4, #16]
 800654e:	4620      	mov	r0, r4
 8006550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006554:	08008ccf 	.word	0x08008ccf
 8006558:	08008ce0 	.word	0x08008ce0

0800655c <__s2b>:
 800655c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006560:	4615      	mov	r5, r2
 8006562:	2209      	movs	r2, #9
 8006564:	461f      	mov	r7, r3
 8006566:	3308      	adds	r3, #8
 8006568:	460c      	mov	r4, r1
 800656a:	fb93 f3f2 	sdiv	r3, r3, r2
 800656e:	4606      	mov	r6, r0
 8006570:	2201      	movs	r2, #1
 8006572:	2100      	movs	r1, #0
 8006574:	429a      	cmp	r2, r3
 8006576:	db09      	blt.n	800658c <__s2b+0x30>
 8006578:	4630      	mov	r0, r6
 800657a:	f7ff ff47 	bl	800640c <_Balloc>
 800657e:	b940      	cbnz	r0, 8006592 <__s2b+0x36>
 8006580:	4602      	mov	r2, r0
 8006582:	21d3      	movs	r1, #211	@ 0xd3
 8006584:	4b18      	ldr	r3, [pc, #96]	@ (80065e8 <__s2b+0x8c>)
 8006586:	4819      	ldr	r0, [pc, #100]	@ (80065ec <__s2b+0x90>)
 8006588:	f001 fcb4 	bl	8007ef4 <__assert_func>
 800658c:	0052      	lsls	r2, r2, #1
 800658e:	3101      	adds	r1, #1
 8006590:	e7f0      	b.n	8006574 <__s2b+0x18>
 8006592:	9b08      	ldr	r3, [sp, #32]
 8006594:	2d09      	cmp	r5, #9
 8006596:	6143      	str	r3, [r0, #20]
 8006598:	f04f 0301 	mov.w	r3, #1
 800659c:	6103      	str	r3, [r0, #16]
 800659e:	dd16      	ble.n	80065ce <__s2b+0x72>
 80065a0:	f104 0909 	add.w	r9, r4, #9
 80065a4:	46c8      	mov	r8, r9
 80065a6:	442c      	add	r4, r5
 80065a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80065ac:	4601      	mov	r1, r0
 80065ae:	220a      	movs	r2, #10
 80065b0:	4630      	mov	r0, r6
 80065b2:	3b30      	subs	r3, #48	@ 0x30
 80065b4:	f7ff ff8c 	bl	80064d0 <__multadd>
 80065b8:	45a0      	cmp	r8, r4
 80065ba:	d1f5      	bne.n	80065a8 <__s2b+0x4c>
 80065bc:	f1a5 0408 	sub.w	r4, r5, #8
 80065c0:	444c      	add	r4, r9
 80065c2:	1b2d      	subs	r5, r5, r4
 80065c4:	1963      	adds	r3, r4, r5
 80065c6:	42bb      	cmp	r3, r7
 80065c8:	db04      	blt.n	80065d4 <__s2b+0x78>
 80065ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065ce:	2509      	movs	r5, #9
 80065d0:	340a      	adds	r4, #10
 80065d2:	e7f6      	b.n	80065c2 <__s2b+0x66>
 80065d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80065d8:	4601      	mov	r1, r0
 80065da:	220a      	movs	r2, #10
 80065dc:	4630      	mov	r0, r6
 80065de:	3b30      	subs	r3, #48	@ 0x30
 80065e0:	f7ff ff76 	bl	80064d0 <__multadd>
 80065e4:	e7ee      	b.n	80065c4 <__s2b+0x68>
 80065e6:	bf00      	nop
 80065e8:	08008ccf 	.word	0x08008ccf
 80065ec:	08008ce0 	.word	0x08008ce0

080065f0 <__hi0bits>:
 80065f0:	4603      	mov	r3, r0
 80065f2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80065f6:	bf3a      	itte	cc
 80065f8:	0403      	lslcc	r3, r0, #16
 80065fa:	2010      	movcc	r0, #16
 80065fc:	2000      	movcs	r0, #0
 80065fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006602:	bf3c      	itt	cc
 8006604:	021b      	lslcc	r3, r3, #8
 8006606:	3008      	addcc	r0, #8
 8006608:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800660c:	bf3c      	itt	cc
 800660e:	011b      	lslcc	r3, r3, #4
 8006610:	3004      	addcc	r0, #4
 8006612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006616:	bf3c      	itt	cc
 8006618:	009b      	lslcc	r3, r3, #2
 800661a:	3002      	addcc	r0, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	db05      	blt.n	800662c <__hi0bits+0x3c>
 8006620:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006624:	f100 0001 	add.w	r0, r0, #1
 8006628:	bf08      	it	eq
 800662a:	2020      	moveq	r0, #32
 800662c:	4770      	bx	lr

0800662e <__lo0bits>:
 800662e:	6803      	ldr	r3, [r0, #0]
 8006630:	4602      	mov	r2, r0
 8006632:	f013 0007 	ands.w	r0, r3, #7
 8006636:	d00b      	beq.n	8006650 <__lo0bits+0x22>
 8006638:	07d9      	lsls	r1, r3, #31
 800663a:	d421      	bmi.n	8006680 <__lo0bits+0x52>
 800663c:	0798      	lsls	r0, r3, #30
 800663e:	bf49      	itett	mi
 8006640:	085b      	lsrmi	r3, r3, #1
 8006642:	089b      	lsrpl	r3, r3, #2
 8006644:	2001      	movmi	r0, #1
 8006646:	6013      	strmi	r3, [r2, #0]
 8006648:	bf5c      	itt	pl
 800664a:	2002      	movpl	r0, #2
 800664c:	6013      	strpl	r3, [r2, #0]
 800664e:	4770      	bx	lr
 8006650:	b299      	uxth	r1, r3
 8006652:	b909      	cbnz	r1, 8006658 <__lo0bits+0x2a>
 8006654:	2010      	movs	r0, #16
 8006656:	0c1b      	lsrs	r3, r3, #16
 8006658:	b2d9      	uxtb	r1, r3
 800665a:	b909      	cbnz	r1, 8006660 <__lo0bits+0x32>
 800665c:	3008      	adds	r0, #8
 800665e:	0a1b      	lsrs	r3, r3, #8
 8006660:	0719      	lsls	r1, r3, #28
 8006662:	bf04      	itt	eq
 8006664:	091b      	lsreq	r3, r3, #4
 8006666:	3004      	addeq	r0, #4
 8006668:	0799      	lsls	r1, r3, #30
 800666a:	bf04      	itt	eq
 800666c:	089b      	lsreq	r3, r3, #2
 800666e:	3002      	addeq	r0, #2
 8006670:	07d9      	lsls	r1, r3, #31
 8006672:	d403      	bmi.n	800667c <__lo0bits+0x4e>
 8006674:	085b      	lsrs	r3, r3, #1
 8006676:	f100 0001 	add.w	r0, r0, #1
 800667a:	d003      	beq.n	8006684 <__lo0bits+0x56>
 800667c:	6013      	str	r3, [r2, #0]
 800667e:	4770      	bx	lr
 8006680:	2000      	movs	r0, #0
 8006682:	4770      	bx	lr
 8006684:	2020      	movs	r0, #32
 8006686:	4770      	bx	lr

08006688 <__i2b>:
 8006688:	b510      	push	{r4, lr}
 800668a:	460c      	mov	r4, r1
 800668c:	2101      	movs	r1, #1
 800668e:	f7ff febd 	bl	800640c <_Balloc>
 8006692:	4602      	mov	r2, r0
 8006694:	b928      	cbnz	r0, 80066a2 <__i2b+0x1a>
 8006696:	f240 1145 	movw	r1, #325	@ 0x145
 800669a:	4b04      	ldr	r3, [pc, #16]	@ (80066ac <__i2b+0x24>)
 800669c:	4804      	ldr	r0, [pc, #16]	@ (80066b0 <__i2b+0x28>)
 800669e:	f001 fc29 	bl	8007ef4 <__assert_func>
 80066a2:	2301      	movs	r3, #1
 80066a4:	6144      	str	r4, [r0, #20]
 80066a6:	6103      	str	r3, [r0, #16]
 80066a8:	bd10      	pop	{r4, pc}
 80066aa:	bf00      	nop
 80066ac:	08008ccf 	.word	0x08008ccf
 80066b0:	08008ce0 	.word	0x08008ce0

080066b4 <__multiply>:
 80066b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b8:	4614      	mov	r4, r2
 80066ba:	690a      	ldr	r2, [r1, #16]
 80066bc:	6923      	ldr	r3, [r4, #16]
 80066be:	460f      	mov	r7, r1
 80066c0:	429a      	cmp	r2, r3
 80066c2:	bfa2      	ittt	ge
 80066c4:	4623      	movge	r3, r4
 80066c6:	460c      	movge	r4, r1
 80066c8:	461f      	movge	r7, r3
 80066ca:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80066ce:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80066d2:	68a3      	ldr	r3, [r4, #8]
 80066d4:	6861      	ldr	r1, [r4, #4]
 80066d6:	eb0a 0609 	add.w	r6, sl, r9
 80066da:	42b3      	cmp	r3, r6
 80066dc:	b085      	sub	sp, #20
 80066de:	bfb8      	it	lt
 80066e0:	3101      	addlt	r1, #1
 80066e2:	f7ff fe93 	bl	800640c <_Balloc>
 80066e6:	b930      	cbnz	r0, 80066f6 <__multiply+0x42>
 80066e8:	4602      	mov	r2, r0
 80066ea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80066ee:	4b43      	ldr	r3, [pc, #268]	@ (80067fc <__multiply+0x148>)
 80066f0:	4843      	ldr	r0, [pc, #268]	@ (8006800 <__multiply+0x14c>)
 80066f2:	f001 fbff 	bl	8007ef4 <__assert_func>
 80066f6:	f100 0514 	add.w	r5, r0, #20
 80066fa:	462b      	mov	r3, r5
 80066fc:	2200      	movs	r2, #0
 80066fe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006702:	4543      	cmp	r3, r8
 8006704:	d321      	bcc.n	800674a <__multiply+0x96>
 8006706:	f107 0114 	add.w	r1, r7, #20
 800670a:	f104 0214 	add.w	r2, r4, #20
 800670e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006712:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006716:	9302      	str	r3, [sp, #8]
 8006718:	1b13      	subs	r3, r2, r4
 800671a:	3b15      	subs	r3, #21
 800671c:	f023 0303 	bic.w	r3, r3, #3
 8006720:	3304      	adds	r3, #4
 8006722:	f104 0715 	add.w	r7, r4, #21
 8006726:	42ba      	cmp	r2, r7
 8006728:	bf38      	it	cc
 800672a:	2304      	movcc	r3, #4
 800672c:	9301      	str	r3, [sp, #4]
 800672e:	9b02      	ldr	r3, [sp, #8]
 8006730:	9103      	str	r1, [sp, #12]
 8006732:	428b      	cmp	r3, r1
 8006734:	d80c      	bhi.n	8006750 <__multiply+0x9c>
 8006736:	2e00      	cmp	r6, #0
 8006738:	dd03      	ble.n	8006742 <__multiply+0x8e>
 800673a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800673e:	2b00      	cmp	r3, #0
 8006740:	d05a      	beq.n	80067f8 <__multiply+0x144>
 8006742:	6106      	str	r6, [r0, #16]
 8006744:	b005      	add	sp, #20
 8006746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674a:	f843 2b04 	str.w	r2, [r3], #4
 800674e:	e7d8      	b.n	8006702 <__multiply+0x4e>
 8006750:	f8b1 a000 	ldrh.w	sl, [r1]
 8006754:	f1ba 0f00 	cmp.w	sl, #0
 8006758:	d023      	beq.n	80067a2 <__multiply+0xee>
 800675a:	46a9      	mov	r9, r5
 800675c:	f04f 0c00 	mov.w	ip, #0
 8006760:	f104 0e14 	add.w	lr, r4, #20
 8006764:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006768:	f8d9 3000 	ldr.w	r3, [r9]
 800676c:	fa1f fb87 	uxth.w	fp, r7
 8006770:	b29b      	uxth	r3, r3
 8006772:	fb0a 330b 	mla	r3, sl, fp, r3
 8006776:	4463      	add	r3, ip
 8006778:	f8d9 c000 	ldr.w	ip, [r9]
 800677c:	0c3f      	lsrs	r7, r7, #16
 800677e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006782:	fb0a c707 	mla	r7, sl, r7, ip
 8006786:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800678a:	b29b      	uxth	r3, r3
 800678c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006790:	4572      	cmp	r2, lr
 8006792:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006796:	f849 3b04 	str.w	r3, [r9], #4
 800679a:	d8e3      	bhi.n	8006764 <__multiply+0xb0>
 800679c:	9b01      	ldr	r3, [sp, #4]
 800679e:	f845 c003 	str.w	ip, [r5, r3]
 80067a2:	9b03      	ldr	r3, [sp, #12]
 80067a4:	3104      	adds	r1, #4
 80067a6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80067aa:	f1b9 0f00 	cmp.w	r9, #0
 80067ae:	d021      	beq.n	80067f4 <__multiply+0x140>
 80067b0:	46ae      	mov	lr, r5
 80067b2:	f04f 0a00 	mov.w	sl, #0
 80067b6:	682b      	ldr	r3, [r5, #0]
 80067b8:	f104 0c14 	add.w	ip, r4, #20
 80067bc:	f8bc b000 	ldrh.w	fp, [ip]
 80067c0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	fb09 770b 	mla	r7, r9, fp, r7
 80067ca:	4457      	add	r7, sl
 80067cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80067d0:	f84e 3b04 	str.w	r3, [lr], #4
 80067d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80067d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067dc:	f8be 3000 	ldrh.w	r3, [lr]
 80067e0:	4562      	cmp	r2, ip
 80067e2:	fb09 330a 	mla	r3, r9, sl, r3
 80067e6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80067ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067ee:	d8e5      	bhi.n	80067bc <__multiply+0x108>
 80067f0:	9f01      	ldr	r7, [sp, #4]
 80067f2:	51eb      	str	r3, [r5, r7]
 80067f4:	3504      	adds	r5, #4
 80067f6:	e79a      	b.n	800672e <__multiply+0x7a>
 80067f8:	3e01      	subs	r6, #1
 80067fa:	e79c      	b.n	8006736 <__multiply+0x82>
 80067fc:	08008ccf 	.word	0x08008ccf
 8006800:	08008ce0 	.word	0x08008ce0

08006804 <__pow5mult>:
 8006804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006808:	4615      	mov	r5, r2
 800680a:	f012 0203 	ands.w	r2, r2, #3
 800680e:	4607      	mov	r7, r0
 8006810:	460e      	mov	r6, r1
 8006812:	d007      	beq.n	8006824 <__pow5mult+0x20>
 8006814:	4c25      	ldr	r4, [pc, #148]	@ (80068ac <__pow5mult+0xa8>)
 8006816:	3a01      	subs	r2, #1
 8006818:	2300      	movs	r3, #0
 800681a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800681e:	f7ff fe57 	bl	80064d0 <__multadd>
 8006822:	4606      	mov	r6, r0
 8006824:	10ad      	asrs	r5, r5, #2
 8006826:	d03d      	beq.n	80068a4 <__pow5mult+0xa0>
 8006828:	69fc      	ldr	r4, [r7, #28]
 800682a:	b97c      	cbnz	r4, 800684c <__pow5mult+0x48>
 800682c:	2010      	movs	r0, #16
 800682e:	f7ff fd37 	bl	80062a0 <malloc>
 8006832:	4602      	mov	r2, r0
 8006834:	61f8      	str	r0, [r7, #28]
 8006836:	b928      	cbnz	r0, 8006844 <__pow5mult+0x40>
 8006838:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800683c:	4b1c      	ldr	r3, [pc, #112]	@ (80068b0 <__pow5mult+0xac>)
 800683e:	481d      	ldr	r0, [pc, #116]	@ (80068b4 <__pow5mult+0xb0>)
 8006840:	f001 fb58 	bl	8007ef4 <__assert_func>
 8006844:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006848:	6004      	str	r4, [r0, #0]
 800684a:	60c4      	str	r4, [r0, #12]
 800684c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006850:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006854:	b94c      	cbnz	r4, 800686a <__pow5mult+0x66>
 8006856:	f240 2171 	movw	r1, #625	@ 0x271
 800685a:	4638      	mov	r0, r7
 800685c:	f7ff ff14 	bl	8006688 <__i2b>
 8006860:	2300      	movs	r3, #0
 8006862:	4604      	mov	r4, r0
 8006864:	f8c8 0008 	str.w	r0, [r8, #8]
 8006868:	6003      	str	r3, [r0, #0]
 800686a:	f04f 0900 	mov.w	r9, #0
 800686e:	07eb      	lsls	r3, r5, #31
 8006870:	d50a      	bpl.n	8006888 <__pow5mult+0x84>
 8006872:	4631      	mov	r1, r6
 8006874:	4622      	mov	r2, r4
 8006876:	4638      	mov	r0, r7
 8006878:	f7ff ff1c 	bl	80066b4 <__multiply>
 800687c:	4680      	mov	r8, r0
 800687e:	4631      	mov	r1, r6
 8006880:	4638      	mov	r0, r7
 8006882:	f7ff fe03 	bl	800648c <_Bfree>
 8006886:	4646      	mov	r6, r8
 8006888:	106d      	asrs	r5, r5, #1
 800688a:	d00b      	beq.n	80068a4 <__pow5mult+0xa0>
 800688c:	6820      	ldr	r0, [r4, #0]
 800688e:	b938      	cbnz	r0, 80068a0 <__pow5mult+0x9c>
 8006890:	4622      	mov	r2, r4
 8006892:	4621      	mov	r1, r4
 8006894:	4638      	mov	r0, r7
 8006896:	f7ff ff0d 	bl	80066b4 <__multiply>
 800689a:	6020      	str	r0, [r4, #0]
 800689c:	f8c0 9000 	str.w	r9, [r0]
 80068a0:	4604      	mov	r4, r0
 80068a2:	e7e4      	b.n	800686e <__pow5mult+0x6a>
 80068a4:	4630      	mov	r0, r6
 80068a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068aa:	bf00      	nop
 80068ac:	08008d3c 	.word	0x08008d3c
 80068b0:	08008c60 	.word	0x08008c60
 80068b4:	08008ce0 	.word	0x08008ce0

080068b8 <__lshift>:
 80068b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068bc:	460c      	mov	r4, r1
 80068be:	4607      	mov	r7, r0
 80068c0:	4691      	mov	r9, r2
 80068c2:	6923      	ldr	r3, [r4, #16]
 80068c4:	6849      	ldr	r1, [r1, #4]
 80068c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068ca:	68a3      	ldr	r3, [r4, #8]
 80068cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068d0:	f108 0601 	add.w	r6, r8, #1
 80068d4:	42b3      	cmp	r3, r6
 80068d6:	db0b      	blt.n	80068f0 <__lshift+0x38>
 80068d8:	4638      	mov	r0, r7
 80068da:	f7ff fd97 	bl	800640c <_Balloc>
 80068de:	4605      	mov	r5, r0
 80068e0:	b948      	cbnz	r0, 80068f6 <__lshift+0x3e>
 80068e2:	4602      	mov	r2, r0
 80068e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80068e8:	4b27      	ldr	r3, [pc, #156]	@ (8006988 <__lshift+0xd0>)
 80068ea:	4828      	ldr	r0, [pc, #160]	@ (800698c <__lshift+0xd4>)
 80068ec:	f001 fb02 	bl	8007ef4 <__assert_func>
 80068f0:	3101      	adds	r1, #1
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	e7ee      	b.n	80068d4 <__lshift+0x1c>
 80068f6:	2300      	movs	r3, #0
 80068f8:	f100 0114 	add.w	r1, r0, #20
 80068fc:	f100 0210 	add.w	r2, r0, #16
 8006900:	4618      	mov	r0, r3
 8006902:	4553      	cmp	r3, sl
 8006904:	db33      	blt.n	800696e <__lshift+0xb6>
 8006906:	6920      	ldr	r0, [r4, #16]
 8006908:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800690c:	f104 0314 	add.w	r3, r4, #20
 8006910:	f019 091f 	ands.w	r9, r9, #31
 8006914:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006918:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800691c:	d02b      	beq.n	8006976 <__lshift+0xbe>
 800691e:	468a      	mov	sl, r1
 8006920:	2200      	movs	r2, #0
 8006922:	f1c9 0e20 	rsb	lr, r9, #32
 8006926:	6818      	ldr	r0, [r3, #0]
 8006928:	fa00 f009 	lsl.w	r0, r0, r9
 800692c:	4310      	orrs	r0, r2
 800692e:	f84a 0b04 	str.w	r0, [sl], #4
 8006932:	f853 2b04 	ldr.w	r2, [r3], #4
 8006936:	459c      	cmp	ip, r3
 8006938:	fa22 f20e 	lsr.w	r2, r2, lr
 800693c:	d8f3      	bhi.n	8006926 <__lshift+0x6e>
 800693e:	ebac 0304 	sub.w	r3, ip, r4
 8006942:	3b15      	subs	r3, #21
 8006944:	f023 0303 	bic.w	r3, r3, #3
 8006948:	3304      	adds	r3, #4
 800694a:	f104 0015 	add.w	r0, r4, #21
 800694e:	4584      	cmp	ip, r0
 8006950:	bf38      	it	cc
 8006952:	2304      	movcc	r3, #4
 8006954:	50ca      	str	r2, [r1, r3]
 8006956:	b10a      	cbz	r2, 800695c <__lshift+0xa4>
 8006958:	f108 0602 	add.w	r6, r8, #2
 800695c:	3e01      	subs	r6, #1
 800695e:	4638      	mov	r0, r7
 8006960:	4621      	mov	r1, r4
 8006962:	612e      	str	r6, [r5, #16]
 8006964:	f7ff fd92 	bl	800648c <_Bfree>
 8006968:	4628      	mov	r0, r5
 800696a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800696e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006972:	3301      	adds	r3, #1
 8006974:	e7c5      	b.n	8006902 <__lshift+0x4a>
 8006976:	3904      	subs	r1, #4
 8006978:	f853 2b04 	ldr.w	r2, [r3], #4
 800697c:	459c      	cmp	ip, r3
 800697e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006982:	d8f9      	bhi.n	8006978 <__lshift+0xc0>
 8006984:	e7ea      	b.n	800695c <__lshift+0xa4>
 8006986:	bf00      	nop
 8006988:	08008ccf 	.word	0x08008ccf
 800698c:	08008ce0 	.word	0x08008ce0

08006990 <__mcmp>:
 8006990:	4603      	mov	r3, r0
 8006992:	690a      	ldr	r2, [r1, #16]
 8006994:	6900      	ldr	r0, [r0, #16]
 8006996:	b530      	push	{r4, r5, lr}
 8006998:	1a80      	subs	r0, r0, r2
 800699a:	d10e      	bne.n	80069ba <__mcmp+0x2a>
 800699c:	3314      	adds	r3, #20
 800699e:	3114      	adds	r1, #20
 80069a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80069a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80069a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80069ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80069b0:	4295      	cmp	r5, r2
 80069b2:	d003      	beq.n	80069bc <__mcmp+0x2c>
 80069b4:	d205      	bcs.n	80069c2 <__mcmp+0x32>
 80069b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069ba:	bd30      	pop	{r4, r5, pc}
 80069bc:	42a3      	cmp	r3, r4
 80069be:	d3f3      	bcc.n	80069a8 <__mcmp+0x18>
 80069c0:	e7fb      	b.n	80069ba <__mcmp+0x2a>
 80069c2:	2001      	movs	r0, #1
 80069c4:	e7f9      	b.n	80069ba <__mcmp+0x2a>
	...

080069c8 <__mdiff>:
 80069c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069cc:	4689      	mov	r9, r1
 80069ce:	4606      	mov	r6, r0
 80069d0:	4611      	mov	r1, r2
 80069d2:	4648      	mov	r0, r9
 80069d4:	4614      	mov	r4, r2
 80069d6:	f7ff ffdb 	bl	8006990 <__mcmp>
 80069da:	1e05      	subs	r5, r0, #0
 80069dc:	d112      	bne.n	8006a04 <__mdiff+0x3c>
 80069de:	4629      	mov	r1, r5
 80069e0:	4630      	mov	r0, r6
 80069e2:	f7ff fd13 	bl	800640c <_Balloc>
 80069e6:	4602      	mov	r2, r0
 80069e8:	b928      	cbnz	r0, 80069f6 <__mdiff+0x2e>
 80069ea:	f240 2137 	movw	r1, #567	@ 0x237
 80069ee:	4b3e      	ldr	r3, [pc, #248]	@ (8006ae8 <__mdiff+0x120>)
 80069f0:	483e      	ldr	r0, [pc, #248]	@ (8006aec <__mdiff+0x124>)
 80069f2:	f001 fa7f 	bl	8007ef4 <__assert_func>
 80069f6:	2301      	movs	r3, #1
 80069f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069fc:	4610      	mov	r0, r2
 80069fe:	b003      	add	sp, #12
 8006a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a04:	bfbc      	itt	lt
 8006a06:	464b      	movlt	r3, r9
 8006a08:	46a1      	movlt	r9, r4
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006a10:	bfba      	itte	lt
 8006a12:	461c      	movlt	r4, r3
 8006a14:	2501      	movlt	r5, #1
 8006a16:	2500      	movge	r5, #0
 8006a18:	f7ff fcf8 	bl	800640c <_Balloc>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	b918      	cbnz	r0, 8006a28 <__mdiff+0x60>
 8006a20:	f240 2145 	movw	r1, #581	@ 0x245
 8006a24:	4b30      	ldr	r3, [pc, #192]	@ (8006ae8 <__mdiff+0x120>)
 8006a26:	e7e3      	b.n	80069f0 <__mdiff+0x28>
 8006a28:	f100 0b14 	add.w	fp, r0, #20
 8006a2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006a30:	f109 0310 	add.w	r3, r9, #16
 8006a34:	60c5      	str	r5, [r0, #12]
 8006a36:	f04f 0c00 	mov.w	ip, #0
 8006a3a:	f109 0514 	add.w	r5, r9, #20
 8006a3e:	46d9      	mov	r9, fp
 8006a40:	6926      	ldr	r6, [r4, #16]
 8006a42:	f104 0e14 	add.w	lr, r4, #20
 8006a46:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006a4a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006a4e:	9301      	str	r3, [sp, #4]
 8006a50:	9b01      	ldr	r3, [sp, #4]
 8006a52:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006a56:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006a5a:	b281      	uxth	r1, r0
 8006a5c:	9301      	str	r3, [sp, #4]
 8006a5e:	fa1f f38a 	uxth.w	r3, sl
 8006a62:	1a5b      	subs	r3, r3, r1
 8006a64:	0c00      	lsrs	r0, r0, #16
 8006a66:	4463      	add	r3, ip
 8006a68:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006a6c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a76:	4576      	cmp	r6, lr
 8006a78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a7c:	f849 3b04 	str.w	r3, [r9], #4
 8006a80:	d8e6      	bhi.n	8006a50 <__mdiff+0x88>
 8006a82:	1b33      	subs	r3, r6, r4
 8006a84:	3b15      	subs	r3, #21
 8006a86:	f023 0303 	bic.w	r3, r3, #3
 8006a8a:	3415      	adds	r4, #21
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	42a6      	cmp	r6, r4
 8006a90:	bf38      	it	cc
 8006a92:	2304      	movcc	r3, #4
 8006a94:	441d      	add	r5, r3
 8006a96:	445b      	add	r3, fp
 8006a98:	461e      	mov	r6, r3
 8006a9a:	462c      	mov	r4, r5
 8006a9c:	4544      	cmp	r4, r8
 8006a9e:	d30e      	bcc.n	8006abe <__mdiff+0xf6>
 8006aa0:	f108 0103 	add.w	r1, r8, #3
 8006aa4:	1b49      	subs	r1, r1, r5
 8006aa6:	f021 0103 	bic.w	r1, r1, #3
 8006aaa:	3d03      	subs	r5, #3
 8006aac:	45a8      	cmp	r8, r5
 8006aae:	bf38      	it	cc
 8006ab0:	2100      	movcc	r1, #0
 8006ab2:	440b      	add	r3, r1
 8006ab4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ab8:	b199      	cbz	r1, 8006ae2 <__mdiff+0x11a>
 8006aba:	6117      	str	r7, [r2, #16]
 8006abc:	e79e      	b.n	80069fc <__mdiff+0x34>
 8006abe:	46e6      	mov	lr, ip
 8006ac0:	f854 1b04 	ldr.w	r1, [r4], #4
 8006ac4:	fa1f fc81 	uxth.w	ip, r1
 8006ac8:	44f4      	add	ip, lr
 8006aca:	0c08      	lsrs	r0, r1, #16
 8006acc:	4471      	add	r1, lr
 8006ace:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006ad2:	b289      	uxth	r1, r1
 8006ad4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ad8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006adc:	f846 1b04 	str.w	r1, [r6], #4
 8006ae0:	e7dc      	b.n	8006a9c <__mdiff+0xd4>
 8006ae2:	3f01      	subs	r7, #1
 8006ae4:	e7e6      	b.n	8006ab4 <__mdiff+0xec>
 8006ae6:	bf00      	nop
 8006ae8:	08008ccf 	.word	0x08008ccf
 8006aec:	08008ce0 	.word	0x08008ce0

08006af0 <__ulp>:
 8006af0:	4b0e      	ldr	r3, [pc, #56]	@ (8006b2c <__ulp+0x3c>)
 8006af2:	400b      	ands	r3, r1
 8006af4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	dc08      	bgt.n	8006b0e <__ulp+0x1e>
 8006afc:	425b      	negs	r3, r3
 8006afe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006b02:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006b06:	da04      	bge.n	8006b12 <__ulp+0x22>
 8006b08:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006b0c:	4113      	asrs	r3, r2
 8006b0e:	2200      	movs	r2, #0
 8006b10:	e008      	b.n	8006b24 <__ulp+0x34>
 8006b12:	f1a2 0314 	sub.w	r3, r2, #20
 8006b16:	2b1e      	cmp	r3, #30
 8006b18:	bfd6      	itet	le
 8006b1a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006b1e:	2201      	movgt	r2, #1
 8006b20:	40da      	lsrle	r2, r3
 8006b22:	2300      	movs	r3, #0
 8006b24:	4619      	mov	r1, r3
 8006b26:	4610      	mov	r0, r2
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	7ff00000 	.word	0x7ff00000

08006b30 <__b2d>:
 8006b30:	6902      	ldr	r2, [r0, #16]
 8006b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b34:	f100 0614 	add.w	r6, r0, #20
 8006b38:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006b3c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006b40:	4f1e      	ldr	r7, [pc, #120]	@ (8006bbc <__b2d+0x8c>)
 8006b42:	4620      	mov	r0, r4
 8006b44:	f7ff fd54 	bl	80065f0 <__hi0bits>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	f1c0 0020 	rsb	r0, r0, #32
 8006b4e:	2b0a      	cmp	r3, #10
 8006b50:	f1a2 0504 	sub.w	r5, r2, #4
 8006b54:	6008      	str	r0, [r1, #0]
 8006b56:	dc12      	bgt.n	8006b7e <__b2d+0x4e>
 8006b58:	42ae      	cmp	r6, r5
 8006b5a:	bf2c      	ite	cs
 8006b5c:	2200      	movcs	r2, #0
 8006b5e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006b62:	f1c3 0c0b 	rsb	ip, r3, #11
 8006b66:	3315      	adds	r3, #21
 8006b68:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006b6c:	fa04 f303 	lsl.w	r3, r4, r3
 8006b70:	fa22 f20c 	lsr.w	r2, r2, ip
 8006b74:	ea4e 0107 	orr.w	r1, lr, r7
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b7e:	42ae      	cmp	r6, r5
 8006b80:	bf36      	itet	cc
 8006b82:	f1a2 0508 	subcc.w	r5, r2, #8
 8006b86:	2200      	movcs	r2, #0
 8006b88:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006b8c:	3b0b      	subs	r3, #11
 8006b8e:	d012      	beq.n	8006bb6 <__b2d+0x86>
 8006b90:	f1c3 0720 	rsb	r7, r3, #32
 8006b94:	fa22 f107 	lsr.w	r1, r2, r7
 8006b98:	409c      	lsls	r4, r3
 8006b9a:	430c      	orrs	r4, r1
 8006b9c:	42b5      	cmp	r5, r6
 8006b9e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006ba2:	bf94      	ite	ls
 8006ba4:	2400      	movls	r4, #0
 8006ba6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006baa:	409a      	lsls	r2, r3
 8006bac:	40fc      	lsrs	r4, r7
 8006bae:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006bb2:	4322      	orrs	r2, r4
 8006bb4:	e7e1      	b.n	8006b7a <__b2d+0x4a>
 8006bb6:	ea44 0107 	orr.w	r1, r4, r7
 8006bba:	e7de      	b.n	8006b7a <__b2d+0x4a>
 8006bbc:	3ff00000 	.word	0x3ff00000

08006bc0 <__d2b>:
 8006bc0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	4690      	mov	r8, r2
 8006bc8:	4699      	mov	r9, r3
 8006bca:	9e08      	ldr	r6, [sp, #32]
 8006bcc:	f7ff fc1e 	bl	800640c <_Balloc>
 8006bd0:	4604      	mov	r4, r0
 8006bd2:	b930      	cbnz	r0, 8006be2 <__d2b+0x22>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	f240 310f 	movw	r1, #783	@ 0x30f
 8006bda:	4b23      	ldr	r3, [pc, #140]	@ (8006c68 <__d2b+0xa8>)
 8006bdc:	4823      	ldr	r0, [pc, #140]	@ (8006c6c <__d2b+0xac>)
 8006bde:	f001 f989 	bl	8007ef4 <__assert_func>
 8006be2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006be6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006bea:	b10d      	cbz	r5, 8006bf0 <__d2b+0x30>
 8006bec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bf0:	9301      	str	r3, [sp, #4]
 8006bf2:	f1b8 0300 	subs.w	r3, r8, #0
 8006bf6:	d024      	beq.n	8006c42 <__d2b+0x82>
 8006bf8:	4668      	mov	r0, sp
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	f7ff fd17 	bl	800662e <__lo0bits>
 8006c00:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006c04:	b1d8      	cbz	r0, 8006c3e <__d2b+0x7e>
 8006c06:	f1c0 0320 	rsb	r3, r0, #32
 8006c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0e:	430b      	orrs	r3, r1
 8006c10:	40c2      	lsrs	r2, r0
 8006c12:	6163      	str	r3, [r4, #20]
 8006c14:	9201      	str	r2, [sp, #4]
 8006c16:	9b01      	ldr	r3, [sp, #4]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	bf0c      	ite	eq
 8006c1c:	2201      	moveq	r2, #1
 8006c1e:	2202      	movne	r2, #2
 8006c20:	61a3      	str	r3, [r4, #24]
 8006c22:	6122      	str	r2, [r4, #16]
 8006c24:	b1ad      	cbz	r5, 8006c52 <__d2b+0x92>
 8006c26:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006c2a:	4405      	add	r5, r0
 8006c2c:	6035      	str	r5, [r6, #0]
 8006c2e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c34:	6018      	str	r0, [r3, #0]
 8006c36:	4620      	mov	r0, r4
 8006c38:	b002      	add	sp, #8
 8006c3a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006c3e:	6161      	str	r1, [r4, #20]
 8006c40:	e7e9      	b.n	8006c16 <__d2b+0x56>
 8006c42:	a801      	add	r0, sp, #4
 8006c44:	f7ff fcf3 	bl	800662e <__lo0bits>
 8006c48:	9b01      	ldr	r3, [sp, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	6163      	str	r3, [r4, #20]
 8006c4e:	3020      	adds	r0, #32
 8006c50:	e7e7      	b.n	8006c22 <__d2b+0x62>
 8006c52:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006c56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c5a:	6030      	str	r0, [r6, #0]
 8006c5c:	6918      	ldr	r0, [r3, #16]
 8006c5e:	f7ff fcc7 	bl	80065f0 <__hi0bits>
 8006c62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c66:	e7e4      	b.n	8006c32 <__d2b+0x72>
 8006c68:	08008ccf 	.word	0x08008ccf
 8006c6c:	08008ce0 	.word	0x08008ce0

08006c70 <__ratio>:
 8006c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c74:	b085      	sub	sp, #20
 8006c76:	e9cd 1000 	strd	r1, r0, [sp]
 8006c7a:	a902      	add	r1, sp, #8
 8006c7c:	f7ff ff58 	bl	8006b30 <__b2d>
 8006c80:	468b      	mov	fp, r1
 8006c82:	4606      	mov	r6, r0
 8006c84:	460f      	mov	r7, r1
 8006c86:	9800      	ldr	r0, [sp, #0]
 8006c88:	a903      	add	r1, sp, #12
 8006c8a:	f7ff ff51 	bl	8006b30 <__b2d>
 8006c8e:	460d      	mov	r5, r1
 8006c90:	9b01      	ldr	r3, [sp, #4]
 8006c92:	4689      	mov	r9, r1
 8006c94:	6919      	ldr	r1, [r3, #16]
 8006c96:	9b00      	ldr	r3, [sp, #0]
 8006c98:	4604      	mov	r4, r0
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	1ac9      	subs	r1, r1, r3
 8006ca0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006ca4:	1a9b      	subs	r3, r3, r2
 8006ca6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	bfcd      	iteet	gt
 8006cae:	463a      	movgt	r2, r7
 8006cb0:	462a      	movle	r2, r5
 8006cb2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006cb6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006cba:	bfd8      	it	le
 8006cbc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006cc0:	464b      	mov	r3, r9
 8006cc2:	4622      	mov	r2, r4
 8006cc4:	4659      	mov	r1, fp
 8006cc6:	f7f9 fd31 	bl	800072c <__aeabi_ddiv>
 8006cca:	b005      	add	sp, #20
 8006ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006cd0 <__copybits>:
 8006cd0:	3901      	subs	r1, #1
 8006cd2:	b570      	push	{r4, r5, r6, lr}
 8006cd4:	1149      	asrs	r1, r1, #5
 8006cd6:	6914      	ldr	r4, [r2, #16]
 8006cd8:	3101      	adds	r1, #1
 8006cda:	f102 0314 	add.w	r3, r2, #20
 8006cde:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006ce2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006ce6:	1f05      	subs	r5, r0, #4
 8006ce8:	42a3      	cmp	r3, r4
 8006cea:	d30c      	bcc.n	8006d06 <__copybits+0x36>
 8006cec:	1aa3      	subs	r3, r4, r2
 8006cee:	3b11      	subs	r3, #17
 8006cf0:	f023 0303 	bic.w	r3, r3, #3
 8006cf4:	3211      	adds	r2, #17
 8006cf6:	42a2      	cmp	r2, r4
 8006cf8:	bf88      	it	hi
 8006cfa:	2300      	movhi	r3, #0
 8006cfc:	4418      	add	r0, r3
 8006cfe:	2300      	movs	r3, #0
 8006d00:	4288      	cmp	r0, r1
 8006d02:	d305      	bcc.n	8006d10 <__copybits+0x40>
 8006d04:	bd70      	pop	{r4, r5, r6, pc}
 8006d06:	f853 6b04 	ldr.w	r6, [r3], #4
 8006d0a:	f845 6f04 	str.w	r6, [r5, #4]!
 8006d0e:	e7eb      	b.n	8006ce8 <__copybits+0x18>
 8006d10:	f840 3b04 	str.w	r3, [r0], #4
 8006d14:	e7f4      	b.n	8006d00 <__copybits+0x30>

08006d16 <__any_on>:
 8006d16:	f100 0214 	add.w	r2, r0, #20
 8006d1a:	6900      	ldr	r0, [r0, #16]
 8006d1c:	114b      	asrs	r3, r1, #5
 8006d1e:	4298      	cmp	r0, r3
 8006d20:	b510      	push	{r4, lr}
 8006d22:	db11      	blt.n	8006d48 <__any_on+0x32>
 8006d24:	dd0a      	ble.n	8006d3c <__any_on+0x26>
 8006d26:	f011 011f 	ands.w	r1, r1, #31
 8006d2a:	d007      	beq.n	8006d3c <__any_on+0x26>
 8006d2c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006d30:	fa24 f001 	lsr.w	r0, r4, r1
 8006d34:	fa00 f101 	lsl.w	r1, r0, r1
 8006d38:	428c      	cmp	r4, r1
 8006d3a:	d10b      	bne.n	8006d54 <__any_on+0x3e>
 8006d3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d803      	bhi.n	8006d4c <__any_on+0x36>
 8006d44:	2000      	movs	r0, #0
 8006d46:	bd10      	pop	{r4, pc}
 8006d48:	4603      	mov	r3, r0
 8006d4a:	e7f7      	b.n	8006d3c <__any_on+0x26>
 8006d4c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006d50:	2900      	cmp	r1, #0
 8006d52:	d0f5      	beq.n	8006d40 <__any_on+0x2a>
 8006d54:	2001      	movs	r0, #1
 8006d56:	e7f6      	b.n	8006d46 <__any_on+0x30>

08006d58 <sulp>:
 8006d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d5c:	460f      	mov	r7, r1
 8006d5e:	4690      	mov	r8, r2
 8006d60:	f7ff fec6 	bl	8006af0 <__ulp>
 8006d64:	4604      	mov	r4, r0
 8006d66:	460d      	mov	r5, r1
 8006d68:	f1b8 0f00 	cmp.w	r8, #0
 8006d6c:	d011      	beq.n	8006d92 <sulp+0x3a>
 8006d6e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006d72:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	dd0b      	ble.n	8006d92 <sulp+0x3a>
 8006d7a:	2400      	movs	r4, #0
 8006d7c:	051b      	lsls	r3, r3, #20
 8006d7e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006d82:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006d86:	4622      	mov	r2, r4
 8006d88:	462b      	mov	r3, r5
 8006d8a:	f7f9 fba5 	bl	80004d8 <__aeabi_dmul>
 8006d8e:	4604      	mov	r4, r0
 8006d90:	460d      	mov	r5, r1
 8006d92:	4620      	mov	r0, r4
 8006d94:	4629      	mov	r1, r5
 8006d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d9a:	0000      	movs	r0, r0
 8006d9c:	0000      	movs	r0, r0
	...

08006da0 <_strtod_l>:
 8006da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da4:	b09f      	sub	sp, #124	@ 0x7c
 8006da6:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006da8:	2200      	movs	r2, #0
 8006daa:	460c      	mov	r4, r1
 8006dac:	921a      	str	r2, [sp, #104]	@ 0x68
 8006dae:	f04f 0a00 	mov.w	sl, #0
 8006db2:	f04f 0b00 	mov.w	fp, #0
 8006db6:	460a      	mov	r2, r1
 8006db8:	9005      	str	r0, [sp, #20]
 8006dba:	9219      	str	r2, [sp, #100]	@ 0x64
 8006dbc:	7811      	ldrb	r1, [r2, #0]
 8006dbe:	292b      	cmp	r1, #43	@ 0x2b
 8006dc0:	d048      	beq.n	8006e54 <_strtod_l+0xb4>
 8006dc2:	d836      	bhi.n	8006e32 <_strtod_l+0x92>
 8006dc4:	290d      	cmp	r1, #13
 8006dc6:	d830      	bhi.n	8006e2a <_strtod_l+0x8a>
 8006dc8:	2908      	cmp	r1, #8
 8006dca:	d830      	bhi.n	8006e2e <_strtod_l+0x8e>
 8006dcc:	2900      	cmp	r1, #0
 8006dce:	d039      	beq.n	8006e44 <_strtod_l+0xa4>
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006dd4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006dd6:	782a      	ldrb	r2, [r5, #0]
 8006dd8:	2a30      	cmp	r2, #48	@ 0x30
 8006dda:	f040 80b1 	bne.w	8006f40 <_strtod_l+0x1a0>
 8006dde:	786a      	ldrb	r2, [r5, #1]
 8006de0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006de4:	2a58      	cmp	r2, #88	@ 0x58
 8006de6:	d16c      	bne.n	8006ec2 <_strtod_l+0x122>
 8006de8:	9302      	str	r3, [sp, #8]
 8006dea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dec:	4a8e      	ldr	r2, [pc, #568]	@ (8007028 <_strtod_l+0x288>)
 8006dee:	9301      	str	r3, [sp, #4]
 8006df0:	ab1a      	add	r3, sp, #104	@ 0x68
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	9805      	ldr	r0, [sp, #20]
 8006df6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006df8:	a919      	add	r1, sp, #100	@ 0x64
 8006dfa:	f001 f915 	bl	8008028 <__gethex>
 8006dfe:	f010 060f 	ands.w	r6, r0, #15
 8006e02:	4604      	mov	r4, r0
 8006e04:	d005      	beq.n	8006e12 <_strtod_l+0x72>
 8006e06:	2e06      	cmp	r6, #6
 8006e08:	d126      	bne.n	8006e58 <_strtod_l+0xb8>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	3501      	adds	r5, #1
 8006e0e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006e10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f040 8584 	bne.w	8007922 <_strtod_l+0xb82>
 8006e1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e1c:	b1bb      	cbz	r3, 8006e4e <_strtod_l+0xae>
 8006e1e:	4650      	mov	r0, sl
 8006e20:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006e24:	b01f      	add	sp, #124	@ 0x7c
 8006e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e2a:	2920      	cmp	r1, #32
 8006e2c:	d1d0      	bne.n	8006dd0 <_strtod_l+0x30>
 8006e2e:	3201      	adds	r2, #1
 8006e30:	e7c3      	b.n	8006dba <_strtod_l+0x1a>
 8006e32:	292d      	cmp	r1, #45	@ 0x2d
 8006e34:	d1cc      	bne.n	8006dd0 <_strtod_l+0x30>
 8006e36:	2101      	movs	r1, #1
 8006e38:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006e3a:	1c51      	adds	r1, r2, #1
 8006e3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8006e3e:	7852      	ldrb	r2, [r2, #1]
 8006e40:	2a00      	cmp	r2, #0
 8006e42:	d1c7      	bne.n	8006dd4 <_strtod_l+0x34>
 8006e44:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006e46:	9419      	str	r4, [sp, #100]	@ 0x64
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f040 8568 	bne.w	800791e <_strtod_l+0xb7e>
 8006e4e:	4650      	mov	r0, sl
 8006e50:	4659      	mov	r1, fp
 8006e52:	e7e7      	b.n	8006e24 <_strtod_l+0x84>
 8006e54:	2100      	movs	r1, #0
 8006e56:	e7ef      	b.n	8006e38 <_strtod_l+0x98>
 8006e58:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006e5a:	b13a      	cbz	r2, 8006e6c <_strtod_l+0xcc>
 8006e5c:	2135      	movs	r1, #53	@ 0x35
 8006e5e:	a81c      	add	r0, sp, #112	@ 0x70
 8006e60:	f7ff ff36 	bl	8006cd0 <__copybits>
 8006e64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e66:	9805      	ldr	r0, [sp, #20]
 8006e68:	f7ff fb10 	bl	800648c <_Bfree>
 8006e6c:	3e01      	subs	r6, #1
 8006e6e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006e70:	2e04      	cmp	r6, #4
 8006e72:	d806      	bhi.n	8006e82 <_strtod_l+0xe2>
 8006e74:	e8df f006 	tbb	[pc, r6]
 8006e78:	201d0314 	.word	0x201d0314
 8006e7c:	14          	.byte	0x14
 8006e7d:	00          	.byte	0x00
 8006e7e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006e82:	05e1      	lsls	r1, r4, #23
 8006e84:	bf48      	it	mi
 8006e86:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006e8a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006e8e:	0d1b      	lsrs	r3, r3, #20
 8006e90:	051b      	lsls	r3, r3, #20
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1bd      	bne.n	8006e12 <_strtod_l+0x72>
 8006e96:	f7fe fb29 	bl	80054ec <__errno>
 8006e9a:	2322      	movs	r3, #34	@ 0x22
 8006e9c:	6003      	str	r3, [r0, #0]
 8006e9e:	e7b8      	b.n	8006e12 <_strtod_l+0x72>
 8006ea0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006ea4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006ea8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006eac:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006eb0:	e7e7      	b.n	8006e82 <_strtod_l+0xe2>
 8006eb2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800702c <_strtod_l+0x28c>
 8006eb6:	e7e4      	b.n	8006e82 <_strtod_l+0xe2>
 8006eb8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006ebc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006ec0:	e7df      	b.n	8006e82 <_strtod_l+0xe2>
 8006ec2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ec8:	785b      	ldrb	r3, [r3, #1]
 8006eca:	2b30      	cmp	r3, #48	@ 0x30
 8006ecc:	d0f9      	beq.n	8006ec2 <_strtod_l+0x122>
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d09f      	beq.n	8006e12 <_strtod_l+0x72>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ed6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ed8:	220a      	movs	r2, #10
 8006eda:	930c      	str	r3, [sp, #48]	@ 0x30
 8006edc:	2300      	movs	r3, #0
 8006ede:	461f      	mov	r7, r3
 8006ee0:	9308      	str	r3, [sp, #32]
 8006ee2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ee4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006ee6:	7805      	ldrb	r5, [r0, #0]
 8006ee8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006eec:	b2d9      	uxtb	r1, r3
 8006eee:	2909      	cmp	r1, #9
 8006ef0:	d928      	bls.n	8006f44 <_strtod_l+0x1a4>
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	494e      	ldr	r1, [pc, #312]	@ (8007030 <_strtod_l+0x290>)
 8006ef6:	f000 ffc7 	bl	8007e88 <strncmp>
 8006efa:	2800      	cmp	r0, #0
 8006efc:	d032      	beq.n	8006f64 <_strtod_l+0x1c4>
 8006efe:	2000      	movs	r0, #0
 8006f00:	462a      	mov	r2, r5
 8006f02:	4681      	mov	r9, r0
 8006f04:	463d      	mov	r5, r7
 8006f06:	4603      	mov	r3, r0
 8006f08:	2a65      	cmp	r2, #101	@ 0x65
 8006f0a:	d001      	beq.n	8006f10 <_strtod_l+0x170>
 8006f0c:	2a45      	cmp	r2, #69	@ 0x45
 8006f0e:	d114      	bne.n	8006f3a <_strtod_l+0x19a>
 8006f10:	b91d      	cbnz	r5, 8006f1a <_strtod_l+0x17a>
 8006f12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f14:	4302      	orrs	r2, r0
 8006f16:	d095      	beq.n	8006e44 <_strtod_l+0xa4>
 8006f18:	2500      	movs	r5, #0
 8006f1a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006f1c:	1c62      	adds	r2, r4, #1
 8006f1e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f20:	7862      	ldrb	r2, [r4, #1]
 8006f22:	2a2b      	cmp	r2, #43	@ 0x2b
 8006f24:	d077      	beq.n	8007016 <_strtod_l+0x276>
 8006f26:	2a2d      	cmp	r2, #45	@ 0x2d
 8006f28:	d07b      	beq.n	8007022 <_strtod_l+0x282>
 8006f2a:	f04f 0c00 	mov.w	ip, #0
 8006f2e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006f32:	2909      	cmp	r1, #9
 8006f34:	f240 8082 	bls.w	800703c <_strtod_l+0x29c>
 8006f38:	9419      	str	r4, [sp, #100]	@ 0x64
 8006f3a:	f04f 0800 	mov.w	r8, #0
 8006f3e:	e0a2      	b.n	8007086 <_strtod_l+0x2e6>
 8006f40:	2300      	movs	r3, #0
 8006f42:	e7c7      	b.n	8006ed4 <_strtod_l+0x134>
 8006f44:	2f08      	cmp	r7, #8
 8006f46:	bfd5      	itete	le
 8006f48:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006f4a:	9908      	ldrgt	r1, [sp, #32]
 8006f4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006f50:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006f54:	f100 0001 	add.w	r0, r0, #1
 8006f58:	bfd4      	ite	le
 8006f5a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006f5c:	9308      	strgt	r3, [sp, #32]
 8006f5e:	3701      	adds	r7, #1
 8006f60:	9019      	str	r0, [sp, #100]	@ 0x64
 8006f62:	e7bf      	b.n	8006ee4 <_strtod_l+0x144>
 8006f64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f66:	1c5a      	adds	r2, r3, #1
 8006f68:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f6a:	785a      	ldrb	r2, [r3, #1]
 8006f6c:	b37f      	cbz	r7, 8006fce <_strtod_l+0x22e>
 8006f6e:	4681      	mov	r9, r0
 8006f70:	463d      	mov	r5, r7
 8006f72:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006f76:	2b09      	cmp	r3, #9
 8006f78:	d912      	bls.n	8006fa0 <_strtod_l+0x200>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e7c4      	b.n	8006f08 <_strtod_l+0x168>
 8006f7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f80:	3001      	adds	r0, #1
 8006f82:	1c5a      	adds	r2, r3, #1
 8006f84:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f86:	785a      	ldrb	r2, [r3, #1]
 8006f88:	2a30      	cmp	r2, #48	@ 0x30
 8006f8a:	d0f8      	beq.n	8006f7e <_strtod_l+0x1de>
 8006f8c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006f90:	2b08      	cmp	r3, #8
 8006f92:	f200 84cb 	bhi.w	800792c <_strtod_l+0xb8c>
 8006f96:	4681      	mov	r9, r0
 8006f98:	2000      	movs	r0, #0
 8006f9a:	4605      	mov	r5, r0
 8006f9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f9e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006fa0:	3a30      	subs	r2, #48	@ 0x30
 8006fa2:	f100 0301 	add.w	r3, r0, #1
 8006fa6:	d02a      	beq.n	8006ffe <_strtod_l+0x25e>
 8006fa8:	4499      	add	r9, r3
 8006faa:	210a      	movs	r1, #10
 8006fac:	462b      	mov	r3, r5
 8006fae:	eb00 0c05 	add.w	ip, r0, r5
 8006fb2:	4563      	cmp	r3, ip
 8006fb4:	d10d      	bne.n	8006fd2 <_strtod_l+0x232>
 8006fb6:	1c69      	adds	r1, r5, #1
 8006fb8:	4401      	add	r1, r0
 8006fba:	4428      	add	r0, r5
 8006fbc:	2808      	cmp	r0, #8
 8006fbe:	dc16      	bgt.n	8006fee <_strtod_l+0x24e>
 8006fc0:	230a      	movs	r3, #10
 8006fc2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006fc4:	fb03 2300 	mla	r3, r3, r0, r2
 8006fc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fca:	2300      	movs	r3, #0
 8006fcc:	e018      	b.n	8007000 <_strtod_l+0x260>
 8006fce:	4638      	mov	r0, r7
 8006fd0:	e7da      	b.n	8006f88 <_strtod_l+0x1e8>
 8006fd2:	2b08      	cmp	r3, #8
 8006fd4:	f103 0301 	add.w	r3, r3, #1
 8006fd8:	dc03      	bgt.n	8006fe2 <_strtod_l+0x242>
 8006fda:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006fdc:	434e      	muls	r6, r1
 8006fde:	960a      	str	r6, [sp, #40]	@ 0x28
 8006fe0:	e7e7      	b.n	8006fb2 <_strtod_l+0x212>
 8006fe2:	2b10      	cmp	r3, #16
 8006fe4:	bfde      	ittt	le
 8006fe6:	9e08      	ldrle	r6, [sp, #32]
 8006fe8:	434e      	mulle	r6, r1
 8006fea:	9608      	strle	r6, [sp, #32]
 8006fec:	e7e1      	b.n	8006fb2 <_strtod_l+0x212>
 8006fee:	280f      	cmp	r0, #15
 8006ff0:	dceb      	bgt.n	8006fca <_strtod_l+0x22a>
 8006ff2:	230a      	movs	r3, #10
 8006ff4:	9808      	ldr	r0, [sp, #32]
 8006ff6:	fb03 2300 	mla	r3, r3, r0, r2
 8006ffa:	9308      	str	r3, [sp, #32]
 8006ffc:	e7e5      	b.n	8006fca <_strtod_l+0x22a>
 8006ffe:	4629      	mov	r1, r5
 8007000:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007002:	460d      	mov	r5, r1
 8007004:	1c50      	adds	r0, r2, #1
 8007006:	9019      	str	r0, [sp, #100]	@ 0x64
 8007008:	7852      	ldrb	r2, [r2, #1]
 800700a:	4618      	mov	r0, r3
 800700c:	e7b1      	b.n	8006f72 <_strtod_l+0x1d2>
 800700e:	f04f 0900 	mov.w	r9, #0
 8007012:	2301      	movs	r3, #1
 8007014:	e77d      	b.n	8006f12 <_strtod_l+0x172>
 8007016:	f04f 0c00 	mov.w	ip, #0
 800701a:	1ca2      	adds	r2, r4, #2
 800701c:	9219      	str	r2, [sp, #100]	@ 0x64
 800701e:	78a2      	ldrb	r2, [r4, #2]
 8007020:	e785      	b.n	8006f2e <_strtod_l+0x18e>
 8007022:	f04f 0c01 	mov.w	ip, #1
 8007026:	e7f8      	b.n	800701a <_strtod_l+0x27a>
 8007028:	08008e50 	.word	0x08008e50
 800702c:	7ff00000 	.word	0x7ff00000
 8007030:	08008e38 	.word	0x08008e38
 8007034:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007036:	1c51      	adds	r1, r2, #1
 8007038:	9119      	str	r1, [sp, #100]	@ 0x64
 800703a:	7852      	ldrb	r2, [r2, #1]
 800703c:	2a30      	cmp	r2, #48	@ 0x30
 800703e:	d0f9      	beq.n	8007034 <_strtod_l+0x294>
 8007040:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007044:	2908      	cmp	r1, #8
 8007046:	f63f af78 	bhi.w	8006f3a <_strtod_l+0x19a>
 800704a:	f04f 080a 	mov.w	r8, #10
 800704e:	3a30      	subs	r2, #48	@ 0x30
 8007050:	920e      	str	r2, [sp, #56]	@ 0x38
 8007052:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007054:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007056:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007058:	1c56      	adds	r6, r2, #1
 800705a:	9619      	str	r6, [sp, #100]	@ 0x64
 800705c:	7852      	ldrb	r2, [r2, #1]
 800705e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007062:	f1be 0f09 	cmp.w	lr, #9
 8007066:	d939      	bls.n	80070dc <_strtod_l+0x33c>
 8007068:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800706a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800706e:	1a76      	subs	r6, r6, r1
 8007070:	2e08      	cmp	r6, #8
 8007072:	dc03      	bgt.n	800707c <_strtod_l+0x2dc>
 8007074:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007076:	4588      	cmp	r8, r1
 8007078:	bfa8      	it	ge
 800707a:	4688      	movge	r8, r1
 800707c:	f1bc 0f00 	cmp.w	ip, #0
 8007080:	d001      	beq.n	8007086 <_strtod_l+0x2e6>
 8007082:	f1c8 0800 	rsb	r8, r8, #0
 8007086:	2d00      	cmp	r5, #0
 8007088:	d14e      	bne.n	8007128 <_strtod_l+0x388>
 800708a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800708c:	4308      	orrs	r0, r1
 800708e:	f47f aec0 	bne.w	8006e12 <_strtod_l+0x72>
 8007092:	2b00      	cmp	r3, #0
 8007094:	f47f aed6 	bne.w	8006e44 <_strtod_l+0xa4>
 8007098:	2a69      	cmp	r2, #105	@ 0x69
 800709a:	d028      	beq.n	80070ee <_strtod_l+0x34e>
 800709c:	dc25      	bgt.n	80070ea <_strtod_l+0x34a>
 800709e:	2a49      	cmp	r2, #73	@ 0x49
 80070a0:	d025      	beq.n	80070ee <_strtod_l+0x34e>
 80070a2:	2a4e      	cmp	r2, #78	@ 0x4e
 80070a4:	f47f aece 	bne.w	8006e44 <_strtod_l+0xa4>
 80070a8:	499a      	ldr	r1, [pc, #616]	@ (8007314 <_strtod_l+0x574>)
 80070aa:	a819      	add	r0, sp, #100	@ 0x64
 80070ac:	f001 f9de 	bl	800846c <__match>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	f43f aec7 	beq.w	8006e44 <_strtod_l+0xa4>
 80070b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	2b28      	cmp	r3, #40	@ 0x28
 80070bc:	d12e      	bne.n	800711c <_strtod_l+0x37c>
 80070be:	4996      	ldr	r1, [pc, #600]	@ (8007318 <_strtod_l+0x578>)
 80070c0:	aa1c      	add	r2, sp, #112	@ 0x70
 80070c2:	a819      	add	r0, sp, #100	@ 0x64
 80070c4:	f001 f9e6 	bl	8008494 <__hexnan>
 80070c8:	2805      	cmp	r0, #5
 80070ca:	d127      	bne.n	800711c <_strtod_l+0x37c>
 80070cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80070ce:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80070d2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80070d6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80070da:	e69a      	b.n	8006e12 <_strtod_l+0x72>
 80070dc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80070de:	fb08 2101 	mla	r1, r8, r1, r2
 80070e2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80070e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80070e8:	e7b5      	b.n	8007056 <_strtod_l+0x2b6>
 80070ea:	2a6e      	cmp	r2, #110	@ 0x6e
 80070ec:	e7da      	b.n	80070a4 <_strtod_l+0x304>
 80070ee:	498b      	ldr	r1, [pc, #556]	@ (800731c <_strtod_l+0x57c>)
 80070f0:	a819      	add	r0, sp, #100	@ 0x64
 80070f2:	f001 f9bb 	bl	800846c <__match>
 80070f6:	2800      	cmp	r0, #0
 80070f8:	f43f aea4 	beq.w	8006e44 <_strtod_l+0xa4>
 80070fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070fe:	4988      	ldr	r1, [pc, #544]	@ (8007320 <_strtod_l+0x580>)
 8007100:	3b01      	subs	r3, #1
 8007102:	a819      	add	r0, sp, #100	@ 0x64
 8007104:	9319      	str	r3, [sp, #100]	@ 0x64
 8007106:	f001 f9b1 	bl	800846c <__match>
 800710a:	b910      	cbnz	r0, 8007112 <_strtod_l+0x372>
 800710c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800710e:	3301      	adds	r3, #1
 8007110:	9319      	str	r3, [sp, #100]	@ 0x64
 8007112:	f04f 0a00 	mov.w	sl, #0
 8007116:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8007324 <_strtod_l+0x584>
 800711a:	e67a      	b.n	8006e12 <_strtod_l+0x72>
 800711c:	4882      	ldr	r0, [pc, #520]	@ (8007328 <_strtod_l+0x588>)
 800711e:	f000 fee3 	bl	8007ee8 <nan>
 8007122:	4682      	mov	sl, r0
 8007124:	468b      	mov	fp, r1
 8007126:	e674      	b.n	8006e12 <_strtod_l+0x72>
 8007128:	eba8 0309 	sub.w	r3, r8, r9
 800712c:	2f00      	cmp	r7, #0
 800712e:	bf08      	it	eq
 8007130:	462f      	moveq	r7, r5
 8007132:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007134:	2d10      	cmp	r5, #16
 8007136:	462c      	mov	r4, r5
 8007138:	9309      	str	r3, [sp, #36]	@ 0x24
 800713a:	bfa8      	it	ge
 800713c:	2410      	movge	r4, #16
 800713e:	f7f9 f951 	bl	80003e4 <__aeabi_ui2d>
 8007142:	2d09      	cmp	r5, #9
 8007144:	4682      	mov	sl, r0
 8007146:	468b      	mov	fp, r1
 8007148:	dc11      	bgt.n	800716e <_strtod_l+0x3ce>
 800714a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800714c:	2b00      	cmp	r3, #0
 800714e:	f43f ae60 	beq.w	8006e12 <_strtod_l+0x72>
 8007152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007154:	dd76      	ble.n	8007244 <_strtod_l+0x4a4>
 8007156:	2b16      	cmp	r3, #22
 8007158:	dc5d      	bgt.n	8007216 <_strtod_l+0x476>
 800715a:	4974      	ldr	r1, [pc, #464]	@ (800732c <_strtod_l+0x58c>)
 800715c:	4652      	mov	r2, sl
 800715e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007162:	465b      	mov	r3, fp
 8007164:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007168:	f7f9 f9b6 	bl	80004d8 <__aeabi_dmul>
 800716c:	e7d9      	b.n	8007122 <_strtod_l+0x382>
 800716e:	4b6f      	ldr	r3, [pc, #444]	@ (800732c <_strtod_l+0x58c>)
 8007170:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007174:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007178:	f7f9 f9ae 	bl	80004d8 <__aeabi_dmul>
 800717c:	4682      	mov	sl, r0
 800717e:	9808      	ldr	r0, [sp, #32]
 8007180:	468b      	mov	fp, r1
 8007182:	f7f9 f92f 	bl	80003e4 <__aeabi_ui2d>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	4650      	mov	r0, sl
 800718c:	4659      	mov	r1, fp
 800718e:	f7f8 ffed 	bl	800016c <__adddf3>
 8007192:	2d0f      	cmp	r5, #15
 8007194:	4682      	mov	sl, r0
 8007196:	468b      	mov	fp, r1
 8007198:	ddd7      	ble.n	800714a <_strtod_l+0x3aa>
 800719a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800719c:	1b2c      	subs	r4, r5, r4
 800719e:	441c      	add	r4, r3
 80071a0:	2c00      	cmp	r4, #0
 80071a2:	f340 8096 	ble.w	80072d2 <_strtod_l+0x532>
 80071a6:	f014 030f 	ands.w	r3, r4, #15
 80071aa:	d00a      	beq.n	80071c2 <_strtod_l+0x422>
 80071ac:	495f      	ldr	r1, [pc, #380]	@ (800732c <_strtod_l+0x58c>)
 80071ae:	4652      	mov	r2, sl
 80071b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071b8:	465b      	mov	r3, fp
 80071ba:	f7f9 f98d 	bl	80004d8 <__aeabi_dmul>
 80071be:	4682      	mov	sl, r0
 80071c0:	468b      	mov	fp, r1
 80071c2:	f034 040f 	bics.w	r4, r4, #15
 80071c6:	d073      	beq.n	80072b0 <_strtod_l+0x510>
 80071c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80071cc:	dd48      	ble.n	8007260 <_strtod_l+0x4c0>
 80071ce:	2400      	movs	r4, #0
 80071d0:	46a0      	mov	r8, r4
 80071d2:	46a1      	mov	r9, r4
 80071d4:	940a      	str	r4, [sp, #40]	@ 0x28
 80071d6:	2322      	movs	r3, #34	@ 0x22
 80071d8:	f04f 0a00 	mov.w	sl, #0
 80071dc:	9a05      	ldr	r2, [sp, #20]
 80071de:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8007324 <_strtod_l+0x584>
 80071e2:	6013      	str	r3, [r2, #0]
 80071e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f43f ae13 	beq.w	8006e12 <_strtod_l+0x72>
 80071ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80071ee:	9805      	ldr	r0, [sp, #20]
 80071f0:	f7ff f94c 	bl	800648c <_Bfree>
 80071f4:	4649      	mov	r1, r9
 80071f6:	9805      	ldr	r0, [sp, #20]
 80071f8:	f7ff f948 	bl	800648c <_Bfree>
 80071fc:	4641      	mov	r1, r8
 80071fe:	9805      	ldr	r0, [sp, #20]
 8007200:	f7ff f944 	bl	800648c <_Bfree>
 8007204:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007206:	9805      	ldr	r0, [sp, #20]
 8007208:	f7ff f940 	bl	800648c <_Bfree>
 800720c:	4621      	mov	r1, r4
 800720e:	9805      	ldr	r0, [sp, #20]
 8007210:	f7ff f93c 	bl	800648c <_Bfree>
 8007214:	e5fd      	b.n	8006e12 <_strtod_l+0x72>
 8007216:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007218:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800721c:	4293      	cmp	r3, r2
 800721e:	dbbc      	blt.n	800719a <_strtod_l+0x3fa>
 8007220:	4c42      	ldr	r4, [pc, #264]	@ (800732c <_strtod_l+0x58c>)
 8007222:	f1c5 050f 	rsb	r5, r5, #15
 8007226:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800722a:	4652      	mov	r2, sl
 800722c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007230:	465b      	mov	r3, fp
 8007232:	f7f9 f951 	bl	80004d8 <__aeabi_dmul>
 8007236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007238:	1b5d      	subs	r5, r3, r5
 800723a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800723e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007242:	e791      	b.n	8007168 <_strtod_l+0x3c8>
 8007244:	3316      	adds	r3, #22
 8007246:	dba8      	blt.n	800719a <_strtod_l+0x3fa>
 8007248:	4b38      	ldr	r3, [pc, #224]	@ (800732c <_strtod_l+0x58c>)
 800724a:	eba9 0808 	sub.w	r8, r9, r8
 800724e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007252:	4650      	mov	r0, sl
 8007254:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007258:	4659      	mov	r1, fp
 800725a:	f7f9 fa67 	bl	800072c <__aeabi_ddiv>
 800725e:	e760      	b.n	8007122 <_strtod_l+0x382>
 8007260:	4b33      	ldr	r3, [pc, #204]	@ (8007330 <_strtod_l+0x590>)
 8007262:	4650      	mov	r0, sl
 8007264:	9308      	str	r3, [sp, #32]
 8007266:	2300      	movs	r3, #0
 8007268:	4659      	mov	r1, fp
 800726a:	461e      	mov	r6, r3
 800726c:	1124      	asrs	r4, r4, #4
 800726e:	2c01      	cmp	r4, #1
 8007270:	dc21      	bgt.n	80072b6 <_strtod_l+0x516>
 8007272:	b10b      	cbz	r3, 8007278 <_strtod_l+0x4d8>
 8007274:	4682      	mov	sl, r0
 8007276:	468b      	mov	fp, r1
 8007278:	492d      	ldr	r1, [pc, #180]	@ (8007330 <_strtod_l+0x590>)
 800727a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800727e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007282:	4652      	mov	r2, sl
 8007284:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007288:	465b      	mov	r3, fp
 800728a:	f7f9 f925 	bl	80004d8 <__aeabi_dmul>
 800728e:	4b25      	ldr	r3, [pc, #148]	@ (8007324 <_strtod_l+0x584>)
 8007290:	460a      	mov	r2, r1
 8007292:	400b      	ands	r3, r1
 8007294:	4927      	ldr	r1, [pc, #156]	@ (8007334 <_strtod_l+0x594>)
 8007296:	4682      	mov	sl, r0
 8007298:	428b      	cmp	r3, r1
 800729a:	d898      	bhi.n	80071ce <_strtod_l+0x42e>
 800729c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80072a0:	428b      	cmp	r3, r1
 80072a2:	bf86      	itte	hi
 80072a4:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80072a8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007338 <_strtod_l+0x598>
 80072ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80072b0:	2300      	movs	r3, #0
 80072b2:	9308      	str	r3, [sp, #32]
 80072b4:	e07a      	b.n	80073ac <_strtod_l+0x60c>
 80072b6:	07e2      	lsls	r2, r4, #31
 80072b8:	d505      	bpl.n	80072c6 <_strtod_l+0x526>
 80072ba:	9b08      	ldr	r3, [sp, #32]
 80072bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c0:	f7f9 f90a 	bl	80004d8 <__aeabi_dmul>
 80072c4:	2301      	movs	r3, #1
 80072c6:	9a08      	ldr	r2, [sp, #32]
 80072c8:	3601      	adds	r6, #1
 80072ca:	3208      	adds	r2, #8
 80072cc:	1064      	asrs	r4, r4, #1
 80072ce:	9208      	str	r2, [sp, #32]
 80072d0:	e7cd      	b.n	800726e <_strtod_l+0x4ce>
 80072d2:	d0ed      	beq.n	80072b0 <_strtod_l+0x510>
 80072d4:	4264      	negs	r4, r4
 80072d6:	f014 020f 	ands.w	r2, r4, #15
 80072da:	d00a      	beq.n	80072f2 <_strtod_l+0x552>
 80072dc:	4b13      	ldr	r3, [pc, #76]	@ (800732c <_strtod_l+0x58c>)
 80072de:	4650      	mov	r0, sl
 80072e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072e4:	4659      	mov	r1, fp
 80072e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ea:	f7f9 fa1f 	bl	800072c <__aeabi_ddiv>
 80072ee:	4682      	mov	sl, r0
 80072f0:	468b      	mov	fp, r1
 80072f2:	1124      	asrs	r4, r4, #4
 80072f4:	d0dc      	beq.n	80072b0 <_strtod_l+0x510>
 80072f6:	2c1f      	cmp	r4, #31
 80072f8:	dd20      	ble.n	800733c <_strtod_l+0x59c>
 80072fa:	2400      	movs	r4, #0
 80072fc:	46a0      	mov	r8, r4
 80072fe:	46a1      	mov	r9, r4
 8007300:	940a      	str	r4, [sp, #40]	@ 0x28
 8007302:	2322      	movs	r3, #34	@ 0x22
 8007304:	9a05      	ldr	r2, [sp, #20]
 8007306:	f04f 0a00 	mov.w	sl, #0
 800730a:	f04f 0b00 	mov.w	fp, #0
 800730e:	6013      	str	r3, [r2, #0]
 8007310:	e768      	b.n	80071e4 <_strtod_l+0x444>
 8007312:	bf00      	nop
 8007314:	08008c27 	.word	0x08008c27
 8007318:	08008e3c 	.word	0x08008e3c
 800731c:	08008c1f 	.word	0x08008c1f
 8007320:	08008c56 	.word	0x08008c56
 8007324:	7ff00000 	.word	0x7ff00000
 8007328:	08008fe5 	.word	0x08008fe5
 800732c:	08008d70 	.word	0x08008d70
 8007330:	08008d48 	.word	0x08008d48
 8007334:	7ca00000 	.word	0x7ca00000
 8007338:	7fefffff 	.word	0x7fefffff
 800733c:	f014 0310 	ands.w	r3, r4, #16
 8007340:	bf18      	it	ne
 8007342:	236a      	movne	r3, #106	@ 0x6a
 8007344:	4650      	mov	r0, sl
 8007346:	9308      	str	r3, [sp, #32]
 8007348:	4659      	mov	r1, fp
 800734a:	2300      	movs	r3, #0
 800734c:	4ea9      	ldr	r6, [pc, #676]	@ (80075f4 <_strtod_l+0x854>)
 800734e:	07e2      	lsls	r2, r4, #31
 8007350:	d504      	bpl.n	800735c <_strtod_l+0x5bc>
 8007352:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007356:	f7f9 f8bf 	bl	80004d8 <__aeabi_dmul>
 800735a:	2301      	movs	r3, #1
 800735c:	1064      	asrs	r4, r4, #1
 800735e:	f106 0608 	add.w	r6, r6, #8
 8007362:	d1f4      	bne.n	800734e <_strtod_l+0x5ae>
 8007364:	b10b      	cbz	r3, 800736a <_strtod_l+0x5ca>
 8007366:	4682      	mov	sl, r0
 8007368:	468b      	mov	fp, r1
 800736a:	9b08      	ldr	r3, [sp, #32]
 800736c:	b1b3      	cbz	r3, 800739c <_strtod_l+0x5fc>
 800736e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007372:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007376:	2b00      	cmp	r3, #0
 8007378:	4659      	mov	r1, fp
 800737a:	dd0f      	ble.n	800739c <_strtod_l+0x5fc>
 800737c:	2b1f      	cmp	r3, #31
 800737e:	dd57      	ble.n	8007430 <_strtod_l+0x690>
 8007380:	2b34      	cmp	r3, #52	@ 0x34
 8007382:	bfd8      	it	le
 8007384:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007388:	f04f 0a00 	mov.w	sl, #0
 800738c:	bfcf      	iteee	gt
 800738e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007392:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007396:	4093      	lslle	r3, r2
 8007398:	ea03 0b01 	andle.w	fp, r3, r1
 800739c:	2200      	movs	r2, #0
 800739e:	2300      	movs	r3, #0
 80073a0:	4650      	mov	r0, sl
 80073a2:	4659      	mov	r1, fp
 80073a4:	f7f9 fb00 	bl	80009a8 <__aeabi_dcmpeq>
 80073a8:	2800      	cmp	r0, #0
 80073aa:	d1a6      	bne.n	80072fa <_strtod_l+0x55a>
 80073ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073ae:	463a      	mov	r2, r7
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80073b4:	462b      	mov	r3, r5
 80073b6:	9805      	ldr	r0, [sp, #20]
 80073b8:	f7ff f8d0 	bl	800655c <__s2b>
 80073bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80073be:	2800      	cmp	r0, #0
 80073c0:	f43f af05 	beq.w	80071ce <_strtod_l+0x42e>
 80073c4:	2400      	movs	r4, #0
 80073c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073c8:	eba9 0308 	sub.w	r3, r9, r8
 80073cc:	2a00      	cmp	r2, #0
 80073ce:	bfa8      	it	ge
 80073d0:	2300      	movge	r3, #0
 80073d2:	46a0      	mov	r8, r4
 80073d4:	9312      	str	r3, [sp, #72]	@ 0x48
 80073d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80073da:	9316      	str	r3, [sp, #88]	@ 0x58
 80073dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073de:	9805      	ldr	r0, [sp, #20]
 80073e0:	6859      	ldr	r1, [r3, #4]
 80073e2:	f7ff f813 	bl	800640c <_Balloc>
 80073e6:	4681      	mov	r9, r0
 80073e8:	2800      	cmp	r0, #0
 80073ea:	f43f aef4 	beq.w	80071d6 <_strtod_l+0x436>
 80073ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073f0:	300c      	adds	r0, #12
 80073f2:	691a      	ldr	r2, [r3, #16]
 80073f4:	f103 010c 	add.w	r1, r3, #12
 80073f8:	3202      	adds	r2, #2
 80073fa:	0092      	lsls	r2, r2, #2
 80073fc:	f000 fd66 	bl	8007ecc <memcpy>
 8007400:	ab1c      	add	r3, sp, #112	@ 0x70
 8007402:	9301      	str	r3, [sp, #4]
 8007404:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	4652      	mov	r2, sl
 800740a:	465b      	mov	r3, fp
 800740c:	9805      	ldr	r0, [sp, #20]
 800740e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007412:	f7ff fbd5 	bl	8006bc0 <__d2b>
 8007416:	901a      	str	r0, [sp, #104]	@ 0x68
 8007418:	2800      	cmp	r0, #0
 800741a:	f43f aedc 	beq.w	80071d6 <_strtod_l+0x436>
 800741e:	2101      	movs	r1, #1
 8007420:	9805      	ldr	r0, [sp, #20]
 8007422:	f7ff f931 	bl	8006688 <__i2b>
 8007426:	4680      	mov	r8, r0
 8007428:	b948      	cbnz	r0, 800743e <_strtod_l+0x69e>
 800742a:	f04f 0800 	mov.w	r8, #0
 800742e:	e6d2      	b.n	80071d6 <_strtod_l+0x436>
 8007430:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007434:	fa02 f303 	lsl.w	r3, r2, r3
 8007438:	ea03 0a0a 	and.w	sl, r3, sl
 800743c:	e7ae      	b.n	800739c <_strtod_l+0x5fc>
 800743e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007440:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007442:	2d00      	cmp	r5, #0
 8007444:	bfab      	itete	ge
 8007446:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007448:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800744a:	18ef      	addge	r7, r5, r3
 800744c:	1b5e      	sublt	r6, r3, r5
 800744e:	9b08      	ldr	r3, [sp, #32]
 8007450:	bfa8      	it	ge
 8007452:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007454:	eba5 0503 	sub.w	r5, r5, r3
 8007458:	4415      	add	r5, r2
 800745a:	4b67      	ldr	r3, [pc, #412]	@ (80075f8 <_strtod_l+0x858>)
 800745c:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 8007460:	bfb8      	it	lt
 8007462:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007464:	429d      	cmp	r5, r3
 8007466:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800746a:	da50      	bge.n	800750e <_strtod_l+0x76e>
 800746c:	1b5b      	subs	r3, r3, r5
 800746e:	2b1f      	cmp	r3, #31
 8007470:	f04f 0101 	mov.w	r1, #1
 8007474:	eba2 0203 	sub.w	r2, r2, r3
 8007478:	dc3d      	bgt.n	80074f6 <_strtod_l+0x756>
 800747a:	fa01 f303 	lsl.w	r3, r1, r3
 800747e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007480:	2300      	movs	r3, #0
 8007482:	9310      	str	r3, [sp, #64]	@ 0x40
 8007484:	18bd      	adds	r5, r7, r2
 8007486:	9b08      	ldr	r3, [sp, #32]
 8007488:	42af      	cmp	r7, r5
 800748a:	4416      	add	r6, r2
 800748c:	441e      	add	r6, r3
 800748e:	463b      	mov	r3, r7
 8007490:	bfa8      	it	ge
 8007492:	462b      	movge	r3, r5
 8007494:	42b3      	cmp	r3, r6
 8007496:	bfa8      	it	ge
 8007498:	4633      	movge	r3, r6
 800749a:	2b00      	cmp	r3, #0
 800749c:	bfc2      	ittt	gt
 800749e:	1aed      	subgt	r5, r5, r3
 80074a0:	1af6      	subgt	r6, r6, r3
 80074a2:	1aff      	subgt	r7, r7, r3
 80074a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	dd16      	ble.n	80074d8 <_strtod_l+0x738>
 80074aa:	4641      	mov	r1, r8
 80074ac:	461a      	mov	r2, r3
 80074ae:	9805      	ldr	r0, [sp, #20]
 80074b0:	f7ff f9a8 	bl	8006804 <__pow5mult>
 80074b4:	4680      	mov	r8, r0
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d0b7      	beq.n	800742a <_strtod_l+0x68a>
 80074ba:	4601      	mov	r1, r0
 80074bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80074be:	9805      	ldr	r0, [sp, #20]
 80074c0:	f7ff f8f8 	bl	80066b4 <__multiply>
 80074c4:	900e      	str	r0, [sp, #56]	@ 0x38
 80074c6:	2800      	cmp	r0, #0
 80074c8:	f43f ae85 	beq.w	80071d6 <_strtod_l+0x436>
 80074cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074ce:	9805      	ldr	r0, [sp, #20]
 80074d0:	f7fe ffdc 	bl	800648c <_Bfree>
 80074d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80074d8:	2d00      	cmp	r5, #0
 80074da:	dc1d      	bgt.n	8007518 <_strtod_l+0x778>
 80074dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074de:	2b00      	cmp	r3, #0
 80074e0:	dd23      	ble.n	800752a <_strtod_l+0x78a>
 80074e2:	4649      	mov	r1, r9
 80074e4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80074e6:	9805      	ldr	r0, [sp, #20]
 80074e8:	f7ff f98c 	bl	8006804 <__pow5mult>
 80074ec:	4681      	mov	r9, r0
 80074ee:	b9e0      	cbnz	r0, 800752a <_strtod_l+0x78a>
 80074f0:	f04f 0900 	mov.w	r9, #0
 80074f4:	e66f      	b.n	80071d6 <_strtod_l+0x436>
 80074f6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80074fa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80074fe:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007502:	35e2      	adds	r5, #226	@ 0xe2
 8007504:	fa01 f305 	lsl.w	r3, r1, r5
 8007508:	9310      	str	r3, [sp, #64]	@ 0x40
 800750a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800750c:	e7ba      	b.n	8007484 <_strtod_l+0x6e4>
 800750e:	2300      	movs	r3, #0
 8007510:	9310      	str	r3, [sp, #64]	@ 0x40
 8007512:	2301      	movs	r3, #1
 8007514:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007516:	e7b5      	b.n	8007484 <_strtod_l+0x6e4>
 8007518:	462a      	mov	r2, r5
 800751a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800751c:	9805      	ldr	r0, [sp, #20]
 800751e:	f7ff f9cb 	bl	80068b8 <__lshift>
 8007522:	901a      	str	r0, [sp, #104]	@ 0x68
 8007524:	2800      	cmp	r0, #0
 8007526:	d1d9      	bne.n	80074dc <_strtod_l+0x73c>
 8007528:	e655      	b.n	80071d6 <_strtod_l+0x436>
 800752a:	2e00      	cmp	r6, #0
 800752c:	dd07      	ble.n	800753e <_strtod_l+0x79e>
 800752e:	4649      	mov	r1, r9
 8007530:	4632      	mov	r2, r6
 8007532:	9805      	ldr	r0, [sp, #20]
 8007534:	f7ff f9c0 	bl	80068b8 <__lshift>
 8007538:	4681      	mov	r9, r0
 800753a:	2800      	cmp	r0, #0
 800753c:	d0d8      	beq.n	80074f0 <_strtod_l+0x750>
 800753e:	2f00      	cmp	r7, #0
 8007540:	dd08      	ble.n	8007554 <_strtod_l+0x7b4>
 8007542:	4641      	mov	r1, r8
 8007544:	463a      	mov	r2, r7
 8007546:	9805      	ldr	r0, [sp, #20]
 8007548:	f7ff f9b6 	bl	80068b8 <__lshift>
 800754c:	4680      	mov	r8, r0
 800754e:	2800      	cmp	r0, #0
 8007550:	f43f ae41 	beq.w	80071d6 <_strtod_l+0x436>
 8007554:	464a      	mov	r2, r9
 8007556:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007558:	9805      	ldr	r0, [sp, #20]
 800755a:	f7ff fa35 	bl	80069c8 <__mdiff>
 800755e:	4604      	mov	r4, r0
 8007560:	2800      	cmp	r0, #0
 8007562:	f43f ae38 	beq.w	80071d6 <_strtod_l+0x436>
 8007566:	68c3      	ldr	r3, [r0, #12]
 8007568:	4641      	mov	r1, r8
 800756a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800756c:	2300      	movs	r3, #0
 800756e:	60c3      	str	r3, [r0, #12]
 8007570:	f7ff fa0e 	bl	8006990 <__mcmp>
 8007574:	2800      	cmp	r0, #0
 8007576:	da45      	bge.n	8007604 <_strtod_l+0x864>
 8007578:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800757a:	ea53 030a 	orrs.w	r3, r3, sl
 800757e:	d16b      	bne.n	8007658 <_strtod_l+0x8b8>
 8007580:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007584:	2b00      	cmp	r3, #0
 8007586:	d167      	bne.n	8007658 <_strtod_l+0x8b8>
 8007588:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800758c:	0d1b      	lsrs	r3, r3, #20
 800758e:	051b      	lsls	r3, r3, #20
 8007590:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007594:	d960      	bls.n	8007658 <_strtod_l+0x8b8>
 8007596:	6963      	ldr	r3, [r4, #20]
 8007598:	b913      	cbnz	r3, 80075a0 <_strtod_l+0x800>
 800759a:	6923      	ldr	r3, [r4, #16]
 800759c:	2b01      	cmp	r3, #1
 800759e:	dd5b      	ble.n	8007658 <_strtod_l+0x8b8>
 80075a0:	4621      	mov	r1, r4
 80075a2:	2201      	movs	r2, #1
 80075a4:	9805      	ldr	r0, [sp, #20]
 80075a6:	f7ff f987 	bl	80068b8 <__lshift>
 80075aa:	4641      	mov	r1, r8
 80075ac:	4604      	mov	r4, r0
 80075ae:	f7ff f9ef 	bl	8006990 <__mcmp>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	dd50      	ble.n	8007658 <_strtod_l+0x8b8>
 80075b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80075ba:	9a08      	ldr	r2, [sp, #32]
 80075bc:	0d1b      	lsrs	r3, r3, #20
 80075be:	051b      	lsls	r3, r3, #20
 80075c0:	2a00      	cmp	r2, #0
 80075c2:	d06a      	beq.n	800769a <_strtod_l+0x8fa>
 80075c4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80075c8:	d867      	bhi.n	800769a <_strtod_l+0x8fa>
 80075ca:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80075ce:	f67f ae98 	bls.w	8007302 <_strtod_l+0x562>
 80075d2:	4650      	mov	r0, sl
 80075d4:	4659      	mov	r1, fp
 80075d6:	4b09      	ldr	r3, [pc, #36]	@ (80075fc <_strtod_l+0x85c>)
 80075d8:	2200      	movs	r2, #0
 80075da:	f7f8 ff7d 	bl	80004d8 <__aeabi_dmul>
 80075de:	4b08      	ldr	r3, [pc, #32]	@ (8007600 <_strtod_l+0x860>)
 80075e0:	4682      	mov	sl, r0
 80075e2:	400b      	ands	r3, r1
 80075e4:	468b      	mov	fp, r1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f47f ae00 	bne.w	80071ec <_strtod_l+0x44c>
 80075ec:	2322      	movs	r3, #34	@ 0x22
 80075ee:	9a05      	ldr	r2, [sp, #20]
 80075f0:	6013      	str	r3, [r2, #0]
 80075f2:	e5fb      	b.n	80071ec <_strtod_l+0x44c>
 80075f4:	08008e68 	.word	0x08008e68
 80075f8:	fffffc02 	.word	0xfffffc02
 80075fc:	39500000 	.word	0x39500000
 8007600:	7ff00000 	.word	0x7ff00000
 8007604:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007608:	d165      	bne.n	80076d6 <_strtod_l+0x936>
 800760a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800760c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007610:	b35a      	cbz	r2, 800766a <_strtod_l+0x8ca>
 8007612:	4a99      	ldr	r2, [pc, #612]	@ (8007878 <_strtod_l+0xad8>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d12b      	bne.n	8007670 <_strtod_l+0x8d0>
 8007618:	9b08      	ldr	r3, [sp, #32]
 800761a:	4651      	mov	r1, sl
 800761c:	b303      	cbz	r3, 8007660 <_strtod_l+0x8c0>
 800761e:	465a      	mov	r2, fp
 8007620:	4b96      	ldr	r3, [pc, #600]	@ (800787c <_strtod_l+0xadc>)
 8007622:	4013      	ands	r3, r2
 8007624:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007628:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800762c:	d81b      	bhi.n	8007666 <_strtod_l+0x8c6>
 800762e:	0d1b      	lsrs	r3, r3, #20
 8007630:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007634:	fa02 f303 	lsl.w	r3, r2, r3
 8007638:	4299      	cmp	r1, r3
 800763a:	d119      	bne.n	8007670 <_strtod_l+0x8d0>
 800763c:	4b90      	ldr	r3, [pc, #576]	@ (8007880 <_strtod_l+0xae0>)
 800763e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007640:	429a      	cmp	r2, r3
 8007642:	d102      	bne.n	800764a <_strtod_l+0x8aa>
 8007644:	3101      	adds	r1, #1
 8007646:	f43f adc6 	beq.w	80071d6 <_strtod_l+0x436>
 800764a:	f04f 0a00 	mov.w	sl, #0
 800764e:	4b8b      	ldr	r3, [pc, #556]	@ (800787c <_strtod_l+0xadc>)
 8007650:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007652:	401a      	ands	r2, r3
 8007654:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007658:	9b08      	ldr	r3, [sp, #32]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1b9      	bne.n	80075d2 <_strtod_l+0x832>
 800765e:	e5c5      	b.n	80071ec <_strtod_l+0x44c>
 8007660:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007664:	e7e8      	b.n	8007638 <_strtod_l+0x898>
 8007666:	4613      	mov	r3, r2
 8007668:	e7e6      	b.n	8007638 <_strtod_l+0x898>
 800766a:	ea53 030a 	orrs.w	r3, r3, sl
 800766e:	d0a2      	beq.n	80075b6 <_strtod_l+0x816>
 8007670:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007672:	b1db      	cbz	r3, 80076ac <_strtod_l+0x90c>
 8007674:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007676:	4213      	tst	r3, r2
 8007678:	d0ee      	beq.n	8007658 <_strtod_l+0x8b8>
 800767a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800767c:	4650      	mov	r0, sl
 800767e:	4659      	mov	r1, fp
 8007680:	9a08      	ldr	r2, [sp, #32]
 8007682:	b1bb      	cbz	r3, 80076b4 <_strtod_l+0x914>
 8007684:	f7ff fb68 	bl	8006d58 <sulp>
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007690:	f7f8 fd6c 	bl	800016c <__adddf3>
 8007694:	4682      	mov	sl, r0
 8007696:	468b      	mov	fp, r1
 8007698:	e7de      	b.n	8007658 <_strtod_l+0x8b8>
 800769a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800769e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80076a2:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80076a6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80076aa:	e7d5      	b.n	8007658 <_strtod_l+0x8b8>
 80076ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80076ae:	ea13 0f0a 	tst.w	r3, sl
 80076b2:	e7e1      	b.n	8007678 <_strtod_l+0x8d8>
 80076b4:	f7ff fb50 	bl	8006d58 <sulp>
 80076b8:	4602      	mov	r2, r0
 80076ba:	460b      	mov	r3, r1
 80076bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076c0:	f7f8 fd52 	bl	8000168 <__aeabi_dsub>
 80076c4:	2200      	movs	r2, #0
 80076c6:	2300      	movs	r3, #0
 80076c8:	4682      	mov	sl, r0
 80076ca:	468b      	mov	fp, r1
 80076cc:	f7f9 f96c 	bl	80009a8 <__aeabi_dcmpeq>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d0c1      	beq.n	8007658 <_strtod_l+0x8b8>
 80076d4:	e615      	b.n	8007302 <_strtod_l+0x562>
 80076d6:	4641      	mov	r1, r8
 80076d8:	4620      	mov	r0, r4
 80076da:	f7ff fac9 	bl	8006c70 <__ratio>
 80076de:	2200      	movs	r2, #0
 80076e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80076e4:	4606      	mov	r6, r0
 80076e6:	460f      	mov	r7, r1
 80076e8:	f7f9 f972 	bl	80009d0 <__aeabi_dcmple>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d06d      	beq.n	80077cc <_strtod_l+0xa2c>
 80076f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d178      	bne.n	80077e8 <_strtod_l+0xa48>
 80076f6:	f1ba 0f00 	cmp.w	sl, #0
 80076fa:	d156      	bne.n	80077aa <_strtod_l+0xa0a>
 80076fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007702:	2b00      	cmp	r3, #0
 8007704:	d158      	bne.n	80077b8 <_strtod_l+0xa18>
 8007706:	2200      	movs	r2, #0
 8007708:	4630      	mov	r0, r6
 800770a:	4639      	mov	r1, r7
 800770c:	4b5d      	ldr	r3, [pc, #372]	@ (8007884 <_strtod_l+0xae4>)
 800770e:	f7f9 f955 	bl	80009bc <__aeabi_dcmplt>
 8007712:	2800      	cmp	r0, #0
 8007714:	d157      	bne.n	80077c6 <_strtod_l+0xa26>
 8007716:	4630      	mov	r0, r6
 8007718:	4639      	mov	r1, r7
 800771a:	2200      	movs	r2, #0
 800771c:	4b5a      	ldr	r3, [pc, #360]	@ (8007888 <_strtod_l+0xae8>)
 800771e:	f7f8 fedb 	bl	80004d8 <__aeabi_dmul>
 8007722:	4606      	mov	r6, r0
 8007724:	460f      	mov	r7, r1
 8007726:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800772a:	9606      	str	r6, [sp, #24]
 800772c:	9307      	str	r3, [sp, #28]
 800772e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007732:	4d52      	ldr	r5, [pc, #328]	@ (800787c <_strtod_l+0xadc>)
 8007734:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007738:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800773a:	401d      	ands	r5, r3
 800773c:	4b53      	ldr	r3, [pc, #332]	@ (800788c <_strtod_l+0xaec>)
 800773e:	429d      	cmp	r5, r3
 8007740:	f040 80aa 	bne.w	8007898 <_strtod_l+0xaf8>
 8007744:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007746:	4650      	mov	r0, sl
 8007748:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800774c:	4659      	mov	r1, fp
 800774e:	f7ff f9cf 	bl	8006af0 <__ulp>
 8007752:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007756:	f7f8 febf 	bl	80004d8 <__aeabi_dmul>
 800775a:	4652      	mov	r2, sl
 800775c:	465b      	mov	r3, fp
 800775e:	f7f8 fd05 	bl	800016c <__adddf3>
 8007762:	460b      	mov	r3, r1
 8007764:	4945      	ldr	r1, [pc, #276]	@ (800787c <_strtod_l+0xadc>)
 8007766:	4a4a      	ldr	r2, [pc, #296]	@ (8007890 <_strtod_l+0xaf0>)
 8007768:	4019      	ands	r1, r3
 800776a:	4291      	cmp	r1, r2
 800776c:	4682      	mov	sl, r0
 800776e:	d942      	bls.n	80077f6 <_strtod_l+0xa56>
 8007770:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007772:	4b43      	ldr	r3, [pc, #268]	@ (8007880 <_strtod_l+0xae0>)
 8007774:	429a      	cmp	r2, r3
 8007776:	d103      	bne.n	8007780 <_strtod_l+0x9e0>
 8007778:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800777a:	3301      	adds	r3, #1
 800777c:	f43f ad2b 	beq.w	80071d6 <_strtod_l+0x436>
 8007780:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007784:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007880 <_strtod_l+0xae0>
 8007788:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800778a:	9805      	ldr	r0, [sp, #20]
 800778c:	f7fe fe7e 	bl	800648c <_Bfree>
 8007790:	4649      	mov	r1, r9
 8007792:	9805      	ldr	r0, [sp, #20]
 8007794:	f7fe fe7a 	bl	800648c <_Bfree>
 8007798:	4641      	mov	r1, r8
 800779a:	9805      	ldr	r0, [sp, #20]
 800779c:	f7fe fe76 	bl	800648c <_Bfree>
 80077a0:	4621      	mov	r1, r4
 80077a2:	9805      	ldr	r0, [sp, #20]
 80077a4:	f7fe fe72 	bl	800648c <_Bfree>
 80077a8:	e618      	b.n	80073dc <_strtod_l+0x63c>
 80077aa:	f1ba 0f01 	cmp.w	sl, #1
 80077ae:	d103      	bne.n	80077b8 <_strtod_l+0xa18>
 80077b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f43f ada5 	beq.w	8007302 <_strtod_l+0x562>
 80077b8:	2200      	movs	r2, #0
 80077ba:	4b36      	ldr	r3, [pc, #216]	@ (8007894 <_strtod_l+0xaf4>)
 80077bc:	2600      	movs	r6, #0
 80077be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80077c2:	4f30      	ldr	r7, [pc, #192]	@ (8007884 <_strtod_l+0xae4>)
 80077c4:	e7b3      	b.n	800772e <_strtod_l+0x98e>
 80077c6:	2600      	movs	r6, #0
 80077c8:	4f2f      	ldr	r7, [pc, #188]	@ (8007888 <_strtod_l+0xae8>)
 80077ca:	e7ac      	b.n	8007726 <_strtod_l+0x986>
 80077cc:	4630      	mov	r0, r6
 80077ce:	4639      	mov	r1, r7
 80077d0:	4b2d      	ldr	r3, [pc, #180]	@ (8007888 <_strtod_l+0xae8>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	f7f8 fe80 	bl	80004d8 <__aeabi_dmul>
 80077d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077da:	4606      	mov	r6, r0
 80077dc:	460f      	mov	r7, r1
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d0a1      	beq.n	8007726 <_strtod_l+0x986>
 80077e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80077e6:	e7a2      	b.n	800772e <_strtod_l+0x98e>
 80077e8:	2200      	movs	r2, #0
 80077ea:	4b26      	ldr	r3, [pc, #152]	@ (8007884 <_strtod_l+0xae4>)
 80077ec:	4616      	mov	r6, r2
 80077ee:	461f      	mov	r7, r3
 80077f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80077f4:	e79b      	b.n	800772e <_strtod_l+0x98e>
 80077f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80077fa:	9b08      	ldr	r3, [sp, #32]
 80077fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1c1      	bne.n	8007788 <_strtod_l+0x9e8>
 8007804:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007808:	0d1b      	lsrs	r3, r3, #20
 800780a:	051b      	lsls	r3, r3, #20
 800780c:	429d      	cmp	r5, r3
 800780e:	d1bb      	bne.n	8007788 <_strtod_l+0x9e8>
 8007810:	4630      	mov	r0, r6
 8007812:	4639      	mov	r1, r7
 8007814:	f7f9 fc2c 	bl	8001070 <__aeabi_d2lz>
 8007818:	f7f8 fe30 	bl	800047c <__aeabi_l2d>
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	4630      	mov	r0, r6
 8007822:	4639      	mov	r1, r7
 8007824:	f7f8 fca0 	bl	8000168 <__aeabi_dsub>
 8007828:	460b      	mov	r3, r1
 800782a:	4602      	mov	r2, r0
 800782c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007830:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007836:	ea46 060a 	orr.w	r6, r6, sl
 800783a:	431e      	orrs	r6, r3
 800783c:	d069      	beq.n	8007912 <_strtod_l+0xb72>
 800783e:	a30a      	add	r3, pc, #40	@ (adr r3, 8007868 <_strtod_l+0xac8>)
 8007840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007844:	f7f9 f8ba 	bl	80009bc <__aeabi_dcmplt>
 8007848:	2800      	cmp	r0, #0
 800784a:	f47f accf 	bne.w	80071ec <_strtod_l+0x44c>
 800784e:	a308      	add	r3, pc, #32	@ (adr r3, 8007870 <_strtod_l+0xad0>)
 8007850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007854:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007858:	f7f9 f8ce 	bl	80009f8 <__aeabi_dcmpgt>
 800785c:	2800      	cmp	r0, #0
 800785e:	d093      	beq.n	8007788 <_strtod_l+0x9e8>
 8007860:	e4c4      	b.n	80071ec <_strtod_l+0x44c>
 8007862:	bf00      	nop
 8007864:	f3af 8000 	nop.w
 8007868:	94a03595 	.word	0x94a03595
 800786c:	3fdfffff 	.word	0x3fdfffff
 8007870:	35afe535 	.word	0x35afe535
 8007874:	3fe00000 	.word	0x3fe00000
 8007878:	000fffff 	.word	0x000fffff
 800787c:	7ff00000 	.word	0x7ff00000
 8007880:	7fefffff 	.word	0x7fefffff
 8007884:	3ff00000 	.word	0x3ff00000
 8007888:	3fe00000 	.word	0x3fe00000
 800788c:	7fe00000 	.word	0x7fe00000
 8007890:	7c9fffff 	.word	0x7c9fffff
 8007894:	bff00000 	.word	0xbff00000
 8007898:	9b08      	ldr	r3, [sp, #32]
 800789a:	b323      	cbz	r3, 80078e6 <_strtod_l+0xb46>
 800789c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80078a0:	d821      	bhi.n	80078e6 <_strtod_l+0xb46>
 80078a2:	a327      	add	r3, pc, #156	@ (adr r3, 8007940 <_strtod_l+0xba0>)
 80078a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a8:	4630      	mov	r0, r6
 80078aa:	4639      	mov	r1, r7
 80078ac:	f7f9 f890 	bl	80009d0 <__aeabi_dcmple>
 80078b0:	b1a0      	cbz	r0, 80078dc <_strtod_l+0xb3c>
 80078b2:	4639      	mov	r1, r7
 80078b4:	4630      	mov	r0, r6
 80078b6:	f7f9 f8e7 	bl	8000a88 <__aeabi_d2uiz>
 80078ba:	2801      	cmp	r0, #1
 80078bc:	bf38      	it	cc
 80078be:	2001      	movcc	r0, #1
 80078c0:	f7f8 fd90 	bl	80003e4 <__aeabi_ui2d>
 80078c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078c6:	4606      	mov	r6, r0
 80078c8:	460f      	mov	r7, r1
 80078ca:	b9fb      	cbnz	r3, 800790c <_strtod_l+0xb6c>
 80078cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80078d0:	9014      	str	r0, [sp, #80]	@ 0x50
 80078d2:	9315      	str	r3, [sp, #84]	@ 0x54
 80078d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80078d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80078dc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80078de:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80078e2:	1b5b      	subs	r3, r3, r5
 80078e4:	9311      	str	r3, [sp, #68]	@ 0x44
 80078e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078ea:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80078ee:	f7ff f8ff 	bl	8006af0 <__ulp>
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	4650      	mov	r0, sl
 80078f8:	4659      	mov	r1, fp
 80078fa:	f7f8 fded 	bl	80004d8 <__aeabi_dmul>
 80078fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007902:	f7f8 fc33 	bl	800016c <__adddf3>
 8007906:	4682      	mov	sl, r0
 8007908:	468b      	mov	fp, r1
 800790a:	e776      	b.n	80077fa <_strtod_l+0xa5a>
 800790c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007910:	e7e0      	b.n	80078d4 <_strtod_l+0xb34>
 8007912:	a30d      	add	r3, pc, #52	@ (adr r3, 8007948 <_strtod_l+0xba8>)
 8007914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007918:	f7f9 f850 	bl	80009bc <__aeabi_dcmplt>
 800791c:	e79e      	b.n	800785c <_strtod_l+0xabc>
 800791e:	2300      	movs	r3, #0
 8007920:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007922:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007924:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	f7ff ba77 	b.w	8006e1a <_strtod_l+0x7a>
 800792c:	2a65      	cmp	r2, #101	@ 0x65
 800792e:	f43f ab6e 	beq.w	800700e <_strtod_l+0x26e>
 8007932:	2a45      	cmp	r2, #69	@ 0x45
 8007934:	f43f ab6b 	beq.w	800700e <_strtod_l+0x26e>
 8007938:	2301      	movs	r3, #1
 800793a:	f7ff bba6 	b.w	800708a <_strtod_l+0x2ea>
 800793e:	bf00      	nop
 8007940:	ffc00000 	.word	0xffc00000
 8007944:	41dfffff 	.word	0x41dfffff
 8007948:	94a03595 	.word	0x94a03595
 800794c:	3fcfffff 	.word	0x3fcfffff

08007950 <_strtod_r>:
 8007950:	4b01      	ldr	r3, [pc, #4]	@ (8007958 <_strtod_r+0x8>)
 8007952:	f7ff ba25 	b.w	8006da0 <_strtod_l>
 8007956:	bf00      	nop
 8007958:	20000078 	.word	0x20000078

0800795c <_strtol_l.constprop.0>:
 800795c:	2b24      	cmp	r3, #36	@ 0x24
 800795e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007962:	4686      	mov	lr, r0
 8007964:	4690      	mov	r8, r2
 8007966:	d801      	bhi.n	800796c <_strtol_l.constprop.0+0x10>
 8007968:	2b01      	cmp	r3, #1
 800796a:	d106      	bne.n	800797a <_strtol_l.constprop.0+0x1e>
 800796c:	f7fd fdbe 	bl	80054ec <__errno>
 8007970:	2316      	movs	r3, #22
 8007972:	6003      	str	r3, [r0, #0]
 8007974:	2000      	movs	r0, #0
 8007976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800797a:	460d      	mov	r5, r1
 800797c:	4833      	ldr	r0, [pc, #204]	@ (8007a4c <_strtol_l.constprop.0+0xf0>)
 800797e:	462a      	mov	r2, r5
 8007980:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007984:	5d06      	ldrb	r6, [r0, r4]
 8007986:	f016 0608 	ands.w	r6, r6, #8
 800798a:	d1f8      	bne.n	800797e <_strtol_l.constprop.0+0x22>
 800798c:	2c2d      	cmp	r4, #45	@ 0x2d
 800798e:	d12d      	bne.n	80079ec <_strtol_l.constprop.0+0x90>
 8007990:	2601      	movs	r6, #1
 8007992:	782c      	ldrb	r4, [r5, #0]
 8007994:	1c95      	adds	r5, r2, #2
 8007996:	f033 0210 	bics.w	r2, r3, #16
 800799a:	d109      	bne.n	80079b0 <_strtol_l.constprop.0+0x54>
 800799c:	2c30      	cmp	r4, #48	@ 0x30
 800799e:	d12a      	bne.n	80079f6 <_strtol_l.constprop.0+0x9a>
 80079a0:	782a      	ldrb	r2, [r5, #0]
 80079a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80079a6:	2a58      	cmp	r2, #88	@ 0x58
 80079a8:	d125      	bne.n	80079f6 <_strtol_l.constprop.0+0x9a>
 80079aa:	2310      	movs	r3, #16
 80079ac:	786c      	ldrb	r4, [r5, #1]
 80079ae:	3502      	adds	r5, #2
 80079b0:	2200      	movs	r2, #0
 80079b2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80079b6:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80079ba:	fbbc f9f3 	udiv	r9, ip, r3
 80079be:	4610      	mov	r0, r2
 80079c0:	fb03 ca19 	mls	sl, r3, r9, ip
 80079c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80079c8:	2f09      	cmp	r7, #9
 80079ca:	d81b      	bhi.n	8007a04 <_strtol_l.constprop.0+0xa8>
 80079cc:	463c      	mov	r4, r7
 80079ce:	42a3      	cmp	r3, r4
 80079d0:	dd27      	ble.n	8007a22 <_strtol_l.constprop.0+0xc6>
 80079d2:	1c57      	adds	r7, r2, #1
 80079d4:	d007      	beq.n	80079e6 <_strtol_l.constprop.0+0x8a>
 80079d6:	4581      	cmp	r9, r0
 80079d8:	d320      	bcc.n	8007a1c <_strtol_l.constprop.0+0xc0>
 80079da:	d101      	bne.n	80079e0 <_strtol_l.constprop.0+0x84>
 80079dc:	45a2      	cmp	sl, r4
 80079de:	db1d      	blt.n	8007a1c <_strtol_l.constprop.0+0xc0>
 80079e0:	2201      	movs	r2, #1
 80079e2:	fb00 4003 	mla	r0, r0, r3, r4
 80079e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079ea:	e7eb      	b.n	80079c4 <_strtol_l.constprop.0+0x68>
 80079ec:	2c2b      	cmp	r4, #43	@ 0x2b
 80079ee:	bf04      	itt	eq
 80079f0:	782c      	ldrbeq	r4, [r5, #0]
 80079f2:	1c95      	addeq	r5, r2, #2
 80079f4:	e7cf      	b.n	8007996 <_strtol_l.constprop.0+0x3a>
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1da      	bne.n	80079b0 <_strtol_l.constprop.0+0x54>
 80079fa:	2c30      	cmp	r4, #48	@ 0x30
 80079fc:	bf0c      	ite	eq
 80079fe:	2308      	moveq	r3, #8
 8007a00:	230a      	movne	r3, #10
 8007a02:	e7d5      	b.n	80079b0 <_strtol_l.constprop.0+0x54>
 8007a04:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007a08:	2f19      	cmp	r7, #25
 8007a0a:	d801      	bhi.n	8007a10 <_strtol_l.constprop.0+0xb4>
 8007a0c:	3c37      	subs	r4, #55	@ 0x37
 8007a0e:	e7de      	b.n	80079ce <_strtol_l.constprop.0+0x72>
 8007a10:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007a14:	2f19      	cmp	r7, #25
 8007a16:	d804      	bhi.n	8007a22 <_strtol_l.constprop.0+0xc6>
 8007a18:	3c57      	subs	r4, #87	@ 0x57
 8007a1a:	e7d8      	b.n	80079ce <_strtol_l.constprop.0+0x72>
 8007a1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a20:	e7e1      	b.n	80079e6 <_strtol_l.constprop.0+0x8a>
 8007a22:	1c53      	adds	r3, r2, #1
 8007a24:	d108      	bne.n	8007a38 <_strtol_l.constprop.0+0xdc>
 8007a26:	2322      	movs	r3, #34	@ 0x22
 8007a28:	4660      	mov	r0, ip
 8007a2a:	f8ce 3000 	str.w	r3, [lr]
 8007a2e:	f1b8 0f00 	cmp.w	r8, #0
 8007a32:	d0a0      	beq.n	8007976 <_strtol_l.constprop.0+0x1a>
 8007a34:	1e69      	subs	r1, r5, #1
 8007a36:	e006      	b.n	8007a46 <_strtol_l.constprop.0+0xea>
 8007a38:	b106      	cbz	r6, 8007a3c <_strtol_l.constprop.0+0xe0>
 8007a3a:	4240      	negs	r0, r0
 8007a3c:	f1b8 0f00 	cmp.w	r8, #0
 8007a40:	d099      	beq.n	8007976 <_strtol_l.constprop.0+0x1a>
 8007a42:	2a00      	cmp	r2, #0
 8007a44:	d1f6      	bne.n	8007a34 <_strtol_l.constprop.0+0xd8>
 8007a46:	f8c8 1000 	str.w	r1, [r8]
 8007a4a:	e794      	b.n	8007976 <_strtol_l.constprop.0+0x1a>
 8007a4c:	08008e91 	.word	0x08008e91

08007a50 <_strtol_r>:
 8007a50:	f7ff bf84 	b.w	800795c <_strtol_l.constprop.0>

08007a54 <__ssputs_r>:
 8007a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a58:	461f      	mov	r7, r3
 8007a5a:	688e      	ldr	r6, [r1, #8]
 8007a5c:	4682      	mov	sl, r0
 8007a5e:	42be      	cmp	r6, r7
 8007a60:	460c      	mov	r4, r1
 8007a62:	4690      	mov	r8, r2
 8007a64:	680b      	ldr	r3, [r1, #0]
 8007a66:	d82d      	bhi.n	8007ac4 <__ssputs_r+0x70>
 8007a68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a70:	d026      	beq.n	8007ac0 <__ssputs_r+0x6c>
 8007a72:	6965      	ldr	r5, [r4, #20]
 8007a74:	6909      	ldr	r1, [r1, #16]
 8007a76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a7a:	eba3 0901 	sub.w	r9, r3, r1
 8007a7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a82:	1c7b      	adds	r3, r7, #1
 8007a84:	444b      	add	r3, r9
 8007a86:	106d      	asrs	r5, r5, #1
 8007a88:	429d      	cmp	r5, r3
 8007a8a:	bf38      	it	cc
 8007a8c:	461d      	movcc	r5, r3
 8007a8e:	0553      	lsls	r3, r2, #21
 8007a90:	d527      	bpl.n	8007ae2 <__ssputs_r+0x8e>
 8007a92:	4629      	mov	r1, r5
 8007a94:	f7fe fc2e 	bl	80062f4 <_malloc_r>
 8007a98:	4606      	mov	r6, r0
 8007a9a:	b360      	cbz	r0, 8007af6 <__ssputs_r+0xa2>
 8007a9c:	464a      	mov	r2, r9
 8007a9e:	6921      	ldr	r1, [r4, #16]
 8007aa0:	f000 fa14 	bl	8007ecc <memcpy>
 8007aa4:	89a3      	ldrh	r3, [r4, #12]
 8007aa6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aae:	81a3      	strh	r3, [r4, #12]
 8007ab0:	6126      	str	r6, [r4, #16]
 8007ab2:	444e      	add	r6, r9
 8007ab4:	6026      	str	r6, [r4, #0]
 8007ab6:	463e      	mov	r6, r7
 8007ab8:	6165      	str	r5, [r4, #20]
 8007aba:	eba5 0509 	sub.w	r5, r5, r9
 8007abe:	60a5      	str	r5, [r4, #8]
 8007ac0:	42be      	cmp	r6, r7
 8007ac2:	d900      	bls.n	8007ac6 <__ssputs_r+0x72>
 8007ac4:	463e      	mov	r6, r7
 8007ac6:	4632      	mov	r2, r6
 8007ac8:	4641      	mov	r1, r8
 8007aca:	6820      	ldr	r0, [r4, #0]
 8007acc:	f000 f9c2 	bl	8007e54 <memmove>
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	68a3      	ldr	r3, [r4, #8]
 8007ad4:	1b9b      	subs	r3, r3, r6
 8007ad6:	60a3      	str	r3, [r4, #8]
 8007ad8:	6823      	ldr	r3, [r4, #0]
 8007ada:	4433      	add	r3, r6
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae2:	462a      	mov	r2, r5
 8007ae4:	f000 fd83 	bl	80085ee <_realloc_r>
 8007ae8:	4606      	mov	r6, r0
 8007aea:	2800      	cmp	r0, #0
 8007aec:	d1e0      	bne.n	8007ab0 <__ssputs_r+0x5c>
 8007aee:	4650      	mov	r0, sl
 8007af0:	6921      	ldr	r1, [r4, #16]
 8007af2:	f7fe fb8d 	bl	8006210 <_free_r>
 8007af6:	230c      	movs	r3, #12
 8007af8:	f8ca 3000 	str.w	r3, [sl]
 8007afc:	89a3      	ldrh	r3, [r4, #12]
 8007afe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b06:	81a3      	strh	r3, [r4, #12]
 8007b08:	e7e9      	b.n	8007ade <__ssputs_r+0x8a>
	...

08007b0c <_svfiprintf_r>:
 8007b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b10:	4698      	mov	r8, r3
 8007b12:	898b      	ldrh	r3, [r1, #12]
 8007b14:	4607      	mov	r7, r0
 8007b16:	061b      	lsls	r3, r3, #24
 8007b18:	460d      	mov	r5, r1
 8007b1a:	4614      	mov	r4, r2
 8007b1c:	b09d      	sub	sp, #116	@ 0x74
 8007b1e:	d510      	bpl.n	8007b42 <_svfiprintf_r+0x36>
 8007b20:	690b      	ldr	r3, [r1, #16]
 8007b22:	b973      	cbnz	r3, 8007b42 <_svfiprintf_r+0x36>
 8007b24:	2140      	movs	r1, #64	@ 0x40
 8007b26:	f7fe fbe5 	bl	80062f4 <_malloc_r>
 8007b2a:	6028      	str	r0, [r5, #0]
 8007b2c:	6128      	str	r0, [r5, #16]
 8007b2e:	b930      	cbnz	r0, 8007b3e <_svfiprintf_r+0x32>
 8007b30:	230c      	movs	r3, #12
 8007b32:	603b      	str	r3, [r7, #0]
 8007b34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b38:	b01d      	add	sp, #116	@ 0x74
 8007b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b3e:	2340      	movs	r3, #64	@ 0x40
 8007b40:	616b      	str	r3, [r5, #20]
 8007b42:	2300      	movs	r3, #0
 8007b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b46:	2320      	movs	r3, #32
 8007b48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b4c:	2330      	movs	r3, #48	@ 0x30
 8007b4e:	f04f 0901 	mov.w	r9, #1
 8007b52:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b56:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007cf0 <_svfiprintf_r+0x1e4>
 8007b5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b5e:	4623      	mov	r3, r4
 8007b60:	469a      	mov	sl, r3
 8007b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b66:	b10a      	cbz	r2, 8007b6c <_svfiprintf_r+0x60>
 8007b68:	2a25      	cmp	r2, #37	@ 0x25
 8007b6a:	d1f9      	bne.n	8007b60 <_svfiprintf_r+0x54>
 8007b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8007b70:	d00b      	beq.n	8007b8a <_svfiprintf_r+0x7e>
 8007b72:	465b      	mov	r3, fp
 8007b74:	4622      	mov	r2, r4
 8007b76:	4629      	mov	r1, r5
 8007b78:	4638      	mov	r0, r7
 8007b7a:	f7ff ff6b 	bl	8007a54 <__ssputs_r>
 8007b7e:	3001      	adds	r0, #1
 8007b80:	f000 80a7 	beq.w	8007cd2 <_svfiprintf_r+0x1c6>
 8007b84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b86:	445a      	add	r2, fp
 8007b88:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 809f 	beq.w	8007cd2 <_svfiprintf_r+0x1c6>
 8007b94:	2300      	movs	r3, #0
 8007b96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b9e:	f10a 0a01 	add.w	sl, sl, #1
 8007ba2:	9304      	str	r3, [sp, #16]
 8007ba4:	9307      	str	r3, [sp, #28]
 8007ba6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007baa:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bac:	4654      	mov	r4, sl
 8007bae:	2205      	movs	r2, #5
 8007bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb4:	484e      	ldr	r0, [pc, #312]	@ (8007cf0 <_svfiprintf_r+0x1e4>)
 8007bb6:	f7fd fcc6 	bl	8005546 <memchr>
 8007bba:	9a04      	ldr	r2, [sp, #16]
 8007bbc:	b9d8      	cbnz	r0, 8007bf6 <_svfiprintf_r+0xea>
 8007bbe:	06d0      	lsls	r0, r2, #27
 8007bc0:	bf44      	itt	mi
 8007bc2:	2320      	movmi	r3, #32
 8007bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bc8:	0711      	lsls	r1, r2, #28
 8007bca:	bf44      	itt	mi
 8007bcc:	232b      	movmi	r3, #43	@ 0x2b
 8007bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8007bd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bd8:	d015      	beq.n	8007c06 <_svfiprintf_r+0xfa>
 8007bda:	4654      	mov	r4, sl
 8007bdc:	2000      	movs	r0, #0
 8007bde:	f04f 0c0a 	mov.w	ip, #10
 8007be2:	9a07      	ldr	r2, [sp, #28]
 8007be4:	4621      	mov	r1, r4
 8007be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bea:	3b30      	subs	r3, #48	@ 0x30
 8007bec:	2b09      	cmp	r3, #9
 8007bee:	d94b      	bls.n	8007c88 <_svfiprintf_r+0x17c>
 8007bf0:	b1b0      	cbz	r0, 8007c20 <_svfiprintf_r+0x114>
 8007bf2:	9207      	str	r2, [sp, #28]
 8007bf4:	e014      	b.n	8007c20 <_svfiprintf_r+0x114>
 8007bf6:	eba0 0308 	sub.w	r3, r0, r8
 8007bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	46a2      	mov	sl, r4
 8007c02:	9304      	str	r3, [sp, #16]
 8007c04:	e7d2      	b.n	8007bac <_svfiprintf_r+0xa0>
 8007c06:	9b03      	ldr	r3, [sp, #12]
 8007c08:	1d19      	adds	r1, r3, #4
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	9103      	str	r1, [sp, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	bfbb      	ittet	lt
 8007c12:	425b      	neglt	r3, r3
 8007c14:	f042 0202 	orrlt.w	r2, r2, #2
 8007c18:	9307      	strge	r3, [sp, #28]
 8007c1a:	9307      	strlt	r3, [sp, #28]
 8007c1c:	bfb8      	it	lt
 8007c1e:	9204      	strlt	r2, [sp, #16]
 8007c20:	7823      	ldrb	r3, [r4, #0]
 8007c22:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c24:	d10a      	bne.n	8007c3c <_svfiprintf_r+0x130>
 8007c26:	7863      	ldrb	r3, [r4, #1]
 8007c28:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c2a:	d132      	bne.n	8007c92 <_svfiprintf_r+0x186>
 8007c2c:	9b03      	ldr	r3, [sp, #12]
 8007c2e:	3402      	adds	r4, #2
 8007c30:	1d1a      	adds	r2, r3, #4
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	9203      	str	r2, [sp, #12]
 8007c36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c3a:	9305      	str	r3, [sp, #20]
 8007c3c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007cf4 <_svfiprintf_r+0x1e8>
 8007c40:	2203      	movs	r2, #3
 8007c42:	4650      	mov	r0, sl
 8007c44:	7821      	ldrb	r1, [r4, #0]
 8007c46:	f7fd fc7e 	bl	8005546 <memchr>
 8007c4a:	b138      	cbz	r0, 8007c5c <_svfiprintf_r+0x150>
 8007c4c:	2240      	movs	r2, #64	@ 0x40
 8007c4e:	9b04      	ldr	r3, [sp, #16]
 8007c50:	eba0 000a 	sub.w	r0, r0, sl
 8007c54:	4082      	lsls	r2, r0
 8007c56:	4313      	orrs	r3, r2
 8007c58:	3401      	adds	r4, #1
 8007c5a:	9304      	str	r3, [sp, #16]
 8007c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c60:	2206      	movs	r2, #6
 8007c62:	4825      	ldr	r0, [pc, #148]	@ (8007cf8 <_svfiprintf_r+0x1ec>)
 8007c64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c68:	f7fd fc6d 	bl	8005546 <memchr>
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	d036      	beq.n	8007cde <_svfiprintf_r+0x1d2>
 8007c70:	4b22      	ldr	r3, [pc, #136]	@ (8007cfc <_svfiprintf_r+0x1f0>)
 8007c72:	bb1b      	cbnz	r3, 8007cbc <_svfiprintf_r+0x1b0>
 8007c74:	9b03      	ldr	r3, [sp, #12]
 8007c76:	3307      	adds	r3, #7
 8007c78:	f023 0307 	bic.w	r3, r3, #7
 8007c7c:	3308      	adds	r3, #8
 8007c7e:	9303      	str	r3, [sp, #12]
 8007c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c82:	4433      	add	r3, r6
 8007c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c86:	e76a      	b.n	8007b5e <_svfiprintf_r+0x52>
 8007c88:	460c      	mov	r4, r1
 8007c8a:	2001      	movs	r0, #1
 8007c8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c90:	e7a8      	b.n	8007be4 <_svfiprintf_r+0xd8>
 8007c92:	2300      	movs	r3, #0
 8007c94:	f04f 0c0a 	mov.w	ip, #10
 8007c98:	4619      	mov	r1, r3
 8007c9a:	3401      	adds	r4, #1
 8007c9c:	9305      	str	r3, [sp, #20]
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ca4:	3a30      	subs	r2, #48	@ 0x30
 8007ca6:	2a09      	cmp	r2, #9
 8007ca8:	d903      	bls.n	8007cb2 <_svfiprintf_r+0x1a6>
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0c6      	beq.n	8007c3c <_svfiprintf_r+0x130>
 8007cae:	9105      	str	r1, [sp, #20]
 8007cb0:	e7c4      	b.n	8007c3c <_svfiprintf_r+0x130>
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cba:	e7f0      	b.n	8007c9e <_svfiprintf_r+0x192>
 8007cbc:	ab03      	add	r3, sp, #12
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	462a      	mov	r2, r5
 8007cc2:	4638      	mov	r0, r7
 8007cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8007d00 <_svfiprintf_r+0x1f4>)
 8007cc6:	a904      	add	r1, sp, #16
 8007cc8:	f7fc fcca 	bl	8004660 <_printf_float>
 8007ccc:	1c42      	adds	r2, r0, #1
 8007cce:	4606      	mov	r6, r0
 8007cd0:	d1d6      	bne.n	8007c80 <_svfiprintf_r+0x174>
 8007cd2:	89ab      	ldrh	r3, [r5, #12]
 8007cd4:	065b      	lsls	r3, r3, #25
 8007cd6:	f53f af2d 	bmi.w	8007b34 <_svfiprintf_r+0x28>
 8007cda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cdc:	e72c      	b.n	8007b38 <_svfiprintf_r+0x2c>
 8007cde:	ab03      	add	r3, sp, #12
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	462a      	mov	r2, r5
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	4b06      	ldr	r3, [pc, #24]	@ (8007d00 <_svfiprintf_r+0x1f4>)
 8007ce8:	a904      	add	r1, sp, #16
 8007cea:	f7fc ff57 	bl	8004b9c <_printf_i>
 8007cee:	e7ed      	b.n	8007ccc <_svfiprintf_r+0x1c0>
 8007cf0:	08008f91 	.word	0x08008f91
 8007cf4:	08008f97 	.word	0x08008f97
 8007cf8:	08008f9b 	.word	0x08008f9b
 8007cfc:	08004661 	.word	0x08004661
 8007d00:	08007a55 	.word	0x08007a55

08007d04 <__sflush_r>:
 8007d04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0a:	0716      	lsls	r6, r2, #28
 8007d0c:	4605      	mov	r5, r0
 8007d0e:	460c      	mov	r4, r1
 8007d10:	d454      	bmi.n	8007dbc <__sflush_r+0xb8>
 8007d12:	684b      	ldr	r3, [r1, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	dc02      	bgt.n	8007d1e <__sflush_r+0x1a>
 8007d18:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	dd48      	ble.n	8007db0 <__sflush_r+0xac>
 8007d1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d20:	2e00      	cmp	r6, #0
 8007d22:	d045      	beq.n	8007db0 <__sflush_r+0xac>
 8007d24:	2300      	movs	r3, #0
 8007d26:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007d2a:	682f      	ldr	r7, [r5, #0]
 8007d2c:	6a21      	ldr	r1, [r4, #32]
 8007d2e:	602b      	str	r3, [r5, #0]
 8007d30:	d030      	beq.n	8007d94 <__sflush_r+0x90>
 8007d32:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007d34:	89a3      	ldrh	r3, [r4, #12]
 8007d36:	0759      	lsls	r1, r3, #29
 8007d38:	d505      	bpl.n	8007d46 <__sflush_r+0x42>
 8007d3a:	6863      	ldr	r3, [r4, #4]
 8007d3c:	1ad2      	subs	r2, r2, r3
 8007d3e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007d40:	b10b      	cbz	r3, 8007d46 <__sflush_r+0x42>
 8007d42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d44:	1ad2      	subs	r2, r2, r3
 8007d46:	2300      	movs	r3, #0
 8007d48:	4628      	mov	r0, r5
 8007d4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d4c:	6a21      	ldr	r1, [r4, #32]
 8007d4e:	47b0      	blx	r6
 8007d50:	1c43      	adds	r3, r0, #1
 8007d52:	89a3      	ldrh	r3, [r4, #12]
 8007d54:	d106      	bne.n	8007d64 <__sflush_r+0x60>
 8007d56:	6829      	ldr	r1, [r5, #0]
 8007d58:	291d      	cmp	r1, #29
 8007d5a:	d82b      	bhi.n	8007db4 <__sflush_r+0xb0>
 8007d5c:	4a28      	ldr	r2, [pc, #160]	@ (8007e00 <__sflush_r+0xfc>)
 8007d5e:	410a      	asrs	r2, r1
 8007d60:	07d6      	lsls	r6, r2, #31
 8007d62:	d427      	bmi.n	8007db4 <__sflush_r+0xb0>
 8007d64:	2200      	movs	r2, #0
 8007d66:	6062      	str	r2, [r4, #4]
 8007d68:	6922      	ldr	r2, [r4, #16]
 8007d6a:	04d9      	lsls	r1, r3, #19
 8007d6c:	6022      	str	r2, [r4, #0]
 8007d6e:	d504      	bpl.n	8007d7a <__sflush_r+0x76>
 8007d70:	1c42      	adds	r2, r0, #1
 8007d72:	d101      	bne.n	8007d78 <__sflush_r+0x74>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	b903      	cbnz	r3, 8007d7a <__sflush_r+0x76>
 8007d78:	6560      	str	r0, [r4, #84]	@ 0x54
 8007d7a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d7c:	602f      	str	r7, [r5, #0]
 8007d7e:	b1b9      	cbz	r1, 8007db0 <__sflush_r+0xac>
 8007d80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d84:	4299      	cmp	r1, r3
 8007d86:	d002      	beq.n	8007d8e <__sflush_r+0x8a>
 8007d88:	4628      	mov	r0, r5
 8007d8a:	f7fe fa41 	bl	8006210 <_free_r>
 8007d8e:	2300      	movs	r3, #0
 8007d90:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d92:	e00d      	b.n	8007db0 <__sflush_r+0xac>
 8007d94:	2301      	movs	r3, #1
 8007d96:	4628      	mov	r0, r5
 8007d98:	47b0      	blx	r6
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	1c50      	adds	r0, r2, #1
 8007d9e:	d1c9      	bne.n	8007d34 <__sflush_r+0x30>
 8007da0:	682b      	ldr	r3, [r5, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0c6      	beq.n	8007d34 <__sflush_r+0x30>
 8007da6:	2b1d      	cmp	r3, #29
 8007da8:	d001      	beq.n	8007dae <__sflush_r+0xaa>
 8007daa:	2b16      	cmp	r3, #22
 8007dac:	d11d      	bne.n	8007dea <__sflush_r+0xe6>
 8007dae:	602f      	str	r7, [r5, #0]
 8007db0:	2000      	movs	r0, #0
 8007db2:	e021      	b.n	8007df8 <__sflush_r+0xf4>
 8007db4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007db8:	b21b      	sxth	r3, r3
 8007dba:	e01a      	b.n	8007df2 <__sflush_r+0xee>
 8007dbc:	690f      	ldr	r7, [r1, #16]
 8007dbe:	2f00      	cmp	r7, #0
 8007dc0:	d0f6      	beq.n	8007db0 <__sflush_r+0xac>
 8007dc2:	0793      	lsls	r3, r2, #30
 8007dc4:	bf18      	it	ne
 8007dc6:	2300      	movne	r3, #0
 8007dc8:	680e      	ldr	r6, [r1, #0]
 8007dca:	bf08      	it	eq
 8007dcc:	694b      	ldreq	r3, [r1, #20]
 8007dce:	1bf6      	subs	r6, r6, r7
 8007dd0:	600f      	str	r7, [r1, #0]
 8007dd2:	608b      	str	r3, [r1, #8]
 8007dd4:	2e00      	cmp	r6, #0
 8007dd6:	ddeb      	ble.n	8007db0 <__sflush_r+0xac>
 8007dd8:	4633      	mov	r3, r6
 8007dda:	463a      	mov	r2, r7
 8007ddc:	4628      	mov	r0, r5
 8007dde:	6a21      	ldr	r1, [r4, #32]
 8007de0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007de4:	47e0      	blx	ip
 8007de6:	2800      	cmp	r0, #0
 8007de8:	dc07      	bgt.n	8007dfa <__sflush_r+0xf6>
 8007dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007df2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007df6:	81a3      	strh	r3, [r4, #12]
 8007df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dfa:	4407      	add	r7, r0
 8007dfc:	1a36      	subs	r6, r6, r0
 8007dfe:	e7e9      	b.n	8007dd4 <__sflush_r+0xd0>
 8007e00:	dfbffffe 	.word	0xdfbffffe

08007e04 <_fflush_r>:
 8007e04:	b538      	push	{r3, r4, r5, lr}
 8007e06:	690b      	ldr	r3, [r1, #16]
 8007e08:	4605      	mov	r5, r0
 8007e0a:	460c      	mov	r4, r1
 8007e0c:	b913      	cbnz	r3, 8007e14 <_fflush_r+0x10>
 8007e0e:	2500      	movs	r5, #0
 8007e10:	4628      	mov	r0, r5
 8007e12:	bd38      	pop	{r3, r4, r5, pc}
 8007e14:	b118      	cbz	r0, 8007e1e <_fflush_r+0x1a>
 8007e16:	6a03      	ldr	r3, [r0, #32]
 8007e18:	b90b      	cbnz	r3, 8007e1e <_fflush_r+0x1a>
 8007e1a:	f7fd fa7b 	bl	8005314 <__sinit>
 8007e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d0f3      	beq.n	8007e0e <_fflush_r+0xa>
 8007e26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007e28:	07d0      	lsls	r0, r2, #31
 8007e2a:	d404      	bmi.n	8007e36 <_fflush_r+0x32>
 8007e2c:	0599      	lsls	r1, r3, #22
 8007e2e:	d402      	bmi.n	8007e36 <_fflush_r+0x32>
 8007e30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e32:	f7fd fb86 	bl	8005542 <__retarget_lock_acquire_recursive>
 8007e36:	4628      	mov	r0, r5
 8007e38:	4621      	mov	r1, r4
 8007e3a:	f7ff ff63 	bl	8007d04 <__sflush_r>
 8007e3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e40:	4605      	mov	r5, r0
 8007e42:	07da      	lsls	r2, r3, #31
 8007e44:	d4e4      	bmi.n	8007e10 <_fflush_r+0xc>
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	059b      	lsls	r3, r3, #22
 8007e4a:	d4e1      	bmi.n	8007e10 <_fflush_r+0xc>
 8007e4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e4e:	f7fd fb79 	bl	8005544 <__retarget_lock_release_recursive>
 8007e52:	e7dd      	b.n	8007e10 <_fflush_r+0xc>

08007e54 <memmove>:
 8007e54:	4288      	cmp	r0, r1
 8007e56:	b510      	push	{r4, lr}
 8007e58:	eb01 0402 	add.w	r4, r1, r2
 8007e5c:	d902      	bls.n	8007e64 <memmove+0x10>
 8007e5e:	4284      	cmp	r4, r0
 8007e60:	4623      	mov	r3, r4
 8007e62:	d807      	bhi.n	8007e74 <memmove+0x20>
 8007e64:	1e43      	subs	r3, r0, #1
 8007e66:	42a1      	cmp	r1, r4
 8007e68:	d008      	beq.n	8007e7c <memmove+0x28>
 8007e6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e72:	e7f8      	b.n	8007e66 <memmove+0x12>
 8007e74:	4601      	mov	r1, r0
 8007e76:	4402      	add	r2, r0
 8007e78:	428a      	cmp	r2, r1
 8007e7a:	d100      	bne.n	8007e7e <memmove+0x2a>
 8007e7c:	bd10      	pop	{r4, pc}
 8007e7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e86:	e7f7      	b.n	8007e78 <memmove+0x24>

08007e88 <strncmp>:
 8007e88:	b510      	push	{r4, lr}
 8007e8a:	b16a      	cbz	r2, 8007ea8 <strncmp+0x20>
 8007e8c:	3901      	subs	r1, #1
 8007e8e:	1884      	adds	r4, r0, r2
 8007e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e94:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d103      	bne.n	8007ea4 <strncmp+0x1c>
 8007e9c:	42a0      	cmp	r0, r4
 8007e9e:	d001      	beq.n	8007ea4 <strncmp+0x1c>
 8007ea0:	2a00      	cmp	r2, #0
 8007ea2:	d1f5      	bne.n	8007e90 <strncmp+0x8>
 8007ea4:	1ad0      	subs	r0, r2, r3
 8007ea6:	bd10      	pop	{r4, pc}
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	e7fc      	b.n	8007ea6 <strncmp+0x1e>

08007eac <_sbrk_r>:
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	2300      	movs	r3, #0
 8007eb0:	4d05      	ldr	r5, [pc, #20]	@ (8007ec8 <_sbrk_r+0x1c>)
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	4608      	mov	r0, r1
 8007eb6:	602b      	str	r3, [r5, #0]
 8007eb8:	f7f9 ff7a 	bl	8001db0 <_sbrk>
 8007ebc:	1c43      	adds	r3, r0, #1
 8007ebe:	d102      	bne.n	8007ec6 <_sbrk_r+0x1a>
 8007ec0:	682b      	ldr	r3, [r5, #0]
 8007ec2:	b103      	cbz	r3, 8007ec6 <_sbrk_r+0x1a>
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	bd38      	pop	{r3, r4, r5, pc}
 8007ec8:	2000046c 	.word	0x2000046c

08007ecc <memcpy>:
 8007ecc:	440a      	add	r2, r1
 8007ece:	4291      	cmp	r1, r2
 8007ed0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007ed4:	d100      	bne.n	8007ed8 <memcpy+0xc>
 8007ed6:	4770      	bx	lr
 8007ed8:	b510      	push	{r4, lr}
 8007eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ede:	4291      	cmp	r1, r2
 8007ee0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ee4:	d1f9      	bne.n	8007eda <memcpy+0xe>
 8007ee6:	bd10      	pop	{r4, pc}

08007ee8 <nan>:
 8007ee8:	2000      	movs	r0, #0
 8007eea:	4901      	ldr	r1, [pc, #4]	@ (8007ef0 <nan+0x8>)
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	7ff80000 	.word	0x7ff80000

08007ef4 <__assert_func>:
 8007ef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ef6:	4614      	mov	r4, r2
 8007ef8:	461a      	mov	r2, r3
 8007efa:	4b09      	ldr	r3, [pc, #36]	@ (8007f20 <__assert_func+0x2c>)
 8007efc:	4605      	mov	r5, r0
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68d8      	ldr	r0, [r3, #12]
 8007f02:	b954      	cbnz	r4, 8007f1a <__assert_func+0x26>
 8007f04:	4b07      	ldr	r3, [pc, #28]	@ (8007f24 <__assert_func+0x30>)
 8007f06:	461c      	mov	r4, r3
 8007f08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f0c:	9100      	str	r1, [sp, #0]
 8007f0e:	462b      	mov	r3, r5
 8007f10:	4905      	ldr	r1, [pc, #20]	@ (8007f28 <__assert_func+0x34>)
 8007f12:	f000 fba7 	bl	8008664 <fiprintf>
 8007f16:	f000 fbb7 	bl	8008688 <abort>
 8007f1a:	4b04      	ldr	r3, [pc, #16]	@ (8007f2c <__assert_func+0x38>)
 8007f1c:	e7f4      	b.n	8007f08 <__assert_func+0x14>
 8007f1e:	bf00      	nop
 8007f20:	20000028 	.word	0x20000028
 8007f24:	08008fe5 	.word	0x08008fe5
 8007f28:	08008fb7 	.word	0x08008fb7
 8007f2c:	08008faa 	.word	0x08008faa

08007f30 <_calloc_r>:
 8007f30:	b570      	push	{r4, r5, r6, lr}
 8007f32:	fba1 5402 	umull	r5, r4, r1, r2
 8007f36:	b93c      	cbnz	r4, 8007f48 <_calloc_r+0x18>
 8007f38:	4629      	mov	r1, r5
 8007f3a:	f7fe f9db 	bl	80062f4 <_malloc_r>
 8007f3e:	4606      	mov	r6, r0
 8007f40:	b928      	cbnz	r0, 8007f4e <_calloc_r+0x1e>
 8007f42:	2600      	movs	r6, #0
 8007f44:	4630      	mov	r0, r6
 8007f46:	bd70      	pop	{r4, r5, r6, pc}
 8007f48:	220c      	movs	r2, #12
 8007f4a:	6002      	str	r2, [r0, #0]
 8007f4c:	e7f9      	b.n	8007f42 <_calloc_r+0x12>
 8007f4e:	462a      	mov	r2, r5
 8007f50:	4621      	mov	r1, r4
 8007f52:	f7fd fa78 	bl	8005446 <memset>
 8007f56:	e7f5      	b.n	8007f44 <_calloc_r+0x14>

08007f58 <rshift>:
 8007f58:	6903      	ldr	r3, [r0, #16]
 8007f5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007f62:	f100 0414 	add.w	r4, r0, #20
 8007f66:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007f6a:	dd46      	ble.n	8007ffa <rshift+0xa2>
 8007f6c:	f011 011f 	ands.w	r1, r1, #31
 8007f70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007f74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007f78:	d10c      	bne.n	8007f94 <rshift+0x3c>
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	f100 0710 	add.w	r7, r0, #16
 8007f80:	42b1      	cmp	r1, r6
 8007f82:	d335      	bcc.n	8007ff0 <rshift+0x98>
 8007f84:	1a9b      	subs	r3, r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	1eea      	subs	r2, r5, #3
 8007f8a:	4296      	cmp	r6, r2
 8007f8c:	bf38      	it	cc
 8007f8e:	2300      	movcc	r3, #0
 8007f90:	4423      	add	r3, r4
 8007f92:	e015      	b.n	8007fc0 <rshift+0x68>
 8007f94:	46a1      	mov	r9, r4
 8007f96:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007f9a:	f1c1 0820 	rsb	r8, r1, #32
 8007f9e:	40cf      	lsrs	r7, r1
 8007fa0:	f105 0e04 	add.w	lr, r5, #4
 8007fa4:	4576      	cmp	r6, lr
 8007fa6:	46f4      	mov	ip, lr
 8007fa8:	d816      	bhi.n	8007fd8 <rshift+0x80>
 8007faa:	1a9a      	subs	r2, r3, r2
 8007fac:	0092      	lsls	r2, r2, #2
 8007fae:	3a04      	subs	r2, #4
 8007fb0:	3501      	adds	r5, #1
 8007fb2:	42ae      	cmp	r6, r5
 8007fb4:	bf38      	it	cc
 8007fb6:	2200      	movcc	r2, #0
 8007fb8:	18a3      	adds	r3, r4, r2
 8007fba:	50a7      	str	r7, [r4, r2]
 8007fbc:	b107      	cbz	r7, 8007fc0 <rshift+0x68>
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	42a3      	cmp	r3, r4
 8007fc2:	eba3 0204 	sub.w	r2, r3, r4
 8007fc6:	bf08      	it	eq
 8007fc8:	2300      	moveq	r3, #0
 8007fca:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007fce:	6102      	str	r2, [r0, #16]
 8007fd0:	bf08      	it	eq
 8007fd2:	6143      	streq	r3, [r0, #20]
 8007fd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fd8:	f8dc c000 	ldr.w	ip, [ip]
 8007fdc:	fa0c fc08 	lsl.w	ip, ip, r8
 8007fe0:	ea4c 0707 	orr.w	r7, ip, r7
 8007fe4:	f849 7b04 	str.w	r7, [r9], #4
 8007fe8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007fec:	40cf      	lsrs	r7, r1
 8007fee:	e7d9      	b.n	8007fa4 <rshift+0x4c>
 8007ff0:	f851 cb04 	ldr.w	ip, [r1], #4
 8007ff4:	f847 cf04 	str.w	ip, [r7, #4]!
 8007ff8:	e7c2      	b.n	8007f80 <rshift+0x28>
 8007ffa:	4623      	mov	r3, r4
 8007ffc:	e7e0      	b.n	8007fc0 <rshift+0x68>

08007ffe <__hexdig_fun>:
 8007ffe:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008002:	2b09      	cmp	r3, #9
 8008004:	d802      	bhi.n	800800c <__hexdig_fun+0xe>
 8008006:	3820      	subs	r0, #32
 8008008:	b2c0      	uxtb	r0, r0
 800800a:	4770      	bx	lr
 800800c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008010:	2b05      	cmp	r3, #5
 8008012:	d801      	bhi.n	8008018 <__hexdig_fun+0x1a>
 8008014:	3847      	subs	r0, #71	@ 0x47
 8008016:	e7f7      	b.n	8008008 <__hexdig_fun+0xa>
 8008018:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800801c:	2b05      	cmp	r3, #5
 800801e:	d801      	bhi.n	8008024 <__hexdig_fun+0x26>
 8008020:	3827      	subs	r0, #39	@ 0x27
 8008022:	e7f1      	b.n	8008008 <__hexdig_fun+0xa>
 8008024:	2000      	movs	r0, #0
 8008026:	4770      	bx	lr

08008028 <__gethex>:
 8008028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800802c:	468a      	mov	sl, r1
 800802e:	4690      	mov	r8, r2
 8008030:	b085      	sub	sp, #20
 8008032:	9302      	str	r3, [sp, #8]
 8008034:	680b      	ldr	r3, [r1, #0]
 8008036:	9001      	str	r0, [sp, #4]
 8008038:	1c9c      	adds	r4, r3, #2
 800803a:	46a1      	mov	r9, r4
 800803c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008040:	2830      	cmp	r0, #48	@ 0x30
 8008042:	d0fa      	beq.n	800803a <__gethex+0x12>
 8008044:	eba9 0303 	sub.w	r3, r9, r3
 8008048:	f1a3 0b02 	sub.w	fp, r3, #2
 800804c:	f7ff ffd7 	bl	8007ffe <__hexdig_fun>
 8008050:	4605      	mov	r5, r0
 8008052:	2800      	cmp	r0, #0
 8008054:	d168      	bne.n	8008128 <__gethex+0x100>
 8008056:	2201      	movs	r2, #1
 8008058:	4648      	mov	r0, r9
 800805a:	499f      	ldr	r1, [pc, #636]	@ (80082d8 <__gethex+0x2b0>)
 800805c:	f7ff ff14 	bl	8007e88 <strncmp>
 8008060:	4607      	mov	r7, r0
 8008062:	2800      	cmp	r0, #0
 8008064:	d167      	bne.n	8008136 <__gethex+0x10e>
 8008066:	f899 0001 	ldrb.w	r0, [r9, #1]
 800806a:	4626      	mov	r6, r4
 800806c:	f7ff ffc7 	bl	8007ffe <__hexdig_fun>
 8008070:	2800      	cmp	r0, #0
 8008072:	d062      	beq.n	800813a <__gethex+0x112>
 8008074:	4623      	mov	r3, r4
 8008076:	7818      	ldrb	r0, [r3, #0]
 8008078:	4699      	mov	r9, r3
 800807a:	2830      	cmp	r0, #48	@ 0x30
 800807c:	f103 0301 	add.w	r3, r3, #1
 8008080:	d0f9      	beq.n	8008076 <__gethex+0x4e>
 8008082:	f7ff ffbc 	bl	8007ffe <__hexdig_fun>
 8008086:	fab0 f580 	clz	r5, r0
 800808a:	f04f 0b01 	mov.w	fp, #1
 800808e:	096d      	lsrs	r5, r5, #5
 8008090:	464a      	mov	r2, r9
 8008092:	4616      	mov	r6, r2
 8008094:	7830      	ldrb	r0, [r6, #0]
 8008096:	3201      	adds	r2, #1
 8008098:	f7ff ffb1 	bl	8007ffe <__hexdig_fun>
 800809c:	2800      	cmp	r0, #0
 800809e:	d1f8      	bne.n	8008092 <__gethex+0x6a>
 80080a0:	2201      	movs	r2, #1
 80080a2:	4630      	mov	r0, r6
 80080a4:	498c      	ldr	r1, [pc, #560]	@ (80082d8 <__gethex+0x2b0>)
 80080a6:	f7ff feef 	bl	8007e88 <strncmp>
 80080aa:	2800      	cmp	r0, #0
 80080ac:	d13f      	bne.n	800812e <__gethex+0x106>
 80080ae:	b944      	cbnz	r4, 80080c2 <__gethex+0x9a>
 80080b0:	1c74      	adds	r4, r6, #1
 80080b2:	4622      	mov	r2, r4
 80080b4:	4616      	mov	r6, r2
 80080b6:	7830      	ldrb	r0, [r6, #0]
 80080b8:	3201      	adds	r2, #1
 80080ba:	f7ff ffa0 	bl	8007ffe <__hexdig_fun>
 80080be:	2800      	cmp	r0, #0
 80080c0:	d1f8      	bne.n	80080b4 <__gethex+0x8c>
 80080c2:	1ba4      	subs	r4, r4, r6
 80080c4:	00a7      	lsls	r7, r4, #2
 80080c6:	7833      	ldrb	r3, [r6, #0]
 80080c8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80080cc:	2b50      	cmp	r3, #80	@ 0x50
 80080ce:	d13e      	bne.n	800814e <__gethex+0x126>
 80080d0:	7873      	ldrb	r3, [r6, #1]
 80080d2:	2b2b      	cmp	r3, #43	@ 0x2b
 80080d4:	d033      	beq.n	800813e <__gethex+0x116>
 80080d6:	2b2d      	cmp	r3, #45	@ 0x2d
 80080d8:	d034      	beq.n	8008144 <__gethex+0x11c>
 80080da:	2400      	movs	r4, #0
 80080dc:	1c71      	adds	r1, r6, #1
 80080de:	7808      	ldrb	r0, [r1, #0]
 80080e0:	f7ff ff8d 	bl	8007ffe <__hexdig_fun>
 80080e4:	1e43      	subs	r3, r0, #1
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	2b18      	cmp	r3, #24
 80080ea:	d830      	bhi.n	800814e <__gethex+0x126>
 80080ec:	f1a0 0210 	sub.w	r2, r0, #16
 80080f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80080f4:	f7ff ff83 	bl	8007ffe <__hexdig_fun>
 80080f8:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80080fc:	fa5f fc8c 	uxtb.w	ip, ip
 8008100:	f1bc 0f18 	cmp.w	ip, #24
 8008104:	f04f 030a 	mov.w	r3, #10
 8008108:	d91e      	bls.n	8008148 <__gethex+0x120>
 800810a:	b104      	cbz	r4, 800810e <__gethex+0xe6>
 800810c:	4252      	negs	r2, r2
 800810e:	4417      	add	r7, r2
 8008110:	f8ca 1000 	str.w	r1, [sl]
 8008114:	b1ed      	cbz	r5, 8008152 <__gethex+0x12a>
 8008116:	f1bb 0f00 	cmp.w	fp, #0
 800811a:	bf0c      	ite	eq
 800811c:	2506      	moveq	r5, #6
 800811e:	2500      	movne	r5, #0
 8008120:	4628      	mov	r0, r5
 8008122:	b005      	add	sp, #20
 8008124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008128:	2500      	movs	r5, #0
 800812a:	462c      	mov	r4, r5
 800812c:	e7b0      	b.n	8008090 <__gethex+0x68>
 800812e:	2c00      	cmp	r4, #0
 8008130:	d1c7      	bne.n	80080c2 <__gethex+0x9a>
 8008132:	4627      	mov	r7, r4
 8008134:	e7c7      	b.n	80080c6 <__gethex+0x9e>
 8008136:	464e      	mov	r6, r9
 8008138:	462f      	mov	r7, r5
 800813a:	2501      	movs	r5, #1
 800813c:	e7c3      	b.n	80080c6 <__gethex+0x9e>
 800813e:	2400      	movs	r4, #0
 8008140:	1cb1      	adds	r1, r6, #2
 8008142:	e7cc      	b.n	80080de <__gethex+0xb6>
 8008144:	2401      	movs	r4, #1
 8008146:	e7fb      	b.n	8008140 <__gethex+0x118>
 8008148:	fb03 0002 	mla	r0, r3, r2, r0
 800814c:	e7ce      	b.n	80080ec <__gethex+0xc4>
 800814e:	4631      	mov	r1, r6
 8008150:	e7de      	b.n	8008110 <__gethex+0xe8>
 8008152:	4629      	mov	r1, r5
 8008154:	eba6 0309 	sub.w	r3, r6, r9
 8008158:	3b01      	subs	r3, #1
 800815a:	2b07      	cmp	r3, #7
 800815c:	dc0a      	bgt.n	8008174 <__gethex+0x14c>
 800815e:	9801      	ldr	r0, [sp, #4]
 8008160:	f7fe f954 	bl	800640c <_Balloc>
 8008164:	4604      	mov	r4, r0
 8008166:	b940      	cbnz	r0, 800817a <__gethex+0x152>
 8008168:	4602      	mov	r2, r0
 800816a:	21e4      	movs	r1, #228	@ 0xe4
 800816c:	4b5b      	ldr	r3, [pc, #364]	@ (80082dc <__gethex+0x2b4>)
 800816e:	485c      	ldr	r0, [pc, #368]	@ (80082e0 <__gethex+0x2b8>)
 8008170:	f7ff fec0 	bl	8007ef4 <__assert_func>
 8008174:	3101      	adds	r1, #1
 8008176:	105b      	asrs	r3, r3, #1
 8008178:	e7ef      	b.n	800815a <__gethex+0x132>
 800817a:	2300      	movs	r3, #0
 800817c:	f100 0a14 	add.w	sl, r0, #20
 8008180:	4655      	mov	r5, sl
 8008182:	469b      	mov	fp, r3
 8008184:	45b1      	cmp	r9, r6
 8008186:	d337      	bcc.n	80081f8 <__gethex+0x1d0>
 8008188:	f845 bb04 	str.w	fp, [r5], #4
 800818c:	eba5 050a 	sub.w	r5, r5, sl
 8008190:	10ad      	asrs	r5, r5, #2
 8008192:	6125      	str	r5, [r4, #16]
 8008194:	4658      	mov	r0, fp
 8008196:	f7fe fa2b 	bl	80065f0 <__hi0bits>
 800819a:	016d      	lsls	r5, r5, #5
 800819c:	f8d8 6000 	ldr.w	r6, [r8]
 80081a0:	1a2d      	subs	r5, r5, r0
 80081a2:	42b5      	cmp	r5, r6
 80081a4:	dd54      	ble.n	8008250 <__gethex+0x228>
 80081a6:	1bad      	subs	r5, r5, r6
 80081a8:	4629      	mov	r1, r5
 80081aa:	4620      	mov	r0, r4
 80081ac:	f7fe fdb3 	bl	8006d16 <__any_on>
 80081b0:	4681      	mov	r9, r0
 80081b2:	b178      	cbz	r0, 80081d4 <__gethex+0x1ac>
 80081b4:	f04f 0901 	mov.w	r9, #1
 80081b8:	1e6b      	subs	r3, r5, #1
 80081ba:	1159      	asrs	r1, r3, #5
 80081bc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80081c0:	f003 021f 	and.w	r2, r3, #31
 80081c4:	fa09 f202 	lsl.w	r2, r9, r2
 80081c8:	420a      	tst	r2, r1
 80081ca:	d003      	beq.n	80081d4 <__gethex+0x1ac>
 80081cc:	454b      	cmp	r3, r9
 80081ce:	dc36      	bgt.n	800823e <__gethex+0x216>
 80081d0:	f04f 0902 	mov.w	r9, #2
 80081d4:	4629      	mov	r1, r5
 80081d6:	4620      	mov	r0, r4
 80081d8:	f7ff febe 	bl	8007f58 <rshift>
 80081dc:	442f      	add	r7, r5
 80081de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80081e2:	42bb      	cmp	r3, r7
 80081e4:	da42      	bge.n	800826c <__gethex+0x244>
 80081e6:	4621      	mov	r1, r4
 80081e8:	9801      	ldr	r0, [sp, #4]
 80081ea:	f7fe f94f 	bl	800648c <_Bfree>
 80081ee:	2300      	movs	r3, #0
 80081f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081f2:	25a3      	movs	r5, #163	@ 0xa3
 80081f4:	6013      	str	r3, [r2, #0]
 80081f6:	e793      	b.n	8008120 <__gethex+0xf8>
 80081f8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80081fc:	2a2e      	cmp	r2, #46	@ 0x2e
 80081fe:	d012      	beq.n	8008226 <__gethex+0x1fe>
 8008200:	2b20      	cmp	r3, #32
 8008202:	d104      	bne.n	800820e <__gethex+0x1e6>
 8008204:	f845 bb04 	str.w	fp, [r5], #4
 8008208:	f04f 0b00 	mov.w	fp, #0
 800820c:	465b      	mov	r3, fp
 800820e:	7830      	ldrb	r0, [r6, #0]
 8008210:	9303      	str	r3, [sp, #12]
 8008212:	f7ff fef4 	bl	8007ffe <__hexdig_fun>
 8008216:	9b03      	ldr	r3, [sp, #12]
 8008218:	f000 000f 	and.w	r0, r0, #15
 800821c:	4098      	lsls	r0, r3
 800821e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008222:	3304      	adds	r3, #4
 8008224:	e7ae      	b.n	8008184 <__gethex+0x15c>
 8008226:	45b1      	cmp	r9, r6
 8008228:	d8ea      	bhi.n	8008200 <__gethex+0x1d8>
 800822a:	2201      	movs	r2, #1
 800822c:	4630      	mov	r0, r6
 800822e:	492a      	ldr	r1, [pc, #168]	@ (80082d8 <__gethex+0x2b0>)
 8008230:	9303      	str	r3, [sp, #12]
 8008232:	f7ff fe29 	bl	8007e88 <strncmp>
 8008236:	9b03      	ldr	r3, [sp, #12]
 8008238:	2800      	cmp	r0, #0
 800823a:	d1e1      	bne.n	8008200 <__gethex+0x1d8>
 800823c:	e7a2      	b.n	8008184 <__gethex+0x15c>
 800823e:	4620      	mov	r0, r4
 8008240:	1ea9      	subs	r1, r5, #2
 8008242:	f7fe fd68 	bl	8006d16 <__any_on>
 8008246:	2800      	cmp	r0, #0
 8008248:	d0c2      	beq.n	80081d0 <__gethex+0x1a8>
 800824a:	f04f 0903 	mov.w	r9, #3
 800824e:	e7c1      	b.n	80081d4 <__gethex+0x1ac>
 8008250:	da09      	bge.n	8008266 <__gethex+0x23e>
 8008252:	1b75      	subs	r5, r6, r5
 8008254:	4621      	mov	r1, r4
 8008256:	462a      	mov	r2, r5
 8008258:	9801      	ldr	r0, [sp, #4]
 800825a:	f7fe fb2d 	bl	80068b8 <__lshift>
 800825e:	4604      	mov	r4, r0
 8008260:	1b7f      	subs	r7, r7, r5
 8008262:	f100 0a14 	add.w	sl, r0, #20
 8008266:	f04f 0900 	mov.w	r9, #0
 800826a:	e7b8      	b.n	80081de <__gethex+0x1b6>
 800826c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008270:	42bd      	cmp	r5, r7
 8008272:	dd6f      	ble.n	8008354 <__gethex+0x32c>
 8008274:	1bed      	subs	r5, r5, r7
 8008276:	42ae      	cmp	r6, r5
 8008278:	dc34      	bgt.n	80082e4 <__gethex+0x2bc>
 800827a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800827e:	2b02      	cmp	r3, #2
 8008280:	d022      	beq.n	80082c8 <__gethex+0x2a0>
 8008282:	2b03      	cmp	r3, #3
 8008284:	d024      	beq.n	80082d0 <__gethex+0x2a8>
 8008286:	2b01      	cmp	r3, #1
 8008288:	d115      	bne.n	80082b6 <__gethex+0x28e>
 800828a:	42ae      	cmp	r6, r5
 800828c:	d113      	bne.n	80082b6 <__gethex+0x28e>
 800828e:	2e01      	cmp	r6, #1
 8008290:	d10b      	bne.n	80082aa <__gethex+0x282>
 8008292:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008296:	9a02      	ldr	r2, [sp, #8]
 8008298:	2562      	movs	r5, #98	@ 0x62
 800829a:	6013      	str	r3, [r2, #0]
 800829c:	2301      	movs	r3, #1
 800829e:	6123      	str	r3, [r4, #16]
 80082a0:	f8ca 3000 	str.w	r3, [sl]
 80082a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082a6:	601c      	str	r4, [r3, #0]
 80082a8:	e73a      	b.n	8008120 <__gethex+0xf8>
 80082aa:	4620      	mov	r0, r4
 80082ac:	1e71      	subs	r1, r6, #1
 80082ae:	f7fe fd32 	bl	8006d16 <__any_on>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d1ed      	bne.n	8008292 <__gethex+0x26a>
 80082b6:	4621      	mov	r1, r4
 80082b8:	9801      	ldr	r0, [sp, #4]
 80082ba:	f7fe f8e7 	bl	800648c <_Bfree>
 80082be:	2300      	movs	r3, #0
 80082c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082c2:	2550      	movs	r5, #80	@ 0x50
 80082c4:	6013      	str	r3, [r2, #0]
 80082c6:	e72b      	b.n	8008120 <__gethex+0xf8>
 80082c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1f3      	bne.n	80082b6 <__gethex+0x28e>
 80082ce:	e7e0      	b.n	8008292 <__gethex+0x26a>
 80082d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1dd      	bne.n	8008292 <__gethex+0x26a>
 80082d6:	e7ee      	b.n	80082b6 <__gethex+0x28e>
 80082d8:	08008e38 	.word	0x08008e38
 80082dc:	08008ccf 	.word	0x08008ccf
 80082e0:	08008fe6 	.word	0x08008fe6
 80082e4:	1e6f      	subs	r7, r5, #1
 80082e6:	f1b9 0f00 	cmp.w	r9, #0
 80082ea:	d130      	bne.n	800834e <__gethex+0x326>
 80082ec:	b127      	cbz	r7, 80082f8 <__gethex+0x2d0>
 80082ee:	4639      	mov	r1, r7
 80082f0:	4620      	mov	r0, r4
 80082f2:	f7fe fd10 	bl	8006d16 <__any_on>
 80082f6:	4681      	mov	r9, r0
 80082f8:	2301      	movs	r3, #1
 80082fa:	4629      	mov	r1, r5
 80082fc:	1b76      	subs	r6, r6, r5
 80082fe:	2502      	movs	r5, #2
 8008300:	117a      	asrs	r2, r7, #5
 8008302:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008306:	f007 071f 	and.w	r7, r7, #31
 800830a:	40bb      	lsls	r3, r7
 800830c:	4213      	tst	r3, r2
 800830e:	4620      	mov	r0, r4
 8008310:	bf18      	it	ne
 8008312:	f049 0902 	orrne.w	r9, r9, #2
 8008316:	f7ff fe1f 	bl	8007f58 <rshift>
 800831a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800831e:	f1b9 0f00 	cmp.w	r9, #0
 8008322:	d047      	beq.n	80083b4 <__gethex+0x38c>
 8008324:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008328:	2b02      	cmp	r3, #2
 800832a:	d015      	beq.n	8008358 <__gethex+0x330>
 800832c:	2b03      	cmp	r3, #3
 800832e:	d017      	beq.n	8008360 <__gethex+0x338>
 8008330:	2b01      	cmp	r3, #1
 8008332:	d109      	bne.n	8008348 <__gethex+0x320>
 8008334:	f019 0f02 	tst.w	r9, #2
 8008338:	d006      	beq.n	8008348 <__gethex+0x320>
 800833a:	f8da 3000 	ldr.w	r3, [sl]
 800833e:	ea49 0903 	orr.w	r9, r9, r3
 8008342:	f019 0f01 	tst.w	r9, #1
 8008346:	d10e      	bne.n	8008366 <__gethex+0x33e>
 8008348:	f045 0510 	orr.w	r5, r5, #16
 800834c:	e032      	b.n	80083b4 <__gethex+0x38c>
 800834e:	f04f 0901 	mov.w	r9, #1
 8008352:	e7d1      	b.n	80082f8 <__gethex+0x2d0>
 8008354:	2501      	movs	r5, #1
 8008356:	e7e2      	b.n	800831e <__gethex+0x2f6>
 8008358:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800835a:	f1c3 0301 	rsb	r3, r3, #1
 800835e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008362:	2b00      	cmp	r3, #0
 8008364:	d0f0      	beq.n	8008348 <__gethex+0x320>
 8008366:	f04f 0c00 	mov.w	ip, #0
 800836a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800836e:	f104 0314 	add.w	r3, r4, #20
 8008372:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008376:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800837a:	4618      	mov	r0, r3
 800837c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008380:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8008384:	d01b      	beq.n	80083be <__gethex+0x396>
 8008386:	3201      	adds	r2, #1
 8008388:	6002      	str	r2, [r0, #0]
 800838a:	2d02      	cmp	r5, #2
 800838c:	f104 0314 	add.w	r3, r4, #20
 8008390:	d13c      	bne.n	800840c <__gethex+0x3e4>
 8008392:	f8d8 2000 	ldr.w	r2, [r8]
 8008396:	3a01      	subs	r2, #1
 8008398:	42b2      	cmp	r2, r6
 800839a:	d109      	bne.n	80083b0 <__gethex+0x388>
 800839c:	2201      	movs	r2, #1
 800839e:	1171      	asrs	r1, r6, #5
 80083a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083a4:	f006 061f 	and.w	r6, r6, #31
 80083a8:	fa02 f606 	lsl.w	r6, r2, r6
 80083ac:	421e      	tst	r6, r3
 80083ae:	d13a      	bne.n	8008426 <__gethex+0x3fe>
 80083b0:	f045 0520 	orr.w	r5, r5, #32
 80083b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083b6:	601c      	str	r4, [r3, #0]
 80083b8:	9b02      	ldr	r3, [sp, #8]
 80083ba:	601f      	str	r7, [r3, #0]
 80083bc:	e6b0      	b.n	8008120 <__gethex+0xf8>
 80083be:	4299      	cmp	r1, r3
 80083c0:	f843 cc04 	str.w	ip, [r3, #-4]
 80083c4:	d8d9      	bhi.n	800837a <__gethex+0x352>
 80083c6:	68a3      	ldr	r3, [r4, #8]
 80083c8:	459b      	cmp	fp, r3
 80083ca:	db17      	blt.n	80083fc <__gethex+0x3d4>
 80083cc:	6861      	ldr	r1, [r4, #4]
 80083ce:	9801      	ldr	r0, [sp, #4]
 80083d0:	3101      	adds	r1, #1
 80083d2:	f7fe f81b 	bl	800640c <_Balloc>
 80083d6:	4681      	mov	r9, r0
 80083d8:	b918      	cbnz	r0, 80083e2 <__gethex+0x3ba>
 80083da:	4602      	mov	r2, r0
 80083dc:	2184      	movs	r1, #132	@ 0x84
 80083de:	4b19      	ldr	r3, [pc, #100]	@ (8008444 <__gethex+0x41c>)
 80083e0:	e6c5      	b.n	800816e <__gethex+0x146>
 80083e2:	6922      	ldr	r2, [r4, #16]
 80083e4:	f104 010c 	add.w	r1, r4, #12
 80083e8:	3202      	adds	r2, #2
 80083ea:	0092      	lsls	r2, r2, #2
 80083ec:	300c      	adds	r0, #12
 80083ee:	f7ff fd6d 	bl	8007ecc <memcpy>
 80083f2:	4621      	mov	r1, r4
 80083f4:	9801      	ldr	r0, [sp, #4]
 80083f6:	f7fe f849 	bl	800648c <_Bfree>
 80083fa:	464c      	mov	r4, r9
 80083fc:	6923      	ldr	r3, [r4, #16]
 80083fe:	1c5a      	adds	r2, r3, #1
 8008400:	6122      	str	r2, [r4, #16]
 8008402:	2201      	movs	r2, #1
 8008404:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008408:	615a      	str	r2, [r3, #20]
 800840a:	e7be      	b.n	800838a <__gethex+0x362>
 800840c:	6922      	ldr	r2, [r4, #16]
 800840e:	455a      	cmp	r2, fp
 8008410:	dd0b      	ble.n	800842a <__gethex+0x402>
 8008412:	2101      	movs	r1, #1
 8008414:	4620      	mov	r0, r4
 8008416:	f7ff fd9f 	bl	8007f58 <rshift>
 800841a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800841e:	3701      	adds	r7, #1
 8008420:	42bb      	cmp	r3, r7
 8008422:	f6ff aee0 	blt.w	80081e6 <__gethex+0x1be>
 8008426:	2501      	movs	r5, #1
 8008428:	e7c2      	b.n	80083b0 <__gethex+0x388>
 800842a:	f016 061f 	ands.w	r6, r6, #31
 800842e:	d0fa      	beq.n	8008426 <__gethex+0x3fe>
 8008430:	4453      	add	r3, sl
 8008432:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008436:	f7fe f8db 	bl	80065f0 <__hi0bits>
 800843a:	f1c6 0620 	rsb	r6, r6, #32
 800843e:	42b0      	cmp	r0, r6
 8008440:	dbe7      	blt.n	8008412 <__gethex+0x3ea>
 8008442:	e7f0      	b.n	8008426 <__gethex+0x3fe>
 8008444:	08008ccf 	.word	0x08008ccf

08008448 <L_shift>:
 8008448:	f1c2 0208 	rsb	r2, r2, #8
 800844c:	0092      	lsls	r2, r2, #2
 800844e:	b570      	push	{r4, r5, r6, lr}
 8008450:	f1c2 0620 	rsb	r6, r2, #32
 8008454:	6843      	ldr	r3, [r0, #4]
 8008456:	6804      	ldr	r4, [r0, #0]
 8008458:	fa03 f506 	lsl.w	r5, r3, r6
 800845c:	432c      	orrs	r4, r5
 800845e:	40d3      	lsrs	r3, r2
 8008460:	6004      	str	r4, [r0, #0]
 8008462:	f840 3f04 	str.w	r3, [r0, #4]!
 8008466:	4288      	cmp	r0, r1
 8008468:	d3f4      	bcc.n	8008454 <L_shift+0xc>
 800846a:	bd70      	pop	{r4, r5, r6, pc}

0800846c <__match>:
 800846c:	b530      	push	{r4, r5, lr}
 800846e:	6803      	ldr	r3, [r0, #0]
 8008470:	3301      	adds	r3, #1
 8008472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008476:	b914      	cbnz	r4, 800847e <__match+0x12>
 8008478:	6003      	str	r3, [r0, #0]
 800847a:	2001      	movs	r0, #1
 800847c:	bd30      	pop	{r4, r5, pc}
 800847e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008482:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008486:	2d19      	cmp	r5, #25
 8008488:	bf98      	it	ls
 800848a:	3220      	addls	r2, #32
 800848c:	42a2      	cmp	r2, r4
 800848e:	d0f0      	beq.n	8008472 <__match+0x6>
 8008490:	2000      	movs	r0, #0
 8008492:	e7f3      	b.n	800847c <__match+0x10>

08008494 <__hexnan>:
 8008494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008498:	2500      	movs	r5, #0
 800849a:	680b      	ldr	r3, [r1, #0]
 800849c:	4682      	mov	sl, r0
 800849e:	115e      	asrs	r6, r3, #5
 80084a0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80084a4:	f013 031f 	ands.w	r3, r3, #31
 80084a8:	bf18      	it	ne
 80084aa:	3604      	addne	r6, #4
 80084ac:	1f37      	subs	r7, r6, #4
 80084ae:	4690      	mov	r8, r2
 80084b0:	46b9      	mov	r9, r7
 80084b2:	463c      	mov	r4, r7
 80084b4:	46ab      	mov	fp, r5
 80084b6:	b087      	sub	sp, #28
 80084b8:	6801      	ldr	r1, [r0, #0]
 80084ba:	9301      	str	r3, [sp, #4]
 80084bc:	f846 5c04 	str.w	r5, [r6, #-4]
 80084c0:	9502      	str	r5, [sp, #8]
 80084c2:	784a      	ldrb	r2, [r1, #1]
 80084c4:	1c4b      	adds	r3, r1, #1
 80084c6:	9303      	str	r3, [sp, #12]
 80084c8:	b342      	cbz	r2, 800851c <__hexnan+0x88>
 80084ca:	4610      	mov	r0, r2
 80084cc:	9105      	str	r1, [sp, #20]
 80084ce:	9204      	str	r2, [sp, #16]
 80084d0:	f7ff fd95 	bl	8007ffe <__hexdig_fun>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	d151      	bne.n	800857c <__hexnan+0xe8>
 80084d8:	9a04      	ldr	r2, [sp, #16]
 80084da:	9905      	ldr	r1, [sp, #20]
 80084dc:	2a20      	cmp	r2, #32
 80084de:	d818      	bhi.n	8008512 <__hexnan+0x7e>
 80084e0:	9b02      	ldr	r3, [sp, #8]
 80084e2:	459b      	cmp	fp, r3
 80084e4:	dd13      	ble.n	800850e <__hexnan+0x7a>
 80084e6:	454c      	cmp	r4, r9
 80084e8:	d206      	bcs.n	80084f8 <__hexnan+0x64>
 80084ea:	2d07      	cmp	r5, #7
 80084ec:	dc04      	bgt.n	80084f8 <__hexnan+0x64>
 80084ee:	462a      	mov	r2, r5
 80084f0:	4649      	mov	r1, r9
 80084f2:	4620      	mov	r0, r4
 80084f4:	f7ff ffa8 	bl	8008448 <L_shift>
 80084f8:	4544      	cmp	r4, r8
 80084fa:	d952      	bls.n	80085a2 <__hexnan+0x10e>
 80084fc:	2300      	movs	r3, #0
 80084fe:	f1a4 0904 	sub.w	r9, r4, #4
 8008502:	f844 3c04 	str.w	r3, [r4, #-4]
 8008506:	461d      	mov	r5, r3
 8008508:	464c      	mov	r4, r9
 800850a:	f8cd b008 	str.w	fp, [sp, #8]
 800850e:	9903      	ldr	r1, [sp, #12]
 8008510:	e7d7      	b.n	80084c2 <__hexnan+0x2e>
 8008512:	2a29      	cmp	r2, #41	@ 0x29
 8008514:	d157      	bne.n	80085c6 <__hexnan+0x132>
 8008516:	3102      	adds	r1, #2
 8008518:	f8ca 1000 	str.w	r1, [sl]
 800851c:	f1bb 0f00 	cmp.w	fp, #0
 8008520:	d051      	beq.n	80085c6 <__hexnan+0x132>
 8008522:	454c      	cmp	r4, r9
 8008524:	d206      	bcs.n	8008534 <__hexnan+0xa0>
 8008526:	2d07      	cmp	r5, #7
 8008528:	dc04      	bgt.n	8008534 <__hexnan+0xa0>
 800852a:	462a      	mov	r2, r5
 800852c:	4649      	mov	r1, r9
 800852e:	4620      	mov	r0, r4
 8008530:	f7ff ff8a 	bl	8008448 <L_shift>
 8008534:	4544      	cmp	r4, r8
 8008536:	d936      	bls.n	80085a6 <__hexnan+0x112>
 8008538:	4623      	mov	r3, r4
 800853a:	f1a8 0204 	sub.w	r2, r8, #4
 800853e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008542:	429f      	cmp	r7, r3
 8008544:	f842 1f04 	str.w	r1, [r2, #4]!
 8008548:	d2f9      	bcs.n	800853e <__hexnan+0xaa>
 800854a:	1b3b      	subs	r3, r7, r4
 800854c:	f023 0303 	bic.w	r3, r3, #3
 8008550:	3304      	adds	r3, #4
 8008552:	3401      	adds	r4, #1
 8008554:	3e03      	subs	r6, #3
 8008556:	42b4      	cmp	r4, r6
 8008558:	bf88      	it	hi
 800855a:	2304      	movhi	r3, #4
 800855c:	2200      	movs	r2, #0
 800855e:	4443      	add	r3, r8
 8008560:	f843 2b04 	str.w	r2, [r3], #4
 8008564:	429f      	cmp	r7, r3
 8008566:	d2fb      	bcs.n	8008560 <__hexnan+0xcc>
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	b91b      	cbnz	r3, 8008574 <__hexnan+0xe0>
 800856c:	4547      	cmp	r7, r8
 800856e:	d128      	bne.n	80085c2 <__hexnan+0x12e>
 8008570:	2301      	movs	r3, #1
 8008572:	603b      	str	r3, [r7, #0]
 8008574:	2005      	movs	r0, #5
 8008576:	b007      	add	sp, #28
 8008578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800857c:	3501      	adds	r5, #1
 800857e:	2d08      	cmp	r5, #8
 8008580:	f10b 0b01 	add.w	fp, fp, #1
 8008584:	dd06      	ble.n	8008594 <__hexnan+0x100>
 8008586:	4544      	cmp	r4, r8
 8008588:	d9c1      	bls.n	800850e <__hexnan+0x7a>
 800858a:	2300      	movs	r3, #0
 800858c:	2501      	movs	r5, #1
 800858e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008592:	3c04      	subs	r4, #4
 8008594:	6822      	ldr	r2, [r4, #0]
 8008596:	f000 000f 	and.w	r0, r0, #15
 800859a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800859e:	6020      	str	r0, [r4, #0]
 80085a0:	e7b5      	b.n	800850e <__hexnan+0x7a>
 80085a2:	2508      	movs	r5, #8
 80085a4:	e7b3      	b.n	800850e <__hexnan+0x7a>
 80085a6:	9b01      	ldr	r3, [sp, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d0dd      	beq.n	8008568 <__hexnan+0xd4>
 80085ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085b0:	f1c3 0320 	rsb	r3, r3, #32
 80085b4:	40da      	lsrs	r2, r3
 80085b6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80085ba:	4013      	ands	r3, r2
 80085bc:	f846 3c04 	str.w	r3, [r6, #-4]
 80085c0:	e7d2      	b.n	8008568 <__hexnan+0xd4>
 80085c2:	3f04      	subs	r7, #4
 80085c4:	e7d0      	b.n	8008568 <__hexnan+0xd4>
 80085c6:	2004      	movs	r0, #4
 80085c8:	e7d5      	b.n	8008576 <__hexnan+0xe2>

080085ca <__ascii_mbtowc>:
 80085ca:	b082      	sub	sp, #8
 80085cc:	b901      	cbnz	r1, 80085d0 <__ascii_mbtowc+0x6>
 80085ce:	a901      	add	r1, sp, #4
 80085d0:	b142      	cbz	r2, 80085e4 <__ascii_mbtowc+0x1a>
 80085d2:	b14b      	cbz	r3, 80085e8 <__ascii_mbtowc+0x1e>
 80085d4:	7813      	ldrb	r3, [r2, #0]
 80085d6:	600b      	str	r3, [r1, #0]
 80085d8:	7812      	ldrb	r2, [r2, #0]
 80085da:	1e10      	subs	r0, r2, #0
 80085dc:	bf18      	it	ne
 80085de:	2001      	movne	r0, #1
 80085e0:	b002      	add	sp, #8
 80085e2:	4770      	bx	lr
 80085e4:	4610      	mov	r0, r2
 80085e6:	e7fb      	b.n	80085e0 <__ascii_mbtowc+0x16>
 80085e8:	f06f 0001 	mvn.w	r0, #1
 80085ec:	e7f8      	b.n	80085e0 <__ascii_mbtowc+0x16>

080085ee <_realloc_r>:
 80085ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085f2:	4680      	mov	r8, r0
 80085f4:	4615      	mov	r5, r2
 80085f6:	460c      	mov	r4, r1
 80085f8:	b921      	cbnz	r1, 8008604 <_realloc_r+0x16>
 80085fa:	4611      	mov	r1, r2
 80085fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008600:	f7fd be78 	b.w	80062f4 <_malloc_r>
 8008604:	b92a      	cbnz	r2, 8008612 <_realloc_r+0x24>
 8008606:	f7fd fe03 	bl	8006210 <_free_r>
 800860a:	2400      	movs	r4, #0
 800860c:	4620      	mov	r0, r4
 800860e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008612:	f000 f840 	bl	8008696 <_malloc_usable_size_r>
 8008616:	4285      	cmp	r5, r0
 8008618:	4606      	mov	r6, r0
 800861a:	d802      	bhi.n	8008622 <_realloc_r+0x34>
 800861c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008620:	d8f4      	bhi.n	800860c <_realloc_r+0x1e>
 8008622:	4629      	mov	r1, r5
 8008624:	4640      	mov	r0, r8
 8008626:	f7fd fe65 	bl	80062f4 <_malloc_r>
 800862a:	4607      	mov	r7, r0
 800862c:	2800      	cmp	r0, #0
 800862e:	d0ec      	beq.n	800860a <_realloc_r+0x1c>
 8008630:	42b5      	cmp	r5, r6
 8008632:	462a      	mov	r2, r5
 8008634:	4621      	mov	r1, r4
 8008636:	bf28      	it	cs
 8008638:	4632      	movcs	r2, r6
 800863a:	f7ff fc47 	bl	8007ecc <memcpy>
 800863e:	4621      	mov	r1, r4
 8008640:	4640      	mov	r0, r8
 8008642:	f7fd fde5 	bl	8006210 <_free_r>
 8008646:	463c      	mov	r4, r7
 8008648:	e7e0      	b.n	800860c <_realloc_r+0x1e>

0800864a <__ascii_wctomb>:
 800864a:	4603      	mov	r3, r0
 800864c:	4608      	mov	r0, r1
 800864e:	b141      	cbz	r1, 8008662 <__ascii_wctomb+0x18>
 8008650:	2aff      	cmp	r2, #255	@ 0xff
 8008652:	d904      	bls.n	800865e <__ascii_wctomb+0x14>
 8008654:	228a      	movs	r2, #138	@ 0x8a
 8008656:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800865a:	601a      	str	r2, [r3, #0]
 800865c:	4770      	bx	lr
 800865e:	2001      	movs	r0, #1
 8008660:	700a      	strb	r2, [r1, #0]
 8008662:	4770      	bx	lr

08008664 <fiprintf>:
 8008664:	b40e      	push	{r1, r2, r3}
 8008666:	b503      	push	{r0, r1, lr}
 8008668:	4601      	mov	r1, r0
 800866a:	ab03      	add	r3, sp, #12
 800866c:	4805      	ldr	r0, [pc, #20]	@ (8008684 <fiprintf+0x20>)
 800866e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008672:	6800      	ldr	r0, [r0, #0]
 8008674:	9301      	str	r3, [sp, #4]
 8008676:	f000 f83d 	bl	80086f4 <_vfiprintf_r>
 800867a:	b002      	add	sp, #8
 800867c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008680:	b003      	add	sp, #12
 8008682:	4770      	bx	lr
 8008684:	20000028 	.word	0x20000028

08008688 <abort>:
 8008688:	2006      	movs	r0, #6
 800868a:	b508      	push	{r3, lr}
 800868c:	f000 fa06 	bl	8008a9c <raise>
 8008690:	2001      	movs	r0, #1
 8008692:	f7f9 fb18 	bl	8001cc6 <_exit>

08008696 <_malloc_usable_size_r>:
 8008696:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800869a:	1f18      	subs	r0, r3, #4
 800869c:	2b00      	cmp	r3, #0
 800869e:	bfbc      	itt	lt
 80086a0:	580b      	ldrlt	r3, [r1, r0]
 80086a2:	18c0      	addlt	r0, r0, r3
 80086a4:	4770      	bx	lr

080086a6 <__sfputc_r>:
 80086a6:	6893      	ldr	r3, [r2, #8]
 80086a8:	b410      	push	{r4}
 80086aa:	3b01      	subs	r3, #1
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	6093      	str	r3, [r2, #8]
 80086b0:	da07      	bge.n	80086c2 <__sfputc_r+0x1c>
 80086b2:	6994      	ldr	r4, [r2, #24]
 80086b4:	42a3      	cmp	r3, r4
 80086b6:	db01      	blt.n	80086bc <__sfputc_r+0x16>
 80086b8:	290a      	cmp	r1, #10
 80086ba:	d102      	bne.n	80086c2 <__sfputc_r+0x1c>
 80086bc:	bc10      	pop	{r4}
 80086be:	f000 b931 	b.w	8008924 <__swbuf_r>
 80086c2:	6813      	ldr	r3, [r2, #0]
 80086c4:	1c58      	adds	r0, r3, #1
 80086c6:	6010      	str	r0, [r2, #0]
 80086c8:	7019      	strb	r1, [r3, #0]
 80086ca:	4608      	mov	r0, r1
 80086cc:	bc10      	pop	{r4}
 80086ce:	4770      	bx	lr

080086d0 <__sfputs_r>:
 80086d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d2:	4606      	mov	r6, r0
 80086d4:	460f      	mov	r7, r1
 80086d6:	4614      	mov	r4, r2
 80086d8:	18d5      	adds	r5, r2, r3
 80086da:	42ac      	cmp	r4, r5
 80086dc:	d101      	bne.n	80086e2 <__sfputs_r+0x12>
 80086de:	2000      	movs	r0, #0
 80086e0:	e007      	b.n	80086f2 <__sfputs_r+0x22>
 80086e2:	463a      	mov	r2, r7
 80086e4:	4630      	mov	r0, r6
 80086e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ea:	f7ff ffdc 	bl	80086a6 <__sfputc_r>
 80086ee:	1c43      	adds	r3, r0, #1
 80086f0:	d1f3      	bne.n	80086da <__sfputs_r+0xa>
 80086f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080086f4 <_vfiprintf_r>:
 80086f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f8:	460d      	mov	r5, r1
 80086fa:	4614      	mov	r4, r2
 80086fc:	4698      	mov	r8, r3
 80086fe:	4606      	mov	r6, r0
 8008700:	b09d      	sub	sp, #116	@ 0x74
 8008702:	b118      	cbz	r0, 800870c <_vfiprintf_r+0x18>
 8008704:	6a03      	ldr	r3, [r0, #32]
 8008706:	b90b      	cbnz	r3, 800870c <_vfiprintf_r+0x18>
 8008708:	f7fc fe04 	bl	8005314 <__sinit>
 800870c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800870e:	07d9      	lsls	r1, r3, #31
 8008710:	d405      	bmi.n	800871e <_vfiprintf_r+0x2a>
 8008712:	89ab      	ldrh	r3, [r5, #12]
 8008714:	059a      	lsls	r2, r3, #22
 8008716:	d402      	bmi.n	800871e <_vfiprintf_r+0x2a>
 8008718:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800871a:	f7fc ff12 	bl	8005542 <__retarget_lock_acquire_recursive>
 800871e:	89ab      	ldrh	r3, [r5, #12]
 8008720:	071b      	lsls	r3, r3, #28
 8008722:	d501      	bpl.n	8008728 <_vfiprintf_r+0x34>
 8008724:	692b      	ldr	r3, [r5, #16]
 8008726:	b99b      	cbnz	r3, 8008750 <_vfiprintf_r+0x5c>
 8008728:	4629      	mov	r1, r5
 800872a:	4630      	mov	r0, r6
 800872c:	f000 f938 	bl	80089a0 <__swsetup_r>
 8008730:	b170      	cbz	r0, 8008750 <_vfiprintf_r+0x5c>
 8008732:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008734:	07dc      	lsls	r4, r3, #31
 8008736:	d504      	bpl.n	8008742 <_vfiprintf_r+0x4e>
 8008738:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800873c:	b01d      	add	sp, #116	@ 0x74
 800873e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008742:	89ab      	ldrh	r3, [r5, #12]
 8008744:	0598      	lsls	r0, r3, #22
 8008746:	d4f7      	bmi.n	8008738 <_vfiprintf_r+0x44>
 8008748:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800874a:	f7fc fefb 	bl	8005544 <__retarget_lock_release_recursive>
 800874e:	e7f3      	b.n	8008738 <_vfiprintf_r+0x44>
 8008750:	2300      	movs	r3, #0
 8008752:	9309      	str	r3, [sp, #36]	@ 0x24
 8008754:	2320      	movs	r3, #32
 8008756:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800875a:	2330      	movs	r3, #48	@ 0x30
 800875c:	f04f 0901 	mov.w	r9, #1
 8008760:	f8cd 800c 	str.w	r8, [sp, #12]
 8008764:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008910 <_vfiprintf_r+0x21c>
 8008768:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800876c:	4623      	mov	r3, r4
 800876e:	469a      	mov	sl, r3
 8008770:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008774:	b10a      	cbz	r2, 800877a <_vfiprintf_r+0x86>
 8008776:	2a25      	cmp	r2, #37	@ 0x25
 8008778:	d1f9      	bne.n	800876e <_vfiprintf_r+0x7a>
 800877a:	ebba 0b04 	subs.w	fp, sl, r4
 800877e:	d00b      	beq.n	8008798 <_vfiprintf_r+0xa4>
 8008780:	465b      	mov	r3, fp
 8008782:	4622      	mov	r2, r4
 8008784:	4629      	mov	r1, r5
 8008786:	4630      	mov	r0, r6
 8008788:	f7ff ffa2 	bl	80086d0 <__sfputs_r>
 800878c:	3001      	adds	r0, #1
 800878e:	f000 80a7 	beq.w	80088e0 <_vfiprintf_r+0x1ec>
 8008792:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008794:	445a      	add	r2, fp
 8008796:	9209      	str	r2, [sp, #36]	@ 0x24
 8008798:	f89a 3000 	ldrb.w	r3, [sl]
 800879c:	2b00      	cmp	r3, #0
 800879e:	f000 809f 	beq.w	80088e0 <_vfiprintf_r+0x1ec>
 80087a2:	2300      	movs	r3, #0
 80087a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80087a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087ac:	f10a 0a01 	add.w	sl, sl, #1
 80087b0:	9304      	str	r3, [sp, #16]
 80087b2:	9307      	str	r3, [sp, #28]
 80087b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80087ba:	4654      	mov	r4, sl
 80087bc:	2205      	movs	r2, #5
 80087be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087c2:	4853      	ldr	r0, [pc, #332]	@ (8008910 <_vfiprintf_r+0x21c>)
 80087c4:	f7fc febf 	bl	8005546 <memchr>
 80087c8:	9a04      	ldr	r2, [sp, #16]
 80087ca:	b9d8      	cbnz	r0, 8008804 <_vfiprintf_r+0x110>
 80087cc:	06d1      	lsls	r1, r2, #27
 80087ce:	bf44      	itt	mi
 80087d0:	2320      	movmi	r3, #32
 80087d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087d6:	0713      	lsls	r3, r2, #28
 80087d8:	bf44      	itt	mi
 80087da:	232b      	movmi	r3, #43	@ 0x2b
 80087dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087e0:	f89a 3000 	ldrb.w	r3, [sl]
 80087e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80087e6:	d015      	beq.n	8008814 <_vfiprintf_r+0x120>
 80087e8:	4654      	mov	r4, sl
 80087ea:	2000      	movs	r0, #0
 80087ec:	f04f 0c0a 	mov.w	ip, #10
 80087f0:	9a07      	ldr	r2, [sp, #28]
 80087f2:	4621      	mov	r1, r4
 80087f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087f8:	3b30      	subs	r3, #48	@ 0x30
 80087fa:	2b09      	cmp	r3, #9
 80087fc:	d94b      	bls.n	8008896 <_vfiprintf_r+0x1a2>
 80087fe:	b1b0      	cbz	r0, 800882e <_vfiprintf_r+0x13a>
 8008800:	9207      	str	r2, [sp, #28]
 8008802:	e014      	b.n	800882e <_vfiprintf_r+0x13a>
 8008804:	eba0 0308 	sub.w	r3, r0, r8
 8008808:	fa09 f303 	lsl.w	r3, r9, r3
 800880c:	4313      	orrs	r3, r2
 800880e:	46a2      	mov	sl, r4
 8008810:	9304      	str	r3, [sp, #16]
 8008812:	e7d2      	b.n	80087ba <_vfiprintf_r+0xc6>
 8008814:	9b03      	ldr	r3, [sp, #12]
 8008816:	1d19      	adds	r1, r3, #4
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	9103      	str	r1, [sp, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	bfbb      	ittet	lt
 8008820:	425b      	neglt	r3, r3
 8008822:	f042 0202 	orrlt.w	r2, r2, #2
 8008826:	9307      	strge	r3, [sp, #28]
 8008828:	9307      	strlt	r3, [sp, #28]
 800882a:	bfb8      	it	lt
 800882c:	9204      	strlt	r2, [sp, #16]
 800882e:	7823      	ldrb	r3, [r4, #0]
 8008830:	2b2e      	cmp	r3, #46	@ 0x2e
 8008832:	d10a      	bne.n	800884a <_vfiprintf_r+0x156>
 8008834:	7863      	ldrb	r3, [r4, #1]
 8008836:	2b2a      	cmp	r3, #42	@ 0x2a
 8008838:	d132      	bne.n	80088a0 <_vfiprintf_r+0x1ac>
 800883a:	9b03      	ldr	r3, [sp, #12]
 800883c:	3402      	adds	r4, #2
 800883e:	1d1a      	adds	r2, r3, #4
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	9203      	str	r2, [sp, #12]
 8008844:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008848:	9305      	str	r3, [sp, #20]
 800884a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008914 <_vfiprintf_r+0x220>
 800884e:	2203      	movs	r2, #3
 8008850:	4650      	mov	r0, sl
 8008852:	7821      	ldrb	r1, [r4, #0]
 8008854:	f7fc fe77 	bl	8005546 <memchr>
 8008858:	b138      	cbz	r0, 800886a <_vfiprintf_r+0x176>
 800885a:	2240      	movs	r2, #64	@ 0x40
 800885c:	9b04      	ldr	r3, [sp, #16]
 800885e:	eba0 000a 	sub.w	r0, r0, sl
 8008862:	4082      	lsls	r2, r0
 8008864:	4313      	orrs	r3, r2
 8008866:	3401      	adds	r4, #1
 8008868:	9304      	str	r3, [sp, #16]
 800886a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800886e:	2206      	movs	r2, #6
 8008870:	4829      	ldr	r0, [pc, #164]	@ (8008918 <_vfiprintf_r+0x224>)
 8008872:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008876:	f7fc fe66 	bl	8005546 <memchr>
 800887a:	2800      	cmp	r0, #0
 800887c:	d03f      	beq.n	80088fe <_vfiprintf_r+0x20a>
 800887e:	4b27      	ldr	r3, [pc, #156]	@ (800891c <_vfiprintf_r+0x228>)
 8008880:	bb1b      	cbnz	r3, 80088ca <_vfiprintf_r+0x1d6>
 8008882:	9b03      	ldr	r3, [sp, #12]
 8008884:	3307      	adds	r3, #7
 8008886:	f023 0307 	bic.w	r3, r3, #7
 800888a:	3308      	adds	r3, #8
 800888c:	9303      	str	r3, [sp, #12]
 800888e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008890:	443b      	add	r3, r7
 8008892:	9309      	str	r3, [sp, #36]	@ 0x24
 8008894:	e76a      	b.n	800876c <_vfiprintf_r+0x78>
 8008896:	460c      	mov	r4, r1
 8008898:	2001      	movs	r0, #1
 800889a:	fb0c 3202 	mla	r2, ip, r2, r3
 800889e:	e7a8      	b.n	80087f2 <_vfiprintf_r+0xfe>
 80088a0:	2300      	movs	r3, #0
 80088a2:	f04f 0c0a 	mov.w	ip, #10
 80088a6:	4619      	mov	r1, r3
 80088a8:	3401      	adds	r4, #1
 80088aa:	9305      	str	r3, [sp, #20]
 80088ac:	4620      	mov	r0, r4
 80088ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088b2:	3a30      	subs	r2, #48	@ 0x30
 80088b4:	2a09      	cmp	r2, #9
 80088b6:	d903      	bls.n	80088c0 <_vfiprintf_r+0x1cc>
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d0c6      	beq.n	800884a <_vfiprintf_r+0x156>
 80088bc:	9105      	str	r1, [sp, #20]
 80088be:	e7c4      	b.n	800884a <_vfiprintf_r+0x156>
 80088c0:	4604      	mov	r4, r0
 80088c2:	2301      	movs	r3, #1
 80088c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80088c8:	e7f0      	b.n	80088ac <_vfiprintf_r+0x1b8>
 80088ca:	ab03      	add	r3, sp, #12
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	462a      	mov	r2, r5
 80088d0:	4630      	mov	r0, r6
 80088d2:	4b13      	ldr	r3, [pc, #76]	@ (8008920 <_vfiprintf_r+0x22c>)
 80088d4:	a904      	add	r1, sp, #16
 80088d6:	f7fb fec3 	bl	8004660 <_printf_float>
 80088da:	4607      	mov	r7, r0
 80088dc:	1c78      	adds	r0, r7, #1
 80088de:	d1d6      	bne.n	800888e <_vfiprintf_r+0x19a>
 80088e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088e2:	07d9      	lsls	r1, r3, #31
 80088e4:	d405      	bmi.n	80088f2 <_vfiprintf_r+0x1fe>
 80088e6:	89ab      	ldrh	r3, [r5, #12]
 80088e8:	059a      	lsls	r2, r3, #22
 80088ea:	d402      	bmi.n	80088f2 <_vfiprintf_r+0x1fe>
 80088ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088ee:	f7fc fe29 	bl	8005544 <__retarget_lock_release_recursive>
 80088f2:	89ab      	ldrh	r3, [r5, #12]
 80088f4:	065b      	lsls	r3, r3, #25
 80088f6:	f53f af1f 	bmi.w	8008738 <_vfiprintf_r+0x44>
 80088fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088fc:	e71e      	b.n	800873c <_vfiprintf_r+0x48>
 80088fe:	ab03      	add	r3, sp, #12
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	462a      	mov	r2, r5
 8008904:	4630      	mov	r0, r6
 8008906:	4b06      	ldr	r3, [pc, #24]	@ (8008920 <_vfiprintf_r+0x22c>)
 8008908:	a904      	add	r1, sp, #16
 800890a:	f7fc f947 	bl	8004b9c <_printf_i>
 800890e:	e7e4      	b.n	80088da <_vfiprintf_r+0x1e6>
 8008910:	08008f91 	.word	0x08008f91
 8008914:	08008f97 	.word	0x08008f97
 8008918:	08008f9b 	.word	0x08008f9b
 800891c:	08004661 	.word	0x08004661
 8008920:	080086d1 	.word	0x080086d1

08008924 <__swbuf_r>:
 8008924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008926:	460e      	mov	r6, r1
 8008928:	4614      	mov	r4, r2
 800892a:	4605      	mov	r5, r0
 800892c:	b118      	cbz	r0, 8008936 <__swbuf_r+0x12>
 800892e:	6a03      	ldr	r3, [r0, #32]
 8008930:	b90b      	cbnz	r3, 8008936 <__swbuf_r+0x12>
 8008932:	f7fc fcef 	bl	8005314 <__sinit>
 8008936:	69a3      	ldr	r3, [r4, #24]
 8008938:	60a3      	str	r3, [r4, #8]
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	071a      	lsls	r2, r3, #28
 800893e:	d501      	bpl.n	8008944 <__swbuf_r+0x20>
 8008940:	6923      	ldr	r3, [r4, #16]
 8008942:	b943      	cbnz	r3, 8008956 <__swbuf_r+0x32>
 8008944:	4621      	mov	r1, r4
 8008946:	4628      	mov	r0, r5
 8008948:	f000 f82a 	bl	80089a0 <__swsetup_r>
 800894c:	b118      	cbz	r0, 8008956 <__swbuf_r+0x32>
 800894e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008952:	4638      	mov	r0, r7
 8008954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	6922      	ldr	r2, [r4, #16]
 800895a:	b2f6      	uxtb	r6, r6
 800895c:	1a98      	subs	r0, r3, r2
 800895e:	6963      	ldr	r3, [r4, #20]
 8008960:	4637      	mov	r7, r6
 8008962:	4283      	cmp	r3, r0
 8008964:	dc05      	bgt.n	8008972 <__swbuf_r+0x4e>
 8008966:	4621      	mov	r1, r4
 8008968:	4628      	mov	r0, r5
 800896a:	f7ff fa4b 	bl	8007e04 <_fflush_r>
 800896e:	2800      	cmp	r0, #0
 8008970:	d1ed      	bne.n	800894e <__swbuf_r+0x2a>
 8008972:	68a3      	ldr	r3, [r4, #8]
 8008974:	3b01      	subs	r3, #1
 8008976:	60a3      	str	r3, [r4, #8]
 8008978:	6823      	ldr	r3, [r4, #0]
 800897a:	1c5a      	adds	r2, r3, #1
 800897c:	6022      	str	r2, [r4, #0]
 800897e:	701e      	strb	r6, [r3, #0]
 8008980:	6962      	ldr	r2, [r4, #20]
 8008982:	1c43      	adds	r3, r0, #1
 8008984:	429a      	cmp	r2, r3
 8008986:	d004      	beq.n	8008992 <__swbuf_r+0x6e>
 8008988:	89a3      	ldrh	r3, [r4, #12]
 800898a:	07db      	lsls	r3, r3, #31
 800898c:	d5e1      	bpl.n	8008952 <__swbuf_r+0x2e>
 800898e:	2e0a      	cmp	r6, #10
 8008990:	d1df      	bne.n	8008952 <__swbuf_r+0x2e>
 8008992:	4621      	mov	r1, r4
 8008994:	4628      	mov	r0, r5
 8008996:	f7ff fa35 	bl	8007e04 <_fflush_r>
 800899a:	2800      	cmp	r0, #0
 800899c:	d0d9      	beq.n	8008952 <__swbuf_r+0x2e>
 800899e:	e7d6      	b.n	800894e <__swbuf_r+0x2a>

080089a0 <__swsetup_r>:
 80089a0:	b538      	push	{r3, r4, r5, lr}
 80089a2:	4b29      	ldr	r3, [pc, #164]	@ (8008a48 <__swsetup_r+0xa8>)
 80089a4:	4605      	mov	r5, r0
 80089a6:	6818      	ldr	r0, [r3, #0]
 80089a8:	460c      	mov	r4, r1
 80089aa:	b118      	cbz	r0, 80089b4 <__swsetup_r+0x14>
 80089ac:	6a03      	ldr	r3, [r0, #32]
 80089ae:	b90b      	cbnz	r3, 80089b4 <__swsetup_r+0x14>
 80089b0:	f7fc fcb0 	bl	8005314 <__sinit>
 80089b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b8:	0719      	lsls	r1, r3, #28
 80089ba:	d422      	bmi.n	8008a02 <__swsetup_r+0x62>
 80089bc:	06da      	lsls	r2, r3, #27
 80089be:	d407      	bmi.n	80089d0 <__swsetup_r+0x30>
 80089c0:	2209      	movs	r2, #9
 80089c2:	602a      	str	r2, [r5, #0]
 80089c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089cc:	81a3      	strh	r3, [r4, #12]
 80089ce:	e033      	b.n	8008a38 <__swsetup_r+0x98>
 80089d0:	0758      	lsls	r0, r3, #29
 80089d2:	d512      	bpl.n	80089fa <__swsetup_r+0x5a>
 80089d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089d6:	b141      	cbz	r1, 80089ea <__swsetup_r+0x4a>
 80089d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089dc:	4299      	cmp	r1, r3
 80089de:	d002      	beq.n	80089e6 <__swsetup_r+0x46>
 80089e0:	4628      	mov	r0, r5
 80089e2:	f7fd fc15 	bl	8006210 <_free_r>
 80089e6:	2300      	movs	r3, #0
 80089e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80089ea:	89a3      	ldrh	r3, [r4, #12]
 80089ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80089f0:	81a3      	strh	r3, [r4, #12]
 80089f2:	2300      	movs	r3, #0
 80089f4:	6063      	str	r3, [r4, #4]
 80089f6:	6923      	ldr	r3, [r4, #16]
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	f043 0308 	orr.w	r3, r3, #8
 8008a00:	81a3      	strh	r3, [r4, #12]
 8008a02:	6923      	ldr	r3, [r4, #16]
 8008a04:	b94b      	cbnz	r3, 8008a1a <__swsetup_r+0x7a>
 8008a06:	89a3      	ldrh	r3, [r4, #12]
 8008a08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a10:	d003      	beq.n	8008a1a <__swsetup_r+0x7a>
 8008a12:	4621      	mov	r1, r4
 8008a14:	4628      	mov	r0, r5
 8008a16:	f000 f882 	bl	8008b1e <__smakebuf_r>
 8008a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a1e:	f013 0201 	ands.w	r2, r3, #1
 8008a22:	d00a      	beq.n	8008a3a <__swsetup_r+0x9a>
 8008a24:	2200      	movs	r2, #0
 8008a26:	60a2      	str	r2, [r4, #8]
 8008a28:	6962      	ldr	r2, [r4, #20]
 8008a2a:	4252      	negs	r2, r2
 8008a2c:	61a2      	str	r2, [r4, #24]
 8008a2e:	6922      	ldr	r2, [r4, #16]
 8008a30:	b942      	cbnz	r2, 8008a44 <__swsetup_r+0xa4>
 8008a32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a36:	d1c5      	bne.n	80089c4 <__swsetup_r+0x24>
 8008a38:	bd38      	pop	{r3, r4, r5, pc}
 8008a3a:	0799      	lsls	r1, r3, #30
 8008a3c:	bf58      	it	pl
 8008a3e:	6962      	ldrpl	r2, [r4, #20]
 8008a40:	60a2      	str	r2, [r4, #8]
 8008a42:	e7f4      	b.n	8008a2e <__swsetup_r+0x8e>
 8008a44:	2000      	movs	r0, #0
 8008a46:	e7f7      	b.n	8008a38 <__swsetup_r+0x98>
 8008a48:	20000028 	.word	0x20000028

08008a4c <_raise_r>:
 8008a4c:	291f      	cmp	r1, #31
 8008a4e:	b538      	push	{r3, r4, r5, lr}
 8008a50:	4605      	mov	r5, r0
 8008a52:	460c      	mov	r4, r1
 8008a54:	d904      	bls.n	8008a60 <_raise_r+0x14>
 8008a56:	2316      	movs	r3, #22
 8008a58:	6003      	str	r3, [r0, #0]
 8008a5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a5e:	bd38      	pop	{r3, r4, r5, pc}
 8008a60:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008a62:	b112      	cbz	r2, 8008a6a <_raise_r+0x1e>
 8008a64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a68:	b94b      	cbnz	r3, 8008a7e <_raise_r+0x32>
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f000 f830 	bl	8008ad0 <_getpid_r>
 8008a70:	4622      	mov	r2, r4
 8008a72:	4601      	mov	r1, r0
 8008a74:	4628      	mov	r0, r5
 8008a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a7a:	f000 b817 	b.w	8008aac <_kill_r>
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d00a      	beq.n	8008a98 <_raise_r+0x4c>
 8008a82:	1c59      	adds	r1, r3, #1
 8008a84:	d103      	bne.n	8008a8e <_raise_r+0x42>
 8008a86:	2316      	movs	r3, #22
 8008a88:	6003      	str	r3, [r0, #0]
 8008a8a:	2001      	movs	r0, #1
 8008a8c:	e7e7      	b.n	8008a5e <_raise_r+0x12>
 8008a8e:	2100      	movs	r1, #0
 8008a90:	4620      	mov	r0, r4
 8008a92:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008a96:	4798      	blx	r3
 8008a98:	2000      	movs	r0, #0
 8008a9a:	e7e0      	b.n	8008a5e <_raise_r+0x12>

08008a9c <raise>:
 8008a9c:	4b02      	ldr	r3, [pc, #8]	@ (8008aa8 <raise+0xc>)
 8008a9e:	4601      	mov	r1, r0
 8008aa0:	6818      	ldr	r0, [r3, #0]
 8008aa2:	f7ff bfd3 	b.w	8008a4c <_raise_r>
 8008aa6:	bf00      	nop
 8008aa8:	20000028 	.word	0x20000028

08008aac <_kill_r>:
 8008aac:	b538      	push	{r3, r4, r5, lr}
 8008aae:	2300      	movs	r3, #0
 8008ab0:	4d06      	ldr	r5, [pc, #24]	@ (8008acc <_kill_r+0x20>)
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	4608      	mov	r0, r1
 8008ab6:	4611      	mov	r1, r2
 8008ab8:	602b      	str	r3, [r5, #0]
 8008aba:	f7f9 f8f4 	bl	8001ca6 <_kill>
 8008abe:	1c43      	adds	r3, r0, #1
 8008ac0:	d102      	bne.n	8008ac8 <_kill_r+0x1c>
 8008ac2:	682b      	ldr	r3, [r5, #0]
 8008ac4:	b103      	cbz	r3, 8008ac8 <_kill_r+0x1c>
 8008ac6:	6023      	str	r3, [r4, #0]
 8008ac8:	bd38      	pop	{r3, r4, r5, pc}
 8008aca:	bf00      	nop
 8008acc:	2000046c 	.word	0x2000046c

08008ad0 <_getpid_r>:
 8008ad0:	f7f9 b8e2 	b.w	8001c98 <_getpid>

08008ad4 <__swhatbuf_r>:
 8008ad4:	b570      	push	{r4, r5, r6, lr}
 8008ad6:	460c      	mov	r4, r1
 8008ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008adc:	4615      	mov	r5, r2
 8008ade:	2900      	cmp	r1, #0
 8008ae0:	461e      	mov	r6, r3
 8008ae2:	b096      	sub	sp, #88	@ 0x58
 8008ae4:	da0c      	bge.n	8008b00 <__swhatbuf_r+0x2c>
 8008ae6:	89a3      	ldrh	r3, [r4, #12]
 8008ae8:	2100      	movs	r1, #0
 8008aea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008aee:	bf14      	ite	ne
 8008af0:	2340      	movne	r3, #64	@ 0x40
 8008af2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008af6:	2000      	movs	r0, #0
 8008af8:	6031      	str	r1, [r6, #0]
 8008afa:	602b      	str	r3, [r5, #0]
 8008afc:	b016      	add	sp, #88	@ 0x58
 8008afe:	bd70      	pop	{r4, r5, r6, pc}
 8008b00:	466a      	mov	r2, sp
 8008b02:	f000 f849 	bl	8008b98 <_fstat_r>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	dbed      	blt.n	8008ae6 <__swhatbuf_r+0x12>
 8008b0a:	9901      	ldr	r1, [sp, #4]
 8008b0c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b10:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b14:	4259      	negs	r1, r3
 8008b16:	4159      	adcs	r1, r3
 8008b18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b1c:	e7eb      	b.n	8008af6 <__swhatbuf_r+0x22>

08008b1e <__smakebuf_r>:
 8008b1e:	898b      	ldrh	r3, [r1, #12]
 8008b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b22:	079d      	lsls	r5, r3, #30
 8008b24:	4606      	mov	r6, r0
 8008b26:	460c      	mov	r4, r1
 8008b28:	d507      	bpl.n	8008b3a <__smakebuf_r+0x1c>
 8008b2a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b2e:	6023      	str	r3, [r4, #0]
 8008b30:	6123      	str	r3, [r4, #16]
 8008b32:	2301      	movs	r3, #1
 8008b34:	6163      	str	r3, [r4, #20]
 8008b36:	b003      	add	sp, #12
 8008b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b3a:	466a      	mov	r2, sp
 8008b3c:	ab01      	add	r3, sp, #4
 8008b3e:	f7ff ffc9 	bl	8008ad4 <__swhatbuf_r>
 8008b42:	9f00      	ldr	r7, [sp, #0]
 8008b44:	4605      	mov	r5, r0
 8008b46:	4639      	mov	r1, r7
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f7fd fbd3 	bl	80062f4 <_malloc_r>
 8008b4e:	b948      	cbnz	r0, 8008b64 <__smakebuf_r+0x46>
 8008b50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b54:	059a      	lsls	r2, r3, #22
 8008b56:	d4ee      	bmi.n	8008b36 <__smakebuf_r+0x18>
 8008b58:	f023 0303 	bic.w	r3, r3, #3
 8008b5c:	f043 0302 	orr.w	r3, r3, #2
 8008b60:	81a3      	strh	r3, [r4, #12]
 8008b62:	e7e2      	b.n	8008b2a <__smakebuf_r+0xc>
 8008b64:	89a3      	ldrh	r3, [r4, #12]
 8008b66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b6e:	81a3      	strh	r3, [r4, #12]
 8008b70:	9b01      	ldr	r3, [sp, #4]
 8008b72:	6020      	str	r0, [r4, #0]
 8008b74:	b15b      	cbz	r3, 8008b8e <__smakebuf_r+0x70>
 8008b76:	4630      	mov	r0, r6
 8008b78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b7c:	f000 f81e 	bl	8008bbc <_isatty_r>
 8008b80:	b128      	cbz	r0, 8008b8e <__smakebuf_r+0x70>
 8008b82:	89a3      	ldrh	r3, [r4, #12]
 8008b84:	f023 0303 	bic.w	r3, r3, #3
 8008b88:	f043 0301 	orr.w	r3, r3, #1
 8008b8c:	81a3      	strh	r3, [r4, #12]
 8008b8e:	89a3      	ldrh	r3, [r4, #12]
 8008b90:	431d      	orrs	r5, r3
 8008b92:	81a5      	strh	r5, [r4, #12]
 8008b94:	e7cf      	b.n	8008b36 <__smakebuf_r+0x18>
	...

08008b98 <_fstat_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	4d06      	ldr	r5, [pc, #24]	@ (8008bb8 <_fstat_r+0x20>)
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	4608      	mov	r0, r1
 8008ba2:	4611      	mov	r1, r2
 8008ba4:	602b      	str	r3, [r5, #0]
 8008ba6:	f7f9 f8dd 	bl	8001d64 <_fstat>
 8008baa:	1c43      	adds	r3, r0, #1
 8008bac:	d102      	bne.n	8008bb4 <_fstat_r+0x1c>
 8008bae:	682b      	ldr	r3, [r5, #0]
 8008bb0:	b103      	cbz	r3, 8008bb4 <_fstat_r+0x1c>
 8008bb2:	6023      	str	r3, [r4, #0]
 8008bb4:	bd38      	pop	{r3, r4, r5, pc}
 8008bb6:	bf00      	nop
 8008bb8:	2000046c 	.word	0x2000046c

08008bbc <_isatty_r>:
 8008bbc:	b538      	push	{r3, r4, r5, lr}
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	4d05      	ldr	r5, [pc, #20]	@ (8008bd8 <_isatty_r+0x1c>)
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	4608      	mov	r0, r1
 8008bc6:	602b      	str	r3, [r5, #0]
 8008bc8:	f7f9 f8db 	bl	8001d82 <_isatty>
 8008bcc:	1c43      	adds	r3, r0, #1
 8008bce:	d102      	bne.n	8008bd6 <_isatty_r+0x1a>
 8008bd0:	682b      	ldr	r3, [r5, #0]
 8008bd2:	b103      	cbz	r3, 8008bd6 <_isatty_r+0x1a>
 8008bd4:	6023      	str	r3, [r4, #0]
 8008bd6:	bd38      	pop	{r3, r4, r5, pc}
 8008bd8:	2000046c 	.word	0x2000046c

08008bdc <_init>:
 8008bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bde:	bf00      	nop
 8008be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008be2:	bc08      	pop	{r3}
 8008be4:	469e      	mov	lr, r3
 8008be6:	4770      	bx	lr

08008be8 <_fini>:
 8008be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bea:	bf00      	nop
 8008bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bee:	bc08      	pop	{r3}
 8008bf0:	469e      	mov	lr, r3
 8008bf2:	4770      	bx	lr
