
Verici.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000842c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  08008540  08008540  00009540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089e0  080089e0  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080089e0  080089e0  000099e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089e8  080089e8  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089e8  080089e8  000099e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089ec  080089ec  000099ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080089f0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  200001d8  08008bc4  0000a1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08008bc4  0000a42c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e69  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa2  00000000  00000000  00014066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  00016008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000901  00000000  00000000  00016bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018827  00000000  00000000  000174d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c143  00000000  00000000  0002fcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aad9  00000000  00000000  0003be3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6914  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004624  00000000  00000000  000c6958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000caf7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008524 	.word	0x08008524

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08008524 	.word	0x08008524

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_d2lz>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	2200      	movs	r2, #0
 8001160:	2300      	movs	r3, #0
 8001162:	4604      	mov	r4, r0
 8001164:	460d      	mov	r5, r1
 8001166:	f7ff fc29 	bl	80009bc <__aeabi_dcmplt>
 800116a:	b928      	cbnz	r0, 8001178 <__aeabi_d2lz+0x1c>
 800116c:	4620      	mov	r0, r4
 800116e:	4629      	mov	r1, r5
 8001170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001174:	f000 b80a 	b.w	800118c <__aeabi_d2ulz>
 8001178:	4620      	mov	r0, r4
 800117a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800117e:	f000 f805 	bl	800118c <__aeabi_d2ulz>
 8001182:	4240      	negs	r0, r0
 8001184:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001188:	bd38      	pop	{r3, r4, r5, pc}
 800118a:	bf00      	nop

0800118c <__aeabi_d2ulz>:
 800118c:	b5d0      	push	{r4, r6, r7, lr}
 800118e:	2200      	movs	r2, #0
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <__aeabi_d2ulz+0x34>)
 8001192:	4606      	mov	r6, r0
 8001194:	460f      	mov	r7, r1
 8001196:	f7ff f99f 	bl	80004d8 <__aeabi_dmul>
 800119a:	f7ff fc75 	bl	8000a88 <__aeabi_d2uiz>
 800119e:	4604      	mov	r4, r0
 80011a0:	f7ff f920 	bl	80003e4 <__aeabi_ui2d>
 80011a4:	2200      	movs	r2, #0
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <__aeabi_d2ulz+0x38>)
 80011a8:	f7ff f996 	bl	80004d8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4630      	mov	r0, r6
 80011b2:	4639      	mov	r1, r7
 80011b4:	f7fe ffd8 	bl	8000168 <__aeabi_dsub>
 80011b8:	f7ff fc66 	bl	8000a88 <__aeabi_d2uiz>
 80011bc:	4621      	mov	r1, r4
 80011be:	bdd0      	pop	{r4, r6, r7, pc}
 80011c0:	3df00000 	.word	0x3df00000
 80011c4:	41f00000 	.word	0x41f00000

080011c8 <delay>:
/****************** define the timer handler below  **************/
#define timer htim1

extern TIM_HandleTypeDef timer;

void delay(uint16_t us) {
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&timer, 0);
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <delay+0x2c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&timer) < us);
 80011da:	bf00      	nop
 80011dc:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <delay+0x2c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d3f9      	bcc.n	80011dc <delay+0x14>
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	200001f4 	.word	0x200001f4

080011f8 <send_to_lcd>:

void send_to_lcd(char data, int rs) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	461a      	mov	r2, r3
 800120a:	2102      	movs	r1, #2
 800120c:	4820      	ldr	r0, [pc, #128]	@ (8001290 <send_to_lcd+0x98>)
 800120e:	f001 fad7 	bl	80027c0 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data >> 3) & 0x01));
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	08db      	lsrs	r3, r3, #3
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	b2db      	uxtb	r3, r3
 800121e:	461a      	mov	r2, r3
 8001220:	2180      	movs	r1, #128	@ 0x80
 8001222:	481b      	ldr	r0, [pc, #108]	@ (8001290 <send_to_lcd+0x98>)
 8001224:	f001 facc 	bl	80027c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data >> 2) & 0x01));
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	b2db      	uxtb	r3, r3
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	2140      	movs	r1, #64	@ 0x40
 8001238:	4815      	ldr	r0, [pc, #84]	@ (8001290 <send_to_lcd+0x98>)
 800123a:	f001 fac1 	bl	80027c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data >> 1) & 0x01));
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	085b      	lsrs	r3, r3, #1
 8001242:	b2db      	uxtb	r3, r3
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	b2db      	uxtb	r3, r3
 800124a:	461a      	mov	r2, r3
 800124c:	2120      	movs	r1, #32
 800124e:	4810      	ldr	r0, [pc, #64]	@ (8001290 <send_to_lcd+0x98>)
 8001250:	f001 fab6 	bl	80027c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data >> 0) & 0x01));
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	b2db      	uxtb	r3, r3
 800125c:	461a      	mov	r2, r3
 800125e:	2110      	movs	r1, #16
 8001260:	480b      	ldr	r0, [pc, #44]	@ (8001290 <send_to_lcd+0x98>)
 8001262:	f001 faad 	bl	80027c0 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8001266:	2201      	movs	r2, #1
 8001268:	2108      	movs	r1, #8
 800126a:	4809      	ldr	r0, [pc, #36]	@ (8001290 <send_to_lcd+0x98>)
 800126c:	f001 faa8 	bl	80027c0 <HAL_GPIO_WritePin>
    delay(20);
 8001270:	2014      	movs	r0, #20
 8001272:	f7ff ffa9 	bl	80011c8 <delay>
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2108      	movs	r1, #8
 800127a:	4805      	ldr	r0, [pc, #20]	@ (8001290 <send_to_lcd+0x98>)
 800127c:	f001 faa0 	bl	80027c0 <HAL_GPIO_WritePin>
    delay(20);
 8001280:	2014      	movs	r0, #20
 8001282:	f7ff ffa1 	bl	80011c8 <delay>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40010800 	.word	0x40010800

08001294 <lcd_send_cmd>:

void lcd_send_cmd(char cmd) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
    char datatosend;
    datatosend = ((cmd >> 4) & 0x0f);
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	091b      	lsrs	r3, r3, #4
 80012a2:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend, 0);
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ffa5 	bl	80011f8 <send_to_lcd>
    datatosend = (cmd & 0x0f);
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	f003 030f 	and.w	r3, r3, #15
 80012b4:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend, 0);
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff9c 	bl	80011f8 <send_to_lcd>
}
 80012c0:	bf00      	nop
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <lcd_send_data>:

void lcd_send_data(char data) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
    char datatosend;
    datatosend = ((data >> 4) & 0x0f);
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	091b      	lsrs	r3, r3, #4
 80012d6:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend, 1);
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	2101      	movs	r1, #1
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff8b 	bl	80011f8 <send_to_lcd>
    datatosend = (data & 0x0f);
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	f003 030f 	and.w	r3, r3, #15
 80012e8:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend, 1);
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	2101      	movs	r1, #1
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff82 	bl	80011f8 <send_to_lcd>
}
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <lcd_clear>:

void lcd_clear(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8001300:	2001      	movs	r0, #1
 8001302:	f7ff ffc7 	bl	8001294 <lcd_send_cmd>
    HAL_Delay(2);
 8001306:	2002      	movs	r0, #2
 8001308:	f000 fe26 	bl	8001f58 <HAL_Delay>
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}

08001310 <lcd_put_cur>:

void lcd_put_cur(int row, int col) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
    switch (row) {
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <lcd_put_cur+0x18>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d005      	beq.n	8001332 <lcd_put_cur+0x22>
 8001326:	e009      	b.n	800133c <lcd_put_cur+0x2c>
        case 0:
            col |= 0x80;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800132e:	603b      	str	r3, [r7, #0]
            break;
 8001330:	e004      	b.n	800133c <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001338:	603b      	str	r3, [r7, #0]
            break;
 800133a:	bf00      	nop
    }
    lcd_send_cmd(col);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ffa7 	bl	8001294 <lcd_send_cmd>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <lcd_init>:

void lcd_init(void) {
 800134e:	b580      	push	{r7, lr}
 8001350:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 8001352:	2032      	movs	r0, #50	@ 0x32
 8001354:	f000 fe00 	bl	8001f58 <HAL_Delay>
    lcd_send_cmd(0x30);
 8001358:	2030      	movs	r0, #48	@ 0x30
 800135a:	f7ff ff9b 	bl	8001294 <lcd_send_cmd>
    HAL_Delay(5);
 800135e:	2005      	movs	r0, #5
 8001360:	f000 fdfa 	bl	8001f58 <HAL_Delay>
    lcd_send_cmd(0x30);
 8001364:	2030      	movs	r0, #48	@ 0x30
 8001366:	f7ff ff95 	bl	8001294 <lcd_send_cmd>
    HAL_Delay(1);
 800136a:	2001      	movs	r0, #1
 800136c:	f000 fdf4 	bl	8001f58 <HAL_Delay>
    lcd_send_cmd(0x30);
 8001370:	2030      	movs	r0, #48	@ 0x30
 8001372:	f7ff ff8f 	bl	8001294 <lcd_send_cmd>
    HAL_Delay(10);
 8001376:	200a      	movs	r0, #10
 8001378:	f000 fdee 	bl	8001f58 <HAL_Delay>
    lcd_send_cmd(0x20);
 800137c:	2020      	movs	r0, #32
 800137e:	f7ff ff89 	bl	8001294 <lcd_send_cmd>
    HAL_Delay(10);
 8001382:	200a      	movs	r0, #10
 8001384:	f000 fde8 	bl	8001f58 <HAL_Delay>

    lcd_send_cmd(0x28);
 8001388:	2028      	movs	r0, #40	@ 0x28
 800138a:	f7ff ff83 	bl	8001294 <lcd_send_cmd>
    HAL_Delay(1);
 800138e:	2001      	movs	r0, #1
 8001390:	f000 fde2 	bl	8001f58 <HAL_Delay>
    lcd_send_cmd(0x08);
 8001394:	2008      	movs	r0, #8
 8001396:	f7ff ff7d 	bl	8001294 <lcd_send_cmd>
    HAL_Delay(1);
 800139a:	2001      	movs	r0, #1
 800139c:	f000 fddc 	bl	8001f58 <HAL_Delay>
    lcd_send_cmd(0x01);
 80013a0:	2001      	movs	r0, #1
 80013a2:	f7ff ff77 	bl	8001294 <lcd_send_cmd>
    HAL_Delay(1);
 80013a6:	2001      	movs	r0, #1
 80013a8:	f000 fdd6 	bl	8001f58 <HAL_Delay>
    HAL_Delay(1);
 80013ac:	2001      	movs	r0, #1
 80013ae:	f000 fdd3 	bl	8001f58 <HAL_Delay>
    lcd_send_cmd(0x06);
 80013b2:	2006      	movs	r0, #6
 80013b4:	f7ff ff6e 	bl	8001294 <lcd_send_cmd>
    HAL_Delay(1);
 80013b8:	2001      	movs	r0, #1
 80013ba:	f000 fdcd 	bl	8001f58 <HAL_Delay>
    lcd_send_cmd(0x0C);
 80013be:	200c      	movs	r0, #12
 80013c0:	f7ff ff68 	bl	8001294 <lcd_send_cmd>
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <lcd_send_string>:
        lcd_put_cur(row, column);
        lcd_send_data(0);
    }
}

void lcd_send_string(char *str) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data(*str++);
 80013d0:	e006      	b.n	80013e0 <lcd_send_string+0x18>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	607a      	str	r2, [r7, #4]
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff74 	bl	80012c8 <lcd_send_data>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f4      	bne.n	80013d2 <lcd_send_string+0xa>
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_TIM_IC_CaptureCallback>:
*/



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7f1b      	ldrb	r3, [r3, #28]
 8001400:	2b08      	cmp	r3, #8
 8001402:	d148      	bne.n	8001496 <HAL_TIM_IC_CaptureCallback+0xa2>
	{
		if (Is_First_Captured==0) // if the first rising edge is not captured
 8001404:	4b26      	ldr	r3, [pc, #152]	@ (80014a0 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d10a      	bne.n	8001422 <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read the first value
 800140c:	210c      	movs	r1, #12
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f002 fa1e 	bl	8003850 <HAL_TIM_ReadCapturedValue>
 8001414:	4603      	mov	r3, r0
 8001416:	4a23      	ldr	r2, [pc, #140]	@ (80014a4 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001418:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 800141a:	4b21      	ldr	r3, [pc, #132]	@ (80014a0 <HAL_TIM_IC_CaptureCallback+0xac>)
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]

			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured = 0; // set it back to false
		}
	}
}
 8001420:	e039      	b.n	8001496 <HAL_TIM_IC_CaptureCallback+0xa2>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 8001422:	210c      	movs	r1, #12
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f002 fa13 	bl	8003850 <HAL_TIM_ReadCapturedValue>
 800142a:	4603      	mov	r3, r0
 800142c:	4a1e      	ldr	r2, [pc, #120]	@ (80014a8 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800142e:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 8001430:	4b1d      	ldr	r3, [pc, #116]	@ (80014a8 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	429a      	cmp	r2, r3
 800143a:	d907      	bls.n	800144c <HAL_TIM_IC_CaptureCallback+0x58>
				Difference = IC_Val2-IC_Val1;
 800143c:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	4a19      	ldr	r2, [pc, #100]	@ (80014ac <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e00d      	b.n	8001468 <HAL_TIM_IC_CaptureCallback+0x74>
			else if (IC_Val1 > IC_Val2)
 800144c:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d907      	bls.n	8001468 <HAL_TIM_IC_CaptureCallback+0x74>
				Difference = (0xffffffff - IC_Val1) + IC_Val2;
 8001458:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	3b01      	subs	r3, #1
 8001464:	4a11      	ldr	r2, [pc, #68]	@ (80014ac <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001466:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 8001468:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800146a:	60fb      	str	r3, [r7, #12]
			frequency = refClock/Difference;
 800146c:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <HAL_TIM_IC_CaptureCallback+0xb8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fc2f 	bl	8000cd4 <__aeabi_ui2f>
 8001476:	4603      	mov	r3, r0
 8001478:	4619      	mov	r1, r3
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f7ff fd36 	bl	8000eec <__aeabi_fdiv>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001486:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2200      	movs	r2, #0
 800148e:	625a      	str	r2, [r3, #36]	@ 0x24
			Is_First_Captured = 0; // set it back to false
 8001490:	4b03      	ldr	r3, [pc, #12]	@ (80014a0 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000290 	.word	0x20000290
 80014a4:	20000284 	.word	0x20000284
 80014a8:	20000288 	.word	0x20000288
 80014ac:	2000028c 	.word	0x2000028c
 80014b0:	49742400 	.word	0x49742400
 80014b4:	20000294 	.word	0x20000294

080014b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	@ 0x28
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014be:	f000 fce9 	bl	8001e94 <HAL_Init>
  //lcd_clear();

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c2:	f000 f941 	bl	8001748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c6:	f000 fa45 	bl	8001954 <MX_GPIO_Init>
  MX_TIM1_Init();
 80014ca:	f000 f983 	bl	80017d4 <MX_TIM1_Init>
  MX_TIM4_Init();
 80014ce:	f000 f9d1 	bl	8001874 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80014d2:	4891      	ldr	r0, [pc, #580]	@ (8001718 <main+0x260>)
 80014d4:	f001 fdba 	bl	800304c <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 80014d8:	210c      	movs	r1, #12
 80014da:	4890      	ldr	r0, [pc, #576]	@ (800171c <main+0x264>)
 80014dc:	f001 fe58 	bl	8003190 <HAL_TIM_IC_Start_IT>

  lcd_init();
 80014e0:	f7ff ff35 	bl	800134e <lcd_init>
   lcd_put_cur(0, 0);
 80014e4:	2100      	movs	r1, #0
 80014e6:	2000      	movs	r0, #0
 80014e8:	f7ff ff12 	bl	8001310 <lcd_put_cur>
   lcd_send_string("TUBITAK2209-A ");
 80014ec:	488c      	ldr	r0, [pc, #560]	@ (8001720 <main+0x268>)
 80014ee:	f7ff ff6b 	bl	80013c8 <lcd_send_string>
   HAL_Delay(1000);
 80014f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014f6:	f000 fd2f 	bl	8001f58 <HAL_Delay>
   lcd_put_cur(1, 0);
 80014fa:	2100      	movs	r1, #0
 80014fc:	2001      	movs	r0, #1
 80014fe:	f7ff ff07 	bl	8001310 <lcd_put_cur>
   lcd_send_string("----->AMKS<----- ");
 8001502:	4888      	ldr	r0, [pc, #544]	@ (8001724 <main+0x26c>)
 8001504:	f7ff ff60 	bl	80013c8 <lcd_send_string>
   HAL_Delay(2000);
 8001508:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800150c:	f000 fd24 	bl	8001f58 <HAL_Delay>
   lcd_clear();
 8001510:	f7ff fef4 	bl	80012fc <lcd_clear>

   lcd_put_cur(0, 0);
 8001514:	2100      	movs	r1, #0
 8001516:	2000      	movs	r0, #0
 8001518:	f7ff fefa 	bl	8001310 <lcd_put_cur>
   lcd_send_string("Frekans:");
 800151c:	4882      	ldr	r0, [pc, #520]	@ (8001728 <main+0x270>)
 800151e:	f7ff ff53 	bl	80013c8 <lcd_send_string>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

int fark38;
int fark37;
float f37=1;
 8001522:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24
float f38=1;
 8001528:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800152c:	623b      	str	r3, [r7, #32]
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001534:	487d      	ldr	r0, [pc, #500]	@ (800172c <main+0x274>)
 8001536:	f001 f943 	bl	80027c0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001540:	487a      	ldr	r0, [pc, #488]	@ (800172c <main+0x274>)
 8001542:	f001 f93d 	bl	80027c0 <HAL_GPIO_WritePin>
float oran=0;
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
float eskioran=0;
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
int artis=0;
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
int say1=0;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
int say0=0;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //sprintf(data, "%lu Hz", (unsigned long)Difference);
	  sprintf(data, "%d Hz", (int)frequency);  // %.2f = 2 basamak hassasiyet
 800155e:	4b74      	ldr	r3, [pc, #464]	@ (8001730 <main+0x278>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fdd4 	bl	8001110 <__aeabi_f2iz>
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	4971      	ldr	r1, [pc, #452]	@ (8001734 <main+0x27c>)
 800156e:	4872      	ldr	r0, [pc, #456]	@ (8001738 <main+0x280>)
 8001570:	f003 fbaa 	bl	8004cc8 <siprintf>
	   lcd_put_cur(0, 0);
 8001574:	2100      	movs	r1, #0
 8001576:	2000      	movs	r0, #0
 8001578:	f7ff feca 	bl	8001310 <lcd_put_cur>
	   lcd_send_string("Frekans:");
 800157c:	486a      	ldr	r0, [pc, #424]	@ (8001728 <main+0x270>)
 800157e:	f7ff ff23 	bl	80013c8 <lcd_send_string>
	   lcd_put_cur(0, 8);
 8001582:	2108      	movs	r1, #8
 8001584:	2000      	movs	r0, #0
 8001586:	f7ff fec3 	bl	8001310 <lcd_put_cur>
	   lcd_send_string(data);
 800158a:	486b      	ldr	r0, [pc, #428]	@ (8001738 <main+0x280>)
 800158c:	f7ff ff1c 	bl	80013c8 <lcd_send_string>
	   HAL_Delay(10);
 8001590:	200a      	movs	r0, #10
 8001592:	f000 fce1 	bl	8001f58 <HAL_Delay>
	   lcd_clear();
 8001596:	f7ff feb1 	bl	80012fc <lcd_clear>

	   fark38=(int)frequency-38400;
 800159a:	4b65      	ldr	r3, [pc, #404]	@ (8001730 <main+0x278>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fdb6 	bl	8001110 <__aeabi_f2iz>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f5a3 4316 	sub.w	r3, r3, #38400	@ 0x9600
 80015aa:	60bb      	str	r3, [r7, #8]
	   fark37=(int)frequency-37100;
 80015ac:	4b60      	ldr	r3, [pc, #384]	@ (8001730 <main+0x278>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fdad 	bl	8001110 <__aeabi_f2iz>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f5a3 4310 	sub.w	r3, r3, #36864	@ 0x9000
 80015bc:	3bec      	subs	r3, #236	@ 0xec
 80015be:	607b      	str	r3, [r7, #4]



	   if(abs(fark38) <=500){
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 80015c6:	db0b      	blt.n	80015e0 <main+0x128>
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015ce:	dc07      	bgt.n	80015e0 <main+0x128>
		   f38++;
 80015d0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80015d4:	6a38      	ldr	r0, [r7, #32]
 80015d6:	f7ff facd 	bl	8000b74 <__addsf3>
 80015da:	4603      	mov	r3, r0
 80015dc:	623b      	str	r3, [r7, #32]
 80015de:	e00e      	b.n	80015fe <main+0x146>

	   }
	   else if(abs(fark37) <=500){
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 80015e6:	db0a      	blt.n	80015fe <main+0x146>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015ee:	dc06      	bgt.n	80015fe <main+0x146>
		   f37++;
 80015f0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80015f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015f6:	f7ff fabd 	bl	8000b74 <__addsf3>
 80015fa:	4603      	mov	r3, r0
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24

	   }

	   oran=f38/f37;
 80015fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001600:	6a38      	ldr	r0, [r7, #32]
 8001602:	f7ff fc73 	bl	8000eec <__aeabi_fdiv>
 8001606:	4603      	mov	r3, r0
 8001608:	60fb      	str	r3, [r7, #12]
	   if(oran>eskioran){
 800160a:	69f9      	ldr	r1, [r7, #28]
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f7ff fd75 	bl	80010fc <__aeabi_fcmpgt>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d004      	beq.n	8001622 <main+0x16a>
		   artis=1;
 8001618:	2301      	movs	r3, #1
 800161a:	61bb      	str	r3, [r7, #24]
		   eskioran=oran;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	61fb      	str	r3, [r7, #28]
 8001620:	e01a      	b.n	8001658 <main+0x1a0>
	   }

	   else if(oran<eskioran){
 8001622:	69f9      	ldr	r1, [r7, #28]
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f7ff fd4b 	bl	80010c0 <__aeabi_fcmplt>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d004      	beq.n	800163a <main+0x182>
		   artis=0;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
		   eskioran=oran;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	61fb      	str	r3, [r7, #28]
 8001638:	e00e      	b.n	8001658 <main+0x1a0>
	   }

	   else{
		   artis=-1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800163e:	61bb      	str	r3, [r7, #24]

		   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8001640:	2200      	movs	r2, #0
 8001642:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001646:	4839      	ldr	r0, [pc, #228]	@ (800172c <main+0x274>)
 8001648:	f001 f8ba 	bl	80027c0 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001652:	4836      	ldr	r0, [pc, #216]	@ (800172c <main+0x274>)
 8001654:	f001 f8b4 	bl	80027c0 <HAL_GPIO_WritePin>
	   }

	   if(artis==1){
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d116      	bne.n	800168c <main+0x1d4>
		   say1++;
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
		   if(say1>=10){
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	2b09      	cmp	r3, #9
 8001668:	dd29      	ble.n	80016be <main+0x206>
			   say1=0;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
			   say0=0;
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
			   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001678:	482c      	ldr	r0, [pc, #176]	@ (800172c <main+0x274>)
 800167a:	f001 f8a1 	bl	80027c0 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 800167e:	2201      	movs	r2, #1
 8001680:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001684:	4829      	ldr	r0, [pc, #164]	@ (800172c <main+0x274>)
 8001686:	f001 f89b 	bl	80027c0 <HAL_GPIO_WritePin>
 800168a:	e018      	b.n	80016be <main+0x206>
		   }

	   }

	   else if(artis==0){
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d115      	bne.n	80016be <main+0x206>
		   say0++;
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	3301      	adds	r3, #1
 8001696:	613b      	str	r3, [r7, #16]
		   if(say0>=10){
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	2b09      	cmp	r3, #9
 800169c:	dd0f      	ble.n	80016be <main+0x206>
			   say0=0;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
			   say1=0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
			   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 80016a6:	2201      	movs	r2, #1
 80016a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016ac:	481f      	ldr	r0, [pc, #124]	@ (800172c <main+0x274>)
 80016ae:	f001 f887 	bl	80027c0 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016b8:	481c      	ldr	r0, [pc, #112]	@ (800172c <main+0x274>)
 80016ba:	f001 f881 	bl	80027c0 <HAL_GPIO_WritePin>
		   }
	   }

	   if(f38>=200){
 80016be:	491f      	ldr	r1, [pc, #124]	@ (800173c <main+0x284>)
 80016c0:	6a38      	ldr	r0, [r7, #32]
 80016c2:	f7ff fd11 	bl	80010e8 <__aeabi_fcmpge>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d002      	beq.n	80016d2 <main+0x21a>
		   f38=1;
 80016cc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80016d0:	623b      	str	r3, [r7, #32]
	   }
	   if(f37>=200){
 80016d2:	491a      	ldr	r1, [pc, #104]	@ (800173c <main+0x284>)
 80016d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80016d6:	f7ff fd07 	bl	80010e8 <__aeabi_fcmpge>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <main+0x22e>
		   f37=1;
 80016e0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80016e4:	627b      	str	r3, [r7, #36]	@ 0x24
	   }

	   lcd_put_cur(1, 0);
 80016e6:	2100      	movs	r1, #0
 80016e8:	2001      	movs	r0, #1
 80016ea:	f7ff fe11 	bl	8001310 <lcd_put_cur>
	   lcd_send_string("F_38/F_37:");
 80016ee:	4814      	ldr	r0, [pc, #80]	@ (8001740 <main+0x288>)
 80016f0:	f7ff fe6a 	bl	80013c8 <lcd_send_string>
	   sprintf(data, "%.2f", oran);
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f7fe fe97 	bl	8000428 <__aeabi_f2d>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4911      	ldr	r1, [pc, #68]	@ (8001744 <main+0x28c>)
 8001700:	480d      	ldr	r0, [pc, #52]	@ (8001738 <main+0x280>)
 8001702:	f003 fae1 	bl	8004cc8 <siprintf>
	   lcd_put_cur(1, 10);
 8001706:	210a      	movs	r1, #10
 8001708:	2001      	movs	r0, #1
 800170a:	f7ff fe01 	bl	8001310 <lcd_put_cur>
	   lcd_send_string(data);
 800170e:	480a      	ldr	r0, [pc, #40]	@ (8001738 <main+0x280>)
 8001710:	f7ff fe5a 	bl	80013c8 <lcd_send_string>
	  sprintf(data, "%d Hz", (int)frequency);  // %.2f = 2 basamak hassasiyet
 8001714:	e723      	b.n	800155e <main+0xa6>
 8001716:	bf00      	nop
 8001718:	200001f4 	.word	0x200001f4
 800171c:	2000023c 	.word	0x2000023c
 8001720:	08008540 	.word	0x08008540
 8001724:	08008550 	.word	0x08008550
 8001728:	08008564 	.word	0x08008564
 800172c:	40010c00 	.word	0x40010c00
 8001730:	20000294 	.word	0x20000294
 8001734:	08008570 	.word	0x08008570
 8001738:	20000298 	.word	0x20000298
 800173c:	43480000 	.word	0x43480000
 8001740:	08008578 	.word	0x08008578
 8001744:	08008584 	.word	0x08008584

08001748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b090      	sub	sp, #64	@ 0x40
 800174c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800174e:	f107 0318 	add.w	r3, r7, #24
 8001752:	2228      	movs	r2, #40	@ 0x28
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f003 fb19 	bl	8004d8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800176a:	2301      	movs	r3, #1
 800176c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800176e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001772:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001778:	2301      	movs	r3, #1
 800177a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800177c:	2302      	movs	r3, #2
 800177e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001780:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001784:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001786:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800178a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178c:	f107 0318 	add.w	r3, r7, #24
 8001790:	4618      	mov	r0, r3
 8001792:	f001 f82d 	bl	80027f0 <HAL_RCC_OscConfig>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800179c:	f000 f95e 	bl	8001a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a0:	230f      	movs	r3, #15
 80017a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a4:	2302      	movs	r3, #2
 80017a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	2102      	movs	r1, #2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f001 fa9a 	bl	8002cf4 <HAL_RCC_ClockConfig>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80017c6:	f000 f949 	bl	8001a5c <Error_Handler>
  }
}
 80017ca:	bf00      	nop
 80017cc:	3740      	adds	r7, #64	@ 0x40
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017da:	f107 0308 	add.w	r3, r7, #8
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e8:	463b      	mov	r3, r7
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017f0:	4b1e      	ldr	r3, [pc, #120]	@ (800186c <MX_TIM1_Init+0x98>)
 80017f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001870 <MX_TIM1_Init+0x9c>)
 80017f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80017f6:	4b1d      	ldr	r3, [pc, #116]	@ (800186c <MX_TIM1_Init+0x98>)
 80017f8:	2247      	movs	r2, #71	@ 0x47
 80017fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fc:	4b1b      	ldr	r3, [pc, #108]	@ (800186c <MX_TIM1_Init+0x98>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001802:	4b1a      	ldr	r3, [pc, #104]	@ (800186c <MX_TIM1_Init+0x98>)
 8001804:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001808:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180a:	4b18      	ldr	r3, [pc, #96]	@ (800186c <MX_TIM1_Init+0x98>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001810:	4b16      	ldr	r3, [pc, #88]	@ (800186c <MX_TIM1_Init+0x98>)
 8001812:	2200      	movs	r2, #0
 8001814:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001816:	4b15      	ldr	r3, [pc, #84]	@ (800186c <MX_TIM1_Init+0x98>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800181c:	4813      	ldr	r0, [pc, #76]	@ (800186c <MX_TIM1_Init+0x98>)
 800181e:	f001 fbc5 	bl	8002fac <HAL_TIM_Base_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001828:	f000 f918 	bl	8001a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800182c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001830:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001832:	f107 0308 	add.w	r3, r7, #8
 8001836:	4619      	mov	r1, r3
 8001838:	480c      	ldr	r0, [pc, #48]	@ (800186c <MX_TIM1_Init+0x98>)
 800183a:	f001 ff41 	bl	80036c0 <HAL_TIM_ConfigClockSource>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001844:	f000 f90a 	bl	8001a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001848:	2300      	movs	r3, #0
 800184a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001850:	463b      	mov	r3, r7
 8001852:	4619      	mov	r1, r3
 8001854:	4805      	ldr	r0, [pc, #20]	@ (800186c <MX_TIM1_Init+0x98>)
 8001856:	f002 fa99 	bl	8003d8c <HAL_TIMEx_MasterConfigSynchronization>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001860:	f000 f8fc 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	200001f4 	.word	0x200001f4
 8001870:	40012c00 	.word	0x40012c00

08001874 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	@ 0x28
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800187a:	f107 0318 	add.w	r3, r7, #24
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001888:	f107 0310 	add.w	r3, r7, #16
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001892:	463b      	mov	r3, r7
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800189e:	4b2b      	ldr	r3, [pc, #172]	@ (800194c <MX_TIM4_Init+0xd8>)
 80018a0:	4a2b      	ldr	r2, [pc, #172]	@ (8001950 <MX_TIM4_Init+0xdc>)
 80018a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80018a4:	4b29      	ldr	r3, [pc, #164]	@ (800194c <MX_TIM4_Init+0xd8>)
 80018a6:	2247      	movs	r2, #71	@ 0x47
 80018a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018aa:	4b28      	ldr	r3, [pc, #160]	@ (800194c <MX_TIM4_Init+0xd8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 80018b0:	4b26      	ldr	r3, [pc, #152]	@ (800194c <MX_TIM4_Init+0xd8>)
 80018b2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80018b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b8:	4b24      	ldr	r3, [pc, #144]	@ (800194c <MX_TIM4_Init+0xd8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018be:	4b23      	ldr	r3, [pc, #140]	@ (800194c <MX_TIM4_Init+0xd8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018c4:	4821      	ldr	r0, [pc, #132]	@ (800194c <MX_TIM4_Init+0xd8>)
 80018c6:	f001 fb71 	bl	8002fac <HAL_TIM_Base_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80018d0:	f000 f8c4 	bl	8001a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018d8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018da:	f107 0318 	add.w	r3, r7, #24
 80018de:	4619      	mov	r1, r3
 80018e0:	481a      	ldr	r0, [pc, #104]	@ (800194c <MX_TIM4_Init+0xd8>)
 80018e2:	f001 feed 	bl	80036c0 <HAL_TIM_ConfigClockSource>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80018ec:	f000 f8b6 	bl	8001a5c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80018f0:	4816      	ldr	r0, [pc, #88]	@ (800194c <MX_TIM4_Init+0xd8>)
 80018f2:	f001 fbf5 	bl	80030e0 <HAL_TIM_IC_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80018fc:	f000 f8ae 	bl	8001a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001908:	f107 0310 	add.w	r3, r7, #16
 800190c:	4619      	mov	r1, r3
 800190e:	480f      	ldr	r0, [pc, #60]	@ (800194c <MX_TIM4_Init+0xd8>)
 8001910:	f002 fa3c 	bl	8003d8c <HAL_TIMEx_MasterConfigSynchronization>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 800191a:	f000 f89f 	bl	8001a5c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800191e:	2302      	movs	r3, #2
 8001920:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001922:	2301      	movs	r3, #1
 8001924:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800192e:	463b      	mov	r3, r7
 8001930:	220c      	movs	r2, #12
 8001932:	4619      	mov	r1, r3
 8001934:	4805      	ldr	r0, [pc, #20]	@ (800194c <MX_TIM4_Init+0xd8>)
 8001936:	f001 fe27 	bl	8003588 <HAL_TIM_IC_ConfigChannel>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001940:	f000 f88c 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	3728      	adds	r7, #40	@ 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2000023c 	.word	0x2000023c
 8001950:	40000800 	.word	0x40000800

08001954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195a:	f107 0310 	add.w	r3, r7, #16
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001968:	4b38      	ldr	r3, [pc, #224]	@ (8001a4c <MX_GPIO_Init+0xf8>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	4a37      	ldr	r2, [pc, #220]	@ (8001a4c <MX_GPIO_Init+0xf8>)
 800196e:	f043 0310 	orr.w	r3, r3, #16
 8001972:	6193      	str	r3, [r2, #24]
 8001974:	4b35      	ldr	r3, [pc, #212]	@ (8001a4c <MX_GPIO_Init+0xf8>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001980:	4b32      	ldr	r3, [pc, #200]	@ (8001a4c <MX_GPIO_Init+0xf8>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a31      	ldr	r2, [pc, #196]	@ (8001a4c <MX_GPIO_Init+0xf8>)
 8001986:	f043 0320 	orr.w	r3, r3, #32
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b2f      	ldr	r3, [pc, #188]	@ (8001a4c <MX_GPIO_Init+0xf8>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0320 	and.w	r3, r3, #32
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001998:	4b2c      	ldr	r3, [pc, #176]	@ (8001a4c <MX_GPIO_Init+0xf8>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	4a2b      	ldr	r2, [pc, #172]	@ (8001a4c <MX_GPIO_Init+0xf8>)
 800199e:	f043 0304 	orr.w	r3, r3, #4
 80019a2:	6193      	str	r3, [r2, #24]
 80019a4:	4b29      	ldr	r3, [pc, #164]	@ (8001a4c <MX_GPIO_Init+0xf8>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b0:	4b26      	ldr	r3, [pc, #152]	@ (8001a4c <MX_GPIO_Init+0xf8>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	4a25      	ldr	r2, [pc, #148]	@ (8001a4c <MX_GPIO_Init+0xf8>)
 80019b6:	f043 0308 	orr.w	r3, r3, #8
 80019ba:	6193      	str	r3, [r2, #24]
 80019bc:	4b23      	ldr	r3, [pc, #140]	@ (8001a4c <MX_GPIO_Init+0xf8>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019c8:	2200      	movs	r2, #0
 80019ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019ce:	4820      	ldr	r0, [pc, #128]	@ (8001a50 <MX_GPIO_Init+0xfc>)
 80019d0:	f000 fef6 	bl	80027c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80019d4:	2200      	movs	r2, #0
 80019d6:	21fe      	movs	r1, #254	@ 0xfe
 80019d8:	481e      	ldr	r0, [pc, #120]	@ (8001a54 <MX_GPIO_Init+0x100>)
 80019da:	f000 fef1 	bl	80027c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80019de:	2200      	movs	r2, #0
 80019e0:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80019e4:	481c      	ldr	r0, [pc, #112]	@ (8001a58 <MX_GPIO_Init+0x104>)
 80019e6:	f000 feeb 	bl	80027c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f0:	2301      	movs	r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2302      	movs	r3, #2
 80019fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	4619      	mov	r1, r3
 8001a02:	4813      	ldr	r0, [pc, #76]	@ (8001a50 <MX_GPIO_Init+0xfc>)
 8001a04:	f000 fd58 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001a08:	23fe      	movs	r3, #254	@ 0xfe
 8001a0a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2302      	movs	r3, #2
 8001a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480d      	ldr	r0, [pc, #52]	@ (8001a54 <MX_GPIO_Init+0x100>)
 8001a20:	f000 fd4a 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a24:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2302      	movs	r3, #2
 8001a34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a36:	f107 0310 	add.w	r3, r7, #16
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4806      	ldr	r0, [pc, #24]	@ (8001a58 <MX_GPIO_Init+0x104>)
 8001a3e:	f000 fd3b 	bl	80024b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a42:	bf00      	nop
 8001a44:	3720      	adds	r7, #32
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40011000 	.word	0x40011000
 8001a54:	40010800 	.word	0x40010800
 8001a58:	40010c00 	.word	0x40010c00

08001a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a60:	b672      	cpsid	i
}
 8001a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <Error_Handler+0x8>

08001a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae4 <HAL_MspInit+0x7c>)
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae4 <HAL_MspInit+0x7c>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6193      	str	r3, [r2, #24]
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae4 <HAL_MspInit+0x7c>)
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a86:	4b17      	ldr	r3, [pc, #92]	@ (8001ae4 <HAL_MspInit+0x7c>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	4a16      	ldr	r2, [pc, #88]	@ (8001ae4 <HAL_MspInit+0x7c>)
 8001a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a90:	61d3      	str	r3, [r2, #28]
 8001a92:	4b14      	ldr	r3, [pc, #80]	@ (8001ae4 <HAL_MspInit+0x7c>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2004      	movs	r0, #4
 8001aa4:	f000 fb53 	bl	800214e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001aa8:	2004      	movs	r0, #4
 8001aaa:	f000 fb6c 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2005      	movs	r0, #5
 8001ab4:	f000 fb4b 	bl	800214e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001ab8:	2005      	movs	r0, #5
 8001aba:	f000 fb64 	bl	8002186 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001abe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <HAL_MspInit+0x80>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	4a04      	ldr	r2, [pc, #16]	@ (8001ae8 <HAL_MspInit+0x80>)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010000 	.word	0x40010000

08001aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	@ 0x28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0318 	add.w	r3, r7, #24
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a33      	ldr	r2, [pc, #204]	@ (8001bd4 <HAL_TIM_Base_MspInit+0xe8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d12c      	bne.n	8001b66 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b0c:	4b32      	ldr	r3, [pc, #200]	@ (8001bd8 <HAL_TIM_Base_MspInit+0xec>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	4a31      	ldr	r2, [pc, #196]	@ (8001bd8 <HAL_TIM_Base_MspInit+0xec>)
 8001b12:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b16:	6193      	str	r3, [r2, #24]
 8001b18:	4b2f      	ldr	r3, [pc, #188]	@ (8001bd8 <HAL_TIM_Base_MspInit+0xec>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2100      	movs	r1, #0
 8001b28:	2018      	movs	r0, #24
 8001b2a:	f000 fb10 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001b2e:	2018      	movs	r0, #24
 8001b30:	f000 fb29 	bl	8002186 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2100      	movs	r1, #0
 8001b38:	2019      	movs	r0, #25
 8001b3a:	f000 fb08 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001b3e:	2019      	movs	r0, #25
 8001b40:	f000 fb21 	bl	8002186 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2100      	movs	r1, #0
 8001b48:	201a      	movs	r0, #26
 8001b4a:	f000 fb00 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001b4e:	201a      	movs	r0, #26
 8001b50:	f000 fb19 	bl	8002186 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2100      	movs	r1, #0
 8001b58:	201b      	movs	r0, #27
 8001b5a:	f000 faf8 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001b5e:	201b      	movs	r0, #27
 8001b60:	f000 fb11 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b64:	e031      	b.n	8001bca <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bdc <HAL_TIM_Base_MspInit+0xf0>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d12c      	bne.n	8001bca <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b70:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <HAL_TIM_Base_MspInit+0xec>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	4a18      	ldr	r2, [pc, #96]	@ (8001bd8 <HAL_TIM_Base_MspInit+0xec>)
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	61d3      	str	r3, [r2, #28]
 8001b7c:	4b16      	ldr	r3, [pc, #88]	@ (8001bd8 <HAL_TIM_Base_MspInit+0xec>)
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b88:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <HAL_TIM_Base_MspInit+0xec>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	4a12      	ldr	r2, [pc, #72]	@ (8001bd8 <HAL_TIM_Base_MspInit+0xec>)
 8001b8e:	f043 0308 	orr.w	r3, r3, #8
 8001b92:	6193      	str	r3, [r2, #24]
 8001b94:	4b10      	ldr	r3, [pc, #64]	@ (8001bd8 <HAL_TIM_Base_MspInit+0xec>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ba0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bae:	f107 0318 	add.w	r3, r7, #24
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480a      	ldr	r0, [pc, #40]	@ (8001be0 <HAL_TIM_Base_MspInit+0xf4>)
 8001bb6:	f000 fc7f 	bl	80024b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	201e      	movs	r0, #30
 8001bc0:	f000 fac5 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bc4:	201e      	movs	r0, #30
 8001bc6:	f000 fade 	bl	8002186 <HAL_NVIC_EnableIRQ>
}
 8001bca:	bf00      	nop
 8001bcc:	3728      	adds	r7, #40	@ 0x28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40012c00 	.word	0x40012c00
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40000800 	.word	0x40000800
 8001be0:	40010c00 	.word	0x40010c00

08001be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <NMI_Handler+0x4>

08001bec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <HardFault_Handler+0x4>

08001bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <MemManage_Handler+0x4>

08001bfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <BusFault_Handler+0x4>

08001c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <UsageFault_Handler+0x4>

08001c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c34:	f000 f974 	bl	8001f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001c40:	f000 fabc 	bl	80021bc <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c58:	4802      	ldr	r0, [pc, #8]	@ (8001c64 <TIM1_BRK_IRQHandler+0x10>)
 8001c5a:	f001 fba5 	bl	80033a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200001f4 	.word	0x200001f4

08001c68 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c6c:	4802      	ldr	r0, [pc, #8]	@ (8001c78 <TIM1_UP_IRQHandler+0x10>)
 8001c6e:	f001 fb9b 	bl	80033a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200001f4 	.word	0x200001f4

08001c7c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c80:	4802      	ldr	r0, [pc, #8]	@ (8001c8c <TIM1_TRG_COM_IRQHandler+0x10>)
 8001c82:	f001 fb91 	bl	80033a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200001f4 	.word	0x200001f4

08001c90 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c94:	4802      	ldr	r0, [pc, #8]	@ (8001ca0 <TIM1_CC_IRQHandler+0x10>)
 8001c96:	f001 fb87 	bl	80033a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200001f4 	.word	0x200001f4

08001ca4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ca8:	4802      	ldr	r0, [pc, #8]	@ (8001cb4 <TIM4_IRQHandler+0x10>)
 8001caa:	f001 fb7d 	bl	80033a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000023c 	.word	0x2000023c

08001cb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return 1;
 8001cbc:	2301      	movs	r3, #1
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <_kill>:

int _kill(int pid, int sig)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cd0:	f003 f8b0 	bl	8004e34 <__errno>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2216      	movs	r2, #22
 8001cd8:	601a      	str	r2, [r3, #0]
  return -1;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <_exit>:

void _exit (int status)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cee:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ffe7 	bl	8001cc6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cf8:	bf00      	nop
 8001cfa:	e7fd      	b.n	8001cf8 <_exit+0x12>

08001cfc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	e00a      	b.n	8001d24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d0e:	f3af 8000 	nop.w
 8001d12:	4601      	mov	r1, r0
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	60ba      	str	r2, [r7, #8]
 8001d1a:	b2ca      	uxtb	r2, r1
 8001d1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	3301      	adds	r3, #1
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	dbf0      	blt.n	8001d0e <_read+0x12>
  }

  return len;
 8001d2c:	687b      	ldr	r3, [r7, #4]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	60f8      	str	r0, [r7, #12]
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	e009      	b.n	8001d5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	60ba      	str	r2, [r7, #8]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	dbf1      	blt.n	8001d48 <_write+0x12>
  }
  return len;
 8001d64:	687b      	ldr	r3, [r7, #4]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <_close>:

int _close(int file)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d94:	605a      	str	r2, [r3, #4]
  return 0;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr

08001da2 <_isatty>:

int _isatty(int file)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr

08001db6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b085      	sub	sp, #20
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
	...

08001dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd8:	4a14      	ldr	r2, [pc, #80]	@ (8001e2c <_sbrk+0x5c>)
 8001dda:	4b15      	ldr	r3, [pc, #84]	@ (8001e30 <_sbrk+0x60>)
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de4:	4b13      	ldr	r3, [pc, #76]	@ (8001e34 <_sbrk+0x64>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dec:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <_sbrk+0x64>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	@ (8001e38 <_sbrk+0x68>)
 8001df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df2:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <_sbrk+0x64>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d207      	bcs.n	8001e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e00:	f003 f818 	bl	8004e34 <__errno>
 8001e04:	4603      	mov	r3, r0
 8001e06:	220c      	movs	r2, #12
 8001e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e0e:	e009      	b.n	8001e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e10:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <_sbrk+0x64>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e16:	4b07      	ldr	r3, [pc, #28]	@ (8001e34 <_sbrk+0x64>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	4a05      	ldr	r2, [pc, #20]	@ (8001e34 <_sbrk+0x64>)
 8001e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e22:	68fb      	ldr	r3, [r7, #12]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20005000 	.word	0x20005000
 8001e30:	00000400 	.word	0x00000400
 8001e34:	200002b8 	.word	0x200002b8
 8001e38:	20000430 	.word	0x20000430

08001e3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e48:	f7ff fff8 	bl	8001e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e4c:	480b      	ldr	r0, [pc, #44]	@ (8001e7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e4e:	490c      	ldr	r1, [pc, #48]	@ (8001e80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e50:	4a0c      	ldr	r2, [pc, #48]	@ (8001e84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e54:	e002      	b.n	8001e5c <LoopCopyDataInit>

08001e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5a:	3304      	adds	r3, #4

08001e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e60:	d3f9      	bcc.n	8001e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e62:	4a09      	ldr	r2, [pc, #36]	@ (8001e88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e64:	4c09      	ldr	r4, [pc, #36]	@ (8001e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e68:	e001      	b.n	8001e6e <LoopFillZerobss>

08001e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e6c:	3204      	adds	r2, #4

08001e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e70:	d3fb      	bcc.n	8001e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e72:	f002 ffe5 	bl	8004e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e76:	f7ff fb1f 	bl	80014b8 <main>
  bx lr
 8001e7a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e80:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e84:	080089f0 	.word	0x080089f0
  ldr r2, =_sbss
 8001e88:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001e8c:	2000042c 	.word	0x2000042c

08001e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e90:	e7fe      	b.n	8001e90 <ADC1_2_IRQHandler>
	...

08001e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e98:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <HAL_Init+0x28>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a07      	ldr	r2, [pc, #28]	@ (8001ebc <HAL_Init+0x28>)
 8001e9e:	f043 0310 	orr.w	r3, r3, #16
 8001ea2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea4:	2003      	movs	r0, #3
 8001ea6:	f000 f947 	bl	8002138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eaa:	200f      	movs	r0, #15
 8001eac:	f000 f808 	bl	8001ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb0:	f7ff fdda 	bl	8001a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40022000 	.word	0x40022000

08001ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ec8:	4b12      	ldr	r3, [pc, #72]	@ (8001f14 <HAL_InitTick+0x54>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <HAL_InitTick+0x58>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 f95f 	bl	80021a2 <HAL_SYSTICK_Config>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00e      	b.n	8001f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b0f      	cmp	r3, #15
 8001ef2:	d80a      	bhi.n	8001f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001efc:	f000 f927 	bl	800214e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f00:	4a06      	ldr	r2, [pc, #24]	@ (8001f1c <HAL_InitTick+0x5c>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	e000      	b.n	8001f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000000 	.word	0x20000000
 8001f18:	20000008 	.word	0x20000008
 8001f1c:	20000004 	.word	0x20000004

08001f20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f24:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <HAL_IncTick+0x1c>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <HAL_IncTick+0x20>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	4a03      	ldr	r2, [pc, #12]	@ (8001f40 <HAL_IncTick+0x20>)
 8001f32:	6013      	str	r3, [r2, #0]
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	20000008 	.word	0x20000008
 8001f40:	200002bc 	.word	0x200002bc

08001f44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return uwTick;
 8001f48:	4b02      	ldr	r3, [pc, #8]	@ (8001f54 <HAL_GetTick+0x10>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	200002bc 	.word	0x200002bc

08001f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff fff0 	bl	8001f44 <HAL_GetTick>
 8001f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f70:	d005      	beq.n	8001f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f72:	4b0a      	ldr	r3, [pc, #40]	@ (8001f9c <HAL_Delay+0x44>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f7e:	bf00      	nop
 8001f80:	f7ff ffe0 	bl	8001f44 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d8f7      	bhi.n	8001f80 <HAL_Delay+0x28>
  {
  }
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000008 	.word	0x20000008

08001fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd2:	4a04      	ldr	r2, [pc, #16]	@ (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60d3      	str	r3, [r2, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fec:	4b04      	ldr	r3, [pc, #16]	@ (8002000 <__NVIC_GetPriorityGrouping+0x18>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	f003 0307 	and.w	r3, r3, #7
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	db0b      	blt.n	800202e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	4906      	ldr	r1, [pc, #24]	@ (8002038 <__NVIC_EnableIRQ+0x34>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	2001      	movs	r0, #1
 8002026:	fa00 f202 	lsl.w	r2, r0, r2
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	e000e100 	.word	0xe000e100

0800203c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204c:	2b00      	cmp	r3, #0
 800204e:	db0a      	blt.n	8002066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	490c      	ldr	r1, [pc, #48]	@ (8002088 <__NVIC_SetPriority+0x4c>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	0112      	lsls	r2, r2, #4
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	440b      	add	r3, r1
 8002060:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002064:	e00a      	b.n	800207c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4908      	ldr	r1, [pc, #32]	@ (800208c <__NVIC_SetPriority+0x50>)
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	3b04      	subs	r3, #4
 8002074:	0112      	lsls	r2, r2, #4
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	440b      	add	r3, r1
 800207a:	761a      	strb	r2, [r3, #24]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000e100 	.word	0xe000e100
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	@ 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f1c3 0307 	rsb	r3, r3, #7
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	bf28      	it	cs
 80020ae:	2304      	movcs	r3, #4
 80020b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d902      	bls.n	80020c0 <NVIC_EncodePriority+0x30>
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3b03      	subs	r3, #3
 80020be:	e000      	b.n	80020c2 <NVIC_EncodePriority+0x32>
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	401a      	ands	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	43d9      	mvns	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	4313      	orrs	r3, r2
         );
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	@ 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002104:	d301      	bcc.n	800210a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002106:	2301      	movs	r3, #1
 8002108:	e00f      	b.n	800212a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210a:	4a0a      	ldr	r2, [pc, #40]	@ (8002134 <SysTick_Config+0x40>)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002112:	210f      	movs	r1, #15
 8002114:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002118:	f7ff ff90 	bl	800203c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800211c:	4b05      	ldr	r3, [pc, #20]	@ (8002134 <SysTick_Config+0x40>)
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002122:	4b04      	ldr	r3, [pc, #16]	@ (8002134 <SysTick_Config+0x40>)
 8002124:	2207      	movs	r2, #7
 8002126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	e000e010 	.word	0xe000e010

08002138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ff2d 	bl	8001fa0 <__NVIC_SetPriorityGrouping>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	4603      	mov	r3, r0
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002160:	f7ff ff42 	bl	8001fe8 <__NVIC_GetPriorityGrouping>
 8002164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	6978      	ldr	r0, [r7, #20]
 800216c:	f7ff ff90 	bl	8002090 <NVIC_EncodePriority>
 8002170:	4602      	mov	r2, r0
 8002172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff5f 	bl	800203c <__NVIC_SetPriority>
}
 800217e:	bf00      	nop
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff35 	bl	8002004 <__NVIC_EnableIRQ>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ffa2 	bl	80020f4 <SysTick_Config>
 80021b0:	4603      	mov	r3, r0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80021c6:	4b6b      	ldr	r3, [pc, #428]	@ (8002374 <HAL_FLASH_IRQHandler+0x1b8>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d105      	bne.n	80021de <HAL_FLASH_IRQHandler+0x22>
 80021d2:	4b68      	ldr	r3, [pc, #416]	@ (8002374 <HAL_FLASH_IRQHandler+0x1b8>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00e      	beq.n	80021fc <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 80021de:	4b66      	ldr	r3, [pc, #408]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 80021e4:	4b64      	ldr	r3, [pc, #400]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 80021e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021ea:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 80021ec:	f000 f8f4 	bl	80023d8 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f8cc 	bl	800238e <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80021f6:	4b60      	ldr	r3, [pc, #384]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80021fc:	4b5d      	ldr	r3, [pc, #372]	@ (8002374 <HAL_FLASH_IRQHandler+0x1b8>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 80a0 	beq.w	800234a <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800220a:	4b5a      	ldr	r3, [pc, #360]	@ (8002374 <HAL_FLASH_IRQHandler+0x1b8>)
 800220c:	2220      	movs	r2, #32
 800220e:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8002210:	4b59      	ldr	r3, [pc, #356]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 8097 	beq.w	800234a <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 800221c:	4b56      	ldr	r3, [pc, #344]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b01      	cmp	r3, #1
 8002224:	d12d      	bne.n	8002282 <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8002226:	4b54      	ldr	r3, [pc, #336]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	3b01      	subs	r3, #1
 800222c:	4a52      	ldr	r2, [pc, #328]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 800222e:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8002230:	4b51      	ldr	r3, [pc, #324]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d017      	beq.n	8002268 <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 8002238:	4b4f      	ldr	r3, [pc, #316]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f89c 	bl	800237c <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8002244:	4b4c      	ldr	r3, [pc, #304]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800224c:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 800224e:	4a4a      	ldr	r2, [pc, #296]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002254:	4b47      	ldr	r3, [pc, #284]	@ (8002374 <HAL_FLASH_IRQHandler+0x1b8>)
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	4a46      	ldr	r2, [pc, #280]	@ (8002374 <HAL_FLASH_IRQHandler+0x1b8>)
 800225a:	f023 0302 	bic.w	r3, r3, #2
 800225e:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f909 	bl	8002478 <FLASH_PageErase>
 8002266:	e070      	b.n	800234a <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8002268:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	4a42      	ldr	r2, [pc, #264]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002274:	4b40      	ldr	r3, [pc, #256]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f87e 	bl	800237c <HAL_FLASH_EndOfOperationCallback>
 8002280:	e063      	b.n	800234a <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002282:	4b3d      	ldr	r3, [pc, #244]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d10c      	bne.n	80022a6 <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800228c:	4b39      	ldr	r3, [pc, #228]	@ (8002374 <HAL_FLASH_IRQHandler+0x1b8>)
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	4a38      	ldr	r2, [pc, #224]	@ (8002374 <HAL_FLASH_IRQHandler+0x1b8>)
 8002292:	f023 0304 	bic.w	r3, r3, #4
 8002296:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 8002298:	2000      	movs	r0, #0
 800229a:	f000 f86f 	bl	800237c <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800229e:	4b36      	ldr	r3, [pc, #216]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
 80022a4:	e051      	b.n	800234a <HAL_FLASH_IRQHandler+0x18e>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 80022a6:	4b34      	ldr	r3, [pc, #208]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	4a32      	ldr	r2, [pc, #200]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 80022ae:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 80022b0:	4b31      	ldr	r3, [pc, #196]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d024      	beq.n	8002302 <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 80022b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	3302      	adds	r3, #2
 80022be:	4a2e      	ldr	r2, [pc, #184]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 80022c0:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 80022c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 80022c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 80022ca:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	0c02      	lsrs	r2, r0, #16
 80022d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80022dc:	0c0b      	lsrs	r3, r1, #16
 80022de:	4926      	ldr	r1, [pc, #152]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 80022e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80022e4:	4b23      	ldr	r3, [pc, #140]	@ (8002374 <HAL_FLASH_IRQHandler+0x1b8>)
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	4a22      	ldr	r2, [pc, #136]	@ (8002374 <HAL_FLASH_IRQHandler+0x1b8>)
 80022ea:	f023 0301 	bic.w	r3, r3, #1
 80022ee:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 80022f0:	4b21      	ldr	r3, [pc, #132]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 80022f2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80022f6:	b293      	uxth	r3, r2
 80022f8:	4619      	mov	r1, r3
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f850 	bl	80023a0 <FLASH_Program_HalfWord>
 8002300:	e023      	b.n	800234a <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8002302:	4b1d      	ldr	r3, [pc, #116]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b03      	cmp	r3, #3
 800230a:	d105      	bne.n	8002318 <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800230c:	4b1a      	ldr	r3, [pc, #104]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4618      	mov	r0, r3
 8002312:	f000 f833 	bl	800237c <HAL_FLASH_EndOfOperationCallback>
 8002316:	e011      	b.n	800233c <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8002318:	4b17      	ldr	r3, [pc, #92]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b04      	cmp	r3, #4
 8002320:	d106      	bne.n	8002330 <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8002322:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	3b02      	subs	r3, #2
 8002328:	4618      	mov	r0, r3
 800232a:	f000 f827 	bl	800237c <HAL_FLASH_EndOfOperationCallback>
 800232e:	e005      	b.n	800233c <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8002330:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	3b06      	subs	r3, #6
 8002336:	4618      	mov	r0, r3
 8002338:	f000 f820 	bl	800237c <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 800233c:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 800233e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002342:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002344:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800234a:	4b0b      	ldr	r3, [pc, #44]	@ (8002378 <HAL_FLASH_IRQHandler+0x1bc>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10b      	bne.n	800236c <HAL_FLASH_IRQHandler+0x1b0>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8002354:	4b07      	ldr	r3, [pc, #28]	@ (8002374 <HAL_FLASH_IRQHandler+0x1b8>)
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	4a06      	ldr	r2, [pc, #24]	@ (8002374 <HAL_FLASH_IRQHandler+0x1b8>)
 800235a:	f023 0307 	bic.w	r3, r3, #7
 800235e:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002360:	4b04      	ldr	r3, [pc, #16]	@ (8002374 <HAL_FLASH_IRQHandler+0x1b8>)
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	4a03      	ldr	r2, [pc, #12]	@ (8002374 <HAL_FLASH_IRQHandler+0x1b8>)
 8002366:	f423 53a0 	bic.w	r3, r3, #5120	@ 0x1400
 800236a:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

  }
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40022000 	.word	0x40022000
 8002378:	200002c0 	.word	0x200002c0

0800237c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr

0800238e <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr

080023a0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023ac:	4b08      	ldr	r3, [pc, #32]	@ (80023d0 <FLASH_Program_HalfWord+0x30>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80023b2:	4b08      	ldr	r3, [pc, #32]	@ (80023d4 <FLASH_Program_HalfWord+0x34>)
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	4a07      	ldr	r2, [pc, #28]	@ (80023d4 <FLASH_Program_HalfWord+0x34>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	887a      	ldrh	r2, [r7, #2]
 80023c2:	801a      	strh	r2, [r3, #0]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	200002c0 	.word	0x200002c0
 80023d4:	40022000 	.word	0x40022000

080023d8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80023de:	2300      	movs	r3, #0
 80023e0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80023e2:	4b23      	ldr	r3, [pc, #140]	@ (8002470 <FLASH_SetErrorCode+0x98>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80023ee:	4b21      	ldr	r3, [pc, #132]	@ (8002474 <FLASH_SetErrorCode+0x9c>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f043 0302 	orr.w	r3, r3, #2
 80023f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002474 <FLASH_SetErrorCode+0x9c>)
 80023f8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f043 0310 	orr.w	r3, r3, #16
 8002400:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002402:	4b1b      	ldr	r3, [pc, #108]	@ (8002470 <FLASH_SetErrorCode+0x98>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b00      	cmp	r3, #0
 800240c:	d009      	beq.n	8002422 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800240e:	4b19      	ldr	r3, [pc, #100]	@ (8002474 <FLASH_SetErrorCode+0x9c>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	4a17      	ldr	r2, [pc, #92]	@ (8002474 <FLASH_SetErrorCode+0x9c>)
 8002418:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002422:	4b13      	ldr	r3, [pc, #76]	@ (8002470 <FLASH_SetErrorCode+0x98>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00b      	beq.n	8002446 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800242e:	4b11      	ldr	r3, [pc, #68]	@ (8002474 <FLASH_SetErrorCode+0x9c>)
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f043 0304 	orr.w	r3, r3, #4
 8002436:	4a0f      	ldr	r2, [pc, #60]	@ (8002474 <FLASH_SetErrorCode+0x9c>)
 8002438:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800243a:	4b0d      	ldr	r3, [pc, #52]	@ (8002470 <FLASH_SetErrorCode+0x98>)
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	4a0c      	ldr	r2, [pc, #48]	@ (8002470 <FLASH_SetErrorCode+0x98>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f240 1201 	movw	r2, #257	@ 0x101
 800244c:	4293      	cmp	r3, r2
 800244e:	d106      	bne.n	800245e <FLASH_SetErrorCode+0x86>
 8002450:	4b07      	ldr	r3, [pc, #28]	@ (8002470 <FLASH_SetErrorCode+0x98>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	4a06      	ldr	r2, [pc, #24]	@ (8002470 <FLASH_SetErrorCode+0x98>)
 8002456:	f023 0301 	bic.w	r3, r3, #1
 800245a:	61d3      	str	r3, [r2, #28]
}  
 800245c:	e002      	b.n	8002464 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800245e:	4a04      	ldr	r2, [pc, #16]	@ (8002470 <FLASH_SetErrorCode+0x98>)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	60d3      	str	r3, [r2, #12]
}  
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40022000 	.word	0x40022000
 8002474:	200002c0 	.word	0x200002c0

08002478 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002480:	4b0b      	ldr	r3, [pc, #44]	@ (80024b0 <FLASH_PageErase+0x38>)
 8002482:	2200      	movs	r2, #0
 8002484:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002486:	4b0b      	ldr	r3, [pc, #44]	@ (80024b4 <FLASH_PageErase+0x3c>)
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	4a0a      	ldr	r2, [pc, #40]	@ (80024b4 <FLASH_PageErase+0x3c>)
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002492:	4a08      	ldr	r2, [pc, #32]	@ (80024b4 <FLASH_PageErase+0x3c>)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002498:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <FLASH_PageErase+0x3c>)
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	4a05      	ldr	r2, [pc, #20]	@ (80024b4 <FLASH_PageErase+0x3c>)
 800249e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024a2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	200002c0 	.word	0x200002c0
 80024b4:	40022000 	.word	0x40022000

080024b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b08b      	sub	sp, #44	@ 0x2c
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024c2:	2300      	movs	r3, #0
 80024c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024c6:	2300      	movs	r3, #0
 80024c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ca:	e169      	b.n	80027a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024cc:	2201      	movs	r2, #1
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	f040 8158 	bne.w	800279a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	4a9a      	ldr	r2, [pc, #616]	@ (8002758 <HAL_GPIO_Init+0x2a0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d05e      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
 80024f4:	4a98      	ldr	r2, [pc, #608]	@ (8002758 <HAL_GPIO_Init+0x2a0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d875      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 80024fa:	4a98      	ldr	r2, [pc, #608]	@ (800275c <HAL_GPIO_Init+0x2a4>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d058      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
 8002500:	4a96      	ldr	r2, [pc, #600]	@ (800275c <HAL_GPIO_Init+0x2a4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d86f      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 8002506:	4a96      	ldr	r2, [pc, #600]	@ (8002760 <HAL_GPIO_Init+0x2a8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d052      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
 800250c:	4a94      	ldr	r2, [pc, #592]	@ (8002760 <HAL_GPIO_Init+0x2a8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d869      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 8002512:	4a94      	ldr	r2, [pc, #592]	@ (8002764 <HAL_GPIO_Init+0x2ac>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d04c      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
 8002518:	4a92      	ldr	r2, [pc, #584]	@ (8002764 <HAL_GPIO_Init+0x2ac>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d863      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 800251e:	4a92      	ldr	r2, [pc, #584]	@ (8002768 <HAL_GPIO_Init+0x2b0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d046      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
 8002524:	4a90      	ldr	r2, [pc, #576]	@ (8002768 <HAL_GPIO_Init+0x2b0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d85d      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 800252a:	2b12      	cmp	r3, #18
 800252c:	d82a      	bhi.n	8002584 <HAL_GPIO_Init+0xcc>
 800252e:	2b12      	cmp	r3, #18
 8002530:	d859      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 8002532:	a201      	add	r2, pc, #4	@ (adr r2, 8002538 <HAL_GPIO_Init+0x80>)
 8002534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002538:	080025b3 	.word	0x080025b3
 800253c:	0800258d 	.word	0x0800258d
 8002540:	0800259f 	.word	0x0800259f
 8002544:	080025e1 	.word	0x080025e1
 8002548:	080025e7 	.word	0x080025e7
 800254c:	080025e7 	.word	0x080025e7
 8002550:	080025e7 	.word	0x080025e7
 8002554:	080025e7 	.word	0x080025e7
 8002558:	080025e7 	.word	0x080025e7
 800255c:	080025e7 	.word	0x080025e7
 8002560:	080025e7 	.word	0x080025e7
 8002564:	080025e7 	.word	0x080025e7
 8002568:	080025e7 	.word	0x080025e7
 800256c:	080025e7 	.word	0x080025e7
 8002570:	080025e7 	.word	0x080025e7
 8002574:	080025e7 	.word	0x080025e7
 8002578:	080025e7 	.word	0x080025e7
 800257c:	08002595 	.word	0x08002595
 8002580:	080025a9 	.word	0x080025a9
 8002584:	4a79      	ldr	r2, [pc, #484]	@ (800276c <HAL_GPIO_Init+0x2b4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800258a:	e02c      	b.n	80025e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	623b      	str	r3, [r7, #32]
          break;
 8002592:	e029      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	3304      	adds	r3, #4
 800259a:	623b      	str	r3, [r7, #32]
          break;
 800259c:	e024      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	3308      	adds	r3, #8
 80025a4:	623b      	str	r3, [r7, #32]
          break;
 80025a6:	e01f      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	330c      	adds	r3, #12
 80025ae:	623b      	str	r3, [r7, #32]
          break;
 80025b0:	e01a      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d102      	bne.n	80025c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025ba:	2304      	movs	r3, #4
 80025bc:	623b      	str	r3, [r7, #32]
          break;
 80025be:	e013      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d105      	bne.n	80025d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025c8:	2308      	movs	r3, #8
 80025ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	611a      	str	r2, [r3, #16]
          break;
 80025d2:	e009      	b.n	80025e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025d4:	2308      	movs	r3, #8
 80025d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	615a      	str	r2, [r3, #20]
          break;
 80025de:	e003      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025e0:	2300      	movs	r3, #0
 80025e2:	623b      	str	r3, [r7, #32]
          break;
 80025e4:	e000      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          break;
 80025e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	2bff      	cmp	r3, #255	@ 0xff
 80025ec:	d801      	bhi.n	80025f2 <HAL_GPIO_Init+0x13a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	e001      	b.n	80025f6 <HAL_GPIO_Init+0x13e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3304      	adds	r3, #4
 80025f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	2bff      	cmp	r3, #255	@ 0xff
 80025fc:	d802      	bhi.n	8002604 <HAL_GPIO_Init+0x14c>
 80025fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	e002      	b.n	800260a <HAL_GPIO_Init+0x152>
 8002604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002606:	3b08      	subs	r3, #8
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	210f      	movs	r1, #15
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	fa01 f303 	lsl.w	r3, r1, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	401a      	ands	r2, r3
 800261c:	6a39      	ldr	r1, [r7, #32]
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	fa01 f303 	lsl.w	r3, r1, r3
 8002624:	431a      	orrs	r2, r3
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80b1 	beq.w	800279a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002638:	4b4d      	ldr	r3, [pc, #308]	@ (8002770 <HAL_GPIO_Init+0x2b8>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	4a4c      	ldr	r2, [pc, #304]	@ (8002770 <HAL_GPIO_Init+0x2b8>)
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	6193      	str	r3, [r2, #24]
 8002644:	4b4a      	ldr	r3, [pc, #296]	@ (8002770 <HAL_GPIO_Init+0x2b8>)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002650:	4a48      	ldr	r2, [pc, #288]	@ (8002774 <HAL_GPIO_Init+0x2bc>)
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	089b      	lsrs	r3, r3, #2
 8002656:	3302      	adds	r3, #2
 8002658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	220f      	movs	r2, #15
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4013      	ands	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a40      	ldr	r2, [pc, #256]	@ (8002778 <HAL_GPIO_Init+0x2c0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d013      	beq.n	80026a4 <HAL_GPIO_Init+0x1ec>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a3f      	ldr	r2, [pc, #252]	@ (800277c <HAL_GPIO_Init+0x2c4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00d      	beq.n	80026a0 <HAL_GPIO_Init+0x1e8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a3e      	ldr	r2, [pc, #248]	@ (8002780 <HAL_GPIO_Init+0x2c8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d007      	beq.n	800269c <HAL_GPIO_Init+0x1e4>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a3d      	ldr	r2, [pc, #244]	@ (8002784 <HAL_GPIO_Init+0x2cc>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d101      	bne.n	8002698 <HAL_GPIO_Init+0x1e0>
 8002694:	2303      	movs	r3, #3
 8002696:	e006      	b.n	80026a6 <HAL_GPIO_Init+0x1ee>
 8002698:	2304      	movs	r3, #4
 800269a:	e004      	b.n	80026a6 <HAL_GPIO_Init+0x1ee>
 800269c:	2302      	movs	r3, #2
 800269e:	e002      	b.n	80026a6 <HAL_GPIO_Init+0x1ee>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <HAL_GPIO_Init+0x1ee>
 80026a4:	2300      	movs	r3, #0
 80026a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026a8:	f002 0203 	and.w	r2, r2, #3
 80026ac:	0092      	lsls	r2, r2, #2
 80026ae:	4093      	lsls	r3, r2
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026b6:	492f      	ldr	r1, [pc, #188]	@ (8002774 <HAL_GPIO_Init+0x2bc>)
 80026b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ba:	089b      	lsrs	r3, r3, #2
 80026bc:	3302      	adds	r3, #2
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d006      	beq.n	80026de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	492c      	ldr	r1, [pc, #176]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	608b      	str	r3, [r1, #8]
 80026dc:	e006      	b.n	80026ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026de:	4b2a      	ldr	r3, [pc, #168]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	4928      	ldr	r1, [pc, #160]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d006      	beq.n	8002706 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026f8:	4b23      	ldr	r3, [pc, #140]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	4922      	ldr	r1, [pc, #136]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	60cb      	str	r3, [r1, #12]
 8002704:	e006      	b.n	8002714 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002706:	4b20      	ldr	r3, [pc, #128]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	43db      	mvns	r3, r3
 800270e:	491e      	ldr	r1, [pc, #120]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 8002710:	4013      	ands	r3, r2
 8002712:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d006      	beq.n	800272e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002720:	4b19      	ldr	r3, [pc, #100]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	4918      	ldr	r1, [pc, #96]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
 800272c:	e006      	b.n	800273c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800272e:	4b16      	ldr	r3, [pc, #88]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	43db      	mvns	r3, r3
 8002736:	4914      	ldr	r1, [pc, #80]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 8002738:	4013      	ands	r3, r2
 800273a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d021      	beq.n	800278c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002748:	4b0f      	ldr	r3, [pc, #60]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	490e      	ldr	r1, [pc, #56]	@ (8002788 <HAL_GPIO_Init+0x2d0>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]
 8002754:	e021      	b.n	800279a <HAL_GPIO_Init+0x2e2>
 8002756:	bf00      	nop
 8002758:	10320000 	.word	0x10320000
 800275c:	10310000 	.word	0x10310000
 8002760:	10220000 	.word	0x10220000
 8002764:	10210000 	.word	0x10210000
 8002768:	10120000 	.word	0x10120000
 800276c:	10110000 	.word	0x10110000
 8002770:	40021000 	.word	0x40021000
 8002774:	40010000 	.word	0x40010000
 8002778:	40010800 	.word	0x40010800
 800277c:	40010c00 	.word	0x40010c00
 8002780:	40011000 	.word	0x40011000
 8002784:	40011400 	.word	0x40011400
 8002788:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800278c:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <HAL_GPIO_Init+0x304>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	43db      	mvns	r3, r3
 8002794:	4909      	ldr	r1, [pc, #36]	@ (80027bc <HAL_GPIO_Init+0x304>)
 8002796:	4013      	ands	r3, r2
 8002798:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	3301      	adds	r3, #1
 800279e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a6:	fa22 f303 	lsr.w	r3, r2, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f47f ae8e 	bne.w	80024cc <HAL_GPIO_Init+0x14>
  }
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	372c      	adds	r7, #44	@ 0x2c
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	40010400 	.word	0x40010400

080027c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]
 80027cc:	4613      	mov	r3, r2
 80027ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027d0:	787b      	ldrb	r3, [r7, #1]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027d6:	887a      	ldrh	r2, [r7, #2]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027dc:	e003      	b.n	80027e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027de:	887b      	ldrh	r3, [r7, #2]
 80027e0:	041a      	lsls	r2, r3, #16
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	611a      	str	r2, [r3, #16]
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e272      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 8087 	beq.w	800291e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002810:	4b92      	ldr	r3, [pc, #584]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 030c 	and.w	r3, r3, #12
 8002818:	2b04      	cmp	r3, #4
 800281a:	d00c      	beq.n	8002836 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800281c:	4b8f      	ldr	r3, [pc, #572]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 030c 	and.w	r3, r3, #12
 8002824:	2b08      	cmp	r3, #8
 8002826:	d112      	bne.n	800284e <HAL_RCC_OscConfig+0x5e>
 8002828:	4b8c      	ldr	r3, [pc, #560]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002834:	d10b      	bne.n	800284e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002836:	4b89      	ldr	r3, [pc, #548]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d06c      	beq.n	800291c <HAL_RCC_OscConfig+0x12c>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d168      	bne.n	800291c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e24c      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002856:	d106      	bne.n	8002866 <HAL_RCC_OscConfig+0x76>
 8002858:	4b80      	ldr	r3, [pc, #512]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a7f      	ldr	r2, [pc, #508]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 800285e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	e02e      	b.n	80028c4 <HAL_RCC_OscConfig+0xd4>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10c      	bne.n	8002888 <HAL_RCC_OscConfig+0x98>
 800286e:	4b7b      	ldr	r3, [pc, #492]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a7a      	ldr	r2, [pc, #488]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002874:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	4b78      	ldr	r3, [pc, #480]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a77      	ldr	r2, [pc, #476]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002880:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e01d      	b.n	80028c4 <HAL_RCC_OscConfig+0xd4>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0xbc>
 8002892:	4b72      	ldr	r3, [pc, #456]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a71      	ldr	r2, [pc, #452]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b6f      	ldr	r3, [pc, #444]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a6e      	ldr	r2, [pc, #440]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 80028a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e00b      	b.n	80028c4 <HAL_RCC_OscConfig+0xd4>
 80028ac:	4b6b      	ldr	r3, [pc, #428]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a6a      	ldr	r2, [pc, #424]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 80028b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	4b68      	ldr	r3, [pc, #416]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a67      	ldr	r2, [pc, #412]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 80028be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d013      	beq.n	80028f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7ff fb3a 	bl	8001f44 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d4:	f7ff fb36 	bl	8001f44 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	@ 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e200      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	4b5d      	ldr	r3, [pc, #372]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0xe4>
 80028f2:	e014      	b.n	800291e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7ff fb26 	bl	8001f44 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028fc:	f7ff fb22 	bl	8001f44 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	@ 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e1ec      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290e:	4b53      	ldr	r3, [pc, #332]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x10c>
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d063      	beq.n	80029f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800292a:	4b4c      	ldr	r3, [pc, #304]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00b      	beq.n	800294e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002936:	4b49      	ldr	r3, [pc, #292]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	2b08      	cmp	r3, #8
 8002940:	d11c      	bne.n	800297c <HAL_RCC_OscConfig+0x18c>
 8002942:	4b46      	ldr	r3, [pc, #280]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d116      	bne.n	800297c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294e:	4b43      	ldr	r3, [pc, #268]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d005      	beq.n	8002966 <HAL_RCC_OscConfig+0x176>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d001      	beq.n	8002966 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e1c0      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002966:	4b3d      	ldr	r3, [pc, #244]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4939      	ldr	r1, [pc, #228]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297a:	e03a      	b.n	80029f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d020      	beq.n	80029c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002984:	4b36      	ldr	r3, [pc, #216]	@ (8002a60 <HAL_RCC_OscConfig+0x270>)
 8002986:	2201      	movs	r2, #1
 8002988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298a:	f7ff fadb 	bl	8001f44 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002992:	f7ff fad7 	bl	8001f44 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e1a1      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a4:	4b2d      	ldr	r3, [pc, #180]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4927      	ldr	r1, [pc, #156]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	600b      	str	r3, [r1, #0]
 80029c4:	e015      	b.n	80029f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c6:	4b26      	ldr	r3, [pc, #152]	@ (8002a60 <HAL_RCC_OscConfig+0x270>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7ff faba 	bl	8001f44 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d4:	f7ff fab6 	bl	8001f44 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e180      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d03a      	beq.n	8002a74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d019      	beq.n	8002a3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a06:	4b17      	ldr	r3, [pc, #92]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0c:	f7ff fa9a 	bl	8001f44 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a14:	f7ff fa96 	bl	8001f44 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e160      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a26:	4b0d      	ldr	r3, [pc, #52]	@ (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a32:	2001      	movs	r0, #1
 8002a34:	f000 fa9c 	bl	8002f70 <RCC_Delay>
 8002a38:	e01c      	b.n	8002a74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a40:	f7ff fa80 	bl	8001f44 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a46:	e00f      	b.n	8002a68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a48:	f7ff fa7c 	bl	8001f44 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d908      	bls.n	8002a68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e146      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4f8>
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	42420000 	.word	0x42420000
 8002a64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a68:	4b92      	ldr	r3, [pc, #584]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1e9      	bne.n	8002a48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 80a6 	beq.w	8002bce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a82:	2300      	movs	r3, #0
 8002a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a86:	4b8b      	ldr	r3, [pc, #556]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10d      	bne.n	8002aae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a92:	4b88      	ldr	r3, [pc, #544]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	4a87      	ldr	r2, [pc, #540]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a9c:	61d3      	str	r3, [r2, #28]
 8002a9e:	4b85      	ldr	r3, [pc, #532]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aae:	4b82      	ldr	r3, [pc, #520]	@ (8002cb8 <HAL_RCC_OscConfig+0x4c8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d118      	bne.n	8002aec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aba:	4b7f      	ldr	r3, [pc, #508]	@ (8002cb8 <HAL_RCC_OscConfig+0x4c8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a7e      	ldr	r2, [pc, #504]	@ (8002cb8 <HAL_RCC_OscConfig+0x4c8>)
 8002ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac6:	f7ff fa3d 	bl	8001f44 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ace:	f7ff fa39 	bl	8001f44 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b64      	cmp	r3, #100	@ 0x64
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e103      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae0:	4b75      	ldr	r3, [pc, #468]	@ (8002cb8 <HAL_RCC_OscConfig+0x4c8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d106      	bne.n	8002b02 <HAL_RCC_OscConfig+0x312>
 8002af4:	4b6f      	ldr	r3, [pc, #444]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	4a6e      	ldr	r2, [pc, #440]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	6213      	str	r3, [r2, #32]
 8002b00:	e02d      	b.n	8002b5e <HAL_RCC_OscConfig+0x36e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x334>
 8002b0a:	4b6a      	ldr	r3, [pc, #424]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	4a69      	ldr	r2, [pc, #420]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	6213      	str	r3, [r2, #32]
 8002b16:	4b67      	ldr	r3, [pc, #412]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	4a66      	ldr	r2, [pc, #408]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002b1c:	f023 0304 	bic.w	r3, r3, #4
 8002b20:	6213      	str	r3, [r2, #32]
 8002b22:	e01c      	b.n	8002b5e <HAL_RCC_OscConfig+0x36e>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2b05      	cmp	r3, #5
 8002b2a:	d10c      	bne.n	8002b46 <HAL_RCC_OscConfig+0x356>
 8002b2c:	4b61      	ldr	r3, [pc, #388]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	4a60      	ldr	r2, [pc, #384]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002b32:	f043 0304 	orr.w	r3, r3, #4
 8002b36:	6213      	str	r3, [r2, #32]
 8002b38:	4b5e      	ldr	r3, [pc, #376]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	4a5d      	ldr	r2, [pc, #372]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6213      	str	r3, [r2, #32]
 8002b44:	e00b      	b.n	8002b5e <HAL_RCC_OscConfig+0x36e>
 8002b46:	4b5b      	ldr	r3, [pc, #364]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	4a5a      	ldr	r2, [pc, #360]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002b4c:	f023 0301 	bic.w	r3, r3, #1
 8002b50:	6213      	str	r3, [r2, #32]
 8002b52:	4b58      	ldr	r3, [pc, #352]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	4a57      	ldr	r2, [pc, #348]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	f023 0304 	bic.w	r3, r3, #4
 8002b5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d015      	beq.n	8002b92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b66:	f7ff f9ed 	bl	8001f44 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6e:	f7ff f9e9 	bl	8001f44 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e0b1      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b84:	4b4b      	ldr	r3, [pc, #300]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0ee      	beq.n	8002b6e <HAL_RCC_OscConfig+0x37e>
 8002b90:	e014      	b.n	8002bbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b92:	f7ff f9d7 	bl	8001f44 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9a:	f7ff f9d3 	bl	8001f44 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e09b      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb0:	4b40      	ldr	r3, [pc, #256]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1ee      	bne.n	8002b9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bbc:	7dfb      	ldrb	r3, [r7, #23]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d105      	bne.n	8002bce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc2:	4b3c      	ldr	r3, [pc, #240]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	4a3b      	ldr	r2, [pc, #236]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002bc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 8087 	beq.w	8002ce6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bd8:	4b36      	ldr	r3, [pc, #216]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d061      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d146      	bne.n	8002c7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bec:	4b33      	ldr	r3, [pc, #204]	@ (8002cbc <HAL_RCC_OscConfig+0x4cc>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf2:	f7ff f9a7 	bl	8001f44 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7ff f9a3 	bl	8001f44 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e06d      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c0c:	4b29      	ldr	r3, [pc, #164]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1f0      	bne.n	8002bfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c20:	d108      	bne.n	8002c34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c22:	4b24      	ldr	r3, [pc, #144]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	4921      	ldr	r1, [pc, #132]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c34:	4b1f      	ldr	r3, [pc, #124]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a19      	ldr	r1, [r3, #32]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c44:	430b      	orrs	r3, r1
 8002c46:	491b      	ldr	r1, [pc, #108]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cbc <HAL_RCC_OscConfig+0x4cc>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c52:	f7ff f977 	bl	8001f44 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5a:	f7ff f973 	bl	8001f44 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e03d      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c6c:	4b11      	ldr	r3, [pc, #68]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x46a>
 8002c78:	e035      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7a:	4b10      	ldr	r3, [pc, #64]	@ (8002cbc <HAL_RCC_OscConfig+0x4cc>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7ff f960 	bl	8001f44 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c88:	f7ff f95c 	bl	8001f44 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e026      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9a:	4b06      	ldr	r3, [pc, #24]	@ (8002cb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x498>
 8002ca6:	e01e      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d107      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e019      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4f8>
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40007000 	.word	0x40007000
 8002cbc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf0 <HAL_RCC_OscConfig+0x500>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d106      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d001      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40021000 	.word	0x40021000

08002cf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0d0      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d08:	4b6a      	ldr	r3, [pc, #424]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d910      	bls.n	8002d38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d16:	4b67      	ldr	r3, [pc, #412]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f023 0207 	bic.w	r2, r3, #7
 8002d1e:	4965      	ldr	r1, [pc, #404]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d26:	4b63      	ldr	r3, [pc, #396]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d001      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0b8      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d020      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d50:	4b59      	ldr	r3, [pc, #356]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4a58      	ldr	r2, [pc, #352]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d68:	4b53      	ldr	r3, [pc, #332]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	4a52      	ldr	r2, [pc, #328]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002d72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d74:	4b50      	ldr	r3, [pc, #320]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	494d      	ldr	r1, [pc, #308]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d040      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9a:	4b47      	ldr	r3, [pc, #284]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d115      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e07f      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db2:	4b41      	ldr	r3, [pc, #260]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e073      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc2:	4b3d      	ldr	r3, [pc, #244]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e06b      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dd2:	4b39      	ldr	r3, [pc, #228]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f023 0203 	bic.w	r2, r3, #3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4936      	ldr	r1, [pc, #216]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002de4:	f7ff f8ae 	bl	8001f44 <HAL_GetTick>
 8002de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	e00a      	b.n	8002e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dec:	f7ff f8aa 	bl	8001f44 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e053      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e02:	4b2d      	ldr	r3, [pc, #180]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 020c 	and.w	r2, r3, #12
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d1eb      	bne.n	8002dec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e14:	4b27      	ldr	r3, [pc, #156]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d210      	bcs.n	8002e44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e22:	4b24      	ldr	r3, [pc, #144]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 0207 	bic.w	r2, r3, #7
 8002e2a:	4922      	ldr	r1, [pc, #136]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e32:	4b20      	ldr	r3, [pc, #128]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d001      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e032      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e50:	4b19      	ldr	r3, [pc, #100]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4916      	ldr	r1, [pc, #88]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d009      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e6e:	4b12      	ldr	r3, [pc, #72]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	490e      	ldr	r1, [pc, #56]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e82:	f000 f821 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8002e86:	4602      	mov	r2, r0
 8002e88:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	091b      	lsrs	r3, r3, #4
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	490a      	ldr	r1, [pc, #40]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002e94:	5ccb      	ldrb	r3, [r1, r3]
 8002e96:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9a:	4a09      	ldr	r2, [pc, #36]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1cc>)
 8002e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e9e:	4b09      	ldr	r3, [pc, #36]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff f80c 	bl	8001ec0 <HAL_InitTick>

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40022000 	.word	0x40022000
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	0800858c 	.word	0x0800858c
 8002ec0:	20000000 	.word	0x20000000
 8002ec4:	20000004 	.word	0x20000004

08002ec8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	2300      	movs	r3, #0
 8002edc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 030c 	and.w	r3, r3, #12
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d002      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x30>
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d003      	beq.n	8002efe <HAL_RCC_GetSysClockFreq+0x36>
 8002ef6:	e027      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ef8:	4b19      	ldr	r3, [pc, #100]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002efa:	613b      	str	r3, [r7, #16]
      break;
 8002efc:	e027      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	0c9b      	lsrs	r3, r3, #18
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	4a17      	ldr	r2, [pc, #92]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f08:	5cd3      	ldrb	r3, [r2, r3]
 8002f0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d010      	beq.n	8002f38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f16:	4b11      	ldr	r3, [pc, #68]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x94>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	0c5b      	lsrs	r3, r3, #17
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	4a11      	ldr	r2, [pc, #68]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f22:	5cd3      	ldrb	r3, [r2, r3]
 8002f24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a0d      	ldr	r2, [pc, #52]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f2a:	fb03 f202 	mul.w	r2, r3, r2
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	e004      	b.n	8002f42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a0c      	ldr	r2, [pc, #48]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f3c:	fb02 f303 	mul.w	r3, r2, r3
 8002f40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	613b      	str	r3, [r7, #16]
      break;
 8002f46:	e002      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f48:	4b05      	ldr	r3, [pc, #20]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f4a:	613b      	str	r3, [r7, #16]
      break;
 8002f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f4e:	693b      	ldr	r3, [r7, #16]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	371c      	adds	r7, #28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	007a1200 	.word	0x007a1200
 8002f64:	0800859c 	.word	0x0800859c
 8002f68:	080085ac 	.word	0x080085ac
 8002f6c:	003d0900 	.word	0x003d0900

08002f70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f78:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa4 <RCC_Delay+0x34>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa8 <RCC_Delay+0x38>)
 8002f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f82:	0a5b      	lsrs	r3, r3, #9
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	fb02 f303 	mul.w	r3, r2, r3
 8002f8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f8c:	bf00      	nop
  }
  while (Delay --);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1e5a      	subs	r2, r3, #1
 8002f92:	60fa      	str	r2, [r7, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1f9      	bne.n	8002f8c <RCC_Delay+0x1c>
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr
 8002fa4:	20000000 	.word	0x20000000
 8002fa8:	10624dd3 	.word	0x10624dd3

08002fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e041      	b.n	8003042 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fe fd8a 	bl	8001aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4610      	mov	r0, r2
 8002fec:	f000 fc98 	bl	8003920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b01      	cmp	r3, #1
 800305e:	d001      	beq.n	8003064 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e032      	b.n	80030ca <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a18      	ldr	r2, [pc, #96]	@ (80030d4 <HAL_TIM_Base_Start+0x88>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d00e      	beq.n	8003094 <HAL_TIM_Base_Start+0x48>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800307e:	d009      	beq.n	8003094 <HAL_TIM_Base_Start+0x48>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a14      	ldr	r2, [pc, #80]	@ (80030d8 <HAL_TIM_Base_Start+0x8c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d004      	beq.n	8003094 <HAL_TIM_Base_Start+0x48>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a13      	ldr	r2, [pc, #76]	@ (80030dc <HAL_TIM_Base_Start+0x90>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d111      	bne.n	80030b8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b06      	cmp	r3, #6
 80030a4:	d010      	beq.n	80030c8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 0201 	orr.w	r2, r2, #1
 80030b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b6:	e007      	b.n	80030c8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr
 80030d4:	40012c00 	.word	0x40012c00
 80030d8:	40000400 	.word	0x40000400
 80030dc:	40000800 	.word	0x40000800

080030e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e041      	b.n	8003176 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f839 	bl	800317e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3304      	adds	r3, #4
 800311c:	4619      	mov	r1, r3
 800311e:	4610      	mov	r0, r2
 8003120:	f000 fbfe 	bl	8003920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d104      	bne.n	80031ae <HAL_TIM_IC_Start_IT+0x1e>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	e013      	b.n	80031d6 <HAL_TIM_IC_Start_IT+0x46>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d104      	bne.n	80031be <HAL_TIM_IC_Start_IT+0x2e>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	e00b      	b.n	80031d6 <HAL_TIM_IC_Start_IT+0x46>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d104      	bne.n	80031ce <HAL_TIM_IC_Start_IT+0x3e>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	e003      	b.n	80031d6 <HAL_TIM_IC_Start_IT+0x46>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d104      	bne.n	80031e8 <HAL_TIM_IC_Start_IT+0x58>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	e013      	b.n	8003210 <HAL_TIM_IC_Start_IT+0x80>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d104      	bne.n	80031f8 <HAL_TIM_IC_Start_IT+0x68>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	e00b      	b.n	8003210 <HAL_TIM_IC_Start_IT+0x80>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d104      	bne.n	8003208 <HAL_TIM_IC_Start_IT+0x78>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003204:	b2db      	uxtb	r3, r3
 8003206:	e003      	b.n	8003210 <HAL_TIM_IC_Start_IT+0x80>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800320e:	b2db      	uxtb	r3, r3
 8003210:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003212:	7bbb      	ldrb	r3, [r7, #14]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d102      	bne.n	800321e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003218:	7b7b      	ldrb	r3, [r7, #13]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d001      	beq.n	8003222 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e0b8      	b.n	8003394 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d104      	bne.n	8003232 <HAL_TIM_IC_Start_IT+0xa2>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003230:	e013      	b.n	800325a <HAL_TIM_IC_Start_IT+0xca>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b04      	cmp	r3, #4
 8003236:	d104      	bne.n	8003242 <HAL_TIM_IC_Start_IT+0xb2>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003240:	e00b      	b.n	800325a <HAL_TIM_IC_Start_IT+0xca>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b08      	cmp	r3, #8
 8003246:	d104      	bne.n	8003252 <HAL_TIM_IC_Start_IT+0xc2>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003250:	e003      	b.n	800325a <HAL_TIM_IC_Start_IT+0xca>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2202      	movs	r2, #2
 8003256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d104      	bne.n	800326a <HAL_TIM_IC_Start_IT+0xda>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003268:	e013      	b.n	8003292 <HAL_TIM_IC_Start_IT+0x102>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b04      	cmp	r3, #4
 800326e:	d104      	bne.n	800327a <HAL_TIM_IC_Start_IT+0xea>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003278:	e00b      	b.n	8003292 <HAL_TIM_IC_Start_IT+0x102>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b08      	cmp	r3, #8
 800327e:	d104      	bne.n	800328a <HAL_TIM_IC_Start_IT+0xfa>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003288:	e003      	b.n	8003292 <HAL_TIM_IC_Start_IT+0x102>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2202      	movs	r2, #2
 800328e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b0c      	cmp	r3, #12
 8003296:	d841      	bhi.n	800331c <HAL_TIM_IC_Start_IT+0x18c>
 8003298:	a201      	add	r2, pc, #4	@ (adr r2, 80032a0 <HAL_TIM_IC_Start_IT+0x110>)
 800329a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329e:	bf00      	nop
 80032a0:	080032d5 	.word	0x080032d5
 80032a4:	0800331d 	.word	0x0800331d
 80032a8:	0800331d 	.word	0x0800331d
 80032ac:	0800331d 	.word	0x0800331d
 80032b0:	080032e7 	.word	0x080032e7
 80032b4:	0800331d 	.word	0x0800331d
 80032b8:	0800331d 	.word	0x0800331d
 80032bc:	0800331d 	.word	0x0800331d
 80032c0:	080032f9 	.word	0x080032f9
 80032c4:	0800331d 	.word	0x0800331d
 80032c8:	0800331d 	.word	0x0800331d
 80032cc:	0800331d 	.word	0x0800331d
 80032d0:	0800330b 	.word	0x0800330b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0202 	orr.w	r2, r2, #2
 80032e2:	60da      	str	r2, [r3, #12]
      break;
 80032e4:	e01d      	b.n	8003322 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0204 	orr.w	r2, r2, #4
 80032f4:	60da      	str	r2, [r3, #12]
      break;
 80032f6:	e014      	b.n	8003322 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0208 	orr.w	r2, r2, #8
 8003306:	60da      	str	r2, [r3, #12]
      break;
 8003308:	e00b      	b.n	8003322 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 0210 	orr.w	r2, r2, #16
 8003318:	60da      	str	r2, [r3, #12]
      break;
 800331a:	e002      	b.n	8003322 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	73fb      	strb	r3, [r7, #15]
      break;
 8003320:	bf00      	nop
  }

  if (status == HAL_OK)
 8003322:	7bfb      	ldrb	r3, [r7, #15]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d134      	bne.n	8003392 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2201      	movs	r2, #1
 800332e:	6839      	ldr	r1, [r7, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f000 fd06 	bl	8003d42 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a18      	ldr	r2, [pc, #96]	@ (800339c <HAL_TIM_IC_Start_IT+0x20c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00e      	beq.n	800335e <HAL_TIM_IC_Start_IT+0x1ce>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003348:	d009      	beq.n	800335e <HAL_TIM_IC_Start_IT+0x1ce>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a14      	ldr	r2, [pc, #80]	@ (80033a0 <HAL_TIM_IC_Start_IT+0x210>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d004      	beq.n	800335e <HAL_TIM_IC_Start_IT+0x1ce>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a12      	ldr	r2, [pc, #72]	@ (80033a4 <HAL_TIM_IC_Start_IT+0x214>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d111      	bne.n	8003382 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b06      	cmp	r3, #6
 800336e:	d010      	beq.n	8003392 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003380:	e007      	b.n	8003392 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0201 	orr.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003392:	7bfb      	ldrb	r3, [r7, #15]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	40000400 	.word	0x40000400
 80033a4:	40000800 	.word	0x40000800

080033a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d020      	beq.n	800340c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d01b      	beq.n	800340c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0202 	mvn.w	r2, #2
 80033dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fd fffe 	bl	80013f4 <HAL_TIM_IC_CaptureCallback>
 80033f8:	e005      	b.n	8003406 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fa75 	bl	80038ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fa7b 	bl	80038fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	d020      	beq.n	8003458 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d01b      	beq.n	8003458 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0204 	mvn.w	r2, #4
 8003428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2202      	movs	r2, #2
 800342e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fd ffd8 	bl	80013f4 <HAL_TIM_IC_CaptureCallback>
 8003444:	e005      	b.n	8003452 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fa4f 	bl	80038ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fa55 	bl	80038fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d020      	beq.n	80034a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01b      	beq.n	80034a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0208 	mvn.w	r2, #8
 8003474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2204      	movs	r2, #4
 800347a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fd ffb2 	bl	80013f4 <HAL_TIM_IC_CaptureCallback>
 8003490:	e005      	b.n	800349e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fa29 	bl	80038ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fa2f 	bl	80038fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 0310 	and.w	r3, r3, #16
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d020      	beq.n	80034f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d01b      	beq.n	80034f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0210 	mvn.w	r2, #16
 80034c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2208      	movs	r2, #8
 80034c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd ff8c 	bl	80013f4 <HAL_TIM_IC_CaptureCallback>
 80034dc:	e005      	b.n	80034ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fa03 	bl	80038ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fa09 	bl	80038fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00c      	beq.n	8003514 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d007      	beq.n	8003514 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0201 	mvn.w	r2, #1
 800350c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f9e2 	bl	80038d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00c      	beq.n	8003538 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003524:	2b00      	cmp	r3, #0
 8003526:	d007      	beq.n	8003538 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fc91 	bl	8003e5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00c      	beq.n	800355c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d007      	beq.n	800355c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f9d9 	bl	800390e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00c      	beq.n	8003580 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f003 0320 	and.w	r3, r3, #32
 800356c:	2b00      	cmp	r3, #0
 800356e:	d007      	beq.n	8003580 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0220 	mvn.w	r2, #32
 8003578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fc64 	bl	8003e48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003580:	bf00      	nop
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e088      	b.n	80036b8 <HAL_TIM_IC_ConfigChannel+0x130>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d11b      	bne.n	80035ec <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80035c4:	f000 fa1a 	bl	80039fc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 020c 	bic.w	r2, r2, #12
 80035d6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6999      	ldr	r1, [r3, #24]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	619a      	str	r2, [r3, #24]
 80035ea:	e060      	b.n	80036ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d11c      	bne.n	800362c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003602:	f000 fa83 	bl	8003b0c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699a      	ldr	r2, [r3, #24]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003614:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6999      	ldr	r1, [r3, #24]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	021a      	lsls	r2, r3, #8
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	619a      	str	r2, [r3, #24]
 800362a:	e040      	b.n	80036ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b08      	cmp	r3, #8
 8003630:	d11b      	bne.n	800366a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003642:	f000 face 	bl	8003be2 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 020c 	bic.w	r2, r2, #12
 8003654:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69d9      	ldr	r1, [r3, #28]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	61da      	str	r2, [r3, #28]
 8003668:	e021      	b.n	80036ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b0c      	cmp	r3, #12
 800366e:	d11c      	bne.n	80036aa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003680:	f000 faea 	bl	8003c58 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69da      	ldr	r2, [r3, #28]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003692:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	69d9      	ldr	r1, [r3, #28]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	021a      	lsls	r2, r3, #8
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	61da      	str	r2, [r3, #28]
 80036a8:	e001      	b.n	80036ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_TIM_ConfigClockSource+0x1c>
 80036d8:	2302      	movs	r3, #2
 80036da:	e0b4      	b.n	8003846 <HAL_TIM_ConfigClockSource+0x186>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80036fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003702:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003714:	d03e      	beq.n	8003794 <HAL_TIM_ConfigClockSource+0xd4>
 8003716:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800371a:	f200 8087 	bhi.w	800382c <HAL_TIM_ConfigClockSource+0x16c>
 800371e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003722:	f000 8086 	beq.w	8003832 <HAL_TIM_ConfigClockSource+0x172>
 8003726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800372a:	d87f      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x16c>
 800372c:	2b70      	cmp	r3, #112	@ 0x70
 800372e:	d01a      	beq.n	8003766 <HAL_TIM_ConfigClockSource+0xa6>
 8003730:	2b70      	cmp	r3, #112	@ 0x70
 8003732:	d87b      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x16c>
 8003734:	2b60      	cmp	r3, #96	@ 0x60
 8003736:	d050      	beq.n	80037da <HAL_TIM_ConfigClockSource+0x11a>
 8003738:	2b60      	cmp	r3, #96	@ 0x60
 800373a:	d877      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x16c>
 800373c:	2b50      	cmp	r3, #80	@ 0x50
 800373e:	d03c      	beq.n	80037ba <HAL_TIM_ConfigClockSource+0xfa>
 8003740:	2b50      	cmp	r3, #80	@ 0x50
 8003742:	d873      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x16c>
 8003744:	2b40      	cmp	r3, #64	@ 0x40
 8003746:	d058      	beq.n	80037fa <HAL_TIM_ConfigClockSource+0x13a>
 8003748:	2b40      	cmp	r3, #64	@ 0x40
 800374a:	d86f      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x16c>
 800374c:	2b30      	cmp	r3, #48	@ 0x30
 800374e:	d064      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x15a>
 8003750:	2b30      	cmp	r3, #48	@ 0x30
 8003752:	d86b      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x16c>
 8003754:	2b20      	cmp	r3, #32
 8003756:	d060      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x15a>
 8003758:	2b20      	cmp	r3, #32
 800375a:	d867      	bhi.n	800382c <HAL_TIM_ConfigClockSource+0x16c>
 800375c:	2b00      	cmp	r3, #0
 800375e:	d05c      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x15a>
 8003760:	2b10      	cmp	r3, #16
 8003762:	d05a      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x15a>
 8003764:	e062      	b.n	800382c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003776:	f000 fac5 	bl	8003d04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003788:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	609a      	str	r2, [r3, #8]
      break;
 8003792:	e04f      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037a4:	f000 faae 	bl	8003d04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037b6:	609a      	str	r2, [r3, #8]
      break;
 80037b8:	e03c      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c6:	461a      	mov	r2, r3
 80037c8:	f000 f972 	bl	8003ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2150      	movs	r1, #80	@ 0x50
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fa7c 	bl	8003cd0 <TIM_ITRx_SetConfig>
      break;
 80037d8:	e02c      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037e6:	461a      	mov	r2, r3
 80037e8:	f000 f9cc 	bl	8003b84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2160      	movs	r1, #96	@ 0x60
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 fa6c 	bl	8003cd0 <TIM_ITRx_SetConfig>
      break;
 80037f8:	e01c      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003806:	461a      	mov	r2, r3
 8003808:	f000 f952 	bl	8003ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2140      	movs	r1, #64	@ 0x40
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fa5c 	bl	8003cd0 <TIM_ITRx_SetConfig>
      break;
 8003818:	e00c      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4619      	mov	r1, r3
 8003824:	4610      	mov	r0, r2
 8003826:	f000 fa53 	bl	8003cd0 <TIM_ITRx_SetConfig>
      break;
 800382a:	e003      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	73fb      	strb	r3, [r7, #15]
      break;
 8003830:	e000      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003832:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003844:	7bfb      	ldrb	r3, [r7, #15]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b0c      	cmp	r3, #12
 8003862:	d831      	bhi.n	80038c8 <HAL_TIM_ReadCapturedValue+0x78>
 8003864:	a201      	add	r2, pc, #4	@ (adr r2, 800386c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386a:	bf00      	nop
 800386c:	080038a1 	.word	0x080038a1
 8003870:	080038c9 	.word	0x080038c9
 8003874:	080038c9 	.word	0x080038c9
 8003878:	080038c9 	.word	0x080038c9
 800387c:	080038ab 	.word	0x080038ab
 8003880:	080038c9 	.word	0x080038c9
 8003884:	080038c9 	.word	0x080038c9
 8003888:	080038c9 	.word	0x080038c9
 800388c:	080038b5 	.word	0x080038b5
 8003890:	080038c9 	.word	0x080038c9
 8003894:	080038c9 	.word	0x080038c9
 8003898:	080038c9 	.word	0x080038c9
 800389c:	080038bf 	.word	0x080038bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a6:	60fb      	str	r3, [r7, #12]

      break;
 80038a8:	e00f      	b.n	80038ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b0:	60fb      	str	r3, [r7, #12]

      break;
 80038b2:	e00a      	b.n	80038ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ba:	60fb      	str	r3, [r7, #12]

      break;
 80038bc:	e005      	b.n	80038ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c4:	60fb      	str	r3, [r7, #12]

      break;
 80038c6:	e000      	b.n	80038ca <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80038c8:	bf00      	nop
  }

  return tmpreg;
 80038ca:	68fb      	ldr	r3, [r7, #12]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop

080038d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr

080038ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr

080038fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr

0800390e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr

08003920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a2f      	ldr	r2, [pc, #188]	@ (80039f0 <TIM_Base_SetConfig+0xd0>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00b      	beq.n	8003950 <TIM_Base_SetConfig+0x30>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800393e:	d007      	beq.n	8003950 <TIM_Base_SetConfig+0x30>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a2c      	ldr	r2, [pc, #176]	@ (80039f4 <TIM_Base_SetConfig+0xd4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d003      	beq.n	8003950 <TIM_Base_SetConfig+0x30>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a2b      	ldr	r2, [pc, #172]	@ (80039f8 <TIM_Base_SetConfig+0xd8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d108      	bne.n	8003962 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a22      	ldr	r2, [pc, #136]	@ (80039f0 <TIM_Base_SetConfig+0xd0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00b      	beq.n	8003982 <TIM_Base_SetConfig+0x62>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003970:	d007      	beq.n	8003982 <TIM_Base_SetConfig+0x62>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a1f      	ldr	r2, [pc, #124]	@ (80039f4 <TIM_Base_SetConfig+0xd4>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d003      	beq.n	8003982 <TIM_Base_SetConfig+0x62>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a1e      	ldr	r2, [pc, #120]	@ (80039f8 <TIM_Base_SetConfig+0xd8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d108      	bne.n	8003994 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a0d      	ldr	r2, [pc, #52]	@ (80039f0 <TIM_Base_SetConfig+0xd0>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d103      	bne.n	80039c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d005      	beq.n	80039e6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f023 0201 	bic.w	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	611a      	str	r2, [r3, #16]
  }
}
 80039e6:	bf00      	nop
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr
 80039f0:	40012c00 	.word	0x40012c00
 80039f4:	40000400 	.word	0x40000400
 80039f8:	40000800 	.word	0x40000800

080039fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	f023 0201 	bic.w	r2, r3, #1
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4a1f      	ldr	r2, [pc, #124]	@ (8003aa4 <TIM_TI1_SetConfig+0xa8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00b      	beq.n	8003a42 <TIM_TI1_SetConfig+0x46>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a30:	d007      	beq.n	8003a42 <TIM_TI1_SetConfig+0x46>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa8 <TIM_TI1_SetConfig+0xac>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d003      	beq.n	8003a42 <TIM_TI1_SetConfig+0x46>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8003aac <TIM_TI1_SetConfig+0xb0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d101      	bne.n	8003a46 <TIM_TI1_SetConfig+0x4a>
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <TIM_TI1_SetConfig+0x4c>
 8003a46:	2300      	movs	r3, #0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f023 0303 	bic.w	r3, r3, #3
 8003a52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	e003      	b.n	8003a66 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f023 030a 	bic.w	r3, r3, #10
 8003a80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f003 030a 	and.w	r3, r3, #10
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	621a      	str	r2, [r3, #32]
}
 8003a9a:	bf00      	nop
 8003a9c:	371c      	adds	r7, #28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	40012c00 	.word	0x40012c00
 8003aa8:	40000400 	.word	0x40000400
 8003aac:	40000800 	.word	0x40000800

08003ab0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	f023 0201 	bic.w	r2, r3, #1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f023 030a 	bic.w	r3, r3, #10
 8003aec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	621a      	str	r2, [r3, #32]
}
 8003b02:	bf00      	nop
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr

08003b0c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	f023 0210 	bic.w	r2, r3, #16
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	021b      	lsls	r3, r3, #8
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	031b      	lsls	r3, r3, #12
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b5e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	621a      	str	r2, [r3, #32]
}
 8003b7a:	bf00      	nop
 8003b7c:	371c      	adds	r7, #28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr

08003b84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	f023 0210 	bic.w	r2, r3, #16
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	031b      	lsls	r3, r3, #12
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003bc0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	621a      	str	r2, [r3, #32]
}
 8003bd8:	bf00      	nop
 8003bda:	371c      	adds	r7, #28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bc80      	pop	{r7}
 8003be0:	4770      	bx	lr

08003be2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b087      	sub	sp, #28
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	607a      	str	r2, [r7, #4]
 8003bee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f023 0303 	bic.w	r3, r3, #3
 8003c0e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c1e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c32:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	621a      	str	r2, [r3, #32]
}
 8003c4e:	bf00      	nop
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr

08003c58 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c84:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	021b      	lsls	r3, r3, #8
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c96:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	031b      	lsls	r3, r3, #12
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003caa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	031b      	lsls	r3, r3, #12
 8003cb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	621a      	str	r2, [r3, #32]
}
 8003cc6:	bf00      	nop
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr

08003cd0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ce6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f043 0307 	orr.w	r3, r3, #7
 8003cf2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	609a      	str	r2, [r3, #8]
}
 8003cfa:	bf00      	nop
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr

08003d04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
 8003d10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	021a      	lsls	r2, r3, #8
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	609a      	str	r2, [r3, #8]
}
 8003d38:	bf00      	nop
 8003d3a:	371c      	adds	r7, #28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bc80      	pop	{r7}
 8003d40:	4770      	bx	lr

08003d42 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b087      	sub	sp, #28
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	60f8      	str	r0, [r7, #12]
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	2201      	movs	r2, #1
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a1a      	ldr	r2, [r3, #32]
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	43db      	mvns	r3, r3
 8003d64:	401a      	ands	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a1a      	ldr	r2, [r3, #32]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f003 031f 	and.w	r3, r3, #31
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	621a      	str	r2, [r3, #32]
}
 8003d80:	bf00      	nop
 8003d82:	371c      	adds	r7, #28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr
	...

08003d8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e046      	b.n	8003e32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a16      	ldr	r2, [pc, #88]	@ (8003e3c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00e      	beq.n	8003e06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df0:	d009      	beq.n	8003e06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a12      	ldr	r2, [pc, #72]	@ (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d004      	beq.n	8003e06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a10      	ldr	r2, [pc, #64]	@ (8003e44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d10c      	bne.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr
 8003e3c:	40012c00 	.word	0x40012c00
 8003e40:	40000400 	.word	0x40000400
 8003e44:	40000800 	.word	0x40000800

08003e48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr

08003e5a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr

08003e6c <__cvt>:
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e72:	461d      	mov	r5, r3
 8003e74:	bfbb      	ittet	lt
 8003e76:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003e7a:	461d      	movlt	r5, r3
 8003e7c:	2300      	movge	r3, #0
 8003e7e:	232d      	movlt	r3, #45	@ 0x2d
 8003e80:	b088      	sub	sp, #32
 8003e82:	4614      	mov	r4, r2
 8003e84:	bfb8      	it	lt
 8003e86:	4614      	movlt	r4, r2
 8003e88:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003e8a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003e8c:	7013      	strb	r3, [r2, #0]
 8003e8e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003e90:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003e94:	f023 0820 	bic.w	r8, r3, #32
 8003e98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e9c:	d005      	beq.n	8003eaa <__cvt+0x3e>
 8003e9e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003ea2:	d100      	bne.n	8003ea6 <__cvt+0x3a>
 8003ea4:	3601      	adds	r6, #1
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e000      	b.n	8003eac <__cvt+0x40>
 8003eaa:	2303      	movs	r3, #3
 8003eac:	aa07      	add	r2, sp, #28
 8003eae:	9204      	str	r2, [sp, #16]
 8003eb0:	aa06      	add	r2, sp, #24
 8003eb2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003eb6:	e9cd 3600 	strd	r3, r6, [sp]
 8003eba:	4622      	mov	r2, r4
 8003ebc:	462b      	mov	r3, r5
 8003ebe:	f001 f883 	bl	8004fc8 <_dtoa_r>
 8003ec2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003ec6:	4607      	mov	r7, r0
 8003ec8:	d119      	bne.n	8003efe <__cvt+0x92>
 8003eca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003ecc:	07db      	lsls	r3, r3, #31
 8003ece:	d50e      	bpl.n	8003eee <__cvt+0x82>
 8003ed0:	eb00 0906 	add.w	r9, r0, r6
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	4620      	mov	r0, r4
 8003eda:	4629      	mov	r1, r5
 8003edc:	f7fc fd64 	bl	80009a8 <__aeabi_dcmpeq>
 8003ee0:	b108      	cbz	r0, 8003ee6 <__cvt+0x7a>
 8003ee2:	f8cd 901c 	str.w	r9, [sp, #28]
 8003ee6:	2230      	movs	r2, #48	@ 0x30
 8003ee8:	9b07      	ldr	r3, [sp, #28]
 8003eea:	454b      	cmp	r3, r9
 8003eec:	d31e      	bcc.n	8003f2c <__cvt+0xc0>
 8003eee:	4638      	mov	r0, r7
 8003ef0:	9b07      	ldr	r3, [sp, #28]
 8003ef2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003ef4:	1bdb      	subs	r3, r3, r7
 8003ef6:	6013      	str	r3, [r2, #0]
 8003ef8:	b008      	add	sp, #32
 8003efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003efe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003f02:	eb00 0906 	add.w	r9, r0, r6
 8003f06:	d1e5      	bne.n	8003ed4 <__cvt+0x68>
 8003f08:	7803      	ldrb	r3, [r0, #0]
 8003f0a:	2b30      	cmp	r3, #48	@ 0x30
 8003f0c:	d10a      	bne.n	8003f24 <__cvt+0xb8>
 8003f0e:	2200      	movs	r2, #0
 8003f10:	2300      	movs	r3, #0
 8003f12:	4620      	mov	r0, r4
 8003f14:	4629      	mov	r1, r5
 8003f16:	f7fc fd47 	bl	80009a8 <__aeabi_dcmpeq>
 8003f1a:	b918      	cbnz	r0, 8003f24 <__cvt+0xb8>
 8003f1c:	f1c6 0601 	rsb	r6, r6, #1
 8003f20:	f8ca 6000 	str.w	r6, [sl]
 8003f24:	f8da 3000 	ldr.w	r3, [sl]
 8003f28:	4499      	add	r9, r3
 8003f2a:	e7d3      	b.n	8003ed4 <__cvt+0x68>
 8003f2c:	1c59      	adds	r1, r3, #1
 8003f2e:	9107      	str	r1, [sp, #28]
 8003f30:	701a      	strb	r2, [r3, #0]
 8003f32:	e7d9      	b.n	8003ee8 <__cvt+0x7c>

08003f34 <__exponent>:
 8003f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f36:	2900      	cmp	r1, #0
 8003f38:	bfb6      	itet	lt
 8003f3a:	232d      	movlt	r3, #45	@ 0x2d
 8003f3c:	232b      	movge	r3, #43	@ 0x2b
 8003f3e:	4249      	neglt	r1, r1
 8003f40:	2909      	cmp	r1, #9
 8003f42:	7002      	strb	r2, [r0, #0]
 8003f44:	7043      	strb	r3, [r0, #1]
 8003f46:	dd29      	ble.n	8003f9c <__exponent+0x68>
 8003f48:	f10d 0307 	add.w	r3, sp, #7
 8003f4c:	461d      	mov	r5, r3
 8003f4e:	270a      	movs	r7, #10
 8003f50:	fbb1 f6f7 	udiv	r6, r1, r7
 8003f54:	461a      	mov	r2, r3
 8003f56:	fb07 1416 	mls	r4, r7, r6, r1
 8003f5a:	3430      	adds	r4, #48	@ 0x30
 8003f5c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003f60:	460c      	mov	r4, r1
 8003f62:	2c63      	cmp	r4, #99	@ 0x63
 8003f64:	4631      	mov	r1, r6
 8003f66:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003f6a:	dcf1      	bgt.n	8003f50 <__exponent+0x1c>
 8003f6c:	3130      	adds	r1, #48	@ 0x30
 8003f6e:	1e94      	subs	r4, r2, #2
 8003f70:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003f74:	4623      	mov	r3, r4
 8003f76:	1c41      	adds	r1, r0, #1
 8003f78:	42ab      	cmp	r3, r5
 8003f7a:	d30a      	bcc.n	8003f92 <__exponent+0x5e>
 8003f7c:	f10d 0309 	add.w	r3, sp, #9
 8003f80:	1a9b      	subs	r3, r3, r2
 8003f82:	42ac      	cmp	r4, r5
 8003f84:	bf88      	it	hi
 8003f86:	2300      	movhi	r3, #0
 8003f88:	3302      	adds	r3, #2
 8003f8a:	4403      	add	r3, r0
 8003f8c:	1a18      	subs	r0, r3, r0
 8003f8e:	b003      	add	sp, #12
 8003f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f92:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003f96:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003f9a:	e7ed      	b.n	8003f78 <__exponent+0x44>
 8003f9c:	2330      	movs	r3, #48	@ 0x30
 8003f9e:	3130      	adds	r1, #48	@ 0x30
 8003fa0:	7083      	strb	r3, [r0, #2]
 8003fa2:	70c1      	strb	r1, [r0, #3]
 8003fa4:	1d03      	adds	r3, r0, #4
 8003fa6:	e7f1      	b.n	8003f8c <__exponent+0x58>

08003fa8 <_printf_float>:
 8003fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fac:	b091      	sub	sp, #68	@ 0x44
 8003fae:	460c      	mov	r4, r1
 8003fb0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003fb4:	4616      	mov	r6, r2
 8003fb6:	461f      	mov	r7, r3
 8003fb8:	4605      	mov	r5, r0
 8003fba:	f000 fef1 	bl	8004da0 <_localeconv_r>
 8003fbe:	6803      	ldr	r3, [r0, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	9308      	str	r3, [sp, #32]
 8003fc4:	f7fc f8c4 	bl	8000150 <strlen>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	930e      	str	r3, [sp, #56]	@ 0x38
 8003fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8003fd0:	9009      	str	r0, [sp, #36]	@ 0x24
 8003fd2:	3307      	adds	r3, #7
 8003fd4:	f023 0307 	bic.w	r3, r3, #7
 8003fd8:	f103 0208 	add.w	r2, r3, #8
 8003fdc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003fe0:	f8d4 b000 	ldr.w	fp, [r4]
 8003fe4:	f8c8 2000 	str.w	r2, [r8]
 8003fe8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003fec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003ff0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ff2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003ff6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ffa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003ffe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004002:	4b9c      	ldr	r3, [pc, #624]	@ (8004274 <_printf_float+0x2cc>)
 8004004:	f7fc fd02 	bl	8000a0c <__aeabi_dcmpun>
 8004008:	bb70      	cbnz	r0, 8004068 <_printf_float+0xc0>
 800400a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800400e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004012:	4b98      	ldr	r3, [pc, #608]	@ (8004274 <_printf_float+0x2cc>)
 8004014:	f7fc fcdc 	bl	80009d0 <__aeabi_dcmple>
 8004018:	bb30      	cbnz	r0, 8004068 <_printf_float+0xc0>
 800401a:	2200      	movs	r2, #0
 800401c:	2300      	movs	r3, #0
 800401e:	4640      	mov	r0, r8
 8004020:	4649      	mov	r1, r9
 8004022:	f7fc fccb 	bl	80009bc <__aeabi_dcmplt>
 8004026:	b110      	cbz	r0, 800402e <_printf_float+0x86>
 8004028:	232d      	movs	r3, #45	@ 0x2d
 800402a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800402e:	4a92      	ldr	r2, [pc, #584]	@ (8004278 <_printf_float+0x2d0>)
 8004030:	4b92      	ldr	r3, [pc, #584]	@ (800427c <_printf_float+0x2d4>)
 8004032:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004036:	bf94      	ite	ls
 8004038:	4690      	movls	r8, r2
 800403a:	4698      	movhi	r8, r3
 800403c:	2303      	movs	r3, #3
 800403e:	f04f 0900 	mov.w	r9, #0
 8004042:	6123      	str	r3, [r4, #16]
 8004044:	f02b 0304 	bic.w	r3, fp, #4
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	4633      	mov	r3, r6
 800404c:	4621      	mov	r1, r4
 800404e:	4628      	mov	r0, r5
 8004050:	9700      	str	r7, [sp, #0]
 8004052:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004054:	f000 f9d4 	bl	8004400 <_printf_common>
 8004058:	3001      	adds	r0, #1
 800405a:	f040 8090 	bne.w	800417e <_printf_float+0x1d6>
 800405e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004062:	b011      	add	sp, #68	@ 0x44
 8004064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004068:	4642      	mov	r2, r8
 800406a:	464b      	mov	r3, r9
 800406c:	4640      	mov	r0, r8
 800406e:	4649      	mov	r1, r9
 8004070:	f7fc fccc 	bl	8000a0c <__aeabi_dcmpun>
 8004074:	b148      	cbz	r0, 800408a <_printf_float+0xe2>
 8004076:	464b      	mov	r3, r9
 8004078:	2b00      	cmp	r3, #0
 800407a:	bfb8      	it	lt
 800407c:	232d      	movlt	r3, #45	@ 0x2d
 800407e:	4a80      	ldr	r2, [pc, #512]	@ (8004280 <_printf_float+0x2d8>)
 8004080:	bfb8      	it	lt
 8004082:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004086:	4b7f      	ldr	r3, [pc, #508]	@ (8004284 <_printf_float+0x2dc>)
 8004088:	e7d3      	b.n	8004032 <_printf_float+0x8a>
 800408a:	6863      	ldr	r3, [r4, #4]
 800408c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	d13f      	bne.n	8004114 <_printf_float+0x16c>
 8004094:	2306      	movs	r3, #6
 8004096:	6063      	str	r3, [r4, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800409e:	6023      	str	r3, [r4, #0]
 80040a0:	9206      	str	r2, [sp, #24]
 80040a2:	aa0e      	add	r2, sp, #56	@ 0x38
 80040a4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80040a8:	aa0d      	add	r2, sp, #52	@ 0x34
 80040aa:	9203      	str	r2, [sp, #12]
 80040ac:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80040b0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80040b4:	6863      	ldr	r3, [r4, #4]
 80040b6:	4642      	mov	r2, r8
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	4628      	mov	r0, r5
 80040bc:	464b      	mov	r3, r9
 80040be:	910a      	str	r1, [sp, #40]	@ 0x28
 80040c0:	f7ff fed4 	bl	8003e6c <__cvt>
 80040c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80040c6:	4680      	mov	r8, r0
 80040c8:	2947      	cmp	r1, #71	@ 0x47
 80040ca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80040cc:	d128      	bne.n	8004120 <_printf_float+0x178>
 80040ce:	1cc8      	adds	r0, r1, #3
 80040d0:	db02      	blt.n	80040d8 <_printf_float+0x130>
 80040d2:	6863      	ldr	r3, [r4, #4]
 80040d4:	4299      	cmp	r1, r3
 80040d6:	dd40      	ble.n	800415a <_printf_float+0x1b2>
 80040d8:	f1aa 0a02 	sub.w	sl, sl, #2
 80040dc:	fa5f fa8a 	uxtb.w	sl, sl
 80040e0:	4652      	mov	r2, sl
 80040e2:	3901      	subs	r1, #1
 80040e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80040e8:	910d      	str	r1, [sp, #52]	@ 0x34
 80040ea:	f7ff ff23 	bl	8003f34 <__exponent>
 80040ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80040f0:	4681      	mov	r9, r0
 80040f2:	1813      	adds	r3, r2, r0
 80040f4:	2a01      	cmp	r2, #1
 80040f6:	6123      	str	r3, [r4, #16]
 80040f8:	dc02      	bgt.n	8004100 <_printf_float+0x158>
 80040fa:	6822      	ldr	r2, [r4, #0]
 80040fc:	07d2      	lsls	r2, r2, #31
 80040fe:	d501      	bpl.n	8004104 <_printf_float+0x15c>
 8004100:	3301      	adds	r3, #1
 8004102:	6123      	str	r3, [r4, #16]
 8004104:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004108:	2b00      	cmp	r3, #0
 800410a:	d09e      	beq.n	800404a <_printf_float+0xa2>
 800410c:	232d      	movs	r3, #45	@ 0x2d
 800410e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004112:	e79a      	b.n	800404a <_printf_float+0xa2>
 8004114:	2947      	cmp	r1, #71	@ 0x47
 8004116:	d1bf      	bne.n	8004098 <_printf_float+0xf0>
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1bd      	bne.n	8004098 <_printf_float+0xf0>
 800411c:	2301      	movs	r3, #1
 800411e:	e7ba      	b.n	8004096 <_printf_float+0xee>
 8004120:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004124:	d9dc      	bls.n	80040e0 <_printf_float+0x138>
 8004126:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800412a:	d118      	bne.n	800415e <_printf_float+0x1b6>
 800412c:	2900      	cmp	r1, #0
 800412e:	6863      	ldr	r3, [r4, #4]
 8004130:	dd0b      	ble.n	800414a <_printf_float+0x1a2>
 8004132:	6121      	str	r1, [r4, #16]
 8004134:	b913      	cbnz	r3, 800413c <_printf_float+0x194>
 8004136:	6822      	ldr	r2, [r4, #0]
 8004138:	07d0      	lsls	r0, r2, #31
 800413a:	d502      	bpl.n	8004142 <_printf_float+0x19a>
 800413c:	3301      	adds	r3, #1
 800413e:	440b      	add	r3, r1
 8004140:	6123      	str	r3, [r4, #16]
 8004142:	f04f 0900 	mov.w	r9, #0
 8004146:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004148:	e7dc      	b.n	8004104 <_printf_float+0x15c>
 800414a:	b913      	cbnz	r3, 8004152 <_printf_float+0x1aa>
 800414c:	6822      	ldr	r2, [r4, #0]
 800414e:	07d2      	lsls	r2, r2, #31
 8004150:	d501      	bpl.n	8004156 <_printf_float+0x1ae>
 8004152:	3302      	adds	r3, #2
 8004154:	e7f4      	b.n	8004140 <_printf_float+0x198>
 8004156:	2301      	movs	r3, #1
 8004158:	e7f2      	b.n	8004140 <_printf_float+0x198>
 800415a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800415e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004160:	4299      	cmp	r1, r3
 8004162:	db05      	blt.n	8004170 <_printf_float+0x1c8>
 8004164:	6823      	ldr	r3, [r4, #0]
 8004166:	6121      	str	r1, [r4, #16]
 8004168:	07d8      	lsls	r0, r3, #31
 800416a:	d5ea      	bpl.n	8004142 <_printf_float+0x19a>
 800416c:	1c4b      	adds	r3, r1, #1
 800416e:	e7e7      	b.n	8004140 <_printf_float+0x198>
 8004170:	2900      	cmp	r1, #0
 8004172:	bfcc      	ite	gt
 8004174:	2201      	movgt	r2, #1
 8004176:	f1c1 0202 	rsble	r2, r1, #2
 800417a:	4413      	add	r3, r2
 800417c:	e7e0      	b.n	8004140 <_printf_float+0x198>
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	055a      	lsls	r2, r3, #21
 8004182:	d407      	bmi.n	8004194 <_printf_float+0x1ec>
 8004184:	6923      	ldr	r3, [r4, #16]
 8004186:	4642      	mov	r2, r8
 8004188:	4631      	mov	r1, r6
 800418a:	4628      	mov	r0, r5
 800418c:	47b8      	blx	r7
 800418e:	3001      	adds	r0, #1
 8004190:	d12b      	bne.n	80041ea <_printf_float+0x242>
 8004192:	e764      	b.n	800405e <_printf_float+0xb6>
 8004194:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004198:	f240 80dc 	bls.w	8004354 <_printf_float+0x3ac>
 800419c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80041a0:	2200      	movs	r2, #0
 80041a2:	2300      	movs	r3, #0
 80041a4:	f7fc fc00 	bl	80009a8 <__aeabi_dcmpeq>
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d033      	beq.n	8004214 <_printf_float+0x26c>
 80041ac:	2301      	movs	r3, #1
 80041ae:	4631      	mov	r1, r6
 80041b0:	4628      	mov	r0, r5
 80041b2:	4a35      	ldr	r2, [pc, #212]	@ (8004288 <_printf_float+0x2e0>)
 80041b4:	47b8      	blx	r7
 80041b6:	3001      	adds	r0, #1
 80041b8:	f43f af51 	beq.w	800405e <_printf_float+0xb6>
 80041bc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80041c0:	4543      	cmp	r3, r8
 80041c2:	db02      	blt.n	80041ca <_printf_float+0x222>
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	07d8      	lsls	r0, r3, #31
 80041c8:	d50f      	bpl.n	80041ea <_printf_float+0x242>
 80041ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80041ce:	4631      	mov	r1, r6
 80041d0:	4628      	mov	r0, r5
 80041d2:	47b8      	blx	r7
 80041d4:	3001      	adds	r0, #1
 80041d6:	f43f af42 	beq.w	800405e <_printf_float+0xb6>
 80041da:	f04f 0900 	mov.w	r9, #0
 80041de:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80041e2:	f104 0a1a 	add.w	sl, r4, #26
 80041e6:	45c8      	cmp	r8, r9
 80041e8:	dc09      	bgt.n	80041fe <_printf_float+0x256>
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	079b      	lsls	r3, r3, #30
 80041ee:	f100 8102 	bmi.w	80043f6 <_printf_float+0x44e>
 80041f2:	68e0      	ldr	r0, [r4, #12]
 80041f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80041f6:	4298      	cmp	r0, r3
 80041f8:	bfb8      	it	lt
 80041fa:	4618      	movlt	r0, r3
 80041fc:	e731      	b.n	8004062 <_printf_float+0xba>
 80041fe:	2301      	movs	r3, #1
 8004200:	4652      	mov	r2, sl
 8004202:	4631      	mov	r1, r6
 8004204:	4628      	mov	r0, r5
 8004206:	47b8      	blx	r7
 8004208:	3001      	adds	r0, #1
 800420a:	f43f af28 	beq.w	800405e <_printf_float+0xb6>
 800420e:	f109 0901 	add.w	r9, r9, #1
 8004212:	e7e8      	b.n	80041e6 <_printf_float+0x23e>
 8004214:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004216:	2b00      	cmp	r3, #0
 8004218:	dc38      	bgt.n	800428c <_printf_float+0x2e4>
 800421a:	2301      	movs	r3, #1
 800421c:	4631      	mov	r1, r6
 800421e:	4628      	mov	r0, r5
 8004220:	4a19      	ldr	r2, [pc, #100]	@ (8004288 <_printf_float+0x2e0>)
 8004222:	47b8      	blx	r7
 8004224:	3001      	adds	r0, #1
 8004226:	f43f af1a 	beq.w	800405e <_printf_float+0xb6>
 800422a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800422e:	ea59 0303 	orrs.w	r3, r9, r3
 8004232:	d102      	bne.n	800423a <_printf_float+0x292>
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	07d9      	lsls	r1, r3, #31
 8004238:	d5d7      	bpl.n	80041ea <_printf_float+0x242>
 800423a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800423e:	4631      	mov	r1, r6
 8004240:	4628      	mov	r0, r5
 8004242:	47b8      	blx	r7
 8004244:	3001      	adds	r0, #1
 8004246:	f43f af0a 	beq.w	800405e <_printf_float+0xb6>
 800424a:	f04f 0a00 	mov.w	sl, #0
 800424e:	f104 0b1a 	add.w	fp, r4, #26
 8004252:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004254:	425b      	negs	r3, r3
 8004256:	4553      	cmp	r3, sl
 8004258:	dc01      	bgt.n	800425e <_printf_float+0x2b6>
 800425a:	464b      	mov	r3, r9
 800425c:	e793      	b.n	8004186 <_printf_float+0x1de>
 800425e:	2301      	movs	r3, #1
 8004260:	465a      	mov	r2, fp
 8004262:	4631      	mov	r1, r6
 8004264:	4628      	mov	r0, r5
 8004266:	47b8      	blx	r7
 8004268:	3001      	adds	r0, #1
 800426a:	f43f aef8 	beq.w	800405e <_printf_float+0xb6>
 800426e:	f10a 0a01 	add.w	sl, sl, #1
 8004272:	e7ee      	b.n	8004252 <_printf_float+0x2aa>
 8004274:	7fefffff 	.word	0x7fefffff
 8004278:	080085ae 	.word	0x080085ae
 800427c:	080085b2 	.word	0x080085b2
 8004280:	080085b6 	.word	0x080085b6
 8004284:	080085ba 	.word	0x080085ba
 8004288:	080085be 	.word	0x080085be
 800428c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800428e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004292:	4553      	cmp	r3, sl
 8004294:	bfa8      	it	ge
 8004296:	4653      	movge	r3, sl
 8004298:	2b00      	cmp	r3, #0
 800429a:	4699      	mov	r9, r3
 800429c:	dc36      	bgt.n	800430c <_printf_float+0x364>
 800429e:	f04f 0b00 	mov.w	fp, #0
 80042a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042a6:	f104 021a 	add.w	r2, r4, #26
 80042aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80042ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80042ae:	eba3 0309 	sub.w	r3, r3, r9
 80042b2:	455b      	cmp	r3, fp
 80042b4:	dc31      	bgt.n	800431a <_printf_float+0x372>
 80042b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80042b8:	459a      	cmp	sl, r3
 80042ba:	dc3a      	bgt.n	8004332 <_printf_float+0x38a>
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	07da      	lsls	r2, r3, #31
 80042c0:	d437      	bmi.n	8004332 <_printf_float+0x38a>
 80042c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80042c4:	ebaa 0903 	sub.w	r9, sl, r3
 80042c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042ca:	ebaa 0303 	sub.w	r3, sl, r3
 80042ce:	4599      	cmp	r9, r3
 80042d0:	bfa8      	it	ge
 80042d2:	4699      	movge	r9, r3
 80042d4:	f1b9 0f00 	cmp.w	r9, #0
 80042d8:	dc33      	bgt.n	8004342 <_printf_float+0x39a>
 80042da:	f04f 0800 	mov.w	r8, #0
 80042de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042e2:	f104 0b1a 	add.w	fp, r4, #26
 80042e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80042e8:	ebaa 0303 	sub.w	r3, sl, r3
 80042ec:	eba3 0309 	sub.w	r3, r3, r9
 80042f0:	4543      	cmp	r3, r8
 80042f2:	f77f af7a 	ble.w	80041ea <_printf_float+0x242>
 80042f6:	2301      	movs	r3, #1
 80042f8:	465a      	mov	r2, fp
 80042fa:	4631      	mov	r1, r6
 80042fc:	4628      	mov	r0, r5
 80042fe:	47b8      	blx	r7
 8004300:	3001      	adds	r0, #1
 8004302:	f43f aeac 	beq.w	800405e <_printf_float+0xb6>
 8004306:	f108 0801 	add.w	r8, r8, #1
 800430a:	e7ec      	b.n	80042e6 <_printf_float+0x33e>
 800430c:	4642      	mov	r2, r8
 800430e:	4631      	mov	r1, r6
 8004310:	4628      	mov	r0, r5
 8004312:	47b8      	blx	r7
 8004314:	3001      	adds	r0, #1
 8004316:	d1c2      	bne.n	800429e <_printf_float+0x2f6>
 8004318:	e6a1      	b.n	800405e <_printf_float+0xb6>
 800431a:	2301      	movs	r3, #1
 800431c:	4631      	mov	r1, r6
 800431e:	4628      	mov	r0, r5
 8004320:	920a      	str	r2, [sp, #40]	@ 0x28
 8004322:	47b8      	blx	r7
 8004324:	3001      	adds	r0, #1
 8004326:	f43f ae9a 	beq.w	800405e <_printf_float+0xb6>
 800432a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800432c:	f10b 0b01 	add.w	fp, fp, #1
 8004330:	e7bb      	b.n	80042aa <_printf_float+0x302>
 8004332:	4631      	mov	r1, r6
 8004334:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004338:	4628      	mov	r0, r5
 800433a:	47b8      	blx	r7
 800433c:	3001      	adds	r0, #1
 800433e:	d1c0      	bne.n	80042c2 <_printf_float+0x31a>
 8004340:	e68d      	b.n	800405e <_printf_float+0xb6>
 8004342:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004344:	464b      	mov	r3, r9
 8004346:	4631      	mov	r1, r6
 8004348:	4628      	mov	r0, r5
 800434a:	4442      	add	r2, r8
 800434c:	47b8      	blx	r7
 800434e:	3001      	adds	r0, #1
 8004350:	d1c3      	bne.n	80042da <_printf_float+0x332>
 8004352:	e684      	b.n	800405e <_printf_float+0xb6>
 8004354:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004358:	f1ba 0f01 	cmp.w	sl, #1
 800435c:	dc01      	bgt.n	8004362 <_printf_float+0x3ba>
 800435e:	07db      	lsls	r3, r3, #31
 8004360:	d536      	bpl.n	80043d0 <_printf_float+0x428>
 8004362:	2301      	movs	r3, #1
 8004364:	4642      	mov	r2, r8
 8004366:	4631      	mov	r1, r6
 8004368:	4628      	mov	r0, r5
 800436a:	47b8      	blx	r7
 800436c:	3001      	adds	r0, #1
 800436e:	f43f ae76 	beq.w	800405e <_printf_float+0xb6>
 8004372:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004376:	4631      	mov	r1, r6
 8004378:	4628      	mov	r0, r5
 800437a:	47b8      	blx	r7
 800437c:	3001      	adds	r0, #1
 800437e:	f43f ae6e 	beq.w	800405e <_printf_float+0xb6>
 8004382:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004386:	2200      	movs	r2, #0
 8004388:	2300      	movs	r3, #0
 800438a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800438e:	f7fc fb0b 	bl	80009a8 <__aeabi_dcmpeq>
 8004392:	b9c0      	cbnz	r0, 80043c6 <_printf_float+0x41e>
 8004394:	4653      	mov	r3, sl
 8004396:	f108 0201 	add.w	r2, r8, #1
 800439a:	4631      	mov	r1, r6
 800439c:	4628      	mov	r0, r5
 800439e:	47b8      	blx	r7
 80043a0:	3001      	adds	r0, #1
 80043a2:	d10c      	bne.n	80043be <_printf_float+0x416>
 80043a4:	e65b      	b.n	800405e <_printf_float+0xb6>
 80043a6:	2301      	movs	r3, #1
 80043a8:	465a      	mov	r2, fp
 80043aa:	4631      	mov	r1, r6
 80043ac:	4628      	mov	r0, r5
 80043ae:	47b8      	blx	r7
 80043b0:	3001      	adds	r0, #1
 80043b2:	f43f ae54 	beq.w	800405e <_printf_float+0xb6>
 80043b6:	f108 0801 	add.w	r8, r8, #1
 80043ba:	45d0      	cmp	r8, sl
 80043bc:	dbf3      	blt.n	80043a6 <_printf_float+0x3fe>
 80043be:	464b      	mov	r3, r9
 80043c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80043c4:	e6e0      	b.n	8004188 <_printf_float+0x1e0>
 80043c6:	f04f 0800 	mov.w	r8, #0
 80043ca:	f104 0b1a 	add.w	fp, r4, #26
 80043ce:	e7f4      	b.n	80043ba <_printf_float+0x412>
 80043d0:	2301      	movs	r3, #1
 80043d2:	4642      	mov	r2, r8
 80043d4:	e7e1      	b.n	800439a <_printf_float+0x3f2>
 80043d6:	2301      	movs	r3, #1
 80043d8:	464a      	mov	r2, r9
 80043da:	4631      	mov	r1, r6
 80043dc:	4628      	mov	r0, r5
 80043de:	47b8      	blx	r7
 80043e0:	3001      	adds	r0, #1
 80043e2:	f43f ae3c 	beq.w	800405e <_printf_float+0xb6>
 80043e6:	f108 0801 	add.w	r8, r8, #1
 80043ea:	68e3      	ldr	r3, [r4, #12]
 80043ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80043ee:	1a5b      	subs	r3, r3, r1
 80043f0:	4543      	cmp	r3, r8
 80043f2:	dcf0      	bgt.n	80043d6 <_printf_float+0x42e>
 80043f4:	e6fd      	b.n	80041f2 <_printf_float+0x24a>
 80043f6:	f04f 0800 	mov.w	r8, #0
 80043fa:	f104 0919 	add.w	r9, r4, #25
 80043fe:	e7f4      	b.n	80043ea <_printf_float+0x442>

08004400 <_printf_common>:
 8004400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004404:	4616      	mov	r6, r2
 8004406:	4698      	mov	r8, r3
 8004408:	688a      	ldr	r2, [r1, #8]
 800440a:	690b      	ldr	r3, [r1, #16]
 800440c:	4607      	mov	r7, r0
 800440e:	4293      	cmp	r3, r2
 8004410:	bfb8      	it	lt
 8004412:	4613      	movlt	r3, r2
 8004414:	6033      	str	r3, [r6, #0]
 8004416:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800441a:	460c      	mov	r4, r1
 800441c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004420:	b10a      	cbz	r2, 8004426 <_printf_common+0x26>
 8004422:	3301      	adds	r3, #1
 8004424:	6033      	str	r3, [r6, #0]
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	0699      	lsls	r1, r3, #26
 800442a:	bf42      	ittt	mi
 800442c:	6833      	ldrmi	r3, [r6, #0]
 800442e:	3302      	addmi	r3, #2
 8004430:	6033      	strmi	r3, [r6, #0]
 8004432:	6825      	ldr	r5, [r4, #0]
 8004434:	f015 0506 	ands.w	r5, r5, #6
 8004438:	d106      	bne.n	8004448 <_printf_common+0x48>
 800443a:	f104 0a19 	add.w	sl, r4, #25
 800443e:	68e3      	ldr	r3, [r4, #12]
 8004440:	6832      	ldr	r2, [r6, #0]
 8004442:	1a9b      	subs	r3, r3, r2
 8004444:	42ab      	cmp	r3, r5
 8004446:	dc2b      	bgt.n	80044a0 <_printf_common+0xa0>
 8004448:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800444c:	6822      	ldr	r2, [r4, #0]
 800444e:	3b00      	subs	r3, #0
 8004450:	bf18      	it	ne
 8004452:	2301      	movne	r3, #1
 8004454:	0692      	lsls	r2, r2, #26
 8004456:	d430      	bmi.n	80044ba <_printf_common+0xba>
 8004458:	4641      	mov	r1, r8
 800445a:	4638      	mov	r0, r7
 800445c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004460:	47c8      	blx	r9
 8004462:	3001      	adds	r0, #1
 8004464:	d023      	beq.n	80044ae <_printf_common+0xae>
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	6922      	ldr	r2, [r4, #16]
 800446a:	f003 0306 	and.w	r3, r3, #6
 800446e:	2b04      	cmp	r3, #4
 8004470:	bf14      	ite	ne
 8004472:	2500      	movne	r5, #0
 8004474:	6833      	ldreq	r3, [r6, #0]
 8004476:	f04f 0600 	mov.w	r6, #0
 800447a:	bf08      	it	eq
 800447c:	68e5      	ldreq	r5, [r4, #12]
 800447e:	f104 041a 	add.w	r4, r4, #26
 8004482:	bf08      	it	eq
 8004484:	1aed      	subeq	r5, r5, r3
 8004486:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800448a:	bf08      	it	eq
 800448c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004490:	4293      	cmp	r3, r2
 8004492:	bfc4      	itt	gt
 8004494:	1a9b      	subgt	r3, r3, r2
 8004496:	18ed      	addgt	r5, r5, r3
 8004498:	42b5      	cmp	r5, r6
 800449a:	d11a      	bne.n	80044d2 <_printf_common+0xd2>
 800449c:	2000      	movs	r0, #0
 800449e:	e008      	b.n	80044b2 <_printf_common+0xb2>
 80044a0:	2301      	movs	r3, #1
 80044a2:	4652      	mov	r2, sl
 80044a4:	4641      	mov	r1, r8
 80044a6:	4638      	mov	r0, r7
 80044a8:	47c8      	blx	r9
 80044aa:	3001      	adds	r0, #1
 80044ac:	d103      	bne.n	80044b6 <_printf_common+0xb6>
 80044ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b6:	3501      	adds	r5, #1
 80044b8:	e7c1      	b.n	800443e <_printf_common+0x3e>
 80044ba:	2030      	movs	r0, #48	@ 0x30
 80044bc:	18e1      	adds	r1, r4, r3
 80044be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80044c8:	4422      	add	r2, r4
 80044ca:	3302      	adds	r3, #2
 80044cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80044d0:	e7c2      	b.n	8004458 <_printf_common+0x58>
 80044d2:	2301      	movs	r3, #1
 80044d4:	4622      	mov	r2, r4
 80044d6:	4641      	mov	r1, r8
 80044d8:	4638      	mov	r0, r7
 80044da:	47c8      	blx	r9
 80044dc:	3001      	adds	r0, #1
 80044de:	d0e6      	beq.n	80044ae <_printf_common+0xae>
 80044e0:	3601      	adds	r6, #1
 80044e2:	e7d9      	b.n	8004498 <_printf_common+0x98>

080044e4 <_printf_i>:
 80044e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044e8:	7e0f      	ldrb	r7, [r1, #24]
 80044ea:	4691      	mov	r9, r2
 80044ec:	2f78      	cmp	r7, #120	@ 0x78
 80044ee:	4680      	mov	r8, r0
 80044f0:	460c      	mov	r4, r1
 80044f2:	469a      	mov	sl, r3
 80044f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80044f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80044fa:	d807      	bhi.n	800450c <_printf_i+0x28>
 80044fc:	2f62      	cmp	r7, #98	@ 0x62
 80044fe:	d80a      	bhi.n	8004516 <_printf_i+0x32>
 8004500:	2f00      	cmp	r7, #0
 8004502:	f000 80d3 	beq.w	80046ac <_printf_i+0x1c8>
 8004506:	2f58      	cmp	r7, #88	@ 0x58
 8004508:	f000 80ba 	beq.w	8004680 <_printf_i+0x19c>
 800450c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004510:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004514:	e03a      	b.n	800458c <_printf_i+0xa8>
 8004516:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800451a:	2b15      	cmp	r3, #21
 800451c:	d8f6      	bhi.n	800450c <_printf_i+0x28>
 800451e:	a101      	add	r1, pc, #4	@ (adr r1, 8004524 <_printf_i+0x40>)
 8004520:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004524:	0800457d 	.word	0x0800457d
 8004528:	08004591 	.word	0x08004591
 800452c:	0800450d 	.word	0x0800450d
 8004530:	0800450d 	.word	0x0800450d
 8004534:	0800450d 	.word	0x0800450d
 8004538:	0800450d 	.word	0x0800450d
 800453c:	08004591 	.word	0x08004591
 8004540:	0800450d 	.word	0x0800450d
 8004544:	0800450d 	.word	0x0800450d
 8004548:	0800450d 	.word	0x0800450d
 800454c:	0800450d 	.word	0x0800450d
 8004550:	08004693 	.word	0x08004693
 8004554:	080045bb 	.word	0x080045bb
 8004558:	0800464d 	.word	0x0800464d
 800455c:	0800450d 	.word	0x0800450d
 8004560:	0800450d 	.word	0x0800450d
 8004564:	080046b5 	.word	0x080046b5
 8004568:	0800450d 	.word	0x0800450d
 800456c:	080045bb 	.word	0x080045bb
 8004570:	0800450d 	.word	0x0800450d
 8004574:	0800450d 	.word	0x0800450d
 8004578:	08004655 	.word	0x08004655
 800457c:	6833      	ldr	r3, [r6, #0]
 800457e:	1d1a      	adds	r2, r3, #4
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6032      	str	r2, [r6, #0]
 8004584:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004588:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800458c:	2301      	movs	r3, #1
 800458e:	e09e      	b.n	80046ce <_printf_i+0x1ea>
 8004590:	6833      	ldr	r3, [r6, #0]
 8004592:	6820      	ldr	r0, [r4, #0]
 8004594:	1d19      	adds	r1, r3, #4
 8004596:	6031      	str	r1, [r6, #0]
 8004598:	0606      	lsls	r6, r0, #24
 800459a:	d501      	bpl.n	80045a0 <_printf_i+0xbc>
 800459c:	681d      	ldr	r5, [r3, #0]
 800459e:	e003      	b.n	80045a8 <_printf_i+0xc4>
 80045a0:	0645      	lsls	r5, r0, #25
 80045a2:	d5fb      	bpl.n	800459c <_printf_i+0xb8>
 80045a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80045a8:	2d00      	cmp	r5, #0
 80045aa:	da03      	bge.n	80045b4 <_printf_i+0xd0>
 80045ac:	232d      	movs	r3, #45	@ 0x2d
 80045ae:	426d      	negs	r5, r5
 80045b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045b4:	230a      	movs	r3, #10
 80045b6:	4859      	ldr	r0, [pc, #356]	@ (800471c <_printf_i+0x238>)
 80045b8:	e011      	b.n	80045de <_printf_i+0xfa>
 80045ba:	6821      	ldr	r1, [r4, #0]
 80045bc:	6833      	ldr	r3, [r6, #0]
 80045be:	0608      	lsls	r0, r1, #24
 80045c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80045c4:	d402      	bmi.n	80045cc <_printf_i+0xe8>
 80045c6:	0649      	lsls	r1, r1, #25
 80045c8:	bf48      	it	mi
 80045ca:	b2ad      	uxthmi	r5, r5
 80045cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80045ce:	6033      	str	r3, [r6, #0]
 80045d0:	bf14      	ite	ne
 80045d2:	230a      	movne	r3, #10
 80045d4:	2308      	moveq	r3, #8
 80045d6:	4851      	ldr	r0, [pc, #324]	@ (800471c <_printf_i+0x238>)
 80045d8:	2100      	movs	r1, #0
 80045da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80045de:	6866      	ldr	r6, [r4, #4]
 80045e0:	2e00      	cmp	r6, #0
 80045e2:	bfa8      	it	ge
 80045e4:	6821      	ldrge	r1, [r4, #0]
 80045e6:	60a6      	str	r6, [r4, #8]
 80045e8:	bfa4      	itt	ge
 80045ea:	f021 0104 	bicge.w	r1, r1, #4
 80045ee:	6021      	strge	r1, [r4, #0]
 80045f0:	b90d      	cbnz	r5, 80045f6 <_printf_i+0x112>
 80045f2:	2e00      	cmp	r6, #0
 80045f4:	d04b      	beq.n	800468e <_printf_i+0x1aa>
 80045f6:	4616      	mov	r6, r2
 80045f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80045fc:	fb03 5711 	mls	r7, r3, r1, r5
 8004600:	5dc7      	ldrb	r7, [r0, r7]
 8004602:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004606:	462f      	mov	r7, r5
 8004608:	42bb      	cmp	r3, r7
 800460a:	460d      	mov	r5, r1
 800460c:	d9f4      	bls.n	80045f8 <_printf_i+0x114>
 800460e:	2b08      	cmp	r3, #8
 8004610:	d10b      	bne.n	800462a <_printf_i+0x146>
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	07df      	lsls	r7, r3, #31
 8004616:	d508      	bpl.n	800462a <_printf_i+0x146>
 8004618:	6923      	ldr	r3, [r4, #16]
 800461a:	6861      	ldr	r1, [r4, #4]
 800461c:	4299      	cmp	r1, r3
 800461e:	bfde      	ittt	le
 8004620:	2330      	movle	r3, #48	@ 0x30
 8004622:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004626:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800462a:	1b92      	subs	r2, r2, r6
 800462c:	6122      	str	r2, [r4, #16]
 800462e:	464b      	mov	r3, r9
 8004630:	4621      	mov	r1, r4
 8004632:	4640      	mov	r0, r8
 8004634:	f8cd a000 	str.w	sl, [sp]
 8004638:	aa03      	add	r2, sp, #12
 800463a:	f7ff fee1 	bl	8004400 <_printf_common>
 800463e:	3001      	adds	r0, #1
 8004640:	d14a      	bne.n	80046d8 <_printf_i+0x1f4>
 8004642:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004646:	b004      	add	sp, #16
 8004648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800464c:	6823      	ldr	r3, [r4, #0]
 800464e:	f043 0320 	orr.w	r3, r3, #32
 8004652:	6023      	str	r3, [r4, #0]
 8004654:	2778      	movs	r7, #120	@ 0x78
 8004656:	4832      	ldr	r0, [pc, #200]	@ (8004720 <_printf_i+0x23c>)
 8004658:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	6831      	ldr	r1, [r6, #0]
 8004660:	061f      	lsls	r7, r3, #24
 8004662:	f851 5b04 	ldr.w	r5, [r1], #4
 8004666:	d402      	bmi.n	800466e <_printf_i+0x18a>
 8004668:	065f      	lsls	r7, r3, #25
 800466a:	bf48      	it	mi
 800466c:	b2ad      	uxthmi	r5, r5
 800466e:	6031      	str	r1, [r6, #0]
 8004670:	07d9      	lsls	r1, r3, #31
 8004672:	bf44      	itt	mi
 8004674:	f043 0320 	orrmi.w	r3, r3, #32
 8004678:	6023      	strmi	r3, [r4, #0]
 800467a:	b11d      	cbz	r5, 8004684 <_printf_i+0x1a0>
 800467c:	2310      	movs	r3, #16
 800467e:	e7ab      	b.n	80045d8 <_printf_i+0xf4>
 8004680:	4826      	ldr	r0, [pc, #152]	@ (800471c <_printf_i+0x238>)
 8004682:	e7e9      	b.n	8004658 <_printf_i+0x174>
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	f023 0320 	bic.w	r3, r3, #32
 800468a:	6023      	str	r3, [r4, #0]
 800468c:	e7f6      	b.n	800467c <_printf_i+0x198>
 800468e:	4616      	mov	r6, r2
 8004690:	e7bd      	b.n	800460e <_printf_i+0x12a>
 8004692:	6833      	ldr	r3, [r6, #0]
 8004694:	6825      	ldr	r5, [r4, #0]
 8004696:	1d18      	adds	r0, r3, #4
 8004698:	6961      	ldr	r1, [r4, #20]
 800469a:	6030      	str	r0, [r6, #0]
 800469c:	062e      	lsls	r6, r5, #24
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	d501      	bpl.n	80046a6 <_printf_i+0x1c2>
 80046a2:	6019      	str	r1, [r3, #0]
 80046a4:	e002      	b.n	80046ac <_printf_i+0x1c8>
 80046a6:	0668      	lsls	r0, r5, #25
 80046a8:	d5fb      	bpl.n	80046a2 <_printf_i+0x1be>
 80046aa:	8019      	strh	r1, [r3, #0]
 80046ac:	2300      	movs	r3, #0
 80046ae:	4616      	mov	r6, r2
 80046b0:	6123      	str	r3, [r4, #16]
 80046b2:	e7bc      	b.n	800462e <_printf_i+0x14a>
 80046b4:	6833      	ldr	r3, [r6, #0]
 80046b6:	2100      	movs	r1, #0
 80046b8:	1d1a      	adds	r2, r3, #4
 80046ba:	6032      	str	r2, [r6, #0]
 80046bc:	681e      	ldr	r6, [r3, #0]
 80046be:	6862      	ldr	r2, [r4, #4]
 80046c0:	4630      	mov	r0, r6
 80046c2:	f000 fbe4 	bl	8004e8e <memchr>
 80046c6:	b108      	cbz	r0, 80046cc <_printf_i+0x1e8>
 80046c8:	1b80      	subs	r0, r0, r6
 80046ca:	6060      	str	r0, [r4, #4]
 80046cc:	6863      	ldr	r3, [r4, #4]
 80046ce:	6123      	str	r3, [r4, #16]
 80046d0:	2300      	movs	r3, #0
 80046d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046d6:	e7aa      	b.n	800462e <_printf_i+0x14a>
 80046d8:	4632      	mov	r2, r6
 80046da:	4649      	mov	r1, r9
 80046dc:	4640      	mov	r0, r8
 80046de:	6923      	ldr	r3, [r4, #16]
 80046e0:	47d0      	blx	sl
 80046e2:	3001      	adds	r0, #1
 80046e4:	d0ad      	beq.n	8004642 <_printf_i+0x15e>
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	079b      	lsls	r3, r3, #30
 80046ea:	d413      	bmi.n	8004714 <_printf_i+0x230>
 80046ec:	68e0      	ldr	r0, [r4, #12]
 80046ee:	9b03      	ldr	r3, [sp, #12]
 80046f0:	4298      	cmp	r0, r3
 80046f2:	bfb8      	it	lt
 80046f4:	4618      	movlt	r0, r3
 80046f6:	e7a6      	b.n	8004646 <_printf_i+0x162>
 80046f8:	2301      	movs	r3, #1
 80046fa:	4632      	mov	r2, r6
 80046fc:	4649      	mov	r1, r9
 80046fe:	4640      	mov	r0, r8
 8004700:	47d0      	blx	sl
 8004702:	3001      	adds	r0, #1
 8004704:	d09d      	beq.n	8004642 <_printf_i+0x15e>
 8004706:	3501      	adds	r5, #1
 8004708:	68e3      	ldr	r3, [r4, #12]
 800470a:	9903      	ldr	r1, [sp, #12]
 800470c:	1a5b      	subs	r3, r3, r1
 800470e:	42ab      	cmp	r3, r5
 8004710:	dcf2      	bgt.n	80046f8 <_printf_i+0x214>
 8004712:	e7eb      	b.n	80046ec <_printf_i+0x208>
 8004714:	2500      	movs	r5, #0
 8004716:	f104 0619 	add.w	r6, r4, #25
 800471a:	e7f5      	b.n	8004708 <_printf_i+0x224>
 800471c:	080085c0 	.word	0x080085c0
 8004720:	080085d1 	.word	0x080085d1

08004724 <_scanf_float>:
 8004724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004728:	b087      	sub	sp, #28
 800472a:	9303      	str	r3, [sp, #12]
 800472c:	688b      	ldr	r3, [r1, #8]
 800472e:	4617      	mov	r7, r2
 8004730:	1e5a      	subs	r2, r3, #1
 8004732:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004736:	bf82      	ittt	hi
 8004738:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800473c:	eb03 0b05 	addhi.w	fp, r3, r5
 8004740:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004744:	460a      	mov	r2, r1
 8004746:	f04f 0500 	mov.w	r5, #0
 800474a:	bf88      	it	hi
 800474c:	608b      	strhi	r3, [r1, #8]
 800474e:	680b      	ldr	r3, [r1, #0]
 8004750:	4680      	mov	r8, r0
 8004752:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004756:	f842 3b1c 	str.w	r3, [r2], #28
 800475a:	460c      	mov	r4, r1
 800475c:	bf98      	it	ls
 800475e:	f04f 0b00 	movls.w	fp, #0
 8004762:	4616      	mov	r6, r2
 8004764:	46aa      	mov	sl, r5
 8004766:	46a9      	mov	r9, r5
 8004768:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800476c:	9201      	str	r2, [sp, #4]
 800476e:	9502      	str	r5, [sp, #8]
 8004770:	68a2      	ldr	r2, [r4, #8]
 8004772:	b152      	cbz	r2, 800478a <_scanf_float+0x66>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b4e      	cmp	r3, #78	@ 0x4e
 800477a:	d865      	bhi.n	8004848 <_scanf_float+0x124>
 800477c:	2b40      	cmp	r3, #64	@ 0x40
 800477e:	d83d      	bhi.n	80047fc <_scanf_float+0xd8>
 8004780:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004784:	b2c8      	uxtb	r0, r1
 8004786:	280e      	cmp	r0, #14
 8004788:	d93b      	bls.n	8004802 <_scanf_float+0xde>
 800478a:	f1b9 0f00 	cmp.w	r9, #0
 800478e:	d003      	beq.n	8004798 <_scanf_float+0x74>
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004796:	6023      	str	r3, [r4, #0]
 8004798:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800479c:	f1ba 0f01 	cmp.w	sl, #1
 80047a0:	f200 8118 	bhi.w	80049d4 <_scanf_float+0x2b0>
 80047a4:	9b01      	ldr	r3, [sp, #4]
 80047a6:	429e      	cmp	r6, r3
 80047a8:	f200 8109 	bhi.w	80049be <_scanf_float+0x29a>
 80047ac:	2001      	movs	r0, #1
 80047ae:	b007      	add	sp, #28
 80047b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047b4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80047b8:	2a0d      	cmp	r2, #13
 80047ba:	d8e6      	bhi.n	800478a <_scanf_float+0x66>
 80047bc:	a101      	add	r1, pc, #4	@ (adr r1, 80047c4 <_scanf_float+0xa0>)
 80047be:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80047c2:	bf00      	nop
 80047c4:	0800490b 	.word	0x0800490b
 80047c8:	0800478b 	.word	0x0800478b
 80047cc:	0800478b 	.word	0x0800478b
 80047d0:	0800478b 	.word	0x0800478b
 80047d4:	0800496b 	.word	0x0800496b
 80047d8:	08004943 	.word	0x08004943
 80047dc:	0800478b 	.word	0x0800478b
 80047e0:	0800478b 	.word	0x0800478b
 80047e4:	08004919 	.word	0x08004919
 80047e8:	0800478b 	.word	0x0800478b
 80047ec:	0800478b 	.word	0x0800478b
 80047f0:	0800478b 	.word	0x0800478b
 80047f4:	0800478b 	.word	0x0800478b
 80047f8:	080048d1 	.word	0x080048d1
 80047fc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004800:	e7da      	b.n	80047b8 <_scanf_float+0x94>
 8004802:	290e      	cmp	r1, #14
 8004804:	d8c1      	bhi.n	800478a <_scanf_float+0x66>
 8004806:	a001      	add	r0, pc, #4	@ (adr r0, 800480c <_scanf_float+0xe8>)
 8004808:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800480c:	080048c1 	.word	0x080048c1
 8004810:	0800478b 	.word	0x0800478b
 8004814:	080048c1 	.word	0x080048c1
 8004818:	08004957 	.word	0x08004957
 800481c:	0800478b 	.word	0x0800478b
 8004820:	08004869 	.word	0x08004869
 8004824:	080048a7 	.word	0x080048a7
 8004828:	080048a7 	.word	0x080048a7
 800482c:	080048a7 	.word	0x080048a7
 8004830:	080048a7 	.word	0x080048a7
 8004834:	080048a7 	.word	0x080048a7
 8004838:	080048a7 	.word	0x080048a7
 800483c:	080048a7 	.word	0x080048a7
 8004840:	080048a7 	.word	0x080048a7
 8004844:	080048a7 	.word	0x080048a7
 8004848:	2b6e      	cmp	r3, #110	@ 0x6e
 800484a:	d809      	bhi.n	8004860 <_scanf_float+0x13c>
 800484c:	2b60      	cmp	r3, #96	@ 0x60
 800484e:	d8b1      	bhi.n	80047b4 <_scanf_float+0x90>
 8004850:	2b54      	cmp	r3, #84	@ 0x54
 8004852:	d07b      	beq.n	800494c <_scanf_float+0x228>
 8004854:	2b59      	cmp	r3, #89	@ 0x59
 8004856:	d198      	bne.n	800478a <_scanf_float+0x66>
 8004858:	2d07      	cmp	r5, #7
 800485a:	d196      	bne.n	800478a <_scanf_float+0x66>
 800485c:	2508      	movs	r5, #8
 800485e:	e02c      	b.n	80048ba <_scanf_float+0x196>
 8004860:	2b74      	cmp	r3, #116	@ 0x74
 8004862:	d073      	beq.n	800494c <_scanf_float+0x228>
 8004864:	2b79      	cmp	r3, #121	@ 0x79
 8004866:	e7f6      	b.n	8004856 <_scanf_float+0x132>
 8004868:	6821      	ldr	r1, [r4, #0]
 800486a:	05c8      	lsls	r0, r1, #23
 800486c:	d51b      	bpl.n	80048a6 <_scanf_float+0x182>
 800486e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004872:	6021      	str	r1, [r4, #0]
 8004874:	f109 0901 	add.w	r9, r9, #1
 8004878:	f1bb 0f00 	cmp.w	fp, #0
 800487c:	d003      	beq.n	8004886 <_scanf_float+0x162>
 800487e:	3201      	adds	r2, #1
 8004880:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8004884:	60a2      	str	r2, [r4, #8]
 8004886:	68a3      	ldr	r3, [r4, #8]
 8004888:	3b01      	subs	r3, #1
 800488a:	60a3      	str	r3, [r4, #8]
 800488c:	6923      	ldr	r3, [r4, #16]
 800488e:	3301      	adds	r3, #1
 8004890:	6123      	str	r3, [r4, #16]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3b01      	subs	r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	607b      	str	r3, [r7, #4]
 800489a:	f340 8087 	ble.w	80049ac <_scanf_float+0x288>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	3301      	adds	r3, #1
 80048a2:	603b      	str	r3, [r7, #0]
 80048a4:	e764      	b.n	8004770 <_scanf_float+0x4c>
 80048a6:	eb1a 0105 	adds.w	r1, sl, r5
 80048aa:	f47f af6e 	bne.w	800478a <_scanf_float+0x66>
 80048ae:	460d      	mov	r5, r1
 80048b0:	468a      	mov	sl, r1
 80048b2:	6822      	ldr	r2, [r4, #0]
 80048b4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80048b8:	6022      	str	r2, [r4, #0]
 80048ba:	f806 3b01 	strb.w	r3, [r6], #1
 80048be:	e7e2      	b.n	8004886 <_scanf_float+0x162>
 80048c0:	6822      	ldr	r2, [r4, #0]
 80048c2:	0610      	lsls	r0, r2, #24
 80048c4:	f57f af61 	bpl.w	800478a <_scanf_float+0x66>
 80048c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048cc:	6022      	str	r2, [r4, #0]
 80048ce:	e7f4      	b.n	80048ba <_scanf_float+0x196>
 80048d0:	f1ba 0f00 	cmp.w	sl, #0
 80048d4:	d10e      	bne.n	80048f4 <_scanf_float+0x1d0>
 80048d6:	f1b9 0f00 	cmp.w	r9, #0
 80048da:	d10e      	bne.n	80048fa <_scanf_float+0x1d6>
 80048dc:	6822      	ldr	r2, [r4, #0]
 80048de:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80048e2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80048e6:	d108      	bne.n	80048fa <_scanf_float+0x1d6>
 80048e8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80048ec:	f04f 0a01 	mov.w	sl, #1
 80048f0:	6022      	str	r2, [r4, #0]
 80048f2:	e7e2      	b.n	80048ba <_scanf_float+0x196>
 80048f4:	f1ba 0f02 	cmp.w	sl, #2
 80048f8:	d055      	beq.n	80049a6 <_scanf_float+0x282>
 80048fa:	2d01      	cmp	r5, #1
 80048fc:	d002      	beq.n	8004904 <_scanf_float+0x1e0>
 80048fe:	2d04      	cmp	r5, #4
 8004900:	f47f af43 	bne.w	800478a <_scanf_float+0x66>
 8004904:	3501      	adds	r5, #1
 8004906:	b2ed      	uxtb	r5, r5
 8004908:	e7d7      	b.n	80048ba <_scanf_float+0x196>
 800490a:	f1ba 0f01 	cmp.w	sl, #1
 800490e:	f47f af3c 	bne.w	800478a <_scanf_float+0x66>
 8004912:	f04f 0a02 	mov.w	sl, #2
 8004916:	e7d0      	b.n	80048ba <_scanf_float+0x196>
 8004918:	b97d      	cbnz	r5, 800493a <_scanf_float+0x216>
 800491a:	f1b9 0f00 	cmp.w	r9, #0
 800491e:	f47f af37 	bne.w	8004790 <_scanf_float+0x6c>
 8004922:	6822      	ldr	r2, [r4, #0]
 8004924:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004928:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800492c:	f040 8103 	bne.w	8004b36 <_scanf_float+0x412>
 8004930:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004934:	2501      	movs	r5, #1
 8004936:	6022      	str	r2, [r4, #0]
 8004938:	e7bf      	b.n	80048ba <_scanf_float+0x196>
 800493a:	2d03      	cmp	r5, #3
 800493c:	d0e2      	beq.n	8004904 <_scanf_float+0x1e0>
 800493e:	2d05      	cmp	r5, #5
 8004940:	e7de      	b.n	8004900 <_scanf_float+0x1dc>
 8004942:	2d02      	cmp	r5, #2
 8004944:	f47f af21 	bne.w	800478a <_scanf_float+0x66>
 8004948:	2503      	movs	r5, #3
 800494a:	e7b6      	b.n	80048ba <_scanf_float+0x196>
 800494c:	2d06      	cmp	r5, #6
 800494e:	f47f af1c 	bne.w	800478a <_scanf_float+0x66>
 8004952:	2507      	movs	r5, #7
 8004954:	e7b1      	b.n	80048ba <_scanf_float+0x196>
 8004956:	6822      	ldr	r2, [r4, #0]
 8004958:	0591      	lsls	r1, r2, #22
 800495a:	f57f af16 	bpl.w	800478a <_scanf_float+0x66>
 800495e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004962:	6022      	str	r2, [r4, #0]
 8004964:	f8cd 9008 	str.w	r9, [sp, #8]
 8004968:	e7a7      	b.n	80048ba <_scanf_float+0x196>
 800496a:	6822      	ldr	r2, [r4, #0]
 800496c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004970:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004974:	d006      	beq.n	8004984 <_scanf_float+0x260>
 8004976:	0550      	lsls	r0, r2, #21
 8004978:	f57f af07 	bpl.w	800478a <_scanf_float+0x66>
 800497c:	f1b9 0f00 	cmp.w	r9, #0
 8004980:	f000 80d9 	beq.w	8004b36 <_scanf_float+0x412>
 8004984:	0591      	lsls	r1, r2, #22
 8004986:	bf58      	it	pl
 8004988:	9902      	ldrpl	r1, [sp, #8]
 800498a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800498e:	bf58      	it	pl
 8004990:	eba9 0101 	subpl.w	r1, r9, r1
 8004994:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004998:	f04f 0900 	mov.w	r9, #0
 800499c:	bf58      	it	pl
 800499e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80049a2:	6022      	str	r2, [r4, #0]
 80049a4:	e789      	b.n	80048ba <_scanf_float+0x196>
 80049a6:	f04f 0a03 	mov.w	sl, #3
 80049aa:	e786      	b.n	80048ba <_scanf_float+0x196>
 80049ac:	4639      	mov	r1, r7
 80049ae:	4640      	mov	r0, r8
 80049b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80049b4:	4798      	blx	r3
 80049b6:	2800      	cmp	r0, #0
 80049b8:	f43f aeda 	beq.w	8004770 <_scanf_float+0x4c>
 80049bc:	e6e5      	b.n	800478a <_scanf_float+0x66>
 80049be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049c2:	463a      	mov	r2, r7
 80049c4:	4640      	mov	r0, r8
 80049c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80049ca:	4798      	blx	r3
 80049cc:	6923      	ldr	r3, [r4, #16]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	6123      	str	r3, [r4, #16]
 80049d2:	e6e7      	b.n	80047a4 <_scanf_float+0x80>
 80049d4:	1e6b      	subs	r3, r5, #1
 80049d6:	2b06      	cmp	r3, #6
 80049d8:	d824      	bhi.n	8004a24 <_scanf_float+0x300>
 80049da:	2d02      	cmp	r5, #2
 80049dc:	d836      	bhi.n	8004a4c <_scanf_float+0x328>
 80049de:	9b01      	ldr	r3, [sp, #4]
 80049e0:	429e      	cmp	r6, r3
 80049e2:	f67f aee3 	bls.w	80047ac <_scanf_float+0x88>
 80049e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049ea:	463a      	mov	r2, r7
 80049ec:	4640      	mov	r0, r8
 80049ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80049f2:	4798      	blx	r3
 80049f4:	6923      	ldr	r3, [r4, #16]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	6123      	str	r3, [r4, #16]
 80049fa:	e7f0      	b.n	80049de <_scanf_float+0x2ba>
 80049fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a00:	463a      	mov	r2, r7
 8004a02:	4640      	mov	r0, r8
 8004a04:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004a08:	4798      	blx	r3
 8004a0a:	6923      	ldr	r3, [r4, #16]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	6123      	str	r3, [r4, #16]
 8004a10:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004a14:	fa5f fa8a 	uxtb.w	sl, sl
 8004a18:	f1ba 0f02 	cmp.w	sl, #2
 8004a1c:	d1ee      	bne.n	80049fc <_scanf_float+0x2d8>
 8004a1e:	3d03      	subs	r5, #3
 8004a20:	b2ed      	uxtb	r5, r5
 8004a22:	1b76      	subs	r6, r6, r5
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	05da      	lsls	r2, r3, #23
 8004a28:	d530      	bpl.n	8004a8c <_scanf_float+0x368>
 8004a2a:	055b      	lsls	r3, r3, #21
 8004a2c:	d511      	bpl.n	8004a52 <_scanf_float+0x32e>
 8004a2e:	9b01      	ldr	r3, [sp, #4]
 8004a30:	429e      	cmp	r6, r3
 8004a32:	f67f aebb 	bls.w	80047ac <_scanf_float+0x88>
 8004a36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a3a:	463a      	mov	r2, r7
 8004a3c:	4640      	mov	r0, r8
 8004a3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a42:	4798      	blx	r3
 8004a44:	6923      	ldr	r3, [r4, #16]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	6123      	str	r3, [r4, #16]
 8004a4a:	e7f0      	b.n	8004a2e <_scanf_float+0x30a>
 8004a4c:	46aa      	mov	sl, r5
 8004a4e:	46b3      	mov	fp, r6
 8004a50:	e7de      	b.n	8004a10 <_scanf_float+0x2ec>
 8004a52:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004a56:	6923      	ldr	r3, [r4, #16]
 8004a58:	2965      	cmp	r1, #101	@ 0x65
 8004a5a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004a5e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8004a62:	6123      	str	r3, [r4, #16]
 8004a64:	d00c      	beq.n	8004a80 <_scanf_float+0x35c>
 8004a66:	2945      	cmp	r1, #69	@ 0x45
 8004a68:	d00a      	beq.n	8004a80 <_scanf_float+0x35c>
 8004a6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a6e:	463a      	mov	r2, r7
 8004a70:	4640      	mov	r0, r8
 8004a72:	4798      	blx	r3
 8004a74:	6923      	ldr	r3, [r4, #16]
 8004a76:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	1eb5      	subs	r5, r6, #2
 8004a7e:	6123      	str	r3, [r4, #16]
 8004a80:	463a      	mov	r2, r7
 8004a82:	4640      	mov	r0, r8
 8004a84:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a88:	4798      	blx	r3
 8004a8a:	462e      	mov	r6, r5
 8004a8c:	6822      	ldr	r2, [r4, #0]
 8004a8e:	f012 0210 	ands.w	r2, r2, #16
 8004a92:	d001      	beq.n	8004a98 <_scanf_float+0x374>
 8004a94:	2000      	movs	r0, #0
 8004a96:	e68a      	b.n	80047ae <_scanf_float+0x8a>
 8004a98:	7032      	strb	r2, [r6, #0]
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aa4:	d11c      	bne.n	8004ae0 <_scanf_float+0x3bc>
 8004aa6:	9b02      	ldr	r3, [sp, #8]
 8004aa8:	454b      	cmp	r3, r9
 8004aaa:	eba3 0209 	sub.w	r2, r3, r9
 8004aae:	d123      	bne.n	8004af8 <_scanf_float+0x3d4>
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	4640      	mov	r0, r8
 8004ab4:	9901      	ldr	r1, [sp, #4]
 8004ab6:	f002 fbef 	bl	8007298 <_strtod_r>
 8004aba:	9b03      	ldr	r3, [sp, #12]
 8004abc:	6825      	ldr	r5, [r4, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f015 0f02 	tst.w	r5, #2
 8004ac4:	4606      	mov	r6, r0
 8004ac6:	460f      	mov	r7, r1
 8004ac8:	f103 0204 	add.w	r2, r3, #4
 8004acc:	d01f      	beq.n	8004b0e <_scanf_float+0x3ea>
 8004ace:	9903      	ldr	r1, [sp, #12]
 8004ad0:	600a      	str	r2, [r1, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	e9c3 6700 	strd	r6, r7, [r3]
 8004ad8:	68e3      	ldr	r3, [r4, #12]
 8004ada:	3301      	adds	r3, #1
 8004adc:	60e3      	str	r3, [r4, #12]
 8004ade:	e7d9      	b.n	8004a94 <_scanf_float+0x370>
 8004ae0:	9b04      	ldr	r3, [sp, #16]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0e4      	beq.n	8004ab0 <_scanf_float+0x38c>
 8004ae6:	9905      	ldr	r1, [sp, #20]
 8004ae8:	230a      	movs	r3, #10
 8004aea:	4640      	mov	r0, r8
 8004aec:	3101      	adds	r1, #1
 8004aee:	f002 fc53 	bl	8007398 <_strtol_r>
 8004af2:	9b04      	ldr	r3, [sp, #16]
 8004af4:	9e05      	ldr	r6, [sp, #20]
 8004af6:	1ac2      	subs	r2, r0, r3
 8004af8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004afc:	429e      	cmp	r6, r3
 8004afe:	bf28      	it	cs
 8004b00:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004b04:	4630      	mov	r0, r6
 8004b06:	490d      	ldr	r1, [pc, #52]	@ (8004b3c <_scanf_float+0x418>)
 8004b08:	f000 f8de 	bl	8004cc8 <siprintf>
 8004b0c:	e7d0      	b.n	8004ab0 <_scanf_float+0x38c>
 8004b0e:	076d      	lsls	r5, r5, #29
 8004b10:	d4dd      	bmi.n	8004ace <_scanf_float+0x3aa>
 8004b12:	9d03      	ldr	r5, [sp, #12]
 8004b14:	602a      	str	r2, [r5, #0]
 8004b16:	681d      	ldr	r5, [r3, #0]
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	f7fb ff76 	bl	8000a0c <__aeabi_dcmpun>
 8004b20:	b120      	cbz	r0, 8004b2c <_scanf_float+0x408>
 8004b22:	4807      	ldr	r0, [pc, #28]	@ (8004b40 <_scanf_float+0x41c>)
 8004b24:	f000 f9c2 	bl	8004eac <nanf>
 8004b28:	6028      	str	r0, [r5, #0]
 8004b2a:	e7d5      	b.n	8004ad8 <_scanf_float+0x3b4>
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	4639      	mov	r1, r7
 8004b30:	f7fb ffca 	bl	8000ac8 <__aeabi_d2f>
 8004b34:	e7f8      	b.n	8004b28 <_scanf_float+0x404>
 8004b36:	f04f 0900 	mov.w	r9, #0
 8004b3a:	e62d      	b.n	8004798 <_scanf_float+0x74>
 8004b3c:	080085e2 	.word	0x080085e2
 8004b40:	0800897d 	.word	0x0800897d

08004b44 <std>:
 8004b44:	2300      	movs	r3, #0
 8004b46:	b510      	push	{r4, lr}
 8004b48:	4604      	mov	r4, r0
 8004b4a:	e9c0 3300 	strd	r3, r3, [r0]
 8004b4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b52:	6083      	str	r3, [r0, #8]
 8004b54:	8181      	strh	r1, [r0, #12]
 8004b56:	6643      	str	r3, [r0, #100]	@ 0x64
 8004b58:	81c2      	strh	r2, [r0, #14]
 8004b5a:	6183      	str	r3, [r0, #24]
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	2208      	movs	r2, #8
 8004b60:	305c      	adds	r0, #92	@ 0x5c
 8004b62:	f000 f914 	bl	8004d8e <memset>
 8004b66:	4b0d      	ldr	r3, [pc, #52]	@ (8004b9c <std+0x58>)
 8004b68:	6224      	str	r4, [r4, #32]
 8004b6a:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba0 <std+0x5c>)
 8004b6e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b70:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba4 <std+0x60>)
 8004b72:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b74:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba8 <std+0x64>)
 8004b76:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b78:	4b0c      	ldr	r3, [pc, #48]	@ (8004bac <std+0x68>)
 8004b7a:	429c      	cmp	r4, r3
 8004b7c:	d006      	beq.n	8004b8c <std+0x48>
 8004b7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b82:	4294      	cmp	r4, r2
 8004b84:	d002      	beq.n	8004b8c <std+0x48>
 8004b86:	33d0      	adds	r3, #208	@ 0xd0
 8004b88:	429c      	cmp	r4, r3
 8004b8a:	d105      	bne.n	8004b98 <std+0x54>
 8004b8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b94:	f000 b978 	b.w	8004e88 <__retarget_lock_init_recursive>
 8004b98:	bd10      	pop	{r4, pc}
 8004b9a:	bf00      	nop
 8004b9c:	08004d09 	.word	0x08004d09
 8004ba0:	08004d2b 	.word	0x08004d2b
 8004ba4:	08004d63 	.word	0x08004d63
 8004ba8:	08004d87 	.word	0x08004d87
 8004bac:	200002e0 	.word	0x200002e0

08004bb0 <stdio_exit_handler>:
 8004bb0:	4a02      	ldr	r2, [pc, #8]	@ (8004bbc <stdio_exit_handler+0xc>)
 8004bb2:	4903      	ldr	r1, [pc, #12]	@ (8004bc0 <stdio_exit_handler+0x10>)
 8004bb4:	4803      	ldr	r0, [pc, #12]	@ (8004bc4 <stdio_exit_handler+0x14>)
 8004bb6:	f000 b869 	b.w	8004c8c <_fwalk_sglue>
 8004bba:	bf00      	nop
 8004bbc:	2000000c 	.word	0x2000000c
 8004bc0:	0800774d 	.word	0x0800774d
 8004bc4:	2000001c 	.word	0x2000001c

08004bc8 <cleanup_stdio>:
 8004bc8:	6841      	ldr	r1, [r0, #4]
 8004bca:	4b0c      	ldr	r3, [pc, #48]	@ (8004bfc <cleanup_stdio+0x34>)
 8004bcc:	b510      	push	{r4, lr}
 8004bce:	4299      	cmp	r1, r3
 8004bd0:	4604      	mov	r4, r0
 8004bd2:	d001      	beq.n	8004bd8 <cleanup_stdio+0x10>
 8004bd4:	f002 fdba 	bl	800774c <_fflush_r>
 8004bd8:	68a1      	ldr	r1, [r4, #8]
 8004bda:	4b09      	ldr	r3, [pc, #36]	@ (8004c00 <cleanup_stdio+0x38>)
 8004bdc:	4299      	cmp	r1, r3
 8004bde:	d002      	beq.n	8004be6 <cleanup_stdio+0x1e>
 8004be0:	4620      	mov	r0, r4
 8004be2:	f002 fdb3 	bl	800774c <_fflush_r>
 8004be6:	68e1      	ldr	r1, [r4, #12]
 8004be8:	4b06      	ldr	r3, [pc, #24]	@ (8004c04 <cleanup_stdio+0x3c>)
 8004bea:	4299      	cmp	r1, r3
 8004bec:	d004      	beq.n	8004bf8 <cleanup_stdio+0x30>
 8004bee:	4620      	mov	r0, r4
 8004bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bf4:	f002 bdaa 	b.w	800774c <_fflush_r>
 8004bf8:	bd10      	pop	{r4, pc}
 8004bfa:	bf00      	nop
 8004bfc:	200002e0 	.word	0x200002e0
 8004c00:	20000348 	.word	0x20000348
 8004c04:	200003b0 	.word	0x200003b0

08004c08 <global_stdio_init.part.0>:
 8004c08:	b510      	push	{r4, lr}
 8004c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c38 <global_stdio_init.part.0+0x30>)
 8004c0c:	4c0b      	ldr	r4, [pc, #44]	@ (8004c3c <global_stdio_init.part.0+0x34>)
 8004c0e:	4a0c      	ldr	r2, [pc, #48]	@ (8004c40 <global_stdio_init.part.0+0x38>)
 8004c10:	4620      	mov	r0, r4
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	2104      	movs	r1, #4
 8004c16:	2200      	movs	r2, #0
 8004c18:	f7ff ff94 	bl	8004b44 <std>
 8004c1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004c20:	2201      	movs	r2, #1
 8004c22:	2109      	movs	r1, #9
 8004c24:	f7ff ff8e 	bl	8004b44 <std>
 8004c28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c32:	2112      	movs	r1, #18
 8004c34:	f7ff bf86 	b.w	8004b44 <std>
 8004c38:	20000418 	.word	0x20000418
 8004c3c:	200002e0 	.word	0x200002e0
 8004c40:	08004bb1 	.word	0x08004bb1

08004c44 <__sfp_lock_acquire>:
 8004c44:	4801      	ldr	r0, [pc, #4]	@ (8004c4c <__sfp_lock_acquire+0x8>)
 8004c46:	f000 b920 	b.w	8004e8a <__retarget_lock_acquire_recursive>
 8004c4a:	bf00      	nop
 8004c4c:	20000421 	.word	0x20000421

08004c50 <__sfp_lock_release>:
 8004c50:	4801      	ldr	r0, [pc, #4]	@ (8004c58 <__sfp_lock_release+0x8>)
 8004c52:	f000 b91b 	b.w	8004e8c <__retarget_lock_release_recursive>
 8004c56:	bf00      	nop
 8004c58:	20000421 	.word	0x20000421

08004c5c <__sinit>:
 8004c5c:	b510      	push	{r4, lr}
 8004c5e:	4604      	mov	r4, r0
 8004c60:	f7ff fff0 	bl	8004c44 <__sfp_lock_acquire>
 8004c64:	6a23      	ldr	r3, [r4, #32]
 8004c66:	b11b      	cbz	r3, 8004c70 <__sinit+0x14>
 8004c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c6c:	f7ff bff0 	b.w	8004c50 <__sfp_lock_release>
 8004c70:	4b04      	ldr	r3, [pc, #16]	@ (8004c84 <__sinit+0x28>)
 8004c72:	6223      	str	r3, [r4, #32]
 8004c74:	4b04      	ldr	r3, [pc, #16]	@ (8004c88 <__sinit+0x2c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f5      	bne.n	8004c68 <__sinit+0xc>
 8004c7c:	f7ff ffc4 	bl	8004c08 <global_stdio_init.part.0>
 8004c80:	e7f2      	b.n	8004c68 <__sinit+0xc>
 8004c82:	bf00      	nop
 8004c84:	08004bc9 	.word	0x08004bc9
 8004c88:	20000418 	.word	0x20000418

08004c8c <_fwalk_sglue>:
 8004c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c90:	4607      	mov	r7, r0
 8004c92:	4688      	mov	r8, r1
 8004c94:	4614      	mov	r4, r2
 8004c96:	2600      	movs	r6, #0
 8004c98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c9c:	f1b9 0901 	subs.w	r9, r9, #1
 8004ca0:	d505      	bpl.n	8004cae <_fwalk_sglue+0x22>
 8004ca2:	6824      	ldr	r4, [r4, #0]
 8004ca4:	2c00      	cmp	r4, #0
 8004ca6:	d1f7      	bne.n	8004c98 <_fwalk_sglue+0xc>
 8004ca8:	4630      	mov	r0, r6
 8004caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cae:	89ab      	ldrh	r3, [r5, #12]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d907      	bls.n	8004cc4 <_fwalk_sglue+0x38>
 8004cb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	d003      	beq.n	8004cc4 <_fwalk_sglue+0x38>
 8004cbc:	4629      	mov	r1, r5
 8004cbe:	4638      	mov	r0, r7
 8004cc0:	47c0      	blx	r8
 8004cc2:	4306      	orrs	r6, r0
 8004cc4:	3568      	adds	r5, #104	@ 0x68
 8004cc6:	e7e9      	b.n	8004c9c <_fwalk_sglue+0x10>

08004cc8 <siprintf>:
 8004cc8:	b40e      	push	{r1, r2, r3}
 8004cca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004cce:	b500      	push	{lr}
 8004cd0:	b09c      	sub	sp, #112	@ 0x70
 8004cd2:	ab1d      	add	r3, sp, #116	@ 0x74
 8004cd4:	9002      	str	r0, [sp, #8]
 8004cd6:	9006      	str	r0, [sp, #24]
 8004cd8:	9107      	str	r1, [sp, #28]
 8004cda:	9104      	str	r1, [sp, #16]
 8004cdc:	4808      	ldr	r0, [pc, #32]	@ (8004d00 <siprintf+0x38>)
 8004cde:	4909      	ldr	r1, [pc, #36]	@ (8004d04 <siprintf+0x3c>)
 8004ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ce4:	9105      	str	r1, [sp, #20]
 8004ce6:	6800      	ldr	r0, [r0, #0]
 8004ce8:	a902      	add	r1, sp, #8
 8004cea:	9301      	str	r3, [sp, #4]
 8004cec:	f002 fbb2 	bl	8007454 <_svfiprintf_r>
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	9b02      	ldr	r3, [sp, #8]
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	b01c      	add	sp, #112	@ 0x70
 8004cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cfc:	b003      	add	sp, #12
 8004cfe:	4770      	bx	lr
 8004d00:	20000018 	.word	0x20000018
 8004d04:	ffff0208 	.word	0xffff0208

08004d08 <__sread>:
 8004d08:	b510      	push	{r4, lr}
 8004d0a:	460c      	mov	r4, r1
 8004d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d10:	f000 f86c 	bl	8004dec <_read_r>
 8004d14:	2800      	cmp	r0, #0
 8004d16:	bfab      	itete	ge
 8004d18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d1a:	89a3      	ldrhlt	r3, [r4, #12]
 8004d1c:	181b      	addge	r3, r3, r0
 8004d1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004d22:	bfac      	ite	ge
 8004d24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d26:	81a3      	strhlt	r3, [r4, #12]
 8004d28:	bd10      	pop	{r4, pc}

08004d2a <__swrite>:
 8004d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d2e:	461f      	mov	r7, r3
 8004d30:	898b      	ldrh	r3, [r1, #12]
 8004d32:	4605      	mov	r5, r0
 8004d34:	05db      	lsls	r3, r3, #23
 8004d36:	460c      	mov	r4, r1
 8004d38:	4616      	mov	r6, r2
 8004d3a:	d505      	bpl.n	8004d48 <__swrite+0x1e>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d44:	f000 f840 	bl	8004dc8 <_lseek_r>
 8004d48:	89a3      	ldrh	r3, [r4, #12]
 8004d4a:	4632      	mov	r2, r6
 8004d4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d50:	81a3      	strh	r3, [r4, #12]
 8004d52:	4628      	mov	r0, r5
 8004d54:	463b      	mov	r3, r7
 8004d56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d5e:	f000 b857 	b.w	8004e10 <_write_r>

08004d62 <__sseek>:
 8004d62:	b510      	push	{r4, lr}
 8004d64:	460c      	mov	r4, r1
 8004d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d6a:	f000 f82d 	bl	8004dc8 <_lseek_r>
 8004d6e:	1c43      	adds	r3, r0, #1
 8004d70:	89a3      	ldrh	r3, [r4, #12]
 8004d72:	bf15      	itete	ne
 8004d74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d7e:	81a3      	strheq	r3, [r4, #12]
 8004d80:	bf18      	it	ne
 8004d82:	81a3      	strhne	r3, [r4, #12]
 8004d84:	bd10      	pop	{r4, pc}

08004d86 <__sclose>:
 8004d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d8a:	f000 b80d 	b.w	8004da8 <_close_r>

08004d8e <memset>:
 8004d8e:	4603      	mov	r3, r0
 8004d90:	4402      	add	r2, r0
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d100      	bne.n	8004d98 <memset+0xa>
 8004d96:	4770      	bx	lr
 8004d98:	f803 1b01 	strb.w	r1, [r3], #1
 8004d9c:	e7f9      	b.n	8004d92 <memset+0x4>
	...

08004da0 <_localeconv_r>:
 8004da0:	4800      	ldr	r0, [pc, #0]	@ (8004da4 <_localeconv_r+0x4>)
 8004da2:	4770      	bx	lr
 8004da4:	20000158 	.word	0x20000158

08004da8 <_close_r>:
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	2300      	movs	r3, #0
 8004dac:	4d05      	ldr	r5, [pc, #20]	@ (8004dc4 <_close_r+0x1c>)
 8004dae:	4604      	mov	r4, r0
 8004db0:	4608      	mov	r0, r1
 8004db2:	602b      	str	r3, [r5, #0]
 8004db4:	f7fc ffdb 	bl	8001d6e <_close>
 8004db8:	1c43      	adds	r3, r0, #1
 8004dba:	d102      	bne.n	8004dc2 <_close_r+0x1a>
 8004dbc:	682b      	ldr	r3, [r5, #0]
 8004dbe:	b103      	cbz	r3, 8004dc2 <_close_r+0x1a>
 8004dc0:	6023      	str	r3, [r4, #0]
 8004dc2:	bd38      	pop	{r3, r4, r5, pc}
 8004dc4:	2000041c 	.word	0x2000041c

08004dc8 <_lseek_r>:
 8004dc8:	b538      	push	{r3, r4, r5, lr}
 8004dca:	4604      	mov	r4, r0
 8004dcc:	4608      	mov	r0, r1
 8004dce:	4611      	mov	r1, r2
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	4d05      	ldr	r5, [pc, #20]	@ (8004de8 <_lseek_r+0x20>)
 8004dd4:	602a      	str	r2, [r5, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f7fc ffed 	bl	8001db6 <_lseek>
 8004ddc:	1c43      	adds	r3, r0, #1
 8004dde:	d102      	bne.n	8004de6 <_lseek_r+0x1e>
 8004de0:	682b      	ldr	r3, [r5, #0]
 8004de2:	b103      	cbz	r3, 8004de6 <_lseek_r+0x1e>
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	bd38      	pop	{r3, r4, r5, pc}
 8004de8:	2000041c 	.word	0x2000041c

08004dec <_read_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	4604      	mov	r4, r0
 8004df0:	4608      	mov	r0, r1
 8004df2:	4611      	mov	r1, r2
 8004df4:	2200      	movs	r2, #0
 8004df6:	4d05      	ldr	r5, [pc, #20]	@ (8004e0c <_read_r+0x20>)
 8004df8:	602a      	str	r2, [r5, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f7fc ff7e 	bl	8001cfc <_read>
 8004e00:	1c43      	adds	r3, r0, #1
 8004e02:	d102      	bne.n	8004e0a <_read_r+0x1e>
 8004e04:	682b      	ldr	r3, [r5, #0]
 8004e06:	b103      	cbz	r3, 8004e0a <_read_r+0x1e>
 8004e08:	6023      	str	r3, [r4, #0]
 8004e0a:	bd38      	pop	{r3, r4, r5, pc}
 8004e0c:	2000041c 	.word	0x2000041c

08004e10 <_write_r>:
 8004e10:	b538      	push	{r3, r4, r5, lr}
 8004e12:	4604      	mov	r4, r0
 8004e14:	4608      	mov	r0, r1
 8004e16:	4611      	mov	r1, r2
 8004e18:	2200      	movs	r2, #0
 8004e1a:	4d05      	ldr	r5, [pc, #20]	@ (8004e30 <_write_r+0x20>)
 8004e1c:	602a      	str	r2, [r5, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	f7fc ff89 	bl	8001d36 <_write>
 8004e24:	1c43      	adds	r3, r0, #1
 8004e26:	d102      	bne.n	8004e2e <_write_r+0x1e>
 8004e28:	682b      	ldr	r3, [r5, #0]
 8004e2a:	b103      	cbz	r3, 8004e2e <_write_r+0x1e>
 8004e2c:	6023      	str	r3, [r4, #0]
 8004e2e:	bd38      	pop	{r3, r4, r5, pc}
 8004e30:	2000041c 	.word	0x2000041c

08004e34 <__errno>:
 8004e34:	4b01      	ldr	r3, [pc, #4]	@ (8004e3c <__errno+0x8>)
 8004e36:	6818      	ldr	r0, [r3, #0]
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	20000018 	.word	0x20000018

08004e40 <__libc_init_array>:
 8004e40:	b570      	push	{r4, r5, r6, lr}
 8004e42:	2600      	movs	r6, #0
 8004e44:	4d0c      	ldr	r5, [pc, #48]	@ (8004e78 <__libc_init_array+0x38>)
 8004e46:	4c0d      	ldr	r4, [pc, #52]	@ (8004e7c <__libc_init_array+0x3c>)
 8004e48:	1b64      	subs	r4, r4, r5
 8004e4a:	10a4      	asrs	r4, r4, #2
 8004e4c:	42a6      	cmp	r6, r4
 8004e4e:	d109      	bne.n	8004e64 <__libc_init_array+0x24>
 8004e50:	f003 fb68 	bl	8008524 <_init>
 8004e54:	2600      	movs	r6, #0
 8004e56:	4d0a      	ldr	r5, [pc, #40]	@ (8004e80 <__libc_init_array+0x40>)
 8004e58:	4c0a      	ldr	r4, [pc, #40]	@ (8004e84 <__libc_init_array+0x44>)
 8004e5a:	1b64      	subs	r4, r4, r5
 8004e5c:	10a4      	asrs	r4, r4, #2
 8004e5e:	42a6      	cmp	r6, r4
 8004e60:	d105      	bne.n	8004e6e <__libc_init_array+0x2e>
 8004e62:	bd70      	pop	{r4, r5, r6, pc}
 8004e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e68:	4798      	blx	r3
 8004e6a:	3601      	adds	r6, #1
 8004e6c:	e7ee      	b.n	8004e4c <__libc_init_array+0xc>
 8004e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e72:	4798      	blx	r3
 8004e74:	3601      	adds	r6, #1
 8004e76:	e7f2      	b.n	8004e5e <__libc_init_array+0x1e>
 8004e78:	080089e8 	.word	0x080089e8
 8004e7c:	080089e8 	.word	0x080089e8
 8004e80:	080089e8 	.word	0x080089e8
 8004e84:	080089ec 	.word	0x080089ec

08004e88 <__retarget_lock_init_recursive>:
 8004e88:	4770      	bx	lr

08004e8a <__retarget_lock_acquire_recursive>:
 8004e8a:	4770      	bx	lr

08004e8c <__retarget_lock_release_recursive>:
 8004e8c:	4770      	bx	lr

08004e8e <memchr>:
 8004e8e:	4603      	mov	r3, r0
 8004e90:	b510      	push	{r4, lr}
 8004e92:	b2c9      	uxtb	r1, r1
 8004e94:	4402      	add	r2, r0
 8004e96:	4293      	cmp	r3, r2
 8004e98:	4618      	mov	r0, r3
 8004e9a:	d101      	bne.n	8004ea0 <memchr+0x12>
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	e003      	b.n	8004ea8 <memchr+0x1a>
 8004ea0:	7804      	ldrb	r4, [r0, #0]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	428c      	cmp	r4, r1
 8004ea6:	d1f6      	bne.n	8004e96 <memchr+0x8>
 8004ea8:	bd10      	pop	{r4, pc}
	...

08004eac <nanf>:
 8004eac:	4800      	ldr	r0, [pc, #0]	@ (8004eb0 <nanf+0x4>)
 8004eae:	4770      	bx	lr
 8004eb0:	7fc00000 	.word	0x7fc00000

08004eb4 <quorem>:
 8004eb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb8:	6903      	ldr	r3, [r0, #16]
 8004eba:	690c      	ldr	r4, [r1, #16]
 8004ebc:	4607      	mov	r7, r0
 8004ebe:	42a3      	cmp	r3, r4
 8004ec0:	db7e      	blt.n	8004fc0 <quorem+0x10c>
 8004ec2:	3c01      	subs	r4, #1
 8004ec4:	00a3      	lsls	r3, r4, #2
 8004ec6:	f100 0514 	add.w	r5, r0, #20
 8004eca:	f101 0814 	add.w	r8, r1, #20
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ed4:	9301      	str	r3, [sp, #4]
 8004ed6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004eda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ee6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004eea:	d32e      	bcc.n	8004f4a <quorem+0x96>
 8004eec:	f04f 0a00 	mov.w	sl, #0
 8004ef0:	46c4      	mov	ip, r8
 8004ef2:	46ae      	mov	lr, r5
 8004ef4:	46d3      	mov	fp, sl
 8004ef6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004efa:	b298      	uxth	r0, r3
 8004efc:	fb06 a000 	mla	r0, r6, r0, sl
 8004f00:	0c1b      	lsrs	r3, r3, #16
 8004f02:	0c02      	lsrs	r2, r0, #16
 8004f04:	fb06 2303 	mla	r3, r6, r3, r2
 8004f08:	f8de 2000 	ldr.w	r2, [lr]
 8004f0c:	b280      	uxth	r0, r0
 8004f0e:	b292      	uxth	r2, r2
 8004f10:	1a12      	subs	r2, r2, r0
 8004f12:	445a      	add	r2, fp
 8004f14:	f8de 0000 	ldr.w	r0, [lr]
 8004f18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004f22:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004f26:	b292      	uxth	r2, r2
 8004f28:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004f2c:	45e1      	cmp	r9, ip
 8004f2e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004f32:	f84e 2b04 	str.w	r2, [lr], #4
 8004f36:	d2de      	bcs.n	8004ef6 <quorem+0x42>
 8004f38:	9b00      	ldr	r3, [sp, #0]
 8004f3a:	58eb      	ldr	r3, [r5, r3]
 8004f3c:	b92b      	cbnz	r3, 8004f4a <quorem+0x96>
 8004f3e:	9b01      	ldr	r3, [sp, #4]
 8004f40:	3b04      	subs	r3, #4
 8004f42:	429d      	cmp	r5, r3
 8004f44:	461a      	mov	r2, r3
 8004f46:	d32f      	bcc.n	8004fa8 <quorem+0xf4>
 8004f48:	613c      	str	r4, [r7, #16]
 8004f4a:	4638      	mov	r0, r7
 8004f4c:	f001 f9c4 	bl	80062d8 <__mcmp>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	db25      	blt.n	8004fa0 <quorem+0xec>
 8004f54:	4629      	mov	r1, r5
 8004f56:	2000      	movs	r0, #0
 8004f58:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f5c:	f8d1 c000 	ldr.w	ip, [r1]
 8004f60:	fa1f fe82 	uxth.w	lr, r2
 8004f64:	fa1f f38c 	uxth.w	r3, ip
 8004f68:	eba3 030e 	sub.w	r3, r3, lr
 8004f6c:	4403      	add	r3, r0
 8004f6e:	0c12      	lsrs	r2, r2, #16
 8004f70:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004f74:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f7e:	45c1      	cmp	r9, r8
 8004f80:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004f84:	f841 3b04 	str.w	r3, [r1], #4
 8004f88:	d2e6      	bcs.n	8004f58 <quorem+0xa4>
 8004f8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f92:	b922      	cbnz	r2, 8004f9e <quorem+0xea>
 8004f94:	3b04      	subs	r3, #4
 8004f96:	429d      	cmp	r5, r3
 8004f98:	461a      	mov	r2, r3
 8004f9a:	d30b      	bcc.n	8004fb4 <quorem+0x100>
 8004f9c:	613c      	str	r4, [r7, #16]
 8004f9e:	3601      	adds	r6, #1
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	b003      	add	sp, #12
 8004fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fa8:	6812      	ldr	r2, [r2, #0]
 8004faa:	3b04      	subs	r3, #4
 8004fac:	2a00      	cmp	r2, #0
 8004fae:	d1cb      	bne.n	8004f48 <quorem+0x94>
 8004fb0:	3c01      	subs	r4, #1
 8004fb2:	e7c6      	b.n	8004f42 <quorem+0x8e>
 8004fb4:	6812      	ldr	r2, [r2, #0]
 8004fb6:	3b04      	subs	r3, #4
 8004fb8:	2a00      	cmp	r2, #0
 8004fba:	d1ef      	bne.n	8004f9c <quorem+0xe8>
 8004fbc:	3c01      	subs	r4, #1
 8004fbe:	e7ea      	b.n	8004f96 <quorem+0xe2>
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	e7ee      	b.n	8004fa2 <quorem+0xee>
 8004fc4:	0000      	movs	r0, r0
	...

08004fc8 <_dtoa_r>:
 8004fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fcc:	4614      	mov	r4, r2
 8004fce:	461d      	mov	r5, r3
 8004fd0:	69c7      	ldr	r7, [r0, #28]
 8004fd2:	b097      	sub	sp, #92	@ 0x5c
 8004fd4:	4683      	mov	fp, r0
 8004fd6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004fda:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004fdc:	b97f      	cbnz	r7, 8004ffe <_dtoa_r+0x36>
 8004fde:	2010      	movs	r0, #16
 8004fe0:	f000 fe02 	bl	8005be8 <malloc>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	f8cb 001c 	str.w	r0, [fp, #28]
 8004fea:	b920      	cbnz	r0, 8004ff6 <_dtoa_r+0x2e>
 8004fec:	21ef      	movs	r1, #239	@ 0xef
 8004fee:	4ba8      	ldr	r3, [pc, #672]	@ (8005290 <_dtoa_r+0x2c8>)
 8004ff0:	48a8      	ldr	r0, [pc, #672]	@ (8005294 <_dtoa_r+0x2cc>)
 8004ff2:	f002 fc23 	bl	800783c <__assert_func>
 8004ff6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004ffa:	6007      	str	r7, [r0, #0]
 8004ffc:	60c7      	str	r7, [r0, #12]
 8004ffe:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005002:	6819      	ldr	r1, [r3, #0]
 8005004:	b159      	cbz	r1, 800501e <_dtoa_r+0x56>
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	2301      	movs	r3, #1
 800500a:	4093      	lsls	r3, r2
 800500c:	604a      	str	r2, [r1, #4]
 800500e:	608b      	str	r3, [r1, #8]
 8005010:	4658      	mov	r0, fp
 8005012:	f000 fedf 	bl	8005dd4 <_Bfree>
 8005016:	2200      	movs	r2, #0
 8005018:	f8db 301c 	ldr.w	r3, [fp, #28]
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	1e2b      	subs	r3, r5, #0
 8005020:	bfaf      	iteee	ge
 8005022:	2300      	movge	r3, #0
 8005024:	2201      	movlt	r2, #1
 8005026:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800502a:	9303      	strlt	r3, [sp, #12]
 800502c:	bfa8      	it	ge
 800502e:	6033      	strge	r3, [r6, #0]
 8005030:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005034:	4b98      	ldr	r3, [pc, #608]	@ (8005298 <_dtoa_r+0x2d0>)
 8005036:	bfb8      	it	lt
 8005038:	6032      	strlt	r2, [r6, #0]
 800503a:	ea33 0308 	bics.w	r3, r3, r8
 800503e:	d112      	bne.n	8005066 <_dtoa_r+0x9e>
 8005040:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005044:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800504c:	4323      	orrs	r3, r4
 800504e:	f000 8550 	beq.w	8005af2 <_dtoa_r+0xb2a>
 8005052:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005054:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800529c <_dtoa_r+0x2d4>
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 8552 	beq.w	8005b02 <_dtoa_r+0xb3a>
 800505e:	f10a 0303 	add.w	r3, sl, #3
 8005062:	f000 bd4c 	b.w	8005afe <_dtoa_r+0xb36>
 8005066:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800506a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800506e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005072:	2200      	movs	r2, #0
 8005074:	2300      	movs	r3, #0
 8005076:	f7fb fc97 	bl	80009a8 <__aeabi_dcmpeq>
 800507a:	4607      	mov	r7, r0
 800507c:	b158      	cbz	r0, 8005096 <_dtoa_r+0xce>
 800507e:	2301      	movs	r3, #1
 8005080:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005086:	b113      	cbz	r3, 800508e <_dtoa_r+0xc6>
 8005088:	4b85      	ldr	r3, [pc, #532]	@ (80052a0 <_dtoa_r+0x2d8>)
 800508a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80052a4 <_dtoa_r+0x2dc>
 8005092:	f000 bd36 	b.w	8005b02 <_dtoa_r+0xb3a>
 8005096:	ab14      	add	r3, sp, #80	@ 0x50
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	ab15      	add	r3, sp, #84	@ 0x54
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	4658      	mov	r0, fp
 80050a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80050a4:	f001 fa30 	bl	8006508 <__d2b>
 80050a8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80050ac:	4681      	mov	r9, r0
 80050ae:	2e00      	cmp	r6, #0
 80050b0:	d077      	beq.n	80051a2 <_dtoa_r+0x1da>
 80050b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050b8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80050bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050c0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80050c4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80050c8:	9712      	str	r7, [sp, #72]	@ 0x48
 80050ca:	4619      	mov	r1, r3
 80050cc:	2200      	movs	r2, #0
 80050ce:	4b76      	ldr	r3, [pc, #472]	@ (80052a8 <_dtoa_r+0x2e0>)
 80050d0:	f7fb f84a 	bl	8000168 <__aeabi_dsub>
 80050d4:	a368      	add	r3, pc, #416	@ (adr r3, 8005278 <_dtoa_r+0x2b0>)
 80050d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050da:	f7fb f9fd 	bl	80004d8 <__aeabi_dmul>
 80050de:	a368      	add	r3, pc, #416	@ (adr r3, 8005280 <_dtoa_r+0x2b8>)
 80050e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e4:	f7fb f842 	bl	800016c <__adddf3>
 80050e8:	4604      	mov	r4, r0
 80050ea:	4630      	mov	r0, r6
 80050ec:	460d      	mov	r5, r1
 80050ee:	f7fb f989 	bl	8000404 <__aeabi_i2d>
 80050f2:	a365      	add	r3, pc, #404	@ (adr r3, 8005288 <_dtoa_r+0x2c0>)
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	f7fb f9ee 	bl	80004d8 <__aeabi_dmul>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4620      	mov	r0, r4
 8005102:	4629      	mov	r1, r5
 8005104:	f7fb f832 	bl	800016c <__adddf3>
 8005108:	4604      	mov	r4, r0
 800510a:	460d      	mov	r5, r1
 800510c:	f7fb fc94 	bl	8000a38 <__aeabi_d2iz>
 8005110:	2200      	movs	r2, #0
 8005112:	4607      	mov	r7, r0
 8005114:	2300      	movs	r3, #0
 8005116:	4620      	mov	r0, r4
 8005118:	4629      	mov	r1, r5
 800511a:	f7fb fc4f 	bl	80009bc <__aeabi_dcmplt>
 800511e:	b140      	cbz	r0, 8005132 <_dtoa_r+0x16a>
 8005120:	4638      	mov	r0, r7
 8005122:	f7fb f96f 	bl	8000404 <__aeabi_i2d>
 8005126:	4622      	mov	r2, r4
 8005128:	462b      	mov	r3, r5
 800512a:	f7fb fc3d 	bl	80009a8 <__aeabi_dcmpeq>
 800512e:	b900      	cbnz	r0, 8005132 <_dtoa_r+0x16a>
 8005130:	3f01      	subs	r7, #1
 8005132:	2f16      	cmp	r7, #22
 8005134:	d853      	bhi.n	80051de <_dtoa_r+0x216>
 8005136:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800513a:	4b5c      	ldr	r3, [pc, #368]	@ (80052ac <_dtoa_r+0x2e4>)
 800513c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005144:	f7fb fc3a 	bl	80009bc <__aeabi_dcmplt>
 8005148:	2800      	cmp	r0, #0
 800514a:	d04a      	beq.n	80051e2 <_dtoa_r+0x21a>
 800514c:	2300      	movs	r3, #0
 800514e:	3f01      	subs	r7, #1
 8005150:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005152:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005154:	1b9b      	subs	r3, r3, r6
 8005156:	1e5a      	subs	r2, r3, #1
 8005158:	bf46      	itte	mi
 800515a:	f1c3 0801 	rsbmi	r8, r3, #1
 800515e:	2300      	movmi	r3, #0
 8005160:	f04f 0800 	movpl.w	r8, #0
 8005164:	9209      	str	r2, [sp, #36]	@ 0x24
 8005166:	bf48      	it	mi
 8005168:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800516a:	2f00      	cmp	r7, #0
 800516c:	db3b      	blt.n	80051e6 <_dtoa_r+0x21e>
 800516e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005170:	970e      	str	r7, [sp, #56]	@ 0x38
 8005172:	443b      	add	r3, r7
 8005174:	9309      	str	r3, [sp, #36]	@ 0x24
 8005176:	2300      	movs	r3, #0
 8005178:	930a      	str	r3, [sp, #40]	@ 0x28
 800517a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800517c:	2b09      	cmp	r3, #9
 800517e:	d866      	bhi.n	800524e <_dtoa_r+0x286>
 8005180:	2b05      	cmp	r3, #5
 8005182:	bfc4      	itt	gt
 8005184:	3b04      	subgt	r3, #4
 8005186:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005188:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800518a:	bfc8      	it	gt
 800518c:	2400      	movgt	r4, #0
 800518e:	f1a3 0302 	sub.w	r3, r3, #2
 8005192:	bfd8      	it	le
 8005194:	2401      	movle	r4, #1
 8005196:	2b03      	cmp	r3, #3
 8005198:	d864      	bhi.n	8005264 <_dtoa_r+0x29c>
 800519a:	e8df f003 	tbb	[pc, r3]
 800519e:	382b      	.short	0x382b
 80051a0:	5636      	.short	0x5636
 80051a2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80051a6:	441e      	add	r6, r3
 80051a8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	bfc1      	itttt	gt
 80051b0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80051b4:	fa08 f803 	lslgt.w	r8, r8, r3
 80051b8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80051bc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80051c0:	bfd6      	itet	le
 80051c2:	f1c3 0320 	rsble	r3, r3, #32
 80051c6:	ea48 0003 	orrgt.w	r0, r8, r3
 80051ca:	fa04 f003 	lslle.w	r0, r4, r3
 80051ce:	f7fb f909 	bl	80003e4 <__aeabi_ui2d>
 80051d2:	2201      	movs	r2, #1
 80051d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80051d8:	3e01      	subs	r6, #1
 80051da:	9212      	str	r2, [sp, #72]	@ 0x48
 80051dc:	e775      	b.n	80050ca <_dtoa_r+0x102>
 80051de:	2301      	movs	r3, #1
 80051e0:	e7b6      	b.n	8005150 <_dtoa_r+0x188>
 80051e2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80051e4:	e7b5      	b.n	8005152 <_dtoa_r+0x18a>
 80051e6:	427b      	negs	r3, r7
 80051e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80051ea:	2300      	movs	r3, #0
 80051ec:	eba8 0807 	sub.w	r8, r8, r7
 80051f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80051f2:	e7c2      	b.n	800517a <_dtoa_r+0x1b2>
 80051f4:	2300      	movs	r3, #0
 80051f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	dc35      	bgt.n	800526a <_dtoa_r+0x2a2>
 80051fe:	2301      	movs	r3, #1
 8005200:	461a      	mov	r2, r3
 8005202:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005206:	9221      	str	r2, [sp, #132]	@ 0x84
 8005208:	e00b      	b.n	8005222 <_dtoa_r+0x25a>
 800520a:	2301      	movs	r3, #1
 800520c:	e7f3      	b.n	80051f6 <_dtoa_r+0x22e>
 800520e:	2300      	movs	r3, #0
 8005210:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005212:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005214:	18fb      	adds	r3, r7, r3
 8005216:	9308      	str	r3, [sp, #32]
 8005218:	3301      	adds	r3, #1
 800521a:	2b01      	cmp	r3, #1
 800521c:	9307      	str	r3, [sp, #28]
 800521e:	bfb8      	it	lt
 8005220:	2301      	movlt	r3, #1
 8005222:	2100      	movs	r1, #0
 8005224:	2204      	movs	r2, #4
 8005226:	f8db 001c 	ldr.w	r0, [fp, #28]
 800522a:	f102 0514 	add.w	r5, r2, #20
 800522e:	429d      	cmp	r5, r3
 8005230:	d91f      	bls.n	8005272 <_dtoa_r+0x2aa>
 8005232:	6041      	str	r1, [r0, #4]
 8005234:	4658      	mov	r0, fp
 8005236:	f000 fd8d 	bl	8005d54 <_Balloc>
 800523a:	4682      	mov	sl, r0
 800523c:	2800      	cmp	r0, #0
 800523e:	d139      	bne.n	80052b4 <_dtoa_r+0x2ec>
 8005240:	4602      	mov	r2, r0
 8005242:	f240 11af 	movw	r1, #431	@ 0x1af
 8005246:	4b1a      	ldr	r3, [pc, #104]	@ (80052b0 <_dtoa_r+0x2e8>)
 8005248:	e6d2      	b.n	8004ff0 <_dtoa_r+0x28>
 800524a:	2301      	movs	r3, #1
 800524c:	e7e0      	b.n	8005210 <_dtoa_r+0x248>
 800524e:	2401      	movs	r4, #1
 8005250:	2300      	movs	r3, #0
 8005252:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005254:	9320      	str	r3, [sp, #128]	@ 0x80
 8005256:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800525a:	2200      	movs	r2, #0
 800525c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005260:	2312      	movs	r3, #18
 8005262:	e7d0      	b.n	8005206 <_dtoa_r+0x23e>
 8005264:	2301      	movs	r3, #1
 8005266:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005268:	e7f5      	b.n	8005256 <_dtoa_r+0x28e>
 800526a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800526c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005270:	e7d7      	b.n	8005222 <_dtoa_r+0x25a>
 8005272:	3101      	adds	r1, #1
 8005274:	0052      	lsls	r2, r2, #1
 8005276:	e7d8      	b.n	800522a <_dtoa_r+0x262>
 8005278:	636f4361 	.word	0x636f4361
 800527c:	3fd287a7 	.word	0x3fd287a7
 8005280:	8b60c8b3 	.word	0x8b60c8b3
 8005284:	3fc68a28 	.word	0x3fc68a28
 8005288:	509f79fb 	.word	0x509f79fb
 800528c:	3fd34413 	.word	0x3fd34413
 8005290:	080085f4 	.word	0x080085f4
 8005294:	0800860b 	.word	0x0800860b
 8005298:	7ff00000 	.word	0x7ff00000
 800529c:	080085f0 	.word	0x080085f0
 80052a0:	080085bf 	.word	0x080085bf
 80052a4:	080085be 	.word	0x080085be
 80052a8:	3ff80000 	.word	0x3ff80000
 80052ac:	08008708 	.word	0x08008708
 80052b0:	08008663 	.word	0x08008663
 80052b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80052b8:	6018      	str	r0, [r3, #0]
 80052ba:	9b07      	ldr	r3, [sp, #28]
 80052bc:	2b0e      	cmp	r3, #14
 80052be:	f200 80a4 	bhi.w	800540a <_dtoa_r+0x442>
 80052c2:	2c00      	cmp	r4, #0
 80052c4:	f000 80a1 	beq.w	800540a <_dtoa_r+0x442>
 80052c8:	2f00      	cmp	r7, #0
 80052ca:	dd33      	ble.n	8005334 <_dtoa_r+0x36c>
 80052cc:	4b86      	ldr	r3, [pc, #536]	@ (80054e8 <_dtoa_r+0x520>)
 80052ce:	f007 020f 	and.w	r2, r7, #15
 80052d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052d6:	05f8      	lsls	r0, r7, #23
 80052d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052dc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80052e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80052e4:	d516      	bpl.n	8005314 <_dtoa_r+0x34c>
 80052e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80052ea:	4b80      	ldr	r3, [pc, #512]	@ (80054ec <_dtoa_r+0x524>)
 80052ec:	2603      	movs	r6, #3
 80052ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052f2:	f7fb fa1b 	bl	800072c <__aeabi_ddiv>
 80052f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052fa:	f004 040f 	and.w	r4, r4, #15
 80052fe:	4d7b      	ldr	r5, [pc, #492]	@ (80054ec <_dtoa_r+0x524>)
 8005300:	b954      	cbnz	r4, 8005318 <_dtoa_r+0x350>
 8005302:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800530a:	f7fb fa0f 	bl	800072c <__aeabi_ddiv>
 800530e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005312:	e028      	b.n	8005366 <_dtoa_r+0x39e>
 8005314:	2602      	movs	r6, #2
 8005316:	e7f2      	b.n	80052fe <_dtoa_r+0x336>
 8005318:	07e1      	lsls	r1, r4, #31
 800531a:	d508      	bpl.n	800532e <_dtoa_r+0x366>
 800531c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005320:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005324:	f7fb f8d8 	bl	80004d8 <__aeabi_dmul>
 8005328:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800532c:	3601      	adds	r6, #1
 800532e:	1064      	asrs	r4, r4, #1
 8005330:	3508      	adds	r5, #8
 8005332:	e7e5      	b.n	8005300 <_dtoa_r+0x338>
 8005334:	f000 80d2 	beq.w	80054dc <_dtoa_r+0x514>
 8005338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800533c:	427c      	negs	r4, r7
 800533e:	4b6a      	ldr	r3, [pc, #424]	@ (80054e8 <_dtoa_r+0x520>)
 8005340:	f004 020f 	and.w	r2, r4, #15
 8005344:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534c:	f7fb f8c4 	bl	80004d8 <__aeabi_dmul>
 8005350:	2602      	movs	r6, #2
 8005352:	2300      	movs	r3, #0
 8005354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005358:	4d64      	ldr	r5, [pc, #400]	@ (80054ec <_dtoa_r+0x524>)
 800535a:	1124      	asrs	r4, r4, #4
 800535c:	2c00      	cmp	r4, #0
 800535e:	f040 80b2 	bne.w	80054c6 <_dtoa_r+0x4fe>
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1d3      	bne.n	800530e <_dtoa_r+0x346>
 8005366:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800536a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 80b7 	beq.w	80054e0 <_dtoa_r+0x518>
 8005372:	2200      	movs	r2, #0
 8005374:	4620      	mov	r0, r4
 8005376:	4629      	mov	r1, r5
 8005378:	4b5d      	ldr	r3, [pc, #372]	@ (80054f0 <_dtoa_r+0x528>)
 800537a:	f7fb fb1f 	bl	80009bc <__aeabi_dcmplt>
 800537e:	2800      	cmp	r0, #0
 8005380:	f000 80ae 	beq.w	80054e0 <_dtoa_r+0x518>
 8005384:	9b07      	ldr	r3, [sp, #28]
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 80aa 	beq.w	80054e0 <_dtoa_r+0x518>
 800538c:	9b08      	ldr	r3, [sp, #32]
 800538e:	2b00      	cmp	r3, #0
 8005390:	dd37      	ble.n	8005402 <_dtoa_r+0x43a>
 8005392:	1e7b      	subs	r3, r7, #1
 8005394:	4620      	mov	r0, r4
 8005396:	9304      	str	r3, [sp, #16]
 8005398:	2200      	movs	r2, #0
 800539a:	4629      	mov	r1, r5
 800539c:	4b55      	ldr	r3, [pc, #340]	@ (80054f4 <_dtoa_r+0x52c>)
 800539e:	f7fb f89b 	bl	80004d8 <__aeabi_dmul>
 80053a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053a6:	9c08      	ldr	r4, [sp, #32]
 80053a8:	3601      	adds	r6, #1
 80053aa:	4630      	mov	r0, r6
 80053ac:	f7fb f82a 	bl	8000404 <__aeabi_i2d>
 80053b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053b4:	f7fb f890 	bl	80004d8 <__aeabi_dmul>
 80053b8:	2200      	movs	r2, #0
 80053ba:	4b4f      	ldr	r3, [pc, #316]	@ (80054f8 <_dtoa_r+0x530>)
 80053bc:	f7fa fed6 	bl	800016c <__adddf3>
 80053c0:	4605      	mov	r5, r0
 80053c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80053c6:	2c00      	cmp	r4, #0
 80053c8:	f040 809a 	bne.w	8005500 <_dtoa_r+0x538>
 80053cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053d0:	2200      	movs	r2, #0
 80053d2:	4b4a      	ldr	r3, [pc, #296]	@ (80054fc <_dtoa_r+0x534>)
 80053d4:	f7fa fec8 	bl	8000168 <__aeabi_dsub>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053e0:	462a      	mov	r2, r5
 80053e2:	4633      	mov	r3, r6
 80053e4:	f7fb fb08 	bl	80009f8 <__aeabi_dcmpgt>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	f040 828e 	bne.w	800590a <_dtoa_r+0x942>
 80053ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053f2:	462a      	mov	r2, r5
 80053f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80053f8:	f7fb fae0 	bl	80009bc <__aeabi_dcmplt>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	f040 8127 	bne.w	8005650 <_dtoa_r+0x688>
 8005402:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005406:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800540a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800540c:	2b00      	cmp	r3, #0
 800540e:	f2c0 8163 	blt.w	80056d8 <_dtoa_r+0x710>
 8005412:	2f0e      	cmp	r7, #14
 8005414:	f300 8160 	bgt.w	80056d8 <_dtoa_r+0x710>
 8005418:	4b33      	ldr	r3, [pc, #204]	@ (80054e8 <_dtoa_r+0x520>)
 800541a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800541e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005422:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005426:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005428:	2b00      	cmp	r3, #0
 800542a:	da03      	bge.n	8005434 <_dtoa_r+0x46c>
 800542c:	9b07      	ldr	r3, [sp, #28]
 800542e:	2b00      	cmp	r3, #0
 8005430:	f340 8100 	ble.w	8005634 <_dtoa_r+0x66c>
 8005434:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005438:	4656      	mov	r6, sl
 800543a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800543e:	4620      	mov	r0, r4
 8005440:	4629      	mov	r1, r5
 8005442:	f7fb f973 	bl	800072c <__aeabi_ddiv>
 8005446:	f7fb faf7 	bl	8000a38 <__aeabi_d2iz>
 800544a:	4680      	mov	r8, r0
 800544c:	f7fa ffda 	bl	8000404 <__aeabi_i2d>
 8005450:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005454:	f7fb f840 	bl	80004d8 <__aeabi_dmul>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	4620      	mov	r0, r4
 800545e:	4629      	mov	r1, r5
 8005460:	f7fa fe82 	bl	8000168 <__aeabi_dsub>
 8005464:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005468:	9d07      	ldr	r5, [sp, #28]
 800546a:	f806 4b01 	strb.w	r4, [r6], #1
 800546e:	eba6 040a 	sub.w	r4, r6, sl
 8005472:	42a5      	cmp	r5, r4
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	f040 8116 	bne.w	80056a8 <_dtoa_r+0x6e0>
 800547c:	f7fa fe76 	bl	800016c <__adddf3>
 8005480:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005484:	4604      	mov	r4, r0
 8005486:	460d      	mov	r5, r1
 8005488:	f7fb fab6 	bl	80009f8 <__aeabi_dcmpgt>
 800548c:	2800      	cmp	r0, #0
 800548e:	f040 80f8 	bne.w	8005682 <_dtoa_r+0x6ba>
 8005492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005496:	4620      	mov	r0, r4
 8005498:	4629      	mov	r1, r5
 800549a:	f7fb fa85 	bl	80009a8 <__aeabi_dcmpeq>
 800549e:	b118      	cbz	r0, 80054a8 <_dtoa_r+0x4e0>
 80054a0:	f018 0f01 	tst.w	r8, #1
 80054a4:	f040 80ed 	bne.w	8005682 <_dtoa_r+0x6ba>
 80054a8:	4649      	mov	r1, r9
 80054aa:	4658      	mov	r0, fp
 80054ac:	f000 fc92 	bl	8005dd4 <_Bfree>
 80054b0:	2300      	movs	r3, #0
 80054b2:	7033      	strb	r3, [r6, #0]
 80054b4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80054b6:	3701      	adds	r7, #1
 80054b8:	601f      	str	r7, [r3, #0]
 80054ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8320 	beq.w	8005b02 <_dtoa_r+0xb3a>
 80054c2:	601e      	str	r6, [r3, #0]
 80054c4:	e31d      	b.n	8005b02 <_dtoa_r+0xb3a>
 80054c6:	07e2      	lsls	r2, r4, #31
 80054c8:	d505      	bpl.n	80054d6 <_dtoa_r+0x50e>
 80054ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80054ce:	f7fb f803 	bl	80004d8 <__aeabi_dmul>
 80054d2:	2301      	movs	r3, #1
 80054d4:	3601      	adds	r6, #1
 80054d6:	1064      	asrs	r4, r4, #1
 80054d8:	3508      	adds	r5, #8
 80054da:	e73f      	b.n	800535c <_dtoa_r+0x394>
 80054dc:	2602      	movs	r6, #2
 80054de:	e742      	b.n	8005366 <_dtoa_r+0x39e>
 80054e0:	9c07      	ldr	r4, [sp, #28]
 80054e2:	9704      	str	r7, [sp, #16]
 80054e4:	e761      	b.n	80053aa <_dtoa_r+0x3e2>
 80054e6:	bf00      	nop
 80054e8:	08008708 	.word	0x08008708
 80054ec:	080086e0 	.word	0x080086e0
 80054f0:	3ff00000 	.word	0x3ff00000
 80054f4:	40240000 	.word	0x40240000
 80054f8:	401c0000 	.word	0x401c0000
 80054fc:	40140000 	.word	0x40140000
 8005500:	4b70      	ldr	r3, [pc, #448]	@ (80056c4 <_dtoa_r+0x6fc>)
 8005502:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005504:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005508:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800550c:	4454      	add	r4, sl
 800550e:	2900      	cmp	r1, #0
 8005510:	d045      	beq.n	800559e <_dtoa_r+0x5d6>
 8005512:	2000      	movs	r0, #0
 8005514:	496c      	ldr	r1, [pc, #432]	@ (80056c8 <_dtoa_r+0x700>)
 8005516:	f7fb f909 	bl	800072c <__aeabi_ddiv>
 800551a:	4633      	mov	r3, r6
 800551c:	462a      	mov	r2, r5
 800551e:	f7fa fe23 	bl	8000168 <__aeabi_dsub>
 8005522:	4656      	mov	r6, sl
 8005524:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800552c:	f7fb fa84 	bl	8000a38 <__aeabi_d2iz>
 8005530:	4605      	mov	r5, r0
 8005532:	f7fa ff67 	bl	8000404 <__aeabi_i2d>
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800553e:	f7fa fe13 	bl	8000168 <__aeabi_dsub>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	3530      	adds	r5, #48	@ 0x30
 8005548:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800554c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005550:	f806 5b01 	strb.w	r5, [r6], #1
 8005554:	f7fb fa32 	bl	80009bc <__aeabi_dcmplt>
 8005558:	2800      	cmp	r0, #0
 800555a:	d163      	bne.n	8005624 <_dtoa_r+0x65c>
 800555c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005560:	2000      	movs	r0, #0
 8005562:	495a      	ldr	r1, [pc, #360]	@ (80056cc <_dtoa_r+0x704>)
 8005564:	f7fa fe00 	bl	8000168 <__aeabi_dsub>
 8005568:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800556c:	f7fb fa26 	bl	80009bc <__aeabi_dcmplt>
 8005570:	2800      	cmp	r0, #0
 8005572:	f040 8087 	bne.w	8005684 <_dtoa_r+0x6bc>
 8005576:	42a6      	cmp	r6, r4
 8005578:	f43f af43 	beq.w	8005402 <_dtoa_r+0x43a>
 800557c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005580:	2200      	movs	r2, #0
 8005582:	4b53      	ldr	r3, [pc, #332]	@ (80056d0 <_dtoa_r+0x708>)
 8005584:	f7fa ffa8 	bl	80004d8 <__aeabi_dmul>
 8005588:	2200      	movs	r2, #0
 800558a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800558e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005592:	4b4f      	ldr	r3, [pc, #316]	@ (80056d0 <_dtoa_r+0x708>)
 8005594:	f7fa ffa0 	bl	80004d8 <__aeabi_dmul>
 8005598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800559c:	e7c4      	b.n	8005528 <_dtoa_r+0x560>
 800559e:	4631      	mov	r1, r6
 80055a0:	4628      	mov	r0, r5
 80055a2:	f7fa ff99 	bl	80004d8 <__aeabi_dmul>
 80055a6:	4656      	mov	r6, sl
 80055a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80055ac:	9413      	str	r4, [sp, #76]	@ 0x4c
 80055ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055b2:	f7fb fa41 	bl	8000a38 <__aeabi_d2iz>
 80055b6:	4605      	mov	r5, r0
 80055b8:	f7fa ff24 	bl	8000404 <__aeabi_i2d>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055c4:	f7fa fdd0 	bl	8000168 <__aeabi_dsub>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	3530      	adds	r5, #48	@ 0x30
 80055ce:	f806 5b01 	strb.w	r5, [r6], #1
 80055d2:	42a6      	cmp	r6, r4
 80055d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055d8:	f04f 0200 	mov.w	r2, #0
 80055dc:	d124      	bne.n	8005628 <_dtoa_r+0x660>
 80055de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80055e2:	4b39      	ldr	r3, [pc, #228]	@ (80056c8 <_dtoa_r+0x700>)
 80055e4:	f7fa fdc2 	bl	800016c <__adddf3>
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055f0:	f7fb fa02 	bl	80009f8 <__aeabi_dcmpgt>
 80055f4:	2800      	cmp	r0, #0
 80055f6:	d145      	bne.n	8005684 <_dtoa_r+0x6bc>
 80055f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80055fc:	2000      	movs	r0, #0
 80055fe:	4932      	ldr	r1, [pc, #200]	@ (80056c8 <_dtoa_r+0x700>)
 8005600:	f7fa fdb2 	bl	8000168 <__aeabi_dsub>
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800560c:	f7fb f9d6 	bl	80009bc <__aeabi_dcmplt>
 8005610:	2800      	cmp	r0, #0
 8005612:	f43f aef6 	beq.w	8005402 <_dtoa_r+0x43a>
 8005616:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005618:	1e73      	subs	r3, r6, #1
 800561a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800561c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005620:	2b30      	cmp	r3, #48	@ 0x30
 8005622:	d0f8      	beq.n	8005616 <_dtoa_r+0x64e>
 8005624:	9f04      	ldr	r7, [sp, #16]
 8005626:	e73f      	b.n	80054a8 <_dtoa_r+0x4e0>
 8005628:	4b29      	ldr	r3, [pc, #164]	@ (80056d0 <_dtoa_r+0x708>)
 800562a:	f7fa ff55 	bl	80004d8 <__aeabi_dmul>
 800562e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005632:	e7bc      	b.n	80055ae <_dtoa_r+0x5e6>
 8005634:	d10c      	bne.n	8005650 <_dtoa_r+0x688>
 8005636:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800563a:	2200      	movs	r2, #0
 800563c:	4b25      	ldr	r3, [pc, #148]	@ (80056d4 <_dtoa_r+0x70c>)
 800563e:	f7fa ff4b 	bl	80004d8 <__aeabi_dmul>
 8005642:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005646:	f7fb f9cd 	bl	80009e4 <__aeabi_dcmpge>
 800564a:	2800      	cmp	r0, #0
 800564c:	f000 815b 	beq.w	8005906 <_dtoa_r+0x93e>
 8005650:	2400      	movs	r4, #0
 8005652:	4625      	mov	r5, r4
 8005654:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005656:	4656      	mov	r6, sl
 8005658:	43db      	mvns	r3, r3
 800565a:	9304      	str	r3, [sp, #16]
 800565c:	2700      	movs	r7, #0
 800565e:	4621      	mov	r1, r4
 8005660:	4658      	mov	r0, fp
 8005662:	f000 fbb7 	bl	8005dd4 <_Bfree>
 8005666:	2d00      	cmp	r5, #0
 8005668:	d0dc      	beq.n	8005624 <_dtoa_r+0x65c>
 800566a:	b12f      	cbz	r7, 8005678 <_dtoa_r+0x6b0>
 800566c:	42af      	cmp	r7, r5
 800566e:	d003      	beq.n	8005678 <_dtoa_r+0x6b0>
 8005670:	4639      	mov	r1, r7
 8005672:	4658      	mov	r0, fp
 8005674:	f000 fbae 	bl	8005dd4 <_Bfree>
 8005678:	4629      	mov	r1, r5
 800567a:	4658      	mov	r0, fp
 800567c:	f000 fbaa 	bl	8005dd4 <_Bfree>
 8005680:	e7d0      	b.n	8005624 <_dtoa_r+0x65c>
 8005682:	9704      	str	r7, [sp, #16]
 8005684:	4633      	mov	r3, r6
 8005686:	461e      	mov	r6, r3
 8005688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800568c:	2a39      	cmp	r2, #57	@ 0x39
 800568e:	d107      	bne.n	80056a0 <_dtoa_r+0x6d8>
 8005690:	459a      	cmp	sl, r3
 8005692:	d1f8      	bne.n	8005686 <_dtoa_r+0x6be>
 8005694:	9a04      	ldr	r2, [sp, #16]
 8005696:	3201      	adds	r2, #1
 8005698:	9204      	str	r2, [sp, #16]
 800569a:	2230      	movs	r2, #48	@ 0x30
 800569c:	f88a 2000 	strb.w	r2, [sl]
 80056a0:	781a      	ldrb	r2, [r3, #0]
 80056a2:	3201      	adds	r2, #1
 80056a4:	701a      	strb	r2, [r3, #0]
 80056a6:	e7bd      	b.n	8005624 <_dtoa_r+0x65c>
 80056a8:	2200      	movs	r2, #0
 80056aa:	4b09      	ldr	r3, [pc, #36]	@ (80056d0 <_dtoa_r+0x708>)
 80056ac:	f7fa ff14 	bl	80004d8 <__aeabi_dmul>
 80056b0:	2200      	movs	r2, #0
 80056b2:	2300      	movs	r3, #0
 80056b4:	4604      	mov	r4, r0
 80056b6:	460d      	mov	r5, r1
 80056b8:	f7fb f976 	bl	80009a8 <__aeabi_dcmpeq>
 80056bc:	2800      	cmp	r0, #0
 80056be:	f43f aebc 	beq.w	800543a <_dtoa_r+0x472>
 80056c2:	e6f1      	b.n	80054a8 <_dtoa_r+0x4e0>
 80056c4:	08008708 	.word	0x08008708
 80056c8:	3fe00000 	.word	0x3fe00000
 80056cc:	3ff00000 	.word	0x3ff00000
 80056d0:	40240000 	.word	0x40240000
 80056d4:	40140000 	.word	0x40140000
 80056d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80056da:	2a00      	cmp	r2, #0
 80056dc:	f000 80db 	beq.w	8005896 <_dtoa_r+0x8ce>
 80056e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80056e2:	2a01      	cmp	r2, #1
 80056e4:	f300 80bf 	bgt.w	8005866 <_dtoa_r+0x89e>
 80056e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80056ea:	2a00      	cmp	r2, #0
 80056ec:	f000 80b7 	beq.w	800585e <_dtoa_r+0x896>
 80056f0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80056f4:	4646      	mov	r6, r8
 80056f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80056f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056fa:	2101      	movs	r1, #1
 80056fc:	441a      	add	r2, r3
 80056fe:	4658      	mov	r0, fp
 8005700:	4498      	add	r8, r3
 8005702:	9209      	str	r2, [sp, #36]	@ 0x24
 8005704:	f000 fc64 	bl	8005fd0 <__i2b>
 8005708:	4605      	mov	r5, r0
 800570a:	b15e      	cbz	r6, 8005724 <_dtoa_r+0x75c>
 800570c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800570e:	2b00      	cmp	r3, #0
 8005710:	dd08      	ble.n	8005724 <_dtoa_r+0x75c>
 8005712:	42b3      	cmp	r3, r6
 8005714:	bfa8      	it	ge
 8005716:	4633      	movge	r3, r6
 8005718:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800571a:	eba8 0803 	sub.w	r8, r8, r3
 800571e:	1af6      	subs	r6, r6, r3
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	9309      	str	r3, [sp, #36]	@ 0x24
 8005724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005726:	b1f3      	cbz	r3, 8005766 <_dtoa_r+0x79e>
 8005728:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 80b7 	beq.w	800589e <_dtoa_r+0x8d6>
 8005730:	b18c      	cbz	r4, 8005756 <_dtoa_r+0x78e>
 8005732:	4629      	mov	r1, r5
 8005734:	4622      	mov	r2, r4
 8005736:	4658      	mov	r0, fp
 8005738:	f000 fd08 	bl	800614c <__pow5mult>
 800573c:	464a      	mov	r2, r9
 800573e:	4601      	mov	r1, r0
 8005740:	4605      	mov	r5, r0
 8005742:	4658      	mov	r0, fp
 8005744:	f000 fc5a 	bl	8005ffc <__multiply>
 8005748:	4649      	mov	r1, r9
 800574a:	9004      	str	r0, [sp, #16]
 800574c:	4658      	mov	r0, fp
 800574e:	f000 fb41 	bl	8005dd4 <_Bfree>
 8005752:	9b04      	ldr	r3, [sp, #16]
 8005754:	4699      	mov	r9, r3
 8005756:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005758:	1b1a      	subs	r2, r3, r4
 800575a:	d004      	beq.n	8005766 <_dtoa_r+0x79e>
 800575c:	4649      	mov	r1, r9
 800575e:	4658      	mov	r0, fp
 8005760:	f000 fcf4 	bl	800614c <__pow5mult>
 8005764:	4681      	mov	r9, r0
 8005766:	2101      	movs	r1, #1
 8005768:	4658      	mov	r0, fp
 800576a:	f000 fc31 	bl	8005fd0 <__i2b>
 800576e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005770:	4604      	mov	r4, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 81c9 	beq.w	8005b0a <_dtoa_r+0xb42>
 8005778:	461a      	mov	r2, r3
 800577a:	4601      	mov	r1, r0
 800577c:	4658      	mov	r0, fp
 800577e:	f000 fce5 	bl	800614c <__pow5mult>
 8005782:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005784:	4604      	mov	r4, r0
 8005786:	2b01      	cmp	r3, #1
 8005788:	f300 808f 	bgt.w	80058aa <_dtoa_r+0x8e2>
 800578c:	9b02      	ldr	r3, [sp, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	f040 8087 	bne.w	80058a2 <_dtoa_r+0x8da>
 8005794:	9b03      	ldr	r3, [sp, #12]
 8005796:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800579a:	2b00      	cmp	r3, #0
 800579c:	f040 8083 	bne.w	80058a6 <_dtoa_r+0x8de>
 80057a0:	9b03      	ldr	r3, [sp, #12]
 80057a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057a6:	0d1b      	lsrs	r3, r3, #20
 80057a8:	051b      	lsls	r3, r3, #20
 80057aa:	b12b      	cbz	r3, 80057b8 <_dtoa_r+0x7f0>
 80057ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057ae:	f108 0801 	add.w	r8, r8, #1
 80057b2:	3301      	adds	r3, #1
 80057b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80057b6:	2301      	movs	r3, #1
 80057b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80057ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 81aa 	beq.w	8005b16 <_dtoa_r+0xb4e>
 80057c2:	6923      	ldr	r3, [r4, #16]
 80057c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80057c8:	6918      	ldr	r0, [r3, #16]
 80057ca:	f000 fbb5 	bl	8005f38 <__hi0bits>
 80057ce:	f1c0 0020 	rsb	r0, r0, #32
 80057d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057d4:	4418      	add	r0, r3
 80057d6:	f010 001f 	ands.w	r0, r0, #31
 80057da:	d071      	beq.n	80058c0 <_dtoa_r+0x8f8>
 80057dc:	f1c0 0320 	rsb	r3, r0, #32
 80057e0:	2b04      	cmp	r3, #4
 80057e2:	dd65      	ble.n	80058b0 <_dtoa_r+0x8e8>
 80057e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057e6:	f1c0 001c 	rsb	r0, r0, #28
 80057ea:	4403      	add	r3, r0
 80057ec:	4480      	add	r8, r0
 80057ee:	4406      	add	r6, r0
 80057f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80057f2:	f1b8 0f00 	cmp.w	r8, #0
 80057f6:	dd05      	ble.n	8005804 <_dtoa_r+0x83c>
 80057f8:	4649      	mov	r1, r9
 80057fa:	4642      	mov	r2, r8
 80057fc:	4658      	mov	r0, fp
 80057fe:	f000 fcff 	bl	8006200 <__lshift>
 8005802:	4681      	mov	r9, r0
 8005804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005806:	2b00      	cmp	r3, #0
 8005808:	dd05      	ble.n	8005816 <_dtoa_r+0x84e>
 800580a:	4621      	mov	r1, r4
 800580c:	461a      	mov	r2, r3
 800580e:	4658      	mov	r0, fp
 8005810:	f000 fcf6 	bl	8006200 <__lshift>
 8005814:	4604      	mov	r4, r0
 8005816:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005818:	2b00      	cmp	r3, #0
 800581a:	d053      	beq.n	80058c4 <_dtoa_r+0x8fc>
 800581c:	4621      	mov	r1, r4
 800581e:	4648      	mov	r0, r9
 8005820:	f000 fd5a 	bl	80062d8 <__mcmp>
 8005824:	2800      	cmp	r0, #0
 8005826:	da4d      	bge.n	80058c4 <_dtoa_r+0x8fc>
 8005828:	1e7b      	subs	r3, r7, #1
 800582a:	4649      	mov	r1, r9
 800582c:	9304      	str	r3, [sp, #16]
 800582e:	220a      	movs	r2, #10
 8005830:	2300      	movs	r3, #0
 8005832:	4658      	mov	r0, fp
 8005834:	f000 faf0 	bl	8005e18 <__multadd>
 8005838:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800583a:	4681      	mov	r9, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 816c 	beq.w	8005b1a <_dtoa_r+0xb52>
 8005842:	2300      	movs	r3, #0
 8005844:	4629      	mov	r1, r5
 8005846:	220a      	movs	r2, #10
 8005848:	4658      	mov	r0, fp
 800584a:	f000 fae5 	bl	8005e18 <__multadd>
 800584e:	9b08      	ldr	r3, [sp, #32]
 8005850:	4605      	mov	r5, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	dc61      	bgt.n	800591a <_dtoa_r+0x952>
 8005856:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005858:	2b02      	cmp	r3, #2
 800585a:	dc3b      	bgt.n	80058d4 <_dtoa_r+0x90c>
 800585c:	e05d      	b.n	800591a <_dtoa_r+0x952>
 800585e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005860:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005864:	e746      	b.n	80056f4 <_dtoa_r+0x72c>
 8005866:	9b07      	ldr	r3, [sp, #28]
 8005868:	1e5c      	subs	r4, r3, #1
 800586a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800586c:	42a3      	cmp	r3, r4
 800586e:	bfbf      	itttt	lt
 8005870:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005872:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005874:	1ae3      	sublt	r3, r4, r3
 8005876:	18d2      	addlt	r2, r2, r3
 8005878:	bfa8      	it	ge
 800587a:	1b1c      	subge	r4, r3, r4
 800587c:	9b07      	ldr	r3, [sp, #28]
 800587e:	bfbe      	ittt	lt
 8005880:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005882:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005884:	2400      	movlt	r4, #0
 8005886:	2b00      	cmp	r3, #0
 8005888:	bfb5      	itete	lt
 800588a:	eba8 0603 	sublt.w	r6, r8, r3
 800588e:	4646      	movge	r6, r8
 8005890:	2300      	movlt	r3, #0
 8005892:	9b07      	ldrge	r3, [sp, #28]
 8005894:	e730      	b.n	80056f8 <_dtoa_r+0x730>
 8005896:	4646      	mov	r6, r8
 8005898:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800589a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800589c:	e735      	b.n	800570a <_dtoa_r+0x742>
 800589e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058a0:	e75c      	b.n	800575c <_dtoa_r+0x794>
 80058a2:	2300      	movs	r3, #0
 80058a4:	e788      	b.n	80057b8 <_dtoa_r+0x7f0>
 80058a6:	9b02      	ldr	r3, [sp, #8]
 80058a8:	e786      	b.n	80057b8 <_dtoa_r+0x7f0>
 80058aa:	2300      	movs	r3, #0
 80058ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80058ae:	e788      	b.n	80057c2 <_dtoa_r+0x7fa>
 80058b0:	d09f      	beq.n	80057f2 <_dtoa_r+0x82a>
 80058b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058b4:	331c      	adds	r3, #28
 80058b6:	441a      	add	r2, r3
 80058b8:	4498      	add	r8, r3
 80058ba:	441e      	add	r6, r3
 80058bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80058be:	e798      	b.n	80057f2 <_dtoa_r+0x82a>
 80058c0:	4603      	mov	r3, r0
 80058c2:	e7f6      	b.n	80058b2 <_dtoa_r+0x8ea>
 80058c4:	9b07      	ldr	r3, [sp, #28]
 80058c6:	9704      	str	r7, [sp, #16]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	dc20      	bgt.n	800590e <_dtoa_r+0x946>
 80058cc:	9308      	str	r3, [sp, #32]
 80058ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	dd1e      	ble.n	8005912 <_dtoa_r+0x94a>
 80058d4:	9b08      	ldr	r3, [sp, #32]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f47f aebc 	bne.w	8005654 <_dtoa_r+0x68c>
 80058dc:	4621      	mov	r1, r4
 80058de:	2205      	movs	r2, #5
 80058e0:	4658      	mov	r0, fp
 80058e2:	f000 fa99 	bl	8005e18 <__multadd>
 80058e6:	4601      	mov	r1, r0
 80058e8:	4604      	mov	r4, r0
 80058ea:	4648      	mov	r0, r9
 80058ec:	f000 fcf4 	bl	80062d8 <__mcmp>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	f77f aeaf 	ble.w	8005654 <_dtoa_r+0x68c>
 80058f6:	2331      	movs	r3, #49	@ 0x31
 80058f8:	4656      	mov	r6, sl
 80058fa:	f806 3b01 	strb.w	r3, [r6], #1
 80058fe:	9b04      	ldr	r3, [sp, #16]
 8005900:	3301      	adds	r3, #1
 8005902:	9304      	str	r3, [sp, #16]
 8005904:	e6aa      	b.n	800565c <_dtoa_r+0x694>
 8005906:	9c07      	ldr	r4, [sp, #28]
 8005908:	9704      	str	r7, [sp, #16]
 800590a:	4625      	mov	r5, r4
 800590c:	e7f3      	b.n	80058f6 <_dtoa_r+0x92e>
 800590e:	9b07      	ldr	r3, [sp, #28]
 8005910:	9308      	str	r3, [sp, #32]
 8005912:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 8104 	beq.w	8005b22 <_dtoa_r+0xb5a>
 800591a:	2e00      	cmp	r6, #0
 800591c:	dd05      	ble.n	800592a <_dtoa_r+0x962>
 800591e:	4629      	mov	r1, r5
 8005920:	4632      	mov	r2, r6
 8005922:	4658      	mov	r0, fp
 8005924:	f000 fc6c 	bl	8006200 <__lshift>
 8005928:	4605      	mov	r5, r0
 800592a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800592c:	2b00      	cmp	r3, #0
 800592e:	d05a      	beq.n	80059e6 <_dtoa_r+0xa1e>
 8005930:	4658      	mov	r0, fp
 8005932:	6869      	ldr	r1, [r5, #4]
 8005934:	f000 fa0e 	bl	8005d54 <_Balloc>
 8005938:	4606      	mov	r6, r0
 800593a:	b928      	cbnz	r0, 8005948 <_dtoa_r+0x980>
 800593c:	4602      	mov	r2, r0
 800593e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005942:	4b83      	ldr	r3, [pc, #524]	@ (8005b50 <_dtoa_r+0xb88>)
 8005944:	f7ff bb54 	b.w	8004ff0 <_dtoa_r+0x28>
 8005948:	692a      	ldr	r2, [r5, #16]
 800594a:	f105 010c 	add.w	r1, r5, #12
 800594e:	3202      	adds	r2, #2
 8005950:	0092      	lsls	r2, r2, #2
 8005952:	300c      	adds	r0, #12
 8005954:	f001 ff5e 	bl	8007814 <memcpy>
 8005958:	2201      	movs	r2, #1
 800595a:	4631      	mov	r1, r6
 800595c:	4658      	mov	r0, fp
 800595e:	f000 fc4f 	bl	8006200 <__lshift>
 8005962:	462f      	mov	r7, r5
 8005964:	4605      	mov	r5, r0
 8005966:	f10a 0301 	add.w	r3, sl, #1
 800596a:	9307      	str	r3, [sp, #28]
 800596c:	9b08      	ldr	r3, [sp, #32]
 800596e:	4453      	add	r3, sl
 8005970:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005972:	9b02      	ldr	r3, [sp, #8]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	930a      	str	r3, [sp, #40]	@ 0x28
 800597a:	9b07      	ldr	r3, [sp, #28]
 800597c:	4621      	mov	r1, r4
 800597e:	3b01      	subs	r3, #1
 8005980:	4648      	mov	r0, r9
 8005982:	9302      	str	r3, [sp, #8]
 8005984:	f7ff fa96 	bl	8004eb4 <quorem>
 8005988:	4639      	mov	r1, r7
 800598a:	9008      	str	r0, [sp, #32]
 800598c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005990:	4648      	mov	r0, r9
 8005992:	f000 fca1 	bl	80062d8 <__mcmp>
 8005996:	462a      	mov	r2, r5
 8005998:	9009      	str	r0, [sp, #36]	@ 0x24
 800599a:	4621      	mov	r1, r4
 800599c:	4658      	mov	r0, fp
 800599e:	f000 fcb7 	bl	8006310 <__mdiff>
 80059a2:	68c2      	ldr	r2, [r0, #12]
 80059a4:	4606      	mov	r6, r0
 80059a6:	bb02      	cbnz	r2, 80059ea <_dtoa_r+0xa22>
 80059a8:	4601      	mov	r1, r0
 80059aa:	4648      	mov	r0, r9
 80059ac:	f000 fc94 	bl	80062d8 <__mcmp>
 80059b0:	4602      	mov	r2, r0
 80059b2:	4631      	mov	r1, r6
 80059b4:	4658      	mov	r0, fp
 80059b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80059b8:	f000 fa0c 	bl	8005dd4 <_Bfree>
 80059bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80059be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80059c0:	9e07      	ldr	r6, [sp, #28]
 80059c2:	ea43 0102 	orr.w	r1, r3, r2
 80059c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059c8:	4319      	orrs	r1, r3
 80059ca:	d110      	bne.n	80059ee <_dtoa_r+0xa26>
 80059cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80059d0:	d029      	beq.n	8005a26 <_dtoa_r+0xa5e>
 80059d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	dd02      	ble.n	80059de <_dtoa_r+0xa16>
 80059d8:	9b08      	ldr	r3, [sp, #32]
 80059da:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80059de:	9b02      	ldr	r3, [sp, #8]
 80059e0:	f883 8000 	strb.w	r8, [r3]
 80059e4:	e63b      	b.n	800565e <_dtoa_r+0x696>
 80059e6:	4628      	mov	r0, r5
 80059e8:	e7bb      	b.n	8005962 <_dtoa_r+0x99a>
 80059ea:	2201      	movs	r2, #1
 80059ec:	e7e1      	b.n	80059b2 <_dtoa_r+0x9ea>
 80059ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	db04      	blt.n	80059fe <_dtoa_r+0xa36>
 80059f4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80059f6:	430b      	orrs	r3, r1
 80059f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80059fa:	430b      	orrs	r3, r1
 80059fc:	d120      	bne.n	8005a40 <_dtoa_r+0xa78>
 80059fe:	2a00      	cmp	r2, #0
 8005a00:	dded      	ble.n	80059de <_dtoa_r+0xa16>
 8005a02:	4649      	mov	r1, r9
 8005a04:	2201      	movs	r2, #1
 8005a06:	4658      	mov	r0, fp
 8005a08:	f000 fbfa 	bl	8006200 <__lshift>
 8005a0c:	4621      	mov	r1, r4
 8005a0e:	4681      	mov	r9, r0
 8005a10:	f000 fc62 	bl	80062d8 <__mcmp>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	dc03      	bgt.n	8005a20 <_dtoa_r+0xa58>
 8005a18:	d1e1      	bne.n	80059de <_dtoa_r+0xa16>
 8005a1a:	f018 0f01 	tst.w	r8, #1
 8005a1e:	d0de      	beq.n	80059de <_dtoa_r+0xa16>
 8005a20:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005a24:	d1d8      	bne.n	80059d8 <_dtoa_r+0xa10>
 8005a26:	2339      	movs	r3, #57	@ 0x39
 8005a28:	9a02      	ldr	r2, [sp, #8]
 8005a2a:	7013      	strb	r3, [r2, #0]
 8005a2c:	4633      	mov	r3, r6
 8005a2e:	461e      	mov	r6, r3
 8005a30:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005a34:	3b01      	subs	r3, #1
 8005a36:	2a39      	cmp	r2, #57	@ 0x39
 8005a38:	d052      	beq.n	8005ae0 <_dtoa_r+0xb18>
 8005a3a:	3201      	adds	r2, #1
 8005a3c:	701a      	strb	r2, [r3, #0]
 8005a3e:	e60e      	b.n	800565e <_dtoa_r+0x696>
 8005a40:	2a00      	cmp	r2, #0
 8005a42:	dd07      	ble.n	8005a54 <_dtoa_r+0xa8c>
 8005a44:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005a48:	d0ed      	beq.n	8005a26 <_dtoa_r+0xa5e>
 8005a4a:	9a02      	ldr	r2, [sp, #8]
 8005a4c:	f108 0301 	add.w	r3, r8, #1
 8005a50:	7013      	strb	r3, [r2, #0]
 8005a52:	e604      	b.n	800565e <_dtoa_r+0x696>
 8005a54:	9b07      	ldr	r3, [sp, #28]
 8005a56:	9a07      	ldr	r2, [sp, #28]
 8005a58:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005a5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d028      	beq.n	8005ab4 <_dtoa_r+0xaec>
 8005a62:	4649      	mov	r1, r9
 8005a64:	2300      	movs	r3, #0
 8005a66:	220a      	movs	r2, #10
 8005a68:	4658      	mov	r0, fp
 8005a6a:	f000 f9d5 	bl	8005e18 <__multadd>
 8005a6e:	42af      	cmp	r7, r5
 8005a70:	4681      	mov	r9, r0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	f04f 020a 	mov.w	r2, #10
 8005a7a:	4639      	mov	r1, r7
 8005a7c:	4658      	mov	r0, fp
 8005a7e:	d107      	bne.n	8005a90 <_dtoa_r+0xac8>
 8005a80:	f000 f9ca 	bl	8005e18 <__multadd>
 8005a84:	4607      	mov	r7, r0
 8005a86:	4605      	mov	r5, r0
 8005a88:	9b07      	ldr	r3, [sp, #28]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	9307      	str	r3, [sp, #28]
 8005a8e:	e774      	b.n	800597a <_dtoa_r+0x9b2>
 8005a90:	f000 f9c2 	bl	8005e18 <__multadd>
 8005a94:	4629      	mov	r1, r5
 8005a96:	4607      	mov	r7, r0
 8005a98:	2300      	movs	r3, #0
 8005a9a:	220a      	movs	r2, #10
 8005a9c:	4658      	mov	r0, fp
 8005a9e:	f000 f9bb 	bl	8005e18 <__multadd>
 8005aa2:	4605      	mov	r5, r0
 8005aa4:	e7f0      	b.n	8005a88 <_dtoa_r+0xac0>
 8005aa6:	9b08      	ldr	r3, [sp, #32]
 8005aa8:	2700      	movs	r7, #0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	bfcc      	ite	gt
 8005aae:	461e      	movgt	r6, r3
 8005ab0:	2601      	movle	r6, #1
 8005ab2:	4456      	add	r6, sl
 8005ab4:	4649      	mov	r1, r9
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	4658      	mov	r0, fp
 8005aba:	f000 fba1 	bl	8006200 <__lshift>
 8005abe:	4621      	mov	r1, r4
 8005ac0:	4681      	mov	r9, r0
 8005ac2:	f000 fc09 	bl	80062d8 <__mcmp>
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	dcb0      	bgt.n	8005a2c <_dtoa_r+0xa64>
 8005aca:	d102      	bne.n	8005ad2 <_dtoa_r+0xb0a>
 8005acc:	f018 0f01 	tst.w	r8, #1
 8005ad0:	d1ac      	bne.n	8005a2c <_dtoa_r+0xa64>
 8005ad2:	4633      	mov	r3, r6
 8005ad4:	461e      	mov	r6, r3
 8005ad6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ada:	2a30      	cmp	r2, #48	@ 0x30
 8005adc:	d0fa      	beq.n	8005ad4 <_dtoa_r+0xb0c>
 8005ade:	e5be      	b.n	800565e <_dtoa_r+0x696>
 8005ae0:	459a      	cmp	sl, r3
 8005ae2:	d1a4      	bne.n	8005a2e <_dtoa_r+0xa66>
 8005ae4:	9b04      	ldr	r3, [sp, #16]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	9304      	str	r3, [sp, #16]
 8005aea:	2331      	movs	r3, #49	@ 0x31
 8005aec:	f88a 3000 	strb.w	r3, [sl]
 8005af0:	e5b5      	b.n	800565e <_dtoa_r+0x696>
 8005af2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005af4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005b54 <_dtoa_r+0xb8c>
 8005af8:	b11b      	cbz	r3, 8005b02 <_dtoa_r+0xb3a>
 8005afa:	f10a 0308 	add.w	r3, sl, #8
 8005afe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005b00:	6013      	str	r3, [r2, #0]
 8005b02:	4650      	mov	r0, sl
 8005b04:	b017      	add	sp, #92	@ 0x5c
 8005b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b0a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	f77f ae3d 	ble.w	800578c <_dtoa_r+0x7c4>
 8005b12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b14:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b16:	2001      	movs	r0, #1
 8005b18:	e65b      	b.n	80057d2 <_dtoa_r+0x80a>
 8005b1a:	9b08      	ldr	r3, [sp, #32]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f77f aed6 	ble.w	80058ce <_dtoa_r+0x906>
 8005b22:	4656      	mov	r6, sl
 8005b24:	4621      	mov	r1, r4
 8005b26:	4648      	mov	r0, r9
 8005b28:	f7ff f9c4 	bl	8004eb4 <quorem>
 8005b2c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005b30:	9b08      	ldr	r3, [sp, #32]
 8005b32:	f806 8b01 	strb.w	r8, [r6], #1
 8005b36:	eba6 020a 	sub.w	r2, r6, sl
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	ddb3      	ble.n	8005aa6 <_dtoa_r+0xade>
 8005b3e:	4649      	mov	r1, r9
 8005b40:	2300      	movs	r3, #0
 8005b42:	220a      	movs	r2, #10
 8005b44:	4658      	mov	r0, fp
 8005b46:	f000 f967 	bl	8005e18 <__multadd>
 8005b4a:	4681      	mov	r9, r0
 8005b4c:	e7ea      	b.n	8005b24 <_dtoa_r+0xb5c>
 8005b4e:	bf00      	nop
 8005b50:	08008663 	.word	0x08008663
 8005b54:	080085e7 	.word	0x080085e7

08005b58 <_free_r>:
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	4605      	mov	r5, r0
 8005b5c:	2900      	cmp	r1, #0
 8005b5e:	d040      	beq.n	8005be2 <_free_r+0x8a>
 8005b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b64:	1f0c      	subs	r4, r1, #4
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	bfb8      	it	lt
 8005b6a:	18e4      	addlt	r4, r4, r3
 8005b6c:	f000 f8e6 	bl	8005d3c <__malloc_lock>
 8005b70:	4a1c      	ldr	r2, [pc, #112]	@ (8005be4 <_free_r+0x8c>)
 8005b72:	6813      	ldr	r3, [r2, #0]
 8005b74:	b933      	cbnz	r3, 8005b84 <_free_r+0x2c>
 8005b76:	6063      	str	r3, [r4, #4]
 8005b78:	6014      	str	r4, [r2, #0]
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b80:	f000 b8e2 	b.w	8005d48 <__malloc_unlock>
 8005b84:	42a3      	cmp	r3, r4
 8005b86:	d908      	bls.n	8005b9a <_free_r+0x42>
 8005b88:	6820      	ldr	r0, [r4, #0]
 8005b8a:	1821      	adds	r1, r4, r0
 8005b8c:	428b      	cmp	r3, r1
 8005b8e:	bf01      	itttt	eq
 8005b90:	6819      	ldreq	r1, [r3, #0]
 8005b92:	685b      	ldreq	r3, [r3, #4]
 8005b94:	1809      	addeq	r1, r1, r0
 8005b96:	6021      	streq	r1, [r4, #0]
 8005b98:	e7ed      	b.n	8005b76 <_free_r+0x1e>
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	b10b      	cbz	r3, 8005ba4 <_free_r+0x4c>
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	d9fa      	bls.n	8005b9a <_free_r+0x42>
 8005ba4:	6811      	ldr	r1, [r2, #0]
 8005ba6:	1850      	adds	r0, r2, r1
 8005ba8:	42a0      	cmp	r0, r4
 8005baa:	d10b      	bne.n	8005bc4 <_free_r+0x6c>
 8005bac:	6820      	ldr	r0, [r4, #0]
 8005bae:	4401      	add	r1, r0
 8005bb0:	1850      	adds	r0, r2, r1
 8005bb2:	4283      	cmp	r3, r0
 8005bb4:	6011      	str	r1, [r2, #0]
 8005bb6:	d1e0      	bne.n	8005b7a <_free_r+0x22>
 8005bb8:	6818      	ldr	r0, [r3, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	4408      	add	r0, r1
 8005bbe:	6010      	str	r0, [r2, #0]
 8005bc0:	6053      	str	r3, [r2, #4]
 8005bc2:	e7da      	b.n	8005b7a <_free_r+0x22>
 8005bc4:	d902      	bls.n	8005bcc <_free_r+0x74>
 8005bc6:	230c      	movs	r3, #12
 8005bc8:	602b      	str	r3, [r5, #0]
 8005bca:	e7d6      	b.n	8005b7a <_free_r+0x22>
 8005bcc:	6820      	ldr	r0, [r4, #0]
 8005bce:	1821      	adds	r1, r4, r0
 8005bd0:	428b      	cmp	r3, r1
 8005bd2:	bf01      	itttt	eq
 8005bd4:	6819      	ldreq	r1, [r3, #0]
 8005bd6:	685b      	ldreq	r3, [r3, #4]
 8005bd8:	1809      	addeq	r1, r1, r0
 8005bda:	6021      	streq	r1, [r4, #0]
 8005bdc:	6063      	str	r3, [r4, #4]
 8005bde:	6054      	str	r4, [r2, #4]
 8005be0:	e7cb      	b.n	8005b7a <_free_r+0x22>
 8005be2:	bd38      	pop	{r3, r4, r5, pc}
 8005be4:	20000428 	.word	0x20000428

08005be8 <malloc>:
 8005be8:	4b02      	ldr	r3, [pc, #8]	@ (8005bf4 <malloc+0xc>)
 8005bea:	4601      	mov	r1, r0
 8005bec:	6818      	ldr	r0, [r3, #0]
 8005bee:	f000 b825 	b.w	8005c3c <_malloc_r>
 8005bf2:	bf00      	nop
 8005bf4:	20000018 	.word	0x20000018

08005bf8 <sbrk_aligned>:
 8005bf8:	b570      	push	{r4, r5, r6, lr}
 8005bfa:	4e0f      	ldr	r6, [pc, #60]	@ (8005c38 <sbrk_aligned+0x40>)
 8005bfc:	460c      	mov	r4, r1
 8005bfe:	6831      	ldr	r1, [r6, #0]
 8005c00:	4605      	mov	r5, r0
 8005c02:	b911      	cbnz	r1, 8005c0a <sbrk_aligned+0x12>
 8005c04:	f001 fdf6 	bl	80077f4 <_sbrk_r>
 8005c08:	6030      	str	r0, [r6, #0]
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	f001 fdf1 	bl	80077f4 <_sbrk_r>
 8005c12:	1c43      	adds	r3, r0, #1
 8005c14:	d103      	bne.n	8005c1e <sbrk_aligned+0x26>
 8005c16:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	bd70      	pop	{r4, r5, r6, pc}
 8005c1e:	1cc4      	adds	r4, r0, #3
 8005c20:	f024 0403 	bic.w	r4, r4, #3
 8005c24:	42a0      	cmp	r0, r4
 8005c26:	d0f8      	beq.n	8005c1a <sbrk_aligned+0x22>
 8005c28:	1a21      	subs	r1, r4, r0
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	f001 fde2 	bl	80077f4 <_sbrk_r>
 8005c30:	3001      	adds	r0, #1
 8005c32:	d1f2      	bne.n	8005c1a <sbrk_aligned+0x22>
 8005c34:	e7ef      	b.n	8005c16 <sbrk_aligned+0x1e>
 8005c36:	bf00      	nop
 8005c38:	20000424 	.word	0x20000424

08005c3c <_malloc_r>:
 8005c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c40:	1ccd      	adds	r5, r1, #3
 8005c42:	f025 0503 	bic.w	r5, r5, #3
 8005c46:	3508      	adds	r5, #8
 8005c48:	2d0c      	cmp	r5, #12
 8005c4a:	bf38      	it	cc
 8005c4c:	250c      	movcc	r5, #12
 8005c4e:	2d00      	cmp	r5, #0
 8005c50:	4606      	mov	r6, r0
 8005c52:	db01      	blt.n	8005c58 <_malloc_r+0x1c>
 8005c54:	42a9      	cmp	r1, r5
 8005c56:	d904      	bls.n	8005c62 <_malloc_r+0x26>
 8005c58:	230c      	movs	r3, #12
 8005c5a:	6033      	str	r3, [r6, #0]
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d38 <_malloc_r+0xfc>
 8005c66:	f000 f869 	bl	8005d3c <__malloc_lock>
 8005c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c6e:	461c      	mov	r4, r3
 8005c70:	bb44      	cbnz	r4, 8005cc4 <_malloc_r+0x88>
 8005c72:	4629      	mov	r1, r5
 8005c74:	4630      	mov	r0, r6
 8005c76:	f7ff ffbf 	bl	8005bf8 <sbrk_aligned>
 8005c7a:	1c43      	adds	r3, r0, #1
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	d158      	bne.n	8005d32 <_malloc_r+0xf6>
 8005c80:	f8d8 4000 	ldr.w	r4, [r8]
 8005c84:	4627      	mov	r7, r4
 8005c86:	2f00      	cmp	r7, #0
 8005c88:	d143      	bne.n	8005d12 <_malloc_r+0xd6>
 8005c8a:	2c00      	cmp	r4, #0
 8005c8c:	d04b      	beq.n	8005d26 <_malloc_r+0xea>
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	4639      	mov	r1, r7
 8005c92:	4630      	mov	r0, r6
 8005c94:	eb04 0903 	add.w	r9, r4, r3
 8005c98:	f001 fdac 	bl	80077f4 <_sbrk_r>
 8005c9c:	4581      	cmp	r9, r0
 8005c9e:	d142      	bne.n	8005d26 <_malloc_r+0xea>
 8005ca0:	6821      	ldr	r1, [r4, #0]
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	1a6d      	subs	r5, r5, r1
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	f7ff ffa6 	bl	8005bf8 <sbrk_aligned>
 8005cac:	3001      	adds	r0, #1
 8005cae:	d03a      	beq.n	8005d26 <_malloc_r+0xea>
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	442b      	add	r3, r5
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	bb62      	cbnz	r2, 8005d18 <_malloc_r+0xdc>
 8005cbe:	f8c8 7000 	str.w	r7, [r8]
 8005cc2:	e00f      	b.n	8005ce4 <_malloc_r+0xa8>
 8005cc4:	6822      	ldr	r2, [r4, #0]
 8005cc6:	1b52      	subs	r2, r2, r5
 8005cc8:	d420      	bmi.n	8005d0c <_malloc_r+0xd0>
 8005cca:	2a0b      	cmp	r2, #11
 8005ccc:	d917      	bls.n	8005cfe <_malloc_r+0xc2>
 8005cce:	1961      	adds	r1, r4, r5
 8005cd0:	42a3      	cmp	r3, r4
 8005cd2:	6025      	str	r5, [r4, #0]
 8005cd4:	bf18      	it	ne
 8005cd6:	6059      	strne	r1, [r3, #4]
 8005cd8:	6863      	ldr	r3, [r4, #4]
 8005cda:	bf08      	it	eq
 8005cdc:	f8c8 1000 	streq.w	r1, [r8]
 8005ce0:	5162      	str	r2, [r4, r5]
 8005ce2:	604b      	str	r3, [r1, #4]
 8005ce4:	4630      	mov	r0, r6
 8005ce6:	f000 f82f 	bl	8005d48 <__malloc_unlock>
 8005cea:	f104 000b 	add.w	r0, r4, #11
 8005cee:	1d23      	adds	r3, r4, #4
 8005cf0:	f020 0007 	bic.w	r0, r0, #7
 8005cf4:	1ac2      	subs	r2, r0, r3
 8005cf6:	bf1c      	itt	ne
 8005cf8:	1a1b      	subne	r3, r3, r0
 8005cfa:	50a3      	strne	r3, [r4, r2]
 8005cfc:	e7af      	b.n	8005c5e <_malloc_r+0x22>
 8005cfe:	6862      	ldr	r2, [r4, #4]
 8005d00:	42a3      	cmp	r3, r4
 8005d02:	bf0c      	ite	eq
 8005d04:	f8c8 2000 	streq.w	r2, [r8]
 8005d08:	605a      	strne	r2, [r3, #4]
 8005d0a:	e7eb      	b.n	8005ce4 <_malloc_r+0xa8>
 8005d0c:	4623      	mov	r3, r4
 8005d0e:	6864      	ldr	r4, [r4, #4]
 8005d10:	e7ae      	b.n	8005c70 <_malloc_r+0x34>
 8005d12:	463c      	mov	r4, r7
 8005d14:	687f      	ldr	r7, [r7, #4]
 8005d16:	e7b6      	b.n	8005c86 <_malloc_r+0x4a>
 8005d18:	461a      	mov	r2, r3
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	42a3      	cmp	r3, r4
 8005d1e:	d1fb      	bne.n	8005d18 <_malloc_r+0xdc>
 8005d20:	2300      	movs	r3, #0
 8005d22:	6053      	str	r3, [r2, #4]
 8005d24:	e7de      	b.n	8005ce4 <_malloc_r+0xa8>
 8005d26:	230c      	movs	r3, #12
 8005d28:	4630      	mov	r0, r6
 8005d2a:	6033      	str	r3, [r6, #0]
 8005d2c:	f000 f80c 	bl	8005d48 <__malloc_unlock>
 8005d30:	e794      	b.n	8005c5c <_malloc_r+0x20>
 8005d32:	6005      	str	r5, [r0, #0]
 8005d34:	e7d6      	b.n	8005ce4 <_malloc_r+0xa8>
 8005d36:	bf00      	nop
 8005d38:	20000428 	.word	0x20000428

08005d3c <__malloc_lock>:
 8005d3c:	4801      	ldr	r0, [pc, #4]	@ (8005d44 <__malloc_lock+0x8>)
 8005d3e:	f7ff b8a4 	b.w	8004e8a <__retarget_lock_acquire_recursive>
 8005d42:	bf00      	nop
 8005d44:	20000420 	.word	0x20000420

08005d48 <__malloc_unlock>:
 8005d48:	4801      	ldr	r0, [pc, #4]	@ (8005d50 <__malloc_unlock+0x8>)
 8005d4a:	f7ff b89f 	b.w	8004e8c <__retarget_lock_release_recursive>
 8005d4e:	bf00      	nop
 8005d50:	20000420 	.word	0x20000420

08005d54 <_Balloc>:
 8005d54:	b570      	push	{r4, r5, r6, lr}
 8005d56:	69c6      	ldr	r6, [r0, #28]
 8005d58:	4604      	mov	r4, r0
 8005d5a:	460d      	mov	r5, r1
 8005d5c:	b976      	cbnz	r6, 8005d7c <_Balloc+0x28>
 8005d5e:	2010      	movs	r0, #16
 8005d60:	f7ff ff42 	bl	8005be8 <malloc>
 8005d64:	4602      	mov	r2, r0
 8005d66:	61e0      	str	r0, [r4, #28]
 8005d68:	b920      	cbnz	r0, 8005d74 <_Balloc+0x20>
 8005d6a:	216b      	movs	r1, #107	@ 0x6b
 8005d6c:	4b17      	ldr	r3, [pc, #92]	@ (8005dcc <_Balloc+0x78>)
 8005d6e:	4818      	ldr	r0, [pc, #96]	@ (8005dd0 <_Balloc+0x7c>)
 8005d70:	f001 fd64 	bl	800783c <__assert_func>
 8005d74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d78:	6006      	str	r6, [r0, #0]
 8005d7a:	60c6      	str	r6, [r0, #12]
 8005d7c:	69e6      	ldr	r6, [r4, #28]
 8005d7e:	68f3      	ldr	r3, [r6, #12]
 8005d80:	b183      	cbz	r3, 8005da4 <_Balloc+0x50>
 8005d82:	69e3      	ldr	r3, [r4, #28]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d8a:	b9b8      	cbnz	r0, 8005dbc <_Balloc+0x68>
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	fa01 f605 	lsl.w	r6, r1, r5
 8005d92:	1d72      	adds	r2, r6, #5
 8005d94:	4620      	mov	r0, r4
 8005d96:	0092      	lsls	r2, r2, #2
 8005d98:	f001 fd6e 	bl	8007878 <_calloc_r>
 8005d9c:	b160      	cbz	r0, 8005db8 <_Balloc+0x64>
 8005d9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005da2:	e00e      	b.n	8005dc2 <_Balloc+0x6e>
 8005da4:	2221      	movs	r2, #33	@ 0x21
 8005da6:	2104      	movs	r1, #4
 8005da8:	4620      	mov	r0, r4
 8005daa:	f001 fd65 	bl	8007878 <_calloc_r>
 8005dae:	69e3      	ldr	r3, [r4, #28]
 8005db0:	60f0      	str	r0, [r6, #12]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1e4      	bne.n	8005d82 <_Balloc+0x2e>
 8005db8:	2000      	movs	r0, #0
 8005dba:	bd70      	pop	{r4, r5, r6, pc}
 8005dbc:	6802      	ldr	r2, [r0, #0]
 8005dbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005dc8:	e7f7      	b.n	8005dba <_Balloc+0x66>
 8005dca:	bf00      	nop
 8005dcc:	080085f4 	.word	0x080085f4
 8005dd0:	08008674 	.word	0x08008674

08005dd4 <_Bfree>:
 8005dd4:	b570      	push	{r4, r5, r6, lr}
 8005dd6:	69c6      	ldr	r6, [r0, #28]
 8005dd8:	4605      	mov	r5, r0
 8005dda:	460c      	mov	r4, r1
 8005ddc:	b976      	cbnz	r6, 8005dfc <_Bfree+0x28>
 8005dde:	2010      	movs	r0, #16
 8005de0:	f7ff ff02 	bl	8005be8 <malloc>
 8005de4:	4602      	mov	r2, r0
 8005de6:	61e8      	str	r0, [r5, #28]
 8005de8:	b920      	cbnz	r0, 8005df4 <_Bfree+0x20>
 8005dea:	218f      	movs	r1, #143	@ 0x8f
 8005dec:	4b08      	ldr	r3, [pc, #32]	@ (8005e10 <_Bfree+0x3c>)
 8005dee:	4809      	ldr	r0, [pc, #36]	@ (8005e14 <_Bfree+0x40>)
 8005df0:	f001 fd24 	bl	800783c <__assert_func>
 8005df4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005df8:	6006      	str	r6, [r0, #0]
 8005dfa:	60c6      	str	r6, [r0, #12]
 8005dfc:	b13c      	cbz	r4, 8005e0e <_Bfree+0x3a>
 8005dfe:	69eb      	ldr	r3, [r5, #28]
 8005e00:	6862      	ldr	r2, [r4, #4]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e08:	6021      	str	r1, [r4, #0]
 8005e0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}
 8005e10:	080085f4 	.word	0x080085f4
 8005e14:	08008674 	.word	0x08008674

08005e18 <__multadd>:
 8005e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e1c:	4607      	mov	r7, r0
 8005e1e:	460c      	mov	r4, r1
 8005e20:	461e      	mov	r6, r3
 8005e22:	2000      	movs	r0, #0
 8005e24:	690d      	ldr	r5, [r1, #16]
 8005e26:	f101 0c14 	add.w	ip, r1, #20
 8005e2a:	f8dc 3000 	ldr.w	r3, [ip]
 8005e2e:	3001      	adds	r0, #1
 8005e30:	b299      	uxth	r1, r3
 8005e32:	fb02 6101 	mla	r1, r2, r1, r6
 8005e36:	0c1e      	lsrs	r6, r3, #16
 8005e38:	0c0b      	lsrs	r3, r1, #16
 8005e3a:	fb02 3306 	mla	r3, r2, r6, r3
 8005e3e:	b289      	uxth	r1, r1
 8005e40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e44:	4285      	cmp	r5, r0
 8005e46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e4a:	f84c 1b04 	str.w	r1, [ip], #4
 8005e4e:	dcec      	bgt.n	8005e2a <__multadd+0x12>
 8005e50:	b30e      	cbz	r6, 8005e96 <__multadd+0x7e>
 8005e52:	68a3      	ldr	r3, [r4, #8]
 8005e54:	42ab      	cmp	r3, r5
 8005e56:	dc19      	bgt.n	8005e8c <__multadd+0x74>
 8005e58:	6861      	ldr	r1, [r4, #4]
 8005e5a:	4638      	mov	r0, r7
 8005e5c:	3101      	adds	r1, #1
 8005e5e:	f7ff ff79 	bl	8005d54 <_Balloc>
 8005e62:	4680      	mov	r8, r0
 8005e64:	b928      	cbnz	r0, 8005e72 <__multadd+0x5a>
 8005e66:	4602      	mov	r2, r0
 8005e68:	21ba      	movs	r1, #186	@ 0xba
 8005e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8005e9c <__multadd+0x84>)
 8005e6c:	480c      	ldr	r0, [pc, #48]	@ (8005ea0 <__multadd+0x88>)
 8005e6e:	f001 fce5 	bl	800783c <__assert_func>
 8005e72:	6922      	ldr	r2, [r4, #16]
 8005e74:	f104 010c 	add.w	r1, r4, #12
 8005e78:	3202      	adds	r2, #2
 8005e7a:	0092      	lsls	r2, r2, #2
 8005e7c:	300c      	adds	r0, #12
 8005e7e:	f001 fcc9 	bl	8007814 <memcpy>
 8005e82:	4621      	mov	r1, r4
 8005e84:	4638      	mov	r0, r7
 8005e86:	f7ff ffa5 	bl	8005dd4 <_Bfree>
 8005e8a:	4644      	mov	r4, r8
 8005e8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e90:	3501      	adds	r5, #1
 8005e92:	615e      	str	r6, [r3, #20]
 8005e94:	6125      	str	r5, [r4, #16]
 8005e96:	4620      	mov	r0, r4
 8005e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e9c:	08008663 	.word	0x08008663
 8005ea0:	08008674 	.word	0x08008674

08005ea4 <__s2b>:
 8005ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ea8:	4615      	mov	r5, r2
 8005eaa:	2209      	movs	r2, #9
 8005eac:	461f      	mov	r7, r3
 8005eae:	3308      	adds	r3, #8
 8005eb0:	460c      	mov	r4, r1
 8005eb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005eb6:	4606      	mov	r6, r0
 8005eb8:	2201      	movs	r2, #1
 8005eba:	2100      	movs	r1, #0
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	db09      	blt.n	8005ed4 <__s2b+0x30>
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	f7ff ff47 	bl	8005d54 <_Balloc>
 8005ec6:	b940      	cbnz	r0, 8005eda <__s2b+0x36>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	21d3      	movs	r1, #211	@ 0xd3
 8005ecc:	4b18      	ldr	r3, [pc, #96]	@ (8005f30 <__s2b+0x8c>)
 8005ece:	4819      	ldr	r0, [pc, #100]	@ (8005f34 <__s2b+0x90>)
 8005ed0:	f001 fcb4 	bl	800783c <__assert_func>
 8005ed4:	0052      	lsls	r2, r2, #1
 8005ed6:	3101      	adds	r1, #1
 8005ed8:	e7f0      	b.n	8005ebc <__s2b+0x18>
 8005eda:	9b08      	ldr	r3, [sp, #32]
 8005edc:	2d09      	cmp	r5, #9
 8005ede:	6143      	str	r3, [r0, #20]
 8005ee0:	f04f 0301 	mov.w	r3, #1
 8005ee4:	6103      	str	r3, [r0, #16]
 8005ee6:	dd16      	ble.n	8005f16 <__s2b+0x72>
 8005ee8:	f104 0909 	add.w	r9, r4, #9
 8005eec:	46c8      	mov	r8, r9
 8005eee:	442c      	add	r4, r5
 8005ef0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005ef4:	4601      	mov	r1, r0
 8005ef6:	220a      	movs	r2, #10
 8005ef8:	4630      	mov	r0, r6
 8005efa:	3b30      	subs	r3, #48	@ 0x30
 8005efc:	f7ff ff8c 	bl	8005e18 <__multadd>
 8005f00:	45a0      	cmp	r8, r4
 8005f02:	d1f5      	bne.n	8005ef0 <__s2b+0x4c>
 8005f04:	f1a5 0408 	sub.w	r4, r5, #8
 8005f08:	444c      	add	r4, r9
 8005f0a:	1b2d      	subs	r5, r5, r4
 8005f0c:	1963      	adds	r3, r4, r5
 8005f0e:	42bb      	cmp	r3, r7
 8005f10:	db04      	blt.n	8005f1c <__s2b+0x78>
 8005f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f16:	2509      	movs	r5, #9
 8005f18:	340a      	adds	r4, #10
 8005f1a:	e7f6      	b.n	8005f0a <__s2b+0x66>
 8005f1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005f20:	4601      	mov	r1, r0
 8005f22:	220a      	movs	r2, #10
 8005f24:	4630      	mov	r0, r6
 8005f26:	3b30      	subs	r3, #48	@ 0x30
 8005f28:	f7ff ff76 	bl	8005e18 <__multadd>
 8005f2c:	e7ee      	b.n	8005f0c <__s2b+0x68>
 8005f2e:	bf00      	nop
 8005f30:	08008663 	.word	0x08008663
 8005f34:	08008674 	.word	0x08008674

08005f38 <__hi0bits>:
 8005f38:	4603      	mov	r3, r0
 8005f3a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005f3e:	bf3a      	itte	cc
 8005f40:	0403      	lslcc	r3, r0, #16
 8005f42:	2010      	movcc	r0, #16
 8005f44:	2000      	movcs	r0, #0
 8005f46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f4a:	bf3c      	itt	cc
 8005f4c:	021b      	lslcc	r3, r3, #8
 8005f4e:	3008      	addcc	r0, #8
 8005f50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f54:	bf3c      	itt	cc
 8005f56:	011b      	lslcc	r3, r3, #4
 8005f58:	3004      	addcc	r0, #4
 8005f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f5e:	bf3c      	itt	cc
 8005f60:	009b      	lslcc	r3, r3, #2
 8005f62:	3002      	addcc	r0, #2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	db05      	blt.n	8005f74 <__hi0bits+0x3c>
 8005f68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005f6c:	f100 0001 	add.w	r0, r0, #1
 8005f70:	bf08      	it	eq
 8005f72:	2020      	moveq	r0, #32
 8005f74:	4770      	bx	lr

08005f76 <__lo0bits>:
 8005f76:	6803      	ldr	r3, [r0, #0]
 8005f78:	4602      	mov	r2, r0
 8005f7a:	f013 0007 	ands.w	r0, r3, #7
 8005f7e:	d00b      	beq.n	8005f98 <__lo0bits+0x22>
 8005f80:	07d9      	lsls	r1, r3, #31
 8005f82:	d421      	bmi.n	8005fc8 <__lo0bits+0x52>
 8005f84:	0798      	lsls	r0, r3, #30
 8005f86:	bf49      	itett	mi
 8005f88:	085b      	lsrmi	r3, r3, #1
 8005f8a:	089b      	lsrpl	r3, r3, #2
 8005f8c:	2001      	movmi	r0, #1
 8005f8e:	6013      	strmi	r3, [r2, #0]
 8005f90:	bf5c      	itt	pl
 8005f92:	2002      	movpl	r0, #2
 8005f94:	6013      	strpl	r3, [r2, #0]
 8005f96:	4770      	bx	lr
 8005f98:	b299      	uxth	r1, r3
 8005f9a:	b909      	cbnz	r1, 8005fa0 <__lo0bits+0x2a>
 8005f9c:	2010      	movs	r0, #16
 8005f9e:	0c1b      	lsrs	r3, r3, #16
 8005fa0:	b2d9      	uxtb	r1, r3
 8005fa2:	b909      	cbnz	r1, 8005fa8 <__lo0bits+0x32>
 8005fa4:	3008      	adds	r0, #8
 8005fa6:	0a1b      	lsrs	r3, r3, #8
 8005fa8:	0719      	lsls	r1, r3, #28
 8005faa:	bf04      	itt	eq
 8005fac:	091b      	lsreq	r3, r3, #4
 8005fae:	3004      	addeq	r0, #4
 8005fb0:	0799      	lsls	r1, r3, #30
 8005fb2:	bf04      	itt	eq
 8005fb4:	089b      	lsreq	r3, r3, #2
 8005fb6:	3002      	addeq	r0, #2
 8005fb8:	07d9      	lsls	r1, r3, #31
 8005fba:	d403      	bmi.n	8005fc4 <__lo0bits+0x4e>
 8005fbc:	085b      	lsrs	r3, r3, #1
 8005fbe:	f100 0001 	add.w	r0, r0, #1
 8005fc2:	d003      	beq.n	8005fcc <__lo0bits+0x56>
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	4770      	bx	lr
 8005fc8:	2000      	movs	r0, #0
 8005fca:	4770      	bx	lr
 8005fcc:	2020      	movs	r0, #32
 8005fce:	4770      	bx	lr

08005fd0 <__i2b>:
 8005fd0:	b510      	push	{r4, lr}
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	f7ff febd 	bl	8005d54 <_Balloc>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	b928      	cbnz	r0, 8005fea <__i2b+0x1a>
 8005fde:	f240 1145 	movw	r1, #325	@ 0x145
 8005fe2:	4b04      	ldr	r3, [pc, #16]	@ (8005ff4 <__i2b+0x24>)
 8005fe4:	4804      	ldr	r0, [pc, #16]	@ (8005ff8 <__i2b+0x28>)
 8005fe6:	f001 fc29 	bl	800783c <__assert_func>
 8005fea:	2301      	movs	r3, #1
 8005fec:	6144      	str	r4, [r0, #20]
 8005fee:	6103      	str	r3, [r0, #16]
 8005ff0:	bd10      	pop	{r4, pc}
 8005ff2:	bf00      	nop
 8005ff4:	08008663 	.word	0x08008663
 8005ff8:	08008674 	.word	0x08008674

08005ffc <__multiply>:
 8005ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006000:	4614      	mov	r4, r2
 8006002:	690a      	ldr	r2, [r1, #16]
 8006004:	6923      	ldr	r3, [r4, #16]
 8006006:	460f      	mov	r7, r1
 8006008:	429a      	cmp	r2, r3
 800600a:	bfa2      	ittt	ge
 800600c:	4623      	movge	r3, r4
 800600e:	460c      	movge	r4, r1
 8006010:	461f      	movge	r7, r3
 8006012:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006016:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800601a:	68a3      	ldr	r3, [r4, #8]
 800601c:	6861      	ldr	r1, [r4, #4]
 800601e:	eb0a 0609 	add.w	r6, sl, r9
 8006022:	42b3      	cmp	r3, r6
 8006024:	b085      	sub	sp, #20
 8006026:	bfb8      	it	lt
 8006028:	3101      	addlt	r1, #1
 800602a:	f7ff fe93 	bl	8005d54 <_Balloc>
 800602e:	b930      	cbnz	r0, 800603e <__multiply+0x42>
 8006030:	4602      	mov	r2, r0
 8006032:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006036:	4b43      	ldr	r3, [pc, #268]	@ (8006144 <__multiply+0x148>)
 8006038:	4843      	ldr	r0, [pc, #268]	@ (8006148 <__multiply+0x14c>)
 800603a:	f001 fbff 	bl	800783c <__assert_func>
 800603e:	f100 0514 	add.w	r5, r0, #20
 8006042:	462b      	mov	r3, r5
 8006044:	2200      	movs	r2, #0
 8006046:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800604a:	4543      	cmp	r3, r8
 800604c:	d321      	bcc.n	8006092 <__multiply+0x96>
 800604e:	f107 0114 	add.w	r1, r7, #20
 8006052:	f104 0214 	add.w	r2, r4, #20
 8006056:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800605a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800605e:	9302      	str	r3, [sp, #8]
 8006060:	1b13      	subs	r3, r2, r4
 8006062:	3b15      	subs	r3, #21
 8006064:	f023 0303 	bic.w	r3, r3, #3
 8006068:	3304      	adds	r3, #4
 800606a:	f104 0715 	add.w	r7, r4, #21
 800606e:	42ba      	cmp	r2, r7
 8006070:	bf38      	it	cc
 8006072:	2304      	movcc	r3, #4
 8006074:	9301      	str	r3, [sp, #4]
 8006076:	9b02      	ldr	r3, [sp, #8]
 8006078:	9103      	str	r1, [sp, #12]
 800607a:	428b      	cmp	r3, r1
 800607c:	d80c      	bhi.n	8006098 <__multiply+0x9c>
 800607e:	2e00      	cmp	r6, #0
 8006080:	dd03      	ble.n	800608a <__multiply+0x8e>
 8006082:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006086:	2b00      	cmp	r3, #0
 8006088:	d05a      	beq.n	8006140 <__multiply+0x144>
 800608a:	6106      	str	r6, [r0, #16]
 800608c:	b005      	add	sp, #20
 800608e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006092:	f843 2b04 	str.w	r2, [r3], #4
 8006096:	e7d8      	b.n	800604a <__multiply+0x4e>
 8006098:	f8b1 a000 	ldrh.w	sl, [r1]
 800609c:	f1ba 0f00 	cmp.w	sl, #0
 80060a0:	d023      	beq.n	80060ea <__multiply+0xee>
 80060a2:	46a9      	mov	r9, r5
 80060a4:	f04f 0c00 	mov.w	ip, #0
 80060a8:	f104 0e14 	add.w	lr, r4, #20
 80060ac:	f85e 7b04 	ldr.w	r7, [lr], #4
 80060b0:	f8d9 3000 	ldr.w	r3, [r9]
 80060b4:	fa1f fb87 	uxth.w	fp, r7
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	fb0a 330b 	mla	r3, sl, fp, r3
 80060be:	4463      	add	r3, ip
 80060c0:	f8d9 c000 	ldr.w	ip, [r9]
 80060c4:	0c3f      	lsrs	r7, r7, #16
 80060c6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80060ca:	fb0a c707 	mla	r7, sl, r7, ip
 80060ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80060d8:	4572      	cmp	r2, lr
 80060da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80060de:	f849 3b04 	str.w	r3, [r9], #4
 80060e2:	d8e3      	bhi.n	80060ac <__multiply+0xb0>
 80060e4:	9b01      	ldr	r3, [sp, #4]
 80060e6:	f845 c003 	str.w	ip, [r5, r3]
 80060ea:	9b03      	ldr	r3, [sp, #12]
 80060ec:	3104      	adds	r1, #4
 80060ee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80060f2:	f1b9 0f00 	cmp.w	r9, #0
 80060f6:	d021      	beq.n	800613c <__multiply+0x140>
 80060f8:	46ae      	mov	lr, r5
 80060fa:	f04f 0a00 	mov.w	sl, #0
 80060fe:	682b      	ldr	r3, [r5, #0]
 8006100:	f104 0c14 	add.w	ip, r4, #20
 8006104:	f8bc b000 	ldrh.w	fp, [ip]
 8006108:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800610c:	b29b      	uxth	r3, r3
 800610e:	fb09 770b 	mla	r7, r9, fp, r7
 8006112:	4457      	add	r7, sl
 8006114:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006118:	f84e 3b04 	str.w	r3, [lr], #4
 800611c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006120:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006124:	f8be 3000 	ldrh.w	r3, [lr]
 8006128:	4562      	cmp	r2, ip
 800612a:	fb09 330a 	mla	r3, r9, sl, r3
 800612e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006132:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006136:	d8e5      	bhi.n	8006104 <__multiply+0x108>
 8006138:	9f01      	ldr	r7, [sp, #4]
 800613a:	51eb      	str	r3, [r5, r7]
 800613c:	3504      	adds	r5, #4
 800613e:	e79a      	b.n	8006076 <__multiply+0x7a>
 8006140:	3e01      	subs	r6, #1
 8006142:	e79c      	b.n	800607e <__multiply+0x82>
 8006144:	08008663 	.word	0x08008663
 8006148:	08008674 	.word	0x08008674

0800614c <__pow5mult>:
 800614c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006150:	4615      	mov	r5, r2
 8006152:	f012 0203 	ands.w	r2, r2, #3
 8006156:	4607      	mov	r7, r0
 8006158:	460e      	mov	r6, r1
 800615a:	d007      	beq.n	800616c <__pow5mult+0x20>
 800615c:	4c25      	ldr	r4, [pc, #148]	@ (80061f4 <__pow5mult+0xa8>)
 800615e:	3a01      	subs	r2, #1
 8006160:	2300      	movs	r3, #0
 8006162:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006166:	f7ff fe57 	bl	8005e18 <__multadd>
 800616a:	4606      	mov	r6, r0
 800616c:	10ad      	asrs	r5, r5, #2
 800616e:	d03d      	beq.n	80061ec <__pow5mult+0xa0>
 8006170:	69fc      	ldr	r4, [r7, #28]
 8006172:	b97c      	cbnz	r4, 8006194 <__pow5mult+0x48>
 8006174:	2010      	movs	r0, #16
 8006176:	f7ff fd37 	bl	8005be8 <malloc>
 800617a:	4602      	mov	r2, r0
 800617c:	61f8      	str	r0, [r7, #28]
 800617e:	b928      	cbnz	r0, 800618c <__pow5mult+0x40>
 8006180:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006184:	4b1c      	ldr	r3, [pc, #112]	@ (80061f8 <__pow5mult+0xac>)
 8006186:	481d      	ldr	r0, [pc, #116]	@ (80061fc <__pow5mult+0xb0>)
 8006188:	f001 fb58 	bl	800783c <__assert_func>
 800618c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006190:	6004      	str	r4, [r0, #0]
 8006192:	60c4      	str	r4, [r0, #12]
 8006194:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006198:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800619c:	b94c      	cbnz	r4, 80061b2 <__pow5mult+0x66>
 800619e:	f240 2171 	movw	r1, #625	@ 0x271
 80061a2:	4638      	mov	r0, r7
 80061a4:	f7ff ff14 	bl	8005fd0 <__i2b>
 80061a8:	2300      	movs	r3, #0
 80061aa:	4604      	mov	r4, r0
 80061ac:	f8c8 0008 	str.w	r0, [r8, #8]
 80061b0:	6003      	str	r3, [r0, #0]
 80061b2:	f04f 0900 	mov.w	r9, #0
 80061b6:	07eb      	lsls	r3, r5, #31
 80061b8:	d50a      	bpl.n	80061d0 <__pow5mult+0x84>
 80061ba:	4631      	mov	r1, r6
 80061bc:	4622      	mov	r2, r4
 80061be:	4638      	mov	r0, r7
 80061c0:	f7ff ff1c 	bl	8005ffc <__multiply>
 80061c4:	4680      	mov	r8, r0
 80061c6:	4631      	mov	r1, r6
 80061c8:	4638      	mov	r0, r7
 80061ca:	f7ff fe03 	bl	8005dd4 <_Bfree>
 80061ce:	4646      	mov	r6, r8
 80061d0:	106d      	asrs	r5, r5, #1
 80061d2:	d00b      	beq.n	80061ec <__pow5mult+0xa0>
 80061d4:	6820      	ldr	r0, [r4, #0]
 80061d6:	b938      	cbnz	r0, 80061e8 <__pow5mult+0x9c>
 80061d8:	4622      	mov	r2, r4
 80061da:	4621      	mov	r1, r4
 80061dc:	4638      	mov	r0, r7
 80061de:	f7ff ff0d 	bl	8005ffc <__multiply>
 80061e2:	6020      	str	r0, [r4, #0]
 80061e4:	f8c0 9000 	str.w	r9, [r0]
 80061e8:	4604      	mov	r4, r0
 80061ea:	e7e4      	b.n	80061b6 <__pow5mult+0x6a>
 80061ec:	4630      	mov	r0, r6
 80061ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061f2:	bf00      	nop
 80061f4:	080086d0 	.word	0x080086d0
 80061f8:	080085f4 	.word	0x080085f4
 80061fc:	08008674 	.word	0x08008674

08006200 <__lshift>:
 8006200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006204:	460c      	mov	r4, r1
 8006206:	4607      	mov	r7, r0
 8006208:	4691      	mov	r9, r2
 800620a:	6923      	ldr	r3, [r4, #16]
 800620c:	6849      	ldr	r1, [r1, #4]
 800620e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006212:	68a3      	ldr	r3, [r4, #8]
 8006214:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006218:	f108 0601 	add.w	r6, r8, #1
 800621c:	42b3      	cmp	r3, r6
 800621e:	db0b      	blt.n	8006238 <__lshift+0x38>
 8006220:	4638      	mov	r0, r7
 8006222:	f7ff fd97 	bl	8005d54 <_Balloc>
 8006226:	4605      	mov	r5, r0
 8006228:	b948      	cbnz	r0, 800623e <__lshift+0x3e>
 800622a:	4602      	mov	r2, r0
 800622c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006230:	4b27      	ldr	r3, [pc, #156]	@ (80062d0 <__lshift+0xd0>)
 8006232:	4828      	ldr	r0, [pc, #160]	@ (80062d4 <__lshift+0xd4>)
 8006234:	f001 fb02 	bl	800783c <__assert_func>
 8006238:	3101      	adds	r1, #1
 800623a:	005b      	lsls	r3, r3, #1
 800623c:	e7ee      	b.n	800621c <__lshift+0x1c>
 800623e:	2300      	movs	r3, #0
 8006240:	f100 0114 	add.w	r1, r0, #20
 8006244:	f100 0210 	add.w	r2, r0, #16
 8006248:	4618      	mov	r0, r3
 800624a:	4553      	cmp	r3, sl
 800624c:	db33      	blt.n	80062b6 <__lshift+0xb6>
 800624e:	6920      	ldr	r0, [r4, #16]
 8006250:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006254:	f104 0314 	add.w	r3, r4, #20
 8006258:	f019 091f 	ands.w	r9, r9, #31
 800625c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006260:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006264:	d02b      	beq.n	80062be <__lshift+0xbe>
 8006266:	468a      	mov	sl, r1
 8006268:	2200      	movs	r2, #0
 800626a:	f1c9 0e20 	rsb	lr, r9, #32
 800626e:	6818      	ldr	r0, [r3, #0]
 8006270:	fa00 f009 	lsl.w	r0, r0, r9
 8006274:	4310      	orrs	r0, r2
 8006276:	f84a 0b04 	str.w	r0, [sl], #4
 800627a:	f853 2b04 	ldr.w	r2, [r3], #4
 800627e:	459c      	cmp	ip, r3
 8006280:	fa22 f20e 	lsr.w	r2, r2, lr
 8006284:	d8f3      	bhi.n	800626e <__lshift+0x6e>
 8006286:	ebac 0304 	sub.w	r3, ip, r4
 800628a:	3b15      	subs	r3, #21
 800628c:	f023 0303 	bic.w	r3, r3, #3
 8006290:	3304      	adds	r3, #4
 8006292:	f104 0015 	add.w	r0, r4, #21
 8006296:	4584      	cmp	ip, r0
 8006298:	bf38      	it	cc
 800629a:	2304      	movcc	r3, #4
 800629c:	50ca      	str	r2, [r1, r3]
 800629e:	b10a      	cbz	r2, 80062a4 <__lshift+0xa4>
 80062a0:	f108 0602 	add.w	r6, r8, #2
 80062a4:	3e01      	subs	r6, #1
 80062a6:	4638      	mov	r0, r7
 80062a8:	4621      	mov	r1, r4
 80062aa:	612e      	str	r6, [r5, #16]
 80062ac:	f7ff fd92 	bl	8005dd4 <_Bfree>
 80062b0:	4628      	mov	r0, r5
 80062b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80062ba:	3301      	adds	r3, #1
 80062bc:	e7c5      	b.n	800624a <__lshift+0x4a>
 80062be:	3904      	subs	r1, #4
 80062c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80062c4:	459c      	cmp	ip, r3
 80062c6:	f841 2f04 	str.w	r2, [r1, #4]!
 80062ca:	d8f9      	bhi.n	80062c0 <__lshift+0xc0>
 80062cc:	e7ea      	b.n	80062a4 <__lshift+0xa4>
 80062ce:	bf00      	nop
 80062d0:	08008663 	.word	0x08008663
 80062d4:	08008674 	.word	0x08008674

080062d8 <__mcmp>:
 80062d8:	4603      	mov	r3, r0
 80062da:	690a      	ldr	r2, [r1, #16]
 80062dc:	6900      	ldr	r0, [r0, #16]
 80062de:	b530      	push	{r4, r5, lr}
 80062e0:	1a80      	subs	r0, r0, r2
 80062e2:	d10e      	bne.n	8006302 <__mcmp+0x2a>
 80062e4:	3314      	adds	r3, #20
 80062e6:	3114      	adds	r1, #20
 80062e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80062ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80062f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80062f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80062f8:	4295      	cmp	r5, r2
 80062fa:	d003      	beq.n	8006304 <__mcmp+0x2c>
 80062fc:	d205      	bcs.n	800630a <__mcmp+0x32>
 80062fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006302:	bd30      	pop	{r4, r5, pc}
 8006304:	42a3      	cmp	r3, r4
 8006306:	d3f3      	bcc.n	80062f0 <__mcmp+0x18>
 8006308:	e7fb      	b.n	8006302 <__mcmp+0x2a>
 800630a:	2001      	movs	r0, #1
 800630c:	e7f9      	b.n	8006302 <__mcmp+0x2a>
	...

08006310 <__mdiff>:
 8006310:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006314:	4689      	mov	r9, r1
 8006316:	4606      	mov	r6, r0
 8006318:	4611      	mov	r1, r2
 800631a:	4648      	mov	r0, r9
 800631c:	4614      	mov	r4, r2
 800631e:	f7ff ffdb 	bl	80062d8 <__mcmp>
 8006322:	1e05      	subs	r5, r0, #0
 8006324:	d112      	bne.n	800634c <__mdiff+0x3c>
 8006326:	4629      	mov	r1, r5
 8006328:	4630      	mov	r0, r6
 800632a:	f7ff fd13 	bl	8005d54 <_Balloc>
 800632e:	4602      	mov	r2, r0
 8006330:	b928      	cbnz	r0, 800633e <__mdiff+0x2e>
 8006332:	f240 2137 	movw	r1, #567	@ 0x237
 8006336:	4b3e      	ldr	r3, [pc, #248]	@ (8006430 <__mdiff+0x120>)
 8006338:	483e      	ldr	r0, [pc, #248]	@ (8006434 <__mdiff+0x124>)
 800633a:	f001 fa7f 	bl	800783c <__assert_func>
 800633e:	2301      	movs	r3, #1
 8006340:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006344:	4610      	mov	r0, r2
 8006346:	b003      	add	sp, #12
 8006348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800634c:	bfbc      	itt	lt
 800634e:	464b      	movlt	r3, r9
 8006350:	46a1      	movlt	r9, r4
 8006352:	4630      	mov	r0, r6
 8006354:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006358:	bfba      	itte	lt
 800635a:	461c      	movlt	r4, r3
 800635c:	2501      	movlt	r5, #1
 800635e:	2500      	movge	r5, #0
 8006360:	f7ff fcf8 	bl	8005d54 <_Balloc>
 8006364:	4602      	mov	r2, r0
 8006366:	b918      	cbnz	r0, 8006370 <__mdiff+0x60>
 8006368:	f240 2145 	movw	r1, #581	@ 0x245
 800636c:	4b30      	ldr	r3, [pc, #192]	@ (8006430 <__mdiff+0x120>)
 800636e:	e7e3      	b.n	8006338 <__mdiff+0x28>
 8006370:	f100 0b14 	add.w	fp, r0, #20
 8006374:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006378:	f109 0310 	add.w	r3, r9, #16
 800637c:	60c5      	str	r5, [r0, #12]
 800637e:	f04f 0c00 	mov.w	ip, #0
 8006382:	f109 0514 	add.w	r5, r9, #20
 8006386:	46d9      	mov	r9, fp
 8006388:	6926      	ldr	r6, [r4, #16]
 800638a:	f104 0e14 	add.w	lr, r4, #20
 800638e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006392:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006396:	9301      	str	r3, [sp, #4]
 8006398:	9b01      	ldr	r3, [sp, #4]
 800639a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800639e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80063a2:	b281      	uxth	r1, r0
 80063a4:	9301      	str	r3, [sp, #4]
 80063a6:	fa1f f38a 	uxth.w	r3, sl
 80063aa:	1a5b      	subs	r3, r3, r1
 80063ac:	0c00      	lsrs	r0, r0, #16
 80063ae:	4463      	add	r3, ip
 80063b0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80063b4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80063be:	4576      	cmp	r6, lr
 80063c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80063c4:	f849 3b04 	str.w	r3, [r9], #4
 80063c8:	d8e6      	bhi.n	8006398 <__mdiff+0x88>
 80063ca:	1b33      	subs	r3, r6, r4
 80063cc:	3b15      	subs	r3, #21
 80063ce:	f023 0303 	bic.w	r3, r3, #3
 80063d2:	3415      	adds	r4, #21
 80063d4:	3304      	adds	r3, #4
 80063d6:	42a6      	cmp	r6, r4
 80063d8:	bf38      	it	cc
 80063da:	2304      	movcc	r3, #4
 80063dc:	441d      	add	r5, r3
 80063de:	445b      	add	r3, fp
 80063e0:	461e      	mov	r6, r3
 80063e2:	462c      	mov	r4, r5
 80063e4:	4544      	cmp	r4, r8
 80063e6:	d30e      	bcc.n	8006406 <__mdiff+0xf6>
 80063e8:	f108 0103 	add.w	r1, r8, #3
 80063ec:	1b49      	subs	r1, r1, r5
 80063ee:	f021 0103 	bic.w	r1, r1, #3
 80063f2:	3d03      	subs	r5, #3
 80063f4:	45a8      	cmp	r8, r5
 80063f6:	bf38      	it	cc
 80063f8:	2100      	movcc	r1, #0
 80063fa:	440b      	add	r3, r1
 80063fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006400:	b199      	cbz	r1, 800642a <__mdiff+0x11a>
 8006402:	6117      	str	r7, [r2, #16]
 8006404:	e79e      	b.n	8006344 <__mdiff+0x34>
 8006406:	46e6      	mov	lr, ip
 8006408:	f854 1b04 	ldr.w	r1, [r4], #4
 800640c:	fa1f fc81 	uxth.w	ip, r1
 8006410:	44f4      	add	ip, lr
 8006412:	0c08      	lsrs	r0, r1, #16
 8006414:	4471      	add	r1, lr
 8006416:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800641a:	b289      	uxth	r1, r1
 800641c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006420:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006424:	f846 1b04 	str.w	r1, [r6], #4
 8006428:	e7dc      	b.n	80063e4 <__mdiff+0xd4>
 800642a:	3f01      	subs	r7, #1
 800642c:	e7e6      	b.n	80063fc <__mdiff+0xec>
 800642e:	bf00      	nop
 8006430:	08008663 	.word	0x08008663
 8006434:	08008674 	.word	0x08008674

08006438 <__ulp>:
 8006438:	4b0e      	ldr	r3, [pc, #56]	@ (8006474 <__ulp+0x3c>)
 800643a:	400b      	ands	r3, r1
 800643c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006440:	2b00      	cmp	r3, #0
 8006442:	dc08      	bgt.n	8006456 <__ulp+0x1e>
 8006444:	425b      	negs	r3, r3
 8006446:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800644a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800644e:	da04      	bge.n	800645a <__ulp+0x22>
 8006450:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006454:	4113      	asrs	r3, r2
 8006456:	2200      	movs	r2, #0
 8006458:	e008      	b.n	800646c <__ulp+0x34>
 800645a:	f1a2 0314 	sub.w	r3, r2, #20
 800645e:	2b1e      	cmp	r3, #30
 8006460:	bfd6      	itet	le
 8006462:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006466:	2201      	movgt	r2, #1
 8006468:	40da      	lsrle	r2, r3
 800646a:	2300      	movs	r3, #0
 800646c:	4619      	mov	r1, r3
 800646e:	4610      	mov	r0, r2
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	7ff00000 	.word	0x7ff00000

08006478 <__b2d>:
 8006478:	6902      	ldr	r2, [r0, #16]
 800647a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647c:	f100 0614 	add.w	r6, r0, #20
 8006480:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006484:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006488:	4f1e      	ldr	r7, [pc, #120]	@ (8006504 <__b2d+0x8c>)
 800648a:	4620      	mov	r0, r4
 800648c:	f7ff fd54 	bl	8005f38 <__hi0bits>
 8006490:	4603      	mov	r3, r0
 8006492:	f1c0 0020 	rsb	r0, r0, #32
 8006496:	2b0a      	cmp	r3, #10
 8006498:	f1a2 0504 	sub.w	r5, r2, #4
 800649c:	6008      	str	r0, [r1, #0]
 800649e:	dc12      	bgt.n	80064c6 <__b2d+0x4e>
 80064a0:	42ae      	cmp	r6, r5
 80064a2:	bf2c      	ite	cs
 80064a4:	2200      	movcs	r2, #0
 80064a6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80064aa:	f1c3 0c0b 	rsb	ip, r3, #11
 80064ae:	3315      	adds	r3, #21
 80064b0:	fa24 fe0c 	lsr.w	lr, r4, ip
 80064b4:	fa04 f303 	lsl.w	r3, r4, r3
 80064b8:	fa22 f20c 	lsr.w	r2, r2, ip
 80064bc:	ea4e 0107 	orr.w	r1, lr, r7
 80064c0:	431a      	orrs	r2, r3
 80064c2:	4610      	mov	r0, r2
 80064c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064c6:	42ae      	cmp	r6, r5
 80064c8:	bf36      	itet	cc
 80064ca:	f1a2 0508 	subcc.w	r5, r2, #8
 80064ce:	2200      	movcs	r2, #0
 80064d0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80064d4:	3b0b      	subs	r3, #11
 80064d6:	d012      	beq.n	80064fe <__b2d+0x86>
 80064d8:	f1c3 0720 	rsb	r7, r3, #32
 80064dc:	fa22 f107 	lsr.w	r1, r2, r7
 80064e0:	409c      	lsls	r4, r3
 80064e2:	430c      	orrs	r4, r1
 80064e4:	42b5      	cmp	r5, r6
 80064e6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80064ea:	bf94      	ite	ls
 80064ec:	2400      	movls	r4, #0
 80064ee:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80064f2:	409a      	lsls	r2, r3
 80064f4:	40fc      	lsrs	r4, r7
 80064f6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80064fa:	4322      	orrs	r2, r4
 80064fc:	e7e1      	b.n	80064c2 <__b2d+0x4a>
 80064fe:	ea44 0107 	orr.w	r1, r4, r7
 8006502:	e7de      	b.n	80064c2 <__b2d+0x4a>
 8006504:	3ff00000 	.word	0x3ff00000

08006508 <__d2b>:
 8006508:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800650c:	2101      	movs	r1, #1
 800650e:	4690      	mov	r8, r2
 8006510:	4699      	mov	r9, r3
 8006512:	9e08      	ldr	r6, [sp, #32]
 8006514:	f7ff fc1e 	bl	8005d54 <_Balloc>
 8006518:	4604      	mov	r4, r0
 800651a:	b930      	cbnz	r0, 800652a <__d2b+0x22>
 800651c:	4602      	mov	r2, r0
 800651e:	f240 310f 	movw	r1, #783	@ 0x30f
 8006522:	4b23      	ldr	r3, [pc, #140]	@ (80065b0 <__d2b+0xa8>)
 8006524:	4823      	ldr	r0, [pc, #140]	@ (80065b4 <__d2b+0xac>)
 8006526:	f001 f989 	bl	800783c <__assert_func>
 800652a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800652e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006532:	b10d      	cbz	r5, 8006538 <__d2b+0x30>
 8006534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006538:	9301      	str	r3, [sp, #4]
 800653a:	f1b8 0300 	subs.w	r3, r8, #0
 800653e:	d024      	beq.n	800658a <__d2b+0x82>
 8006540:	4668      	mov	r0, sp
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	f7ff fd17 	bl	8005f76 <__lo0bits>
 8006548:	e9dd 1200 	ldrd	r1, r2, [sp]
 800654c:	b1d8      	cbz	r0, 8006586 <__d2b+0x7e>
 800654e:	f1c0 0320 	rsb	r3, r0, #32
 8006552:	fa02 f303 	lsl.w	r3, r2, r3
 8006556:	430b      	orrs	r3, r1
 8006558:	40c2      	lsrs	r2, r0
 800655a:	6163      	str	r3, [r4, #20]
 800655c:	9201      	str	r2, [sp, #4]
 800655e:	9b01      	ldr	r3, [sp, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	bf0c      	ite	eq
 8006564:	2201      	moveq	r2, #1
 8006566:	2202      	movne	r2, #2
 8006568:	61a3      	str	r3, [r4, #24]
 800656a:	6122      	str	r2, [r4, #16]
 800656c:	b1ad      	cbz	r5, 800659a <__d2b+0x92>
 800656e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006572:	4405      	add	r5, r0
 8006574:	6035      	str	r5, [r6, #0]
 8006576:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800657a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800657c:	6018      	str	r0, [r3, #0]
 800657e:	4620      	mov	r0, r4
 8006580:	b002      	add	sp, #8
 8006582:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006586:	6161      	str	r1, [r4, #20]
 8006588:	e7e9      	b.n	800655e <__d2b+0x56>
 800658a:	a801      	add	r0, sp, #4
 800658c:	f7ff fcf3 	bl	8005f76 <__lo0bits>
 8006590:	9b01      	ldr	r3, [sp, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	6163      	str	r3, [r4, #20]
 8006596:	3020      	adds	r0, #32
 8006598:	e7e7      	b.n	800656a <__d2b+0x62>
 800659a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800659e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80065a2:	6030      	str	r0, [r6, #0]
 80065a4:	6918      	ldr	r0, [r3, #16]
 80065a6:	f7ff fcc7 	bl	8005f38 <__hi0bits>
 80065aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80065ae:	e7e4      	b.n	800657a <__d2b+0x72>
 80065b0:	08008663 	.word	0x08008663
 80065b4:	08008674 	.word	0x08008674

080065b8 <__ratio>:
 80065b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065bc:	b085      	sub	sp, #20
 80065be:	e9cd 1000 	strd	r1, r0, [sp]
 80065c2:	a902      	add	r1, sp, #8
 80065c4:	f7ff ff58 	bl	8006478 <__b2d>
 80065c8:	468b      	mov	fp, r1
 80065ca:	4606      	mov	r6, r0
 80065cc:	460f      	mov	r7, r1
 80065ce:	9800      	ldr	r0, [sp, #0]
 80065d0:	a903      	add	r1, sp, #12
 80065d2:	f7ff ff51 	bl	8006478 <__b2d>
 80065d6:	460d      	mov	r5, r1
 80065d8:	9b01      	ldr	r3, [sp, #4]
 80065da:	4689      	mov	r9, r1
 80065dc:	6919      	ldr	r1, [r3, #16]
 80065de:	9b00      	ldr	r3, [sp, #0]
 80065e0:	4604      	mov	r4, r0
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	4630      	mov	r0, r6
 80065e6:	1ac9      	subs	r1, r1, r3
 80065e8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80065ec:	1a9b      	subs	r3, r3, r2
 80065ee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	bfcd      	iteet	gt
 80065f6:	463a      	movgt	r2, r7
 80065f8:	462a      	movle	r2, r5
 80065fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80065fe:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006602:	bfd8      	it	le
 8006604:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006608:	464b      	mov	r3, r9
 800660a:	4622      	mov	r2, r4
 800660c:	4659      	mov	r1, fp
 800660e:	f7fa f88d 	bl	800072c <__aeabi_ddiv>
 8006612:	b005      	add	sp, #20
 8006614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006618 <__copybits>:
 8006618:	3901      	subs	r1, #1
 800661a:	b570      	push	{r4, r5, r6, lr}
 800661c:	1149      	asrs	r1, r1, #5
 800661e:	6914      	ldr	r4, [r2, #16]
 8006620:	3101      	adds	r1, #1
 8006622:	f102 0314 	add.w	r3, r2, #20
 8006626:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800662a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800662e:	1f05      	subs	r5, r0, #4
 8006630:	42a3      	cmp	r3, r4
 8006632:	d30c      	bcc.n	800664e <__copybits+0x36>
 8006634:	1aa3      	subs	r3, r4, r2
 8006636:	3b11      	subs	r3, #17
 8006638:	f023 0303 	bic.w	r3, r3, #3
 800663c:	3211      	adds	r2, #17
 800663e:	42a2      	cmp	r2, r4
 8006640:	bf88      	it	hi
 8006642:	2300      	movhi	r3, #0
 8006644:	4418      	add	r0, r3
 8006646:	2300      	movs	r3, #0
 8006648:	4288      	cmp	r0, r1
 800664a:	d305      	bcc.n	8006658 <__copybits+0x40>
 800664c:	bd70      	pop	{r4, r5, r6, pc}
 800664e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006652:	f845 6f04 	str.w	r6, [r5, #4]!
 8006656:	e7eb      	b.n	8006630 <__copybits+0x18>
 8006658:	f840 3b04 	str.w	r3, [r0], #4
 800665c:	e7f4      	b.n	8006648 <__copybits+0x30>

0800665e <__any_on>:
 800665e:	f100 0214 	add.w	r2, r0, #20
 8006662:	6900      	ldr	r0, [r0, #16]
 8006664:	114b      	asrs	r3, r1, #5
 8006666:	4298      	cmp	r0, r3
 8006668:	b510      	push	{r4, lr}
 800666a:	db11      	blt.n	8006690 <__any_on+0x32>
 800666c:	dd0a      	ble.n	8006684 <__any_on+0x26>
 800666e:	f011 011f 	ands.w	r1, r1, #31
 8006672:	d007      	beq.n	8006684 <__any_on+0x26>
 8006674:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006678:	fa24 f001 	lsr.w	r0, r4, r1
 800667c:	fa00 f101 	lsl.w	r1, r0, r1
 8006680:	428c      	cmp	r4, r1
 8006682:	d10b      	bne.n	800669c <__any_on+0x3e>
 8006684:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006688:	4293      	cmp	r3, r2
 800668a:	d803      	bhi.n	8006694 <__any_on+0x36>
 800668c:	2000      	movs	r0, #0
 800668e:	bd10      	pop	{r4, pc}
 8006690:	4603      	mov	r3, r0
 8006692:	e7f7      	b.n	8006684 <__any_on+0x26>
 8006694:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006698:	2900      	cmp	r1, #0
 800669a:	d0f5      	beq.n	8006688 <__any_on+0x2a>
 800669c:	2001      	movs	r0, #1
 800669e:	e7f6      	b.n	800668e <__any_on+0x30>

080066a0 <sulp>:
 80066a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a4:	460f      	mov	r7, r1
 80066a6:	4690      	mov	r8, r2
 80066a8:	f7ff fec6 	bl	8006438 <__ulp>
 80066ac:	4604      	mov	r4, r0
 80066ae:	460d      	mov	r5, r1
 80066b0:	f1b8 0f00 	cmp.w	r8, #0
 80066b4:	d011      	beq.n	80066da <sulp+0x3a>
 80066b6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80066ba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80066be:	2b00      	cmp	r3, #0
 80066c0:	dd0b      	ble.n	80066da <sulp+0x3a>
 80066c2:	2400      	movs	r4, #0
 80066c4:	051b      	lsls	r3, r3, #20
 80066c6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80066ca:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80066ce:	4622      	mov	r2, r4
 80066d0:	462b      	mov	r3, r5
 80066d2:	f7f9 ff01 	bl	80004d8 <__aeabi_dmul>
 80066d6:	4604      	mov	r4, r0
 80066d8:	460d      	mov	r5, r1
 80066da:	4620      	mov	r0, r4
 80066dc:	4629      	mov	r1, r5
 80066de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e2:	0000      	movs	r0, r0
 80066e4:	0000      	movs	r0, r0
	...

080066e8 <_strtod_l>:
 80066e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ec:	b09f      	sub	sp, #124	@ 0x7c
 80066ee:	9217      	str	r2, [sp, #92]	@ 0x5c
 80066f0:	2200      	movs	r2, #0
 80066f2:	460c      	mov	r4, r1
 80066f4:	921a      	str	r2, [sp, #104]	@ 0x68
 80066f6:	f04f 0a00 	mov.w	sl, #0
 80066fa:	f04f 0b00 	mov.w	fp, #0
 80066fe:	460a      	mov	r2, r1
 8006700:	9005      	str	r0, [sp, #20]
 8006702:	9219      	str	r2, [sp, #100]	@ 0x64
 8006704:	7811      	ldrb	r1, [r2, #0]
 8006706:	292b      	cmp	r1, #43	@ 0x2b
 8006708:	d048      	beq.n	800679c <_strtod_l+0xb4>
 800670a:	d836      	bhi.n	800677a <_strtod_l+0x92>
 800670c:	290d      	cmp	r1, #13
 800670e:	d830      	bhi.n	8006772 <_strtod_l+0x8a>
 8006710:	2908      	cmp	r1, #8
 8006712:	d830      	bhi.n	8006776 <_strtod_l+0x8e>
 8006714:	2900      	cmp	r1, #0
 8006716:	d039      	beq.n	800678c <_strtod_l+0xa4>
 8006718:	2200      	movs	r2, #0
 800671a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800671c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800671e:	782a      	ldrb	r2, [r5, #0]
 8006720:	2a30      	cmp	r2, #48	@ 0x30
 8006722:	f040 80b1 	bne.w	8006888 <_strtod_l+0x1a0>
 8006726:	786a      	ldrb	r2, [r5, #1]
 8006728:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800672c:	2a58      	cmp	r2, #88	@ 0x58
 800672e:	d16c      	bne.n	800680a <_strtod_l+0x122>
 8006730:	9302      	str	r3, [sp, #8]
 8006732:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006734:	4a8e      	ldr	r2, [pc, #568]	@ (8006970 <_strtod_l+0x288>)
 8006736:	9301      	str	r3, [sp, #4]
 8006738:	ab1a      	add	r3, sp, #104	@ 0x68
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	9805      	ldr	r0, [sp, #20]
 800673e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006740:	a919      	add	r1, sp, #100	@ 0x64
 8006742:	f001 f915 	bl	8007970 <__gethex>
 8006746:	f010 060f 	ands.w	r6, r0, #15
 800674a:	4604      	mov	r4, r0
 800674c:	d005      	beq.n	800675a <_strtod_l+0x72>
 800674e:	2e06      	cmp	r6, #6
 8006750:	d126      	bne.n	80067a0 <_strtod_l+0xb8>
 8006752:	2300      	movs	r3, #0
 8006754:	3501      	adds	r5, #1
 8006756:	9519      	str	r5, [sp, #100]	@ 0x64
 8006758:	930b      	str	r3, [sp, #44]	@ 0x2c
 800675a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800675c:	2b00      	cmp	r3, #0
 800675e:	f040 8584 	bne.w	800726a <_strtod_l+0xb82>
 8006762:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006764:	b1bb      	cbz	r3, 8006796 <_strtod_l+0xae>
 8006766:	4650      	mov	r0, sl
 8006768:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800676c:	b01f      	add	sp, #124	@ 0x7c
 800676e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006772:	2920      	cmp	r1, #32
 8006774:	d1d0      	bne.n	8006718 <_strtod_l+0x30>
 8006776:	3201      	adds	r2, #1
 8006778:	e7c3      	b.n	8006702 <_strtod_l+0x1a>
 800677a:	292d      	cmp	r1, #45	@ 0x2d
 800677c:	d1cc      	bne.n	8006718 <_strtod_l+0x30>
 800677e:	2101      	movs	r1, #1
 8006780:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006782:	1c51      	adds	r1, r2, #1
 8006784:	9119      	str	r1, [sp, #100]	@ 0x64
 8006786:	7852      	ldrb	r2, [r2, #1]
 8006788:	2a00      	cmp	r2, #0
 800678a:	d1c7      	bne.n	800671c <_strtod_l+0x34>
 800678c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800678e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006790:	2b00      	cmp	r3, #0
 8006792:	f040 8568 	bne.w	8007266 <_strtod_l+0xb7e>
 8006796:	4650      	mov	r0, sl
 8006798:	4659      	mov	r1, fp
 800679a:	e7e7      	b.n	800676c <_strtod_l+0x84>
 800679c:	2100      	movs	r1, #0
 800679e:	e7ef      	b.n	8006780 <_strtod_l+0x98>
 80067a0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80067a2:	b13a      	cbz	r2, 80067b4 <_strtod_l+0xcc>
 80067a4:	2135      	movs	r1, #53	@ 0x35
 80067a6:	a81c      	add	r0, sp, #112	@ 0x70
 80067a8:	f7ff ff36 	bl	8006618 <__copybits>
 80067ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80067ae:	9805      	ldr	r0, [sp, #20]
 80067b0:	f7ff fb10 	bl	8005dd4 <_Bfree>
 80067b4:	3e01      	subs	r6, #1
 80067b6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80067b8:	2e04      	cmp	r6, #4
 80067ba:	d806      	bhi.n	80067ca <_strtod_l+0xe2>
 80067bc:	e8df f006 	tbb	[pc, r6]
 80067c0:	201d0314 	.word	0x201d0314
 80067c4:	14          	.byte	0x14
 80067c5:	00          	.byte	0x00
 80067c6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80067ca:	05e1      	lsls	r1, r4, #23
 80067cc:	bf48      	it	mi
 80067ce:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80067d2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80067d6:	0d1b      	lsrs	r3, r3, #20
 80067d8:	051b      	lsls	r3, r3, #20
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1bd      	bne.n	800675a <_strtod_l+0x72>
 80067de:	f7fe fb29 	bl	8004e34 <__errno>
 80067e2:	2322      	movs	r3, #34	@ 0x22
 80067e4:	6003      	str	r3, [r0, #0]
 80067e6:	e7b8      	b.n	800675a <_strtod_l+0x72>
 80067e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80067ec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80067f0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80067f4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80067f8:	e7e7      	b.n	80067ca <_strtod_l+0xe2>
 80067fa:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8006974 <_strtod_l+0x28c>
 80067fe:	e7e4      	b.n	80067ca <_strtod_l+0xe2>
 8006800:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006804:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006808:	e7df      	b.n	80067ca <_strtod_l+0xe2>
 800680a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006810:	785b      	ldrb	r3, [r3, #1]
 8006812:	2b30      	cmp	r3, #48	@ 0x30
 8006814:	d0f9      	beq.n	800680a <_strtod_l+0x122>
 8006816:	2b00      	cmp	r3, #0
 8006818:	d09f      	beq.n	800675a <_strtod_l+0x72>
 800681a:	2301      	movs	r3, #1
 800681c:	9309      	str	r3, [sp, #36]	@ 0x24
 800681e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006820:	220a      	movs	r2, #10
 8006822:	930c      	str	r3, [sp, #48]	@ 0x30
 8006824:	2300      	movs	r3, #0
 8006826:	461f      	mov	r7, r3
 8006828:	9308      	str	r3, [sp, #32]
 800682a:	930a      	str	r3, [sp, #40]	@ 0x28
 800682c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800682e:	7805      	ldrb	r5, [r0, #0]
 8006830:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006834:	b2d9      	uxtb	r1, r3
 8006836:	2909      	cmp	r1, #9
 8006838:	d928      	bls.n	800688c <_strtod_l+0x1a4>
 800683a:	2201      	movs	r2, #1
 800683c:	494e      	ldr	r1, [pc, #312]	@ (8006978 <_strtod_l+0x290>)
 800683e:	f000 ffc7 	bl	80077d0 <strncmp>
 8006842:	2800      	cmp	r0, #0
 8006844:	d032      	beq.n	80068ac <_strtod_l+0x1c4>
 8006846:	2000      	movs	r0, #0
 8006848:	462a      	mov	r2, r5
 800684a:	4681      	mov	r9, r0
 800684c:	463d      	mov	r5, r7
 800684e:	4603      	mov	r3, r0
 8006850:	2a65      	cmp	r2, #101	@ 0x65
 8006852:	d001      	beq.n	8006858 <_strtod_l+0x170>
 8006854:	2a45      	cmp	r2, #69	@ 0x45
 8006856:	d114      	bne.n	8006882 <_strtod_l+0x19a>
 8006858:	b91d      	cbnz	r5, 8006862 <_strtod_l+0x17a>
 800685a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800685c:	4302      	orrs	r2, r0
 800685e:	d095      	beq.n	800678c <_strtod_l+0xa4>
 8006860:	2500      	movs	r5, #0
 8006862:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006864:	1c62      	adds	r2, r4, #1
 8006866:	9219      	str	r2, [sp, #100]	@ 0x64
 8006868:	7862      	ldrb	r2, [r4, #1]
 800686a:	2a2b      	cmp	r2, #43	@ 0x2b
 800686c:	d077      	beq.n	800695e <_strtod_l+0x276>
 800686e:	2a2d      	cmp	r2, #45	@ 0x2d
 8006870:	d07b      	beq.n	800696a <_strtod_l+0x282>
 8006872:	f04f 0c00 	mov.w	ip, #0
 8006876:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800687a:	2909      	cmp	r1, #9
 800687c:	f240 8082 	bls.w	8006984 <_strtod_l+0x29c>
 8006880:	9419      	str	r4, [sp, #100]	@ 0x64
 8006882:	f04f 0800 	mov.w	r8, #0
 8006886:	e0a2      	b.n	80069ce <_strtod_l+0x2e6>
 8006888:	2300      	movs	r3, #0
 800688a:	e7c7      	b.n	800681c <_strtod_l+0x134>
 800688c:	2f08      	cmp	r7, #8
 800688e:	bfd5      	itete	le
 8006890:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006892:	9908      	ldrgt	r1, [sp, #32]
 8006894:	fb02 3301 	mlale	r3, r2, r1, r3
 8006898:	fb02 3301 	mlagt	r3, r2, r1, r3
 800689c:	f100 0001 	add.w	r0, r0, #1
 80068a0:	bfd4      	ite	le
 80068a2:	930a      	strle	r3, [sp, #40]	@ 0x28
 80068a4:	9308      	strgt	r3, [sp, #32]
 80068a6:	3701      	adds	r7, #1
 80068a8:	9019      	str	r0, [sp, #100]	@ 0x64
 80068aa:	e7bf      	b.n	800682c <_strtod_l+0x144>
 80068ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	9219      	str	r2, [sp, #100]	@ 0x64
 80068b2:	785a      	ldrb	r2, [r3, #1]
 80068b4:	b37f      	cbz	r7, 8006916 <_strtod_l+0x22e>
 80068b6:	4681      	mov	r9, r0
 80068b8:	463d      	mov	r5, r7
 80068ba:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80068be:	2b09      	cmp	r3, #9
 80068c0:	d912      	bls.n	80068e8 <_strtod_l+0x200>
 80068c2:	2301      	movs	r3, #1
 80068c4:	e7c4      	b.n	8006850 <_strtod_l+0x168>
 80068c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068c8:	3001      	adds	r0, #1
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	9219      	str	r2, [sp, #100]	@ 0x64
 80068ce:	785a      	ldrb	r2, [r3, #1]
 80068d0:	2a30      	cmp	r2, #48	@ 0x30
 80068d2:	d0f8      	beq.n	80068c6 <_strtod_l+0x1de>
 80068d4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80068d8:	2b08      	cmp	r3, #8
 80068da:	f200 84cb 	bhi.w	8007274 <_strtod_l+0xb8c>
 80068de:	4681      	mov	r9, r0
 80068e0:	2000      	movs	r0, #0
 80068e2:	4605      	mov	r5, r0
 80068e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80068e8:	3a30      	subs	r2, #48	@ 0x30
 80068ea:	f100 0301 	add.w	r3, r0, #1
 80068ee:	d02a      	beq.n	8006946 <_strtod_l+0x25e>
 80068f0:	4499      	add	r9, r3
 80068f2:	210a      	movs	r1, #10
 80068f4:	462b      	mov	r3, r5
 80068f6:	eb00 0c05 	add.w	ip, r0, r5
 80068fa:	4563      	cmp	r3, ip
 80068fc:	d10d      	bne.n	800691a <_strtod_l+0x232>
 80068fe:	1c69      	adds	r1, r5, #1
 8006900:	4401      	add	r1, r0
 8006902:	4428      	add	r0, r5
 8006904:	2808      	cmp	r0, #8
 8006906:	dc16      	bgt.n	8006936 <_strtod_l+0x24e>
 8006908:	230a      	movs	r3, #10
 800690a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800690c:	fb03 2300 	mla	r3, r3, r0, r2
 8006910:	930a      	str	r3, [sp, #40]	@ 0x28
 8006912:	2300      	movs	r3, #0
 8006914:	e018      	b.n	8006948 <_strtod_l+0x260>
 8006916:	4638      	mov	r0, r7
 8006918:	e7da      	b.n	80068d0 <_strtod_l+0x1e8>
 800691a:	2b08      	cmp	r3, #8
 800691c:	f103 0301 	add.w	r3, r3, #1
 8006920:	dc03      	bgt.n	800692a <_strtod_l+0x242>
 8006922:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006924:	434e      	muls	r6, r1
 8006926:	960a      	str	r6, [sp, #40]	@ 0x28
 8006928:	e7e7      	b.n	80068fa <_strtod_l+0x212>
 800692a:	2b10      	cmp	r3, #16
 800692c:	bfde      	ittt	le
 800692e:	9e08      	ldrle	r6, [sp, #32]
 8006930:	434e      	mulle	r6, r1
 8006932:	9608      	strle	r6, [sp, #32]
 8006934:	e7e1      	b.n	80068fa <_strtod_l+0x212>
 8006936:	280f      	cmp	r0, #15
 8006938:	dceb      	bgt.n	8006912 <_strtod_l+0x22a>
 800693a:	230a      	movs	r3, #10
 800693c:	9808      	ldr	r0, [sp, #32]
 800693e:	fb03 2300 	mla	r3, r3, r0, r2
 8006942:	9308      	str	r3, [sp, #32]
 8006944:	e7e5      	b.n	8006912 <_strtod_l+0x22a>
 8006946:	4629      	mov	r1, r5
 8006948:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800694a:	460d      	mov	r5, r1
 800694c:	1c50      	adds	r0, r2, #1
 800694e:	9019      	str	r0, [sp, #100]	@ 0x64
 8006950:	7852      	ldrb	r2, [r2, #1]
 8006952:	4618      	mov	r0, r3
 8006954:	e7b1      	b.n	80068ba <_strtod_l+0x1d2>
 8006956:	f04f 0900 	mov.w	r9, #0
 800695a:	2301      	movs	r3, #1
 800695c:	e77d      	b.n	800685a <_strtod_l+0x172>
 800695e:	f04f 0c00 	mov.w	ip, #0
 8006962:	1ca2      	adds	r2, r4, #2
 8006964:	9219      	str	r2, [sp, #100]	@ 0x64
 8006966:	78a2      	ldrb	r2, [r4, #2]
 8006968:	e785      	b.n	8006876 <_strtod_l+0x18e>
 800696a:	f04f 0c01 	mov.w	ip, #1
 800696e:	e7f8      	b.n	8006962 <_strtod_l+0x27a>
 8006970:	080087e8 	.word	0x080087e8
 8006974:	7ff00000 	.word	0x7ff00000
 8006978:	080087d0 	.word	0x080087d0
 800697c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800697e:	1c51      	adds	r1, r2, #1
 8006980:	9119      	str	r1, [sp, #100]	@ 0x64
 8006982:	7852      	ldrb	r2, [r2, #1]
 8006984:	2a30      	cmp	r2, #48	@ 0x30
 8006986:	d0f9      	beq.n	800697c <_strtod_l+0x294>
 8006988:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800698c:	2908      	cmp	r1, #8
 800698e:	f63f af78 	bhi.w	8006882 <_strtod_l+0x19a>
 8006992:	f04f 080a 	mov.w	r8, #10
 8006996:	3a30      	subs	r2, #48	@ 0x30
 8006998:	920e      	str	r2, [sp, #56]	@ 0x38
 800699a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800699c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800699e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80069a0:	1c56      	adds	r6, r2, #1
 80069a2:	9619      	str	r6, [sp, #100]	@ 0x64
 80069a4:	7852      	ldrb	r2, [r2, #1]
 80069a6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80069aa:	f1be 0f09 	cmp.w	lr, #9
 80069ae:	d939      	bls.n	8006a24 <_strtod_l+0x33c>
 80069b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80069b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80069b6:	1a76      	subs	r6, r6, r1
 80069b8:	2e08      	cmp	r6, #8
 80069ba:	dc03      	bgt.n	80069c4 <_strtod_l+0x2dc>
 80069bc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80069be:	4588      	cmp	r8, r1
 80069c0:	bfa8      	it	ge
 80069c2:	4688      	movge	r8, r1
 80069c4:	f1bc 0f00 	cmp.w	ip, #0
 80069c8:	d001      	beq.n	80069ce <_strtod_l+0x2e6>
 80069ca:	f1c8 0800 	rsb	r8, r8, #0
 80069ce:	2d00      	cmp	r5, #0
 80069d0:	d14e      	bne.n	8006a70 <_strtod_l+0x388>
 80069d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80069d4:	4308      	orrs	r0, r1
 80069d6:	f47f aec0 	bne.w	800675a <_strtod_l+0x72>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f47f aed6 	bne.w	800678c <_strtod_l+0xa4>
 80069e0:	2a69      	cmp	r2, #105	@ 0x69
 80069e2:	d028      	beq.n	8006a36 <_strtod_l+0x34e>
 80069e4:	dc25      	bgt.n	8006a32 <_strtod_l+0x34a>
 80069e6:	2a49      	cmp	r2, #73	@ 0x49
 80069e8:	d025      	beq.n	8006a36 <_strtod_l+0x34e>
 80069ea:	2a4e      	cmp	r2, #78	@ 0x4e
 80069ec:	f47f aece 	bne.w	800678c <_strtod_l+0xa4>
 80069f0:	499a      	ldr	r1, [pc, #616]	@ (8006c5c <_strtod_l+0x574>)
 80069f2:	a819      	add	r0, sp, #100	@ 0x64
 80069f4:	f001 f9de 	bl	8007db4 <__match>
 80069f8:	2800      	cmp	r0, #0
 80069fa:	f43f aec7 	beq.w	800678c <_strtod_l+0xa4>
 80069fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	2b28      	cmp	r3, #40	@ 0x28
 8006a04:	d12e      	bne.n	8006a64 <_strtod_l+0x37c>
 8006a06:	4996      	ldr	r1, [pc, #600]	@ (8006c60 <_strtod_l+0x578>)
 8006a08:	aa1c      	add	r2, sp, #112	@ 0x70
 8006a0a:	a819      	add	r0, sp, #100	@ 0x64
 8006a0c:	f001 f9e6 	bl	8007ddc <__hexnan>
 8006a10:	2805      	cmp	r0, #5
 8006a12:	d127      	bne.n	8006a64 <_strtod_l+0x37c>
 8006a14:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006a16:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006a1a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006a1e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006a22:	e69a      	b.n	800675a <_strtod_l+0x72>
 8006a24:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006a26:	fb08 2101 	mla	r1, r8, r1, r2
 8006a2a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006a2e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a30:	e7b5      	b.n	800699e <_strtod_l+0x2b6>
 8006a32:	2a6e      	cmp	r2, #110	@ 0x6e
 8006a34:	e7da      	b.n	80069ec <_strtod_l+0x304>
 8006a36:	498b      	ldr	r1, [pc, #556]	@ (8006c64 <_strtod_l+0x57c>)
 8006a38:	a819      	add	r0, sp, #100	@ 0x64
 8006a3a:	f001 f9bb 	bl	8007db4 <__match>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	f43f aea4 	beq.w	800678c <_strtod_l+0xa4>
 8006a44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a46:	4988      	ldr	r1, [pc, #544]	@ (8006c68 <_strtod_l+0x580>)
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	a819      	add	r0, sp, #100	@ 0x64
 8006a4c:	9319      	str	r3, [sp, #100]	@ 0x64
 8006a4e:	f001 f9b1 	bl	8007db4 <__match>
 8006a52:	b910      	cbnz	r0, 8006a5a <_strtod_l+0x372>
 8006a54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a56:	3301      	adds	r3, #1
 8006a58:	9319      	str	r3, [sp, #100]	@ 0x64
 8006a5a:	f04f 0a00 	mov.w	sl, #0
 8006a5e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006c6c <_strtod_l+0x584>
 8006a62:	e67a      	b.n	800675a <_strtod_l+0x72>
 8006a64:	4882      	ldr	r0, [pc, #520]	@ (8006c70 <_strtod_l+0x588>)
 8006a66:	f000 fee3 	bl	8007830 <nan>
 8006a6a:	4682      	mov	sl, r0
 8006a6c:	468b      	mov	fp, r1
 8006a6e:	e674      	b.n	800675a <_strtod_l+0x72>
 8006a70:	eba8 0309 	sub.w	r3, r8, r9
 8006a74:	2f00      	cmp	r7, #0
 8006a76:	bf08      	it	eq
 8006a78:	462f      	moveq	r7, r5
 8006a7a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006a7c:	2d10      	cmp	r5, #16
 8006a7e:	462c      	mov	r4, r5
 8006a80:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a82:	bfa8      	it	ge
 8006a84:	2410      	movge	r4, #16
 8006a86:	f7f9 fcad 	bl	80003e4 <__aeabi_ui2d>
 8006a8a:	2d09      	cmp	r5, #9
 8006a8c:	4682      	mov	sl, r0
 8006a8e:	468b      	mov	fp, r1
 8006a90:	dc11      	bgt.n	8006ab6 <_strtod_l+0x3ce>
 8006a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f43f ae60 	beq.w	800675a <_strtod_l+0x72>
 8006a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a9c:	dd76      	ble.n	8006b8c <_strtod_l+0x4a4>
 8006a9e:	2b16      	cmp	r3, #22
 8006aa0:	dc5d      	bgt.n	8006b5e <_strtod_l+0x476>
 8006aa2:	4974      	ldr	r1, [pc, #464]	@ (8006c74 <_strtod_l+0x58c>)
 8006aa4:	4652      	mov	r2, sl
 8006aa6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006aaa:	465b      	mov	r3, fp
 8006aac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ab0:	f7f9 fd12 	bl	80004d8 <__aeabi_dmul>
 8006ab4:	e7d9      	b.n	8006a6a <_strtod_l+0x382>
 8006ab6:	4b6f      	ldr	r3, [pc, #444]	@ (8006c74 <_strtod_l+0x58c>)
 8006ab8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006abc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006ac0:	f7f9 fd0a 	bl	80004d8 <__aeabi_dmul>
 8006ac4:	4682      	mov	sl, r0
 8006ac6:	9808      	ldr	r0, [sp, #32]
 8006ac8:	468b      	mov	fp, r1
 8006aca:	f7f9 fc8b 	bl	80003e4 <__aeabi_ui2d>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4650      	mov	r0, sl
 8006ad4:	4659      	mov	r1, fp
 8006ad6:	f7f9 fb49 	bl	800016c <__adddf3>
 8006ada:	2d0f      	cmp	r5, #15
 8006adc:	4682      	mov	sl, r0
 8006ade:	468b      	mov	fp, r1
 8006ae0:	ddd7      	ble.n	8006a92 <_strtod_l+0x3aa>
 8006ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ae4:	1b2c      	subs	r4, r5, r4
 8006ae6:	441c      	add	r4, r3
 8006ae8:	2c00      	cmp	r4, #0
 8006aea:	f340 8096 	ble.w	8006c1a <_strtod_l+0x532>
 8006aee:	f014 030f 	ands.w	r3, r4, #15
 8006af2:	d00a      	beq.n	8006b0a <_strtod_l+0x422>
 8006af4:	495f      	ldr	r1, [pc, #380]	@ (8006c74 <_strtod_l+0x58c>)
 8006af6:	4652      	mov	r2, sl
 8006af8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006afc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b00:	465b      	mov	r3, fp
 8006b02:	f7f9 fce9 	bl	80004d8 <__aeabi_dmul>
 8006b06:	4682      	mov	sl, r0
 8006b08:	468b      	mov	fp, r1
 8006b0a:	f034 040f 	bics.w	r4, r4, #15
 8006b0e:	d073      	beq.n	8006bf8 <_strtod_l+0x510>
 8006b10:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006b14:	dd48      	ble.n	8006ba8 <_strtod_l+0x4c0>
 8006b16:	2400      	movs	r4, #0
 8006b18:	46a0      	mov	r8, r4
 8006b1a:	46a1      	mov	r9, r4
 8006b1c:	940a      	str	r4, [sp, #40]	@ 0x28
 8006b1e:	2322      	movs	r3, #34	@ 0x22
 8006b20:	f04f 0a00 	mov.w	sl, #0
 8006b24:	9a05      	ldr	r2, [sp, #20]
 8006b26:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006c6c <_strtod_l+0x584>
 8006b2a:	6013      	str	r3, [r2, #0]
 8006b2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f43f ae13 	beq.w	800675a <_strtod_l+0x72>
 8006b34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b36:	9805      	ldr	r0, [sp, #20]
 8006b38:	f7ff f94c 	bl	8005dd4 <_Bfree>
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	9805      	ldr	r0, [sp, #20]
 8006b40:	f7ff f948 	bl	8005dd4 <_Bfree>
 8006b44:	4641      	mov	r1, r8
 8006b46:	9805      	ldr	r0, [sp, #20]
 8006b48:	f7ff f944 	bl	8005dd4 <_Bfree>
 8006b4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b4e:	9805      	ldr	r0, [sp, #20]
 8006b50:	f7ff f940 	bl	8005dd4 <_Bfree>
 8006b54:	4621      	mov	r1, r4
 8006b56:	9805      	ldr	r0, [sp, #20]
 8006b58:	f7ff f93c 	bl	8005dd4 <_Bfree>
 8006b5c:	e5fd      	b.n	800675a <_strtod_l+0x72>
 8006b5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b60:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006b64:	4293      	cmp	r3, r2
 8006b66:	dbbc      	blt.n	8006ae2 <_strtod_l+0x3fa>
 8006b68:	4c42      	ldr	r4, [pc, #264]	@ (8006c74 <_strtod_l+0x58c>)
 8006b6a:	f1c5 050f 	rsb	r5, r5, #15
 8006b6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006b72:	4652      	mov	r2, sl
 8006b74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b78:	465b      	mov	r3, fp
 8006b7a:	f7f9 fcad 	bl	80004d8 <__aeabi_dmul>
 8006b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b80:	1b5d      	subs	r5, r3, r5
 8006b82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006b86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006b8a:	e791      	b.n	8006ab0 <_strtod_l+0x3c8>
 8006b8c:	3316      	adds	r3, #22
 8006b8e:	dba8      	blt.n	8006ae2 <_strtod_l+0x3fa>
 8006b90:	4b38      	ldr	r3, [pc, #224]	@ (8006c74 <_strtod_l+0x58c>)
 8006b92:	eba9 0808 	sub.w	r8, r9, r8
 8006b96:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006b9a:	4650      	mov	r0, sl
 8006b9c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006ba0:	4659      	mov	r1, fp
 8006ba2:	f7f9 fdc3 	bl	800072c <__aeabi_ddiv>
 8006ba6:	e760      	b.n	8006a6a <_strtod_l+0x382>
 8006ba8:	4b33      	ldr	r3, [pc, #204]	@ (8006c78 <_strtod_l+0x590>)
 8006baa:	4650      	mov	r0, sl
 8006bac:	9308      	str	r3, [sp, #32]
 8006bae:	2300      	movs	r3, #0
 8006bb0:	4659      	mov	r1, fp
 8006bb2:	461e      	mov	r6, r3
 8006bb4:	1124      	asrs	r4, r4, #4
 8006bb6:	2c01      	cmp	r4, #1
 8006bb8:	dc21      	bgt.n	8006bfe <_strtod_l+0x516>
 8006bba:	b10b      	cbz	r3, 8006bc0 <_strtod_l+0x4d8>
 8006bbc:	4682      	mov	sl, r0
 8006bbe:	468b      	mov	fp, r1
 8006bc0:	492d      	ldr	r1, [pc, #180]	@ (8006c78 <_strtod_l+0x590>)
 8006bc2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006bc6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006bca:	4652      	mov	r2, sl
 8006bcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bd0:	465b      	mov	r3, fp
 8006bd2:	f7f9 fc81 	bl	80004d8 <__aeabi_dmul>
 8006bd6:	4b25      	ldr	r3, [pc, #148]	@ (8006c6c <_strtod_l+0x584>)
 8006bd8:	460a      	mov	r2, r1
 8006bda:	400b      	ands	r3, r1
 8006bdc:	4927      	ldr	r1, [pc, #156]	@ (8006c7c <_strtod_l+0x594>)
 8006bde:	4682      	mov	sl, r0
 8006be0:	428b      	cmp	r3, r1
 8006be2:	d898      	bhi.n	8006b16 <_strtod_l+0x42e>
 8006be4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006be8:	428b      	cmp	r3, r1
 8006bea:	bf86      	itte	hi
 8006bec:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8006bf0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006c80 <_strtod_l+0x598>
 8006bf4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	9308      	str	r3, [sp, #32]
 8006bfc:	e07a      	b.n	8006cf4 <_strtod_l+0x60c>
 8006bfe:	07e2      	lsls	r2, r4, #31
 8006c00:	d505      	bpl.n	8006c0e <_strtod_l+0x526>
 8006c02:	9b08      	ldr	r3, [sp, #32]
 8006c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c08:	f7f9 fc66 	bl	80004d8 <__aeabi_dmul>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	9a08      	ldr	r2, [sp, #32]
 8006c10:	3601      	adds	r6, #1
 8006c12:	3208      	adds	r2, #8
 8006c14:	1064      	asrs	r4, r4, #1
 8006c16:	9208      	str	r2, [sp, #32]
 8006c18:	e7cd      	b.n	8006bb6 <_strtod_l+0x4ce>
 8006c1a:	d0ed      	beq.n	8006bf8 <_strtod_l+0x510>
 8006c1c:	4264      	negs	r4, r4
 8006c1e:	f014 020f 	ands.w	r2, r4, #15
 8006c22:	d00a      	beq.n	8006c3a <_strtod_l+0x552>
 8006c24:	4b13      	ldr	r3, [pc, #76]	@ (8006c74 <_strtod_l+0x58c>)
 8006c26:	4650      	mov	r0, sl
 8006c28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c2c:	4659      	mov	r1, fp
 8006c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c32:	f7f9 fd7b 	bl	800072c <__aeabi_ddiv>
 8006c36:	4682      	mov	sl, r0
 8006c38:	468b      	mov	fp, r1
 8006c3a:	1124      	asrs	r4, r4, #4
 8006c3c:	d0dc      	beq.n	8006bf8 <_strtod_l+0x510>
 8006c3e:	2c1f      	cmp	r4, #31
 8006c40:	dd20      	ble.n	8006c84 <_strtod_l+0x59c>
 8006c42:	2400      	movs	r4, #0
 8006c44:	46a0      	mov	r8, r4
 8006c46:	46a1      	mov	r9, r4
 8006c48:	940a      	str	r4, [sp, #40]	@ 0x28
 8006c4a:	2322      	movs	r3, #34	@ 0x22
 8006c4c:	9a05      	ldr	r2, [sp, #20]
 8006c4e:	f04f 0a00 	mov.w	sl, #0
 8006c52:	f04f 0b00 	mov.w	fp, #0
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	e768      	b.n	8006b2c <_strtod_l+0x444>
 8006c5a:	bf00      	nop
 8006c5c:	080085bb 	.word	0x080085bb
 8006c60:	080087d4 	.word	0x080087d4
 8006c64:	080085b3 	.word	0x080085b3
 8006c68:	080085ea 	.word	0x080085ea
 8006c6c:	7ff00000 	.word	0x7ff00000
 8006c70:	0800897d 	.word	0x0800897d
 8006c74:	08008708 	.word	0x08008708
 8006c78:	080086e0 	.word	0x080086e0
 8006c7c:	7ca00000 	.word	0x7ca00000
 8006c80:	7fefffff 	.word	0x7fefffff
 8006c84:	f014 0310 	ands.w	r3, r4, #16
 8006c88:	bf18      	it	ne
 8006c8a:	236a      	movne	r3, #106	@ 0x6a
 8006c8c:	4650      	mov	r0, sl
 8006c8e:	9308      	str	r3, [sp, #32]
 8006c90:	4659      	mov	r1, fp
 8006c92:	2300      	movs	r3, #0
 8006c94:	4ea9      	ldr	r6, [pc, #676]	@ (8006f3c <_strtod_l+0x854>)
 8006c96:	07e2      	lsls	r2, r4, #31
 8006c98:	d504      	bpl.n	8006ca4 <_strtod_l+0x5bc>
 8006c9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c9e:	f7f9 fc1b 	bl	80004d8 <__aeabi_dmul>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	1064      	asrs	r4, r4, #1
 8006ca6:	f106 0608 	add.w	r6, r6, #8
 8006caa:	d1f4      	bne.n	8006c96 <_strtod_l+0x5ae>
 8006cac:	b10b      	cbz	r3, 8006cb2 <_strtod_l+0x5ca>
 8006cae:	4682      	mov	sl, r0
 8006cb0:	468b      	mov	fp, r1
 8006cb2:	9b08      	ldr	r3, [sp, #32]
 8006cb4:	b1b3      	cbz	r3, 8006ce4 <_strtod_l+0x5fc>
 8006cb6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006cba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	4659      	mov	r1, fp
 8006cc2:	dd0f      	ble.n	8006ce4 <_strtod_l+0x5fc>
 8006cc4:	2b1f      	cmp	r3, #31
 8006cc6:	dd57      	ble.n	8006d78 <_strtod_l+0x690>
 8006cc8:	2b34      	cmp	r3, #52	@ 0x34
 8006cca:	bfd8      	it	le
 8006ccc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8006cd0:	f04f 0a00 	mov.w	sl, #0
 8006cd4:	bfcf      	iteee	gt
 8006cd6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006cda:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006cde:	4093      	lslle	r3, r2
 8006ce0:	ea03 0b01 	andle.w	fp, r3, r1
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	4650      	mov	r0, sl
 8006cea:	4659      	mov	r1, fp
 8006cec:	f7f9 fe5c 	bl	80009a8 <__aeabi_dcmpeq>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	d1a6      	bne.n	8006c42 <_strtod_l+0x55a>
 8006cf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cf6:	463a      	mov	r2, r7
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006cfc:	462b      	mov	r3, r5
 8006cfe:	9805      	ldr	r0, [sp, #20]
 8006d00:	f7ff f8d0 	bl	8005ea4 <__s2b>
 8006d04:	900a      	str	r0, [sp, #40]	@ 0x28
 8006d06:	2800      	cmp	r0, #0
 8006d08:	f43f af05 	beq.w	8006b16 <_strtod_l+0x42e>
 8006d0c:	2400      	movs	r4, #0
 8006d0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d10:	eba9 0308 	sub.w	r3, r9, r8
 8006d14:	2a00      	cmp	r2, #0
 8006d16:	bfa8      	it	ge
 8006d18:	2300      	movge	r3, #0
 8006d1a:	46a0      	mov	r8, r4
 8006d1c:	9312      	str	r3, [sp, #72]	@ 0x48
 8006d1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006d22:	9316      	str	r3, [sp, #88]	@ 0x58
 8006d24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d26:	9805      	ldr	r0, [sp, #20]
 8006d28:	6859      	ldr	r1, [r3, #4]
 8006d2a:	f7ff f813 	bl	8005d54 <_Balloc>
 8006d2e:	4681      	mov	r9, r0
 8006d30:	2800      	cmp	r0, #0
 8006d32:	f43f aef4 	beq.w	8006b1e <_strtod_l+0x436>
 8006d36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d38:	300c      	adds	r0, #12
 8006d3a:	691a      	ldr	r2, [r3, #16]
 8006d3c:	f103 010c 	add.w	r1, r3, #12
 8006d40:	3202      	adds	r2, #2
 8006d42:	0092      	lsls	r2, r2, #2
 8006d44:	f000 fd66 	bl	8007814 <memcpy>
 8006d48:	ab1c      	add	r3, sp, #112	@ 0x70
 8006d4a:	9301      	str	r3, [sp, #4]
 8006d4c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	4652      	mov	r2, sl
 8006d52:	465b      	mov	r3, fp
 8006d54:	9805      	ldr	r0, [sp, #20]
 8006d56:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006d5a:	f7ff fbd5 	bl	8006508 <__d2b>
 8006d5e:	901a      	str	r0, [sp, #104]	@ 0x68
 8006d60:	2800      	cmp	r0, #0
 8006d62:	f43f aedc 	beq.w	8006b1e <_strtod_l+0x436>
 8006d66:	2101      	movs	r1, #1
 8006d68:	9805      	ldr	r0, [sp, #20]
 8006d6a:	f7ff f931 	bl	8005fd0 <__i2b>
 8006d6e:	4680      	mov	r8, r0
 8006d70:	b948      	cbnz	r0, 8006d86 <_strtod_l+0x69e>
 8006d72:	f04f 0800 	mov.w	r8, #0
 8006d76:	e6d2      	b.n	8006b1e <_strtod_l+0x436>
 8006d78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d80:	ea03 0a0a 	and.w	sl, r3, sl
 8006d84:	e7ae      	b.n	8006ce4 <_strtod_l+0x5fc>
 8006d86:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006d88:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006d8a:	2d00      	cmp	r5, #0
 8006d8c:	bfab      	itete	ge
 8006d8e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006d90:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006d92:	18ef      	addge	r7, r5, r3
 8006d94:	1b5e      	sublt	r6, r3, r5
 8006d96:	9b08      	ldr	r3, [sp, #32]
 8006d98:	bfa8      	it	ge
 8006d9a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006d9c:	eba5 0503 	sub.w	r5, r5, r3
 8006da0:	4415      	add	r5, r2
 8006da2:	4b67      	ldr	r3, [pc, #412]	@ (8006f40 <_strtod_l+0x858>)
 8006da4:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 8006da8:	bfb8      	it	lt
 8006daa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006dac:	429d      	cmp	r5, r3
 8006dae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006db2:	da50      	bge.n	8006e56 <_strtod_l+0x76e>
 8006db4:	1b5b      	subs	r3, r3, r5
 8006db6:	2b1f      	cmp	r3, #31
 8006db8:	f04f 0101 	mov.w	r1, #1
 8006dbc:	eba2 0203 	sub.w	r2, r2, r3
 8006dc0:	dc3d      	bgt.n	8006e3e <_strtod_l+0x756>
 8006dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8006dc6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006dc8:	2300      	movs	r3, #0
 8006dca:	9310      	str	r3, [sp, #64]	@ 0x40
 8006dcc:	18bd      	adds	r5, r7, r2
 8006dce:	9b08      	ldr	r3, [sp, #32]
 8006dd0:	42af      	cmp	r7, r5
 8006dd2:	4416      	add	r6, r2
 8006dd4:	441e      	add	r6, r3
 8006dd6:	463b      	mov	r3, r7
 8006dd8:	bfa8      	it	ge
 8006dda:	462b      	movge	r3, r5
 8006ddc:	42b3      	cmp	r3, r6
 8006dde:	bfa8      	it	ge
 8006de0:	4633      	movge	r3, r6
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	bfc2      	ittt	gt
 8006de6:	1aed      	subgt	r5, r5, r3
 8006de8:	1af6      	subgt	r6, r6, r3
 8006dea:	1aff      	subgt	r7, r7, r3
 8006dec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	dd16      	ble.n	8006e20 <_strtod_l+0x738>
 8006df2:	4641      	mov	r1, r8
 8006df4:	461a      	mov	r2, r3
 8006df6:	9805      	ldr	r0, [sp, #20]
 8006df8:	f7ff f9a8 	bl	800614c <__pow5mult>
 8006dfc:	4680      	mov	r8, r0
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d0b7      	beq.n	8006d72 <_strtod_l+0x68a>
 8006e02:	4601      	mov	r1, r0
 8006e04:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006e06:	9805      	ldr	r0, [sp, #20]
 8006e08:	f7ff f8f8 	bl	8005ffc <__multiply>
 8006e0c:	900e      	str	r0, [sp, #56]	@ 0x38
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	f43f ae85 	beq.w	8006b1e <_strtod_l+0x436>
 8006e14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e16:	9805      	ldr	r0, [sp, #20]
 8006e18:	f7fe ffdc 	bl	8005dd4 <_Bfree>
 8006e1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e20:	2d00      	cmp	r5, #0
 8006e22:	dc1d      	bgt.n	8006e60 <_strtod_l+0x778>
 8006e24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	dd23      	ble.n	8006e72 <_strtod_l+0x78a>
 8006e2a:	4649      	mov	r1, r9
 8006e2c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006e2e:	9805      	ldr	r0, [sp, #20]
 8006e30:	f7ff f98c 	bl	800614c <__pow5mult>
 8006e34:	4681      	mov	r9, r0
 8006e36:	b9e0      	cbnz	r0, 8006e72 <_strtod_l+0x78a>
 8006e38:	f04f 0900 	mov.w	r9, #0
 8006e3c:	e66f      	b.n	8006b1e <_strtod_l+0x436>
 8006e3e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006e42:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006e46:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006e4a:	35e2      	adds	r5, #226	@ 0xe2
 8006e4c:	fa01 f305 	lsl.w	r3, r1, r5
 8006e50:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e52:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006e54:	e7ba      	b.n	8006dcc <_strtod_l+0x6e4>
 8006e56:	2300      	movs	r3, #0
 8006e58:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e5e:	e7b5      	b.n	8006dcc <_strtod_l+0x6e4>
 8006e60:	462a      	mov	r2, r5
 8006e62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e64:	9805      	ldr	r0, [sp, #20]
 8006e66:	f7ff f9cb 	bl	8006200 <__lshift>
 8006e6a:	901a      	str	r0, [sp, #104]	@ 0x68
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	d1d9      	bne.n	8006e24 <_strtod_l+0x73c>
 8006e70:	e655      	b.n	8006b1e <_strtod_l+0x436>
 8006e72:	2e00      	cmp	r6, #0
 8006e74:	dd07      	ble.n	8006e86 <_strtod_l+0x79e>
 8006e76:	4649      	mov	r1, r9
 8006e78:	4632      	mov	r2, r6
 8006e7a:	9805      	ldr	r0, [sp, #20]
 8006e7c:	f7ff f9c0 	bl	8006200 <__lshift>
 8006e80:	4681      	mov	r9, r0
 8006e82:	2800      	cmp	r0, #0
 8006e84:	d0d8      	beq.n	8006e38 <_strtod_l+0x750>
 8006e86:	2f00      	cmp	r7, #0
 8006e88:	dd08      	ble.n	8006e9c <_strtod_l+0x7b4>
 8006e8a:	4641      	mov	r1, r8
 8006e8c:	463a      	mov	r2, r7
 8006e8e:	9805      	ldr	r0, [sp, #20]
 8006e90:	f7ff f9b6 	bl	8006200 <__lshift>
 8006e94:	4680      	mov	r8, r0
 8006e96:	2800      	cmp	r0, #0
 8006e98:	f43f ae41 	beq.w	8006b1e <_strtod_l+0x436>
 8006e9c:	464a      	mov	r2, r9
 8006e9e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ea0:	9805      	ldr	r0, [sp, #20]
 8006ea2:	f7ff fa35 	bl	8006310 <__mdiff>
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	f43f ae38 	beq.w	8006b1e <_strtod_l+0x436>
 8006eae:	68c3      	ldr	r3, [r0, #12]
 8006eb0:	4641      	mov	r1, r8
 8006eb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	60c3      	str	r3, [r0, #12]
 8006eb8:	f7ff fa0e 	bl	80062d8 <__mcmp>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	da45      	bge.n	8006f4c <_strtod_l+0x864>
 8006ec0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ec2:	ea53 030a 	orrs.w	r3, r3, sl
 8006ec6:	d16b      	bne.n	8006fa0 <_strtod_l+0x8b8>
 8006ec8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d167      	bne.n	8006fa0 <_strtod_l+0x8b8>
 8006ed0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006ed4:	0d1b      	lsrs	r3, r3, #20
 8006ed6:	051b      	lsls	r3, r3, #20
 8006ed8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006edc:	d960      	bls.n	8006fa0 <_strtod_l+0x8b8>
 8006ede:	6963      	ldr	r3, [r4, #20]
 8006ee0:	b913      	cbnz	r3, 8006ee8 <_strtod_l+0x800>
 8006ee2:	6923      	ldr	r3, [r4, #16]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	dd5b      	ble.n	8006fa0 <_strtod_l+0x8b8>
 8006ee8:	4621      	mov	r1, r4
 8006eea:	2201      	movs	r2, #1
 8006eec:	9805      	ldr	r0, [sp, #20]
 8006eee:	f7ff f987 	bl	8006200 <__lshift>
 8006ef2:	4641      	mov	r1, r8
 8006ef4:	4604      	mov	r4, r0
 8006ef6:	f7ff f9ef 	bl	80062d8 <__mcmp>
 8006efa:	2800      	cmp	r0, #0
 8006efc:	dd50      	ble.n	8006fa0 <_strtod_l+0x8b8>
 8006efe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006f02:	9a08      	ldr	r2, [sp, #32]
 8006f04:	0d1b      	lsrs	r3, r3, #20
 8006f06:	051b      	lsls	r3, r3, #20
 8006f08:	2a00      	cmp	r2, #0
 8006f0a:	d06a      	beq.n	8006fe2 <_strtod_l+0x8fa>
 8006f0c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006f10:	d867      	bhi.n	8006fe2 <_strtod_l+0x8fa>
 8006f12:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006f16:	f67f ae98 	bls.w	8006c4a <_strtod_l+0x562>
 8006f1a:	4650      	mov	r0, sl
 8006f1c:	4659      	mov	r1, fp
 8006f1e:	4b09      	ldr	r3, [pc, #36]	@ (8006f44 <_strtod_l+0x85c>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	f7f9 fad9 	bl	80004d8 <__aeabi_dmul>
 8006f26:	4b08      	ldr	r3, [pc, #32]	@ (8006f48 <_strtod_l+0x860>)
 8006f28:	4682      	mov	sl, r0
 8006f2a:	400b      	ands	r3, r1
 8006f2c:	468b      	mov	fp, r1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f47f ae00 	bne.w	8006b34 <_strtod_l+0x44c>
 8006f34:	2322      	movs	r3, #34	@ 0x22
 8006f36:	9a05      	ldr	r2, [sp, #20]
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	e5fb      	b.n	8006b34 <_strtod_l+0x44c>
 8006f3c:	08008800 	.word	0x08008800
 8006f40:	fffffc02 	.word	0xfffffc02
 8006f44:	39500000 	.word	0x39500000
 8006f48:	7ff00000 	.word	0x7ff00000
 8006f4c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006f50:	d165      	bne.n	800701e <_strtod_l+0x936>
 8006f52:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006f54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f58:	b35a      	cbz	r2, 8006fb2 <_strtod_l+0x8ca>
 8006f5a:	4a99      	ldr	r2, [pc, #612]	@ (80071c0 <_strtod_l+0xad8>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d12b      	bne.n	8006fb8 <_strtod_l+0x8d0>
 8006f60:	9b08      	ldr	r3, [sp, #32]
 8006f62:	4651      	mov	r1, sl
 8006f64:	b303      	cbz	r3, 8006fa8 <_strtod_l+0x8c0>
 8006f66:	465a      	mov	r2, fp
 8006f68:	4b96      	ldr	r3, [pc, #600]	@ (80071c4 <_strtod_l+0xadc>)
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006f70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f74:	d81b      	bhi.n	8006fae <_strtod_l+0x8c6>
 8006f76:	0d1b      	lsrs	r3, r3, #20
 8006f78:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f80:	4299      	cmp	r1, r3
 8006f82:	d119      	bne.n	8006fb8 <_strtod_l+0x8d0>
 8006f84:	4b90      	ldr	r3, [pc, #576]	@ (80071c8 <_strtod_l+0xae0>)
 8006f86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d102      	bne.n	8006f92 <_strtod_l+0x8aa>
 8006f8c:	3101      	adds	r1, #1
 8006f8e:	f43f adc6 	beq.w	8006b1e <_strtod_l+0x436>
 8006f92:	f04f 0a00 	mov.w	sl, #0
 8006f96:	4b8b      	ldr	r3, [pc, #556]	@ (80071c4 <_strtod_l+0xadc>)
 8006f98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f9a:	401a      	ands	r2, r3
 8006f9c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006fa0:	9b08      	ldr	r3, [sp, #32]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1b9      	bne.n	8006f1a <_strtod_l+0x832>
 8006fa6:	e5c5      	b.n	8006b34 <_strtod_l+0x44c>
 8006fa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006fac:	e7e8      	b.n	8006f80 <_strtod_l+0x898>
 8006fae:	4613      	mov	r3, r2
 8006fb0:	e7e6      	b.n	8006f80 <_strtod_l+0x898>
 8006fb2:	ea53 030a 	orrs.w	r3, r3, sl
 8006fb6:	d0a2      	beq.n	8006efe <_strtod_l+0x816>
 8006fb8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006fba:	b1db      	cbz	r3, 8006ff4 <_strtod_l+0x90c>
 8006fbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006fbe:	4213      	tst	r3, r2
 8006fc0:	d0ee      	beq.n	8006fa0 <_strtod_l+0x8b8>
 8006fc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fc4:	4650      	mov	r0, sl
 8006fc6:	4659      	mov	r1, fp
 8006fc8:	9a08      	ldr	r2, [sp, #32]
 8006fca:	b1bb      	cbz	r3, 8006ffc <_strtod_l+0x914>
 8006fcc:	f7ff fb68 	bl	80066a0 <sulp>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fd8:	f7f9 f8c8 	bl	800016c <__adddf3>
 8006fdc:	4682      	mov	sl, r0
 8006fde:	468b      	mov	fp, r1
 8006fe0:	e7de      	b.n	8006fa0 <_strtod_l+0x8b8>
 8006fe2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006fe6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006fea:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006fee:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006ff2:	e7d5      	b.n	8006fa0 <_strtod_l+0x8b8>
 8006ff4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ff6:	ea13 0f0a 	tst.w	r3, sl
 8006ffa:	e7e1      	b.n	8006fc0 <_strtod_l+0x8d8>
 8006ffc:	f7ff fb50 	bl	80066a0 <sulp>
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007008:	f7f9 f8ae 	bl	8000168 <__aeabi_dsub>
 800700c:	2200      	movs	r2, #0
 800700e:	2300      	movs	r3, #0
 8007010:	4682      	mov	sl, r0
 8007012:	468b      	mov	fp, r1
 8007014:	f7f9 fcc8 	bl	80009a8 <__aeabi_dcmpeq>
 8007018:	2800      	cmp	r0, #0
 800701a:	d0c1      	beq.n	8006fa0 <_strtod_l+0x8b8>
 800701c:	e615      	b.n	8006c4a <_strtod_l+0x562>
 800701e:	4641      	mov	r1, r8
 8007020:	4620      	mov	r0, r4
 8007022:	f7ff fac9 	bl	80065b8 <__ratio>
 8007026:	2200      	movs	r2, #0
 8007028:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800702c:	4606      	mov	r6, r0
 800702e:	460f      	mov	r7, r1
 8007030:	f7f9 fcce 	bl	80009d0 <__aeabi_dcmple>
 8007034:	2800      	cmp	r0, #0
 8007036:	d06d      	beq.n	8007114 <_strtod_l+0xa2c>
 8007038:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800703a:	2b00      	cmp	r3, #0
 800703c:	d178      	bne.n	8007130 <_strtod_l+0xa48>
 800703e:	f1ba 0f00 	cmp.w	sl, #0
 8007042:	d156      	bne.n	80070f2 <_strtod_l+0xa0a>
 8007044:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007046:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800704a:	2b00      	cmp	r3, #0
 800704c:	d158      	bne.n	8007100 <_strtod_l+0xa18>
 800704e:	2200      	movs	r2, #0
 8007050:	4630      	mov	r0, r6
 8007052:	4639      	mov	r1, r7
 8007054:	4b5d      	ldr	r3, [pc, #372]	@ (80071cc <_strtod_l+0xae4>)
 8007056:	f7f9 fcb1 	bl	80009bc <__aeabi_dcmplt>
 800705a:	2800      	cmp	r0, #0
 800705c:	d157      	bne.n	800710e <_strtod_l+0xa26>
 800705e:	4630      	mov	r0, r6
 8007060:	4639      	mov	r1, r7
 8007062:	2200      	movs	r2, #0
 8007064:	4b5a      	ldr	r3, [pc, #360]	@ (80071d0 <_strtod_l+0xae8>)
 8007066:	f7f9 fa37 	bl	80004d8 <__aeabi_dmul>
 800706a:	4606      	mov	r6, r0
 800706c:	460f      	mov	r7, r1
 800706e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007072:	9606      	str	r6, [sp, #24]
 8007074:	9307      	str	r3, [sp, #28]
 8007076:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800707a:	4d52      	ldr	r5, [pc, #328]	@ (80071c4 <_strtod_l+0xadc>)
 800707c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007080:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007082:	401d      	ands	r5, r3
 8007084:	4b53      	ldr	r3, [pc, #332]	@ (80071d4 <_strtod_l+0xaec>)
 8007086:	429d      	cmp	r5, r3
 8007088:	f040 80aa 	bne.w	80071e0 <_strtod_l+0xaf8>
 800708c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800708e:	4650      	mov	r0, sl
 8007090:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007094:	4659      	mov	r1, fp
 8007096:	f7ff f9cf 	bl	8006438 <__ulp>
 800709a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800709e:	f7f9 fa1b 	bl	80004d8 <__aeabi_dmul>
 80070a2:	4652      	mov	r2, sl
 80070a4:	465b      	mov	r3, fp
 80070a6:	f7f9 f861 	bl	800016c <__adddf3>
 80070aa:	460b      	mov	r3, r1
 80070ac:	4945      	ldr	r1, [pc, #276]	@ (80071c4 <_strtod_l+0xadc>)
 80070ae:	4a4a      	ldr	r2, [pc, #296]	@ (80071d8 <_strtod_l+0xaf0>)
 80070b0:	4019      	ands	r1, r3
 80070b2:	4291      	cmp	r1, r2
 80070b4:	4682      	mov	sl, r0
 80070b6:	d942      	bls.n	800713e <_strtod_l+0xa56>
 80070b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80070ba:	4b43      	ldr	r3, [pc, #268]	@ (80071c8 <_strtod_l+0xae0>)
 80070bc:	429a      	cmp	r2, r3
 80070be:	d103      	bne.n	80070c8 <_strtod_l+0x9e0>
 80070c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80070c2:	3301      	adds	r3, #1
 80070c4:	f43f ad2b 	beq.w	8006b1e <_strtod_l+0x436>
 80070c8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80070cc:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80071c8 <_strtod_l+0xae0>
 80070d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80070d2:	9805      	ldr	r0, [sp, #20]
 80070d4:	f7fe fe7e 	bl	8005dd4 <_Bfree>
 80070d8:	4649      	mov	r1, r9
 80070da:	9805      	ldr	r0, [sp, #20]
 80070dc:	f7fe fe7a 	bl	8005dd4 <_Bfree>
 80070e0:	4641      	mov	r1, r8
 80070e2:	9805      	ldr	r0, [sp, #20]
 80070e4:	f7fe fe76 	bl	8005dd4 <_Bfree>
 80070e8:	4621      	mov	r1, r4
 80070ea:	9805      	ldr	r0, [sp, #20]
 80070ec:	f7fe fe72 	bl	8005dd4 <_Bfree>
 80070f0:	e618      	b.n	8006d24 <_strtod_l+0x63c>
 80070f2:	f1ba 0f01 	cmp.w	sl, #1
 80070f6:	d103      	bne.n	8007100 <_strtod_l+0xa18>
 80070f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f43f ada5 	beq.w	8006c4a <_strtod_l+0x562>
 8007100:	2200      	movs	r2, #0
 8007102:	4b36      	ldr	r3, [pc, #216]	@ (80071dc <_strtod_l+0xaf4>)
 8007104:	2600      	movs	r6, #0
 8007106:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800710a:	4f30      	ldr	r7, [pc, #192]	@ (80071cc <_strtod_l+0xae4>)
 800710c:	e7b3      	b.n	8007076 <_strtod_l+0x98e>
 800710e:	2600      	movs	r6, #0
 8007110:	4f2f      	ldr	r7, [pc, #188]	@ (80071d0 <_strtod_l+0xae8>)
 8007112:	e7ac      	b.n	800706e <_strtod_l+0x986>
 8007114:	4630      	mov	r0, r6
 8007116:	4639      	mov	r1, r7
 8007118:	4b2d      	ldr	r3, [pc, #180]	@ (80071d0 <_strtod_l+0xae8>)
 800711a:	2200      	movs	r2, #0
 800711c:	f7f9 f9dc 	bl	80004d8 <__aeabi_dmul>
 8007120:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007122:	4606      	mov	r6, r0
 8007124:	460f      	mov	r7, r1
 8007126:	2b00      	cmp	r3, #0
 8007128:	d0a1      	beq.n	800706e <_strtod_l+0x986>
 800712a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800712e:	e7a2      	b.n	8007076 <_strtod_l+0x98e>
 8007130:	2200      	movs	r2, #0
 8007132:	4b26      	ldr	r3, [pc, #152]	@ (80071cc <_strtod_l+0xae4>)
 8007134:	4616      	mov	r6, r2
 8007136:	461f      	mov	r7, r3
 8007138:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800713c:	e79b      	b.n	8007076 <_strtod_l+0x98e>
 800713e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007142:	9b08      	ldr	r3, [sp, #32]
 8007144:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1c1      	bne.n	80070d0 <_strtod_l+0x9e8>
 800714c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007150:	0d1b      	lsrs	r3, r3, #20
 8007152:	051b      	lsls	r3, r3, #20
 8007154:	429d      	cmp	r5, r3
 8007156:	d1bb      	bne.n	80070d0 <_strtod_l+0x9e8>
 8007158:	4630      	mov	r0, r6
 800715a:	4639      	mov	r1, r7
 800715c:	f7f9 fffe 	bl	800115c <__aeabi_d2lz>
 8007160:	f7f9 f98c 	bl	800047c <__aeabi_l2d>
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	4630      	mov	r0, r6
 800716a:	4639      	mov	r1, r7
 800716c:	f7f8 fffc 	bl	8000168 <__aeabi_dsub>
 8007170:	460b      	mov	r3, r1
 8007172:	4602      	mov	r2, r0
 8007174:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007178:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800717c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800717e:	ea46 060a 	orr.w	r6, r6, sl
 8007182:	431e      	orrs	r6, r3
 8007184:	d069      	beq.n	800725a <_strtod_l+0xb72>
 8007186:	a30a      	add	r3, pc, #40	@ (adr r3, 80071b0 <_strtod_l+0xac8>)
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	f7f9 fc16 	bl	80009bc <__aeabi_dcmplt>
 8007190:	2800      	cmp	r0, #0
 8007192:	f47f accf 	bne.w	8006b34 <_strtod_l+0x44c>
 8007196:	a308      	add	r3, pc, #32	@ (adr r3, 80071b8 <_strtod_l+0xad0>)
 8007198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071a0:	f7f9 fc2a 	bl	80009f8 <__aeabi_dcmpgt>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	d093      	beq.n	80070d0 <_strtod_l+0x9e8>
 80071a8:	e4c4      	b.n	8006b34 <_strtod_l+0x44c>
 80071aa:	bf00      	nop
 80071ac:	f3af 8000 	nop.w
 80071b0:	94a03595 	.word	0x94a03595
 80071b4:	3fdfffff 	.word	0x3fdfffff
 80071b8:	35afe535 	.word	0x35afe535
 80071bc:	3fe00000 	.word	0x3fe00000
 80071c0:	000fffff 	.word	0x000fffff
 80071c4:	7ff00000 	.word	0x7ff00000
 80071c8:	7fefffff 	.word	0x7fefffff
 80071cc:	3ff00000 	.word	0x3ff00000
 80071d0:	3fe00000 	.word	0x3fe00000
 80071d4:	7fe00000 	.word	0x7fe00000
 80071d8:	7c9fffff 	.word	0x7c9fffff
 80071dc:	bff00000 	.word	0xbff00000
 80071e0:	9b08      	ldr	r3, [sp, #32]
 80071e2:	b323      	cbz	r3, 800722e <_strtod_l+0xb46>
 80071e4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80071e8:	d821      	bhi.n	800722e <_strtod_l+0xb46>
 80071ea:	a327      	add	r3, pc, #156	@ (adr r3, 8007288 <_strtod_l+0xba0>)
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	4630      	mov	r0, r6
 80071f2:	4639      	mov	r1, r7
 80071f4:	f7f9 fbec 	bl	80009d0 <__aeabi_dcmple>
 80071f8:	b1a0      	cbz	r0, 8007224 <_strtod_l+0xb3c>
 80071fa:	4639      	mov	r1, r7
 80071fc:	4630      	mov	r0, r6
 80071fe:	f7f9 fc43 	bl	8000a88 <__aeabi_d2uiz>
 8007202:	2801      	cmp	r0, #1
 8007204:	bf38      	it	cc
 8007206:	2001      	movcc	r0, #1
 8007208:	f7f9 f8ec 	bl	80003e4 <__aeabi_ui2d>
 800720c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800720e:	4606      	mov	r6, r0
 8007210:	460f      	mov	r7, r1
 8007212:	b9fb      	cbnz	r3, 8007254 <_strtod_l+0xb6c>
 8007214:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007218:	9014      	str	r0, [sp, #80]	@ 0x50
 800721a:	9315      	str	r3, [sp, #84]	@ 0x54
 800721c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007220:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007224:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007226:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800722a:	1b5b      	subs	r3, r3, r5
 800722c:	9311      	str	r3, [sp, #68]	@ 0x44
 800722e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007232:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007236:	f7ff f8ff 	bl	8006438 <__ulp>
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	4650      	mov	r0, sl
 8007240:	4659      	mov	r1, fp
 8007242:	f7f9 f949 	bl	80004d8 <__aeabi_dmul>
 8007246:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800724a:	f7f8 ff8f 	bl	800016c <__adddf3>
 800724e:	4682      	mov	sl, r0
 8007250:	468b      	mov	fp, r1
 8007252:	e776      	b.n	8007142 <_strtod_l+0xa5a>
 8007254:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007258:	e7e0      	b.n	800721c <_strtod_l+0xb34>
 800725a:	a30d      	add	r3, pc, #52	@ (adr r3, 8007290 <_strtod_l+0xba8>)
 800725c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007260:	f7f9 fbac 	bl	80009bc <__aeabi_dcmplt>
 8007264:	e79e      	b.n	80071a4 <_strtod_l+0xabc>
 8007266:	2300      	movs	r3, #0
 8007268:	930b      	str	r3, [sp, #44]	@ 0x2c
 800726a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800726c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800726e:	6013      	str	r3, [r2, #0]
 8007270:	f7ff ba77 	b.w	8006762 <_strtod_l+0x7a>
 8007274:	2a65      	cmp	r2, #101	@ 0x65
 8007276:	f43f ab6e 	beq.w	8006956 <_strtod_l+0x26e>
 800727a:	2a45      	cmp	r2, #69	@ 0x45
 800727c:	f43f ab6b 	beq.w	8006956 <_strtod_l+0x26e>
 8007280:	2301      	movs	r3, #1
 8007282:	f7ff bba6 	b.w	80069d2 <_strtod_l+0x2ea>
 8007286:	bf00      	nop
 8007288:	ffc00000 	.word	0xffc00000
 800728c:	41dfffff 	.word	0x41dfffff
 8007290:	94a03595 	.word	0x94a03595
 8007294:	3fcfffff 	.word	0x3fcfffff

08007298 <_strtod_r>:
 8007298:	4b01      	ldr	r3, [pc, #4]	@ (80072a0 <_strtod_r+0x8>)
 800729a:	f7ff ba25 	b.w	80066e8 <_strtod_l>
 800729e:	bf00      	nop
 80072a0:	20000068 	.word	0x20000068

080072a4 <_strtol_l.constprop.0>:
 80072a4:	2b24      	cmp	r3, #36	@ 0x24
 80072a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072aa:	4686      	mov	lr, r0
 80072ac:	4690      	mov	r8, r2
 80072ae:	d801      	bhi.n	80072b4 <_strtol_l.constprop.0+0x10>
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d106      	bne.n	80072c2 <_strtol_l.constprop.0+0x1e>
 80072b4:	f7fd fdbe 	bl	8004e34 <__errno>
 80072b8:	2316      	movs	r3, #22
 80072ba:	6003      	str	r3, [r0, #0]
 80072bc:	2000      	movs	r0, #0
 80072be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072c2:	460d      	mov	r5, r1
 80072c4:	4833      	ldr	r0, [pc, #204]	@ (8007394 <_strtol_l.constprop.0+0xf0>)
 80072c6:	462a      	mov	r2, r5
 80072c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072cc:	5d06      	ldrb	r6, [r0, r4]
 80072ce:	f016 0608 	ands.w	r6, r6, #8
 80072d2:	d1f8      	bne.n	80072c6 <_strtol_l.constprop.0+0x22>
 80072d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80072d6:	d12d      	bne.n	8007334 <_strtol_l.constprop.0+0x90>
 80072d8:	2601      	movs	r6, #1
 80072da:	782c      	ldrb	r4, [r5, #0]
 80072dc:	1c95      	adds	r5, r2, #2
 80072de:	f033 0210 	bics.w	r2, r3, #16
 80072e2:	d109      	bne.n	80072f8 <_strtol_l.constprop.0+0x54>
 80072e4:	2c30      	cmp	r4, #48	@ 0x30
 80072e6:	d12a      	bne.n	800733e <_strtol_l.constprop.0+0x9a>
 80072e8:	782a      	ldrb	r2, [r5, #0]
 80072ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80072ee:	2a58      	cmp	r2, #88	@ 0x58
 80072f0:	d125      	bne.n	800733e <_strtol_l.constprop.0+0x9a>
 80072f2:	2310      	movs	r3, #16
 80072f4:	786c      	ldrb	r4, [r5, #1]
 80072f6:	3502      	adds	r5, #2
 80072f8:	2200      	movs	r2, #0
 80072fa:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80072fe:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007302:	fbbc f9f3 	udiv	r9, ip, r3
 8007306:	4610      	mov	r0, r2
 8007308:	fb03 ca19 	mls	sl, r3, r9, ip
 800730c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007310:	2f09      	cmp	r7, #9
 8007312:	d81b      	bhi.n	800734c <_strtol_l.constprop.0+0xa8>
 8007314:	463c      	mov	r4, r7
 8007316:	42a3      	cmp	r3, r4
 8007318:	dd27      	ble.n	800736a <_strtol_l.constprop.0+0xc6>
 800731a:	1c57      	adds	r7, r2, #1
 800731c:	d007      	beq.n	800732e <_strtol_l.constprop.0+0x8a>
 800731e:	4581      	cmp	r9, r0
 8007320:	d320      	bcc.n	8007364 <_strtol_l.constprop.0+0xc0>
 8007322:	d101      	bne.n	8007328 <_strtol_l.constprop.0+0x84>
 8007324:	45a2      	cmp	sl, r4
 8007326:	db1d      	blt.n	8007364 <_strtol_l.constprop.0+0xc0>
 8007328:	2201      	movs	r2, #1
 800732a:	fb00 4003 	mla	r0, r0, r3, r4
 800732e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007332:	e7eb      	b.n	800730c <_strtol_l.constprop.0+0x68>
 8007334:	2c2b      	cmp	r4, #43	@ 0x2b
 8007336:	bf04      	itt	eq
 8007338:	782c      	ldrbeq	r4, [r5, #0]
 800733a:	1c95      	addeq	r5, r2, #2
 800733c:	e7cf      	b.n	80072de <_strtol_l.constprop.0+0x3a>
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1da      	bne.n	80072f8 <_strtol_l.constprop.0+0x54>
 8007342:	2c30      	cmp	r4, #48	@ 0x30
 8007344:	bf0c      	ite	eq
 8007346:	2308      	moveq	r3, #8
 8007348:	230a      	movne	r3, #10
 800734a:	e7d5      	b.n	80072f8 <_strtol_l.constprop.0+0x54>
 800734c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007350:	2f19      	cmp	r7, #25
 8007352:	d801      	bhi.n	8007358 <_strtol_l.constprop.0+0xb4>
 8007354:	3c37      	subs	r4, #55	@ 0x37
 8007356:	e7de      	b.n	8007316 <_strtol_l.constprop.0+0x72>
 8007358:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800735c:	2f19      	cmp	r7, #25
 800735e:	d804      	bhi.n	800736a <_strtol_l.constprop.0+0xc6>
 8007360:	3c57      	subs	r4, #87	@ 0x57
 8007362:	e7d8      	b.n	8007316 <_strtol_l.constprop.0+0x72>
 8007364:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007368:	e7e1      	b.n	800732e <_strtol_l.constprop.0+0x8a>
 800736a:	1c53      	adds	r3, r2, #1
 800736c:	d108      	bne.n	8007380 <_strtol_l.constprop.0+0xdc>
 800736e:	2322      	movs	r3, #34	@ 0x22
 8007370:	4660      	mov	r0, ip
 8007372:	f8ce 3000 	str.w	r3, [lr]
 8007376:	f1b8 0f00 	cmp.w	r8, #0
 800737a:	d0a0      	beq.n	80072be <_strtol_l.constprop.0+0x1a>
 800737c:	1e69      	subs	r1, r5, #1
 800737e:	e006      	b.n	800738e <_strtol_l.constprop.0+0xea>
 8007380:	b106      	cbz	r6, 8007384 <_strtol_l.constprop.0+0xe0>
 8007382:	4240      	negs	r0, r0
 8007384:	f1b8 0f00 	cmp.w	r8, #0
 8007388:	d099      	beq.n	80072be <_strtol_l.constprop.0+0x1a>
 800738a:	2a00      	cmp	r2, #0
 800738c:	d1f6      	bne.n	800737c <_strtol_l.constprop.0+0xd8>
 800738e:	f8c8 1000 	str.w	r1, [r8]
 8007392:	e794      	b.n	80072be <_strtol_l.constprop.0+0x1a>
 8007394:	08008829 	.word	0x08008829

08007398 <_strtol_r>:
 8007398:	f7ff bf84 	b.w	80072a4 <_strtol_l.constprop.0>

0800739c <__ssputs_r>:
 800739c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a0:	461f      	mov	r7, r3
 80073a2:	688e      	ldr	r6, [r1, #8]
 80073a4:	4682      	mov	sl, r0
 80073a6:	42be      	cmp	r6, r7
 80073a8:	460c      	mov	r4, r1
 80073aa:	4690      	mov	r8, r2
 80073ac:	680b      	ldr	r3, [r1, #0]
 80073ae:	d82d      	bhi.n	800740c <__ssputs_r+0x70>
 80073b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80073b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80073b8:	d026      	beq.n	8007408 <__ssputs_r+0x6c>
 80073ba:	6965      	ldr	r5, [r4, #20]
 80073bc:	6909      	ldr	r1, [r1, #16]
 80073be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073c2:	eba3 0901 	sub.w	r9, r3, r1
 80073c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073ca:	1c7b      	adds	r3, r7, #1
 80073cc:	444b      	add	r3, r9
 80073ce:	106d      	asrs	r5, r5, #1
 80073d0:	429d      	cmp	r5, r3
 80073d2:	bf38      	it	cc
 80073d4:	461d      	movcc	r5, r3
 80073d6:	0553      	lsls	r3, r2, #21
 80073d8:	d527      	bpl.n	800742a <__ssputs_r+0x8e>
 80073da:	4629      	mov	r1, r5
 80073dc:	f7fe fc2e 	bl	8005c3c <_malloc_r>
 80073e0:	4606      	mov	r6, r0
 80073e2:	b360      	cbz	r0, 800743e <__ssputs_r+0xa2>
 80073e4:	464a      	mov	r2, r9
 80073e6:	6921      	ldr	r1, [r4, #16]
 80073e8:	f000 fa14 	bl	8007814 <memcpy>
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80073f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073f6:	81a3      	strh	r3, [r4, #12]
 80073f8:	6126      	str	r6, [r4, #16]
 80073fa:	444e      	add	r6, r9
 80073fc:	6026      	str	r6, [r4, #0]
 80073fe:	463e      	mov	r6, r7
 8007400:	6165      	str	r5, [r4, #20]
 8007402:	eba5 0509 	sub.w	r5, r5, r9
 8007406:	60a5      	str	r5, [r4, #8]
 8007408:	42be      	cmp	r6, r7
 800740a:	d900      	bls.n	800740e <__ssputs_r+0x72>
 800740c:	463e      	mov	r6, r7
 800740e:	4632      	mov	r2, r6
 8007410:	4641      	mov	r1, r8
 8007412:	6820      	ldr	r0, [r4, #0]
 8007414:	f000 f9c2 	bl	800779c <memmove>
 8007418:	2000      	movs	r0, #0
 800741a:	68a3      	ldr	r3, [r4, #8]
 800741c:	1b9b      	subs	r3, r3, r6
 800741e:	60a3      	str	r3, [r4, #8]
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	4433      	add	r3, r6
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800742a:	462a      	mov	r2, r5
 800742c:	f000 fd83 	bl	8007f36 <_realloc_r>
 8007430:	4606      	mov	r6, r0
 8007432:	2800      	cmp	r0, #0
 8007434:	d1e0      	bne.n	80073f8 <__ssputs_r+0x5c>
 8007436:	4650      	mov	r0, sl
 8007438:	6921      	ldr	r1, [r4, #16]
 800743a:	f7fe fb8d 	bl	8005b58 <_free_r>
 800743e:	230c      	movs	r3, #12
 8007440:	f8ca 3000 	str.w	r3, [sl]
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800744a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800744e:	81a3      	strh	r3, [r4, #12]
 8007450:	e7e9      	b.n	8007426 <__ssputs_r+0x8a>
	...

08007454 <_svfiprintf_r>:
 8007454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007458:	4698      	mov	r8, r3
 800745a:	898b      	ldrh	r3, [r1, #12]
 800745c:	4607      	mov	r7, r0
 800745e:	061b      	lsls	r3, r3, #24
 8007460:	460d      	mov	r5, r1
 8007462:	4614      	mov	r4, r2
 8007464:	b09d      	sub	sp, #116	@ 0x74
 8007466:	d510      	bpl.n	800748a <_svfiprintf_r+0x36>
 8007468:	690b      	ldr	r3, [r1, #16]
 800746a:	b973      	cbnz	r3, 800748a <_svfiprintf_r+0x36>
 800746c:	2140      	movs	r1, #64	@ 0x40
 800746e:	f7fe fbe5 	bl	8005c3c <_malloc_r>
 8007472:	6028      	str	r0, [r5, #0]
 8007474:	6128      	str	r0, [r5, #16]
 8007476:	b930      	cbnz	r0, 8007486 <_svfiprintf_r+0x32>
 8007478:	230c      	movs	r3, #12
 800747a:	603b      	str	r3, [r7, #0]
 800747c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007480:	b01d      	add	sp, #116	@ 0x74
 8007482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007486:	2340      	movs	r3, #64	@ 0x40
 8007488:	616b      	str	r3, [r5, #20]
 800748a:	2300      	movs	r3, #0
 800748c:	9309      	str	r3, [sp, #36]	@ 0x24
 800748e:	2320      	movs	r3, #32
 8007490:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007494:	2330      	movs	r3, #48	@ 0x30
 8007496:	f04f 0901 	mov.w	r9, #1
 800749a:	f8cd 800c 	str.w	r8, [sp, #12]
 800749e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007638 <_svfiprintf_r+0x1e4>
 80074a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80074a6:	4623      	mov	r3, r4
 80074a8:	469a      	mov	sl, r3
 80074aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074ae:	b10a      	cbz	r2, 80074b4 <_svfiprintf_r+0x60>
 80074b0:	2a25      	cmp	r2, #37	@ 0x25
 80074b2:	d1f9      	bne.n	80074a8 <_svfiprintf_r+0x54>
 80074b4:	ebba 0b04 	subs.w	fp, sl, r4
 80074b8:	d00b      	beq.n	80074d2 <_svfiprintf_r+0x7e>
 80074ba:	465b      	mov	r3, fp
 80074bc:	4622      	mov	r2, r4
 80074be:	4629      	mov	r1, r5
 80074c0:	4638      	mov	r0, r7
 80074c2:	f7ff ff6b 	bl	800739c <__ssputs_r>
 80074c6:	3001      	adds	r0, #1
 80074c8:	f000 80a7 	beq.w	800761a <_svfiprintf_r+0x1c6>
 80074cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074ce:	445a      	add	r2, fp
 80074d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80074d2:	f89a 3000 	ldrb.w	r3, [sl]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 809f 	beq.w	800761a <_svfiprintf_r+0x1c6>
 80074dc:	2300      	movs	r3, #0
 80074de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80074e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074e6:	f10a 0a01 	add.w	sl, sl, #1
 80074ea:	9304      	str	r3, [sp, #16]
 80074ec:	9307      	str	r3, [sp, #28]
 80074ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80074f4:	4654      	mov	r4, sl
 80074f6:	2205      	movs	r2, #5
 80074f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074fc:	484e      	ldr	r0, [pc, #312]	@ (8007638 <_svfiprintf_r+0x1e4>)
 80074fe:	f7fd fcc6 	bl	8004e8e <memchr>
 8007502:	9a04      	ldr	r2, [sp, #16]
 8007504:	b9d8      	cbnz	r0, 800753e <_svfiprintf_r+0xea>
 8007506:	06d0      	lsls	r0, r2, #27
 8007508:	bf44      	itt	mi
 800750a:	2320      	movmi	r3, #32
 800750c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007510:	0711      	lsls	r1, r2, #28
 8007512:	bf44      	itt	mi
 8007514:	232b      	movmi	r3, #43	@ 0x2b
 8007516:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800751a:	f89a 3000 	ldrb.w	r3, [sl]
 800751e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007520:	d015      	beq.n	800754e <_svfiprintf_r+0xfa>
 8007522:	4654      	mov	r4, sl
 8007524:	2000      	movs	r0, #0
 8007526:	f04f 0c0a 	mov.w	ip, #10
 800752a:	9a07      	ldr	r2, [sp, #28]
 800752c:	4621      	mov	r1, r4
 800752e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007532:	3b30      	subs	r3, #48	@ 0x30
 8007534:	2b09      	cmp	r3, #9
 8007536:	d94b      	bls.n	80075d0 <_svfiprintf_r+0x17c>
 8007538:	b1b0      	cbz	r0, 8007568 <_svfiprintf_r+0x114>
 800753a:	9207      	str	r2, [sp, #28]
 800753c:	e014      	b.n	8007568 <_svfiprintf_r+0x114>
 800753e:	eba0 0308 	sub.w	r3, r0, r8
 8007542:	fa09 f303 	lsl.w	r3, r9, r3
 8007546:	4313      	orrs	r3, r2
 8007548:	46a2      	mov	sl, r4
 800754a:	9304      	str	r3, [sp, #16]
 800754c:	e7d2      	b.n	80074f4 <_svfiprintf_r+0xa0>
 800754e:	9b03      	ldr	r3, [sp, #12]
 8007550:	1d19      	adds	r1, r3, #4
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	9103      	str	r1, [sp, #12]
 8007556:	2b00      	cmp	r3, #0
 8007558:	bfbb      	ittet	lt
 800755a:	425b      	neglt	r3, r3
 800755c:	f042 0202 	orrlt.w	r2, r2, #2
 8007560:	9307      	strge	r3, [sp, #28]
 8007562:	9307      	strlt	r3, [sp, #28]
 8007564:	bfb8      	it	lt
 8007566:	9204      	strlt	r2, [sp, #16]
 8007568:	7823      	ldrb	r3, [r4, #0]
 800756a:	2b2e      	cmp	r3, #46	@ 0x2e
 800756c:	d10a      	bne.n	8007584 <_svfiprintf_r+0x130>
 800756e:	7863      	ldrb	r3, [r4, #1]
 8007570:	2b2a      	cmp	r3, #42	@ 0x2a
 8007572:	d132      	bne.n	80075da <_svfiprintf_r+0x186>
 8007574:	9b03      	ldr	r3, [sp, #12]
 8007576:	3402      	adds	r4, #2
 8007578:	1d1a      	adds	r2, r3, #4
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	9203      	str	r2, [sp, #12]
 800757e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007582:	9305      	str	r3, [sp, #20]
 8007584:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800763c <_svfiprintf_r+0x1e8>
 8007588:	2203      	movs	r2, #3
 800758a:	4650      	mov	r0, sl
 800758c:	7821      	ldrb	r1, [r4, #0]
 800758e:	f7fd fc7e 	bl	8004e8e <memchr>
 8007592:	b138      	cbz	r0, 80075a4 <_svfiprintf_r+0x150>
 8007594:	2240      	movs	r2, #64	@ 0x40
 8007596:	9b04      	ldr	r3, [sp, #16]
 8007598:	eba0 000a 	sub.w	r0, r0, sl
 800759c:	4082      	lsls	r2, r0
 800759e:	4313      	orrs	r3, r2
 80075a0:	3401      	adds	r4, #1
 80075a2:	9304      	str	r3, [sp, #16]
 80075a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075a8:	2206      	movs	r2, #6
 80075aa:	4825      	ldr	r0, [pc, #148]	@ (8007640 <_svfiprintf_r+0x1ec>)
 80075ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80075b0:	f7fd fc6d 	bl	8004e8e <memchr>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	d036      	beq.n	8007626 <_svfiprintf_r+0x1d2>
 80075b8:	4b22      	ldr	r3, [pc, #136]	@ (8007644 <_svfiprintf_r+0x1f0>)
 80075ba:	bb1b      	cbnz	r3, 8007604 <_svfiprintf_r+0x1b0>
 80075bc:	9b03      	ldr	r3, [sp, #12]
 80075be:	3307      	adds	r3, #7
 80075c0:	f023 0307 	bic.w	r3, r3, #7
 80075c4:	3308      	adds	r3, #8
 80075c6:	9303      	str	r3, [sp, #12]
 80075c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ca:	4433      	add	r3, r6
 80075cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ce:	e76a      	b.n	80074a6 <_svfiprintf_r+0x52>
 80075d0:	460c      	mov	r4, r1
 80075d2:	2001      	movs	r0, #1
 80075d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80075d8:	e7a8      	b.n	800752c <_svfiprintf_r+0xd8>
 80075da:	2300      	movs	r3, #0
 80075dc:	f04f 0c0a 	mov.w	ip, #10
 80075e0:	4619      	mov	r1, r3
 80075e2:	3401      	adds	r4, #1
 80075e4:	9305      	str	r3, [sp, #20]
 80075e6:	4620      	mov	r0, r4
 80075e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075ec:	3a30      	subs	r2, #48	@ 0x30
 80075ee:	2a09      	cmp	r2, #9
 80075f0:	d903      	bls.n	80075fa <_svfiprintf_r+0x1a6>
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0c6      	beq.n	8007584 <_svfiprintf_r+0x130>
 80075f6:	9105      	str	r1, [sp, #20]
 80075f8:	e7c4      	b.n	8007584 <_svfiprintf_r+0x130>
 80075fa:	4604      	mov	r4, r0
 80075fc:	2301      	movs	r3, #1
 80075fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007602:	e7f0      	b.n	80075e6 <_svfiprintf_r+0x192>
 8007604:	ab03      	add	r3, sp, #12
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	462a      	mov	r2, r5
 800760a:	4638      	mov	r0, r7
 800760c:	4b0e      	ldr	r3, [pc, #56]	@ (8007648 <_svfiprintf_r+0x1f4>)
 800760e:	a904      	add	r1, sp, #16
 8007610:	f7fc fcca 	bl	8003fa8 <_printf_float>
 8007614:	1c42      	adds	r2, r0, #1
 8007616:	4606      	mov	r6, r0
 8007618:	d1d6      	bne.n	80075c8 <_svfiprintf_r+0x174>
 800761a:	89ab      	ldrh	r3, [r5, #12]
 800761c:	065b      	lsls	r3, r3, #25
 800761e:	f53f af2d 	bmi.w	800747c <_svfiprintf_r+0x28>
 8007622:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007624:	e72c      	b.n	8007480 <_svfiprintf_r+0x2c>
 8007626:	ab03      	add	r3, sp, #12
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	462a      	mov	r2, r5
 800762c:	4638      	mov	r0, r7
 800762e:	4b06      	ldr	r3, [pc, #24]	@ (8007648 <_svfiprintf_r+0x1f4>)
 8007630:	a904      	add	r1, sp, #16
 8007632:	f7fc ff57 	bl	80044e4 <_printf_i>
 8007636:	e7ed      	b.n	8007614 <_svfiprintf_r+0x1c0>
 8007638:	08008929 	.word	0x08008929
 800763c:	0800892f 	.word	0x0800892f
 8007640:	08008933 	.word	0x08008933
 8007644:	08003fa9 	.word	0x08003fa9
 8007648:	0800739d 	.word	0x0800739d

0800764c <__sflush_r>:
 800764c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007652:	0716      	lsls	r6, r2, #28
 8007654:	4605      	mov	r5, r0
 8007656:	460c      	mov	r4, r1
 8007658:	d454      	bmi.n	8007704 <__sflush_r+0xb8>
 800765a:	684b      	ldr	r3, [r1, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	dc02      	bgt.n	8007666 <__sflush_r+0x1a>
 8007660:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007662:	2b00      	cmp	r3, #0
 8007664:	dd48      	ble.n	80076f8 <__sflush_r+0xac>
 8007666:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007668:	2e00      	cmp	r6, #0
 800766a:	d045      	beq.n	80076f8 <__sflush_r+0xac>
 800766c:	2300      	movs	r3, #0
 800766e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007672:	682f      	ldr	r7, [r5, #0]
 8007674:	6a21      	ldr	r1, [r4, #32]
 8007676:	602b      	str	r3, [r5, #0]
 8007678:	d030      	beq.n	80076dc <__sflush_r+0x90>
 800767a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800767c:	89a3      	ldrh	r3, [r4, #12]
 800767e:	0759      	lsls	r1, r3, #29
 8007680:	d505      	bpl.n	800768e <__sflush_r+0x42>
 8007682:	6863      	ldr	r3, [r4, #4]
 8007684:	1ad2      	subs	r2, r2, r3
 8007686:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007688:	b10b      	cbz	r3, 800768e <__sflush_r+0x42>
 800768a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800768c:	1ad2      	subs	r2, r2, r3
 800768e:	2300      	movs	r3, #0
 8007690:	4628      	mov	r0, r5
 8007692:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007694:	6a21      	ldr	r1, [r4, #32]
 8007696:	47b0      	blx	r6
 8007698:	1c43      	adds	r3, r0, #1
 800769a:	89a3      	ldrh	r3, [r4, #12]
 800769c:	d106      	bne.n	80076ac <__sflush_r+0x60>
 800769e:	6829      	ldr	r1, [r5, #0]
 80076a0:	291d      	cmp	r1, #29
 80076a2:	d82b      	bhi.n	80076fc <__sflush_r+0xb0>
 80076a4:	4a28      	ldr	r2, [pc, #160]	@ (8007748 <__sflush_r+0xfc>)
 80076a6:	410a      	asrs	r2, r1
 80076a8:	07d6      	lsls	r6, r2, #31
 80076aa:	d427      	bmi.n	80076fc <__sflush_r+0xb0>
 80076ac:	2200      	movs	r2, #0
 80076ae:	6062      	str	r2, [r4, #4]
 80076b0:	6922      	ldr	r2, [r4, #16]
 80076b2:	04d9      	lsls	r1, r3, #19
 80076b4:	6022      	str	r2, [r4, #0]
 80076b6:	d504      	bpl.n	80076c2 <__sflush_r+0x76>
 80076b8:	1c42      	adds	r2, r0, #1
 80076ba:	d101      	bne.n	80076c0 <__sflush_r+0x74>
 80076bc:	682b      	ldr	r3, [r5, #0]
 80076be:	b903      	cbnz	r3, 80076c2 <__sflush_r+0x76>
 80076c0:	6560      	str	r0, [r4, #84]	@ 0x54
 80076c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076c4:	602f      	str	r7, [r5, #0]
 80076c6:	b1b9      	cbz	r1, 80076f8 <__sflush_r+0xac>
 80076c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076cc:	4299      	cmp	r1, r3
 80076ce:	d002      	beq.n	80076d6 <__sflush_r+0x8a>
 80076d0:	4628      	mov	r0, r5
 80076d2:	f7fe fa41 	bl	8005b58 <_free_r>
 80076d6:	2300      	movs	r3, #0
 80076d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80076da:	e00d      	b.n	80076f8 <__sflush_r+0xac>
 80076dc:	2301      	movs	r3, #1
 80076de:	4628      	mov	r0, r5
 80076e0:	47b0      	blx	r6
 80076e2:	4602      	mov	r2, r0
 80076e4:	1c50      	adds	r0, r2, #1
 80076e6:	d1c9      	bne.n	800767c <__sflush_r+0x30>
 80076e8:	682b      	ldr	r3, [r5, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d0c6      	beq.n	800767c <__sflush_r+0x30>
 80076ee:	2b1d      	cmp	r3, #29
 80076f0:	d001      	beq.n	80076f6 <__sflush_r+0xaa>
 80076f2:	2b16      	cmp	r3, #22
 80076f4:	d11d      	bne.n	8007732 <__sflush_r+0xe6>
 80076f6:	602f      	str	r7, [r5, #0]
 80076f8:	2000      	movs	r0, #0
 80076fa:	e021      	b.n	8007740 <__sflush_r+0xf4>
 80076fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007700:	b21b      	sxth	r3, r3
 8007702:	e01a      	b.n	800773a <__sflush_r+0xee>
 8007704:	690f      	ldr	r7, [r1, #16]
 8007706:	2f00      	cmp	r7, #0
 8007708:	d0f6      	beq.n	80076f8 <__sflush_r+0xac>
 800770a:	0793      	lsls	r3, r2, #30
 800770c:	bf18      	it	ne
 800770e:	2300      	movne	r3, #0
 8007710:	680e      	ldr	r6, [r1, #0]
 8007712:	bf08      	it	eq
 8007714:	694b      	ldreq	r3, [r1, #20]
 8007716:	1bf6      	subs	r6, r6, r7
 8007718:	600f      	str	r7, [r1, #0]
 800771a:	608b      	str	r3, [r1, #8]
 800771c:	2e00      	cmp	r6, #0
 800771e:	ddeb      	ble.n	80076f8 <__sflush_r+0xac>
 8007720:	4633      	mov	r3, r6
 8007722:	463a      	mov	r2, r7
 8007724:	4628      	mov	r0, r5
 8007726:	6a21      	ldr	r1, [r4, #32]
 8007728:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800772c:	47e0      	blx	ip
 800772e:	2800      	cmp	r0, #0
 8007730:	dc07      	bgt.n	8007742 <__sflush_r+0xf6>
 8007732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800773a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800773e:	81a3      	strh	r3, [r4, #12]
 8007740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007742:	4407      	add	r7, r0
 8007744:	1a36      	subs	r6, r6, r0
 8007746:	e7e9      	b.n	800771c <__sflush_r+0xd0>
 8007748:	dfbffffe 	.word	0xdfbffffe

0800774c <_fflush_r>:
 800774c:	b538      	push	{r3, r4, r5, lr}
 800774e:	690b      	ldr	r3, [r1, #16]
 8007750:	4605      	mov	r5, r0
 8007752:	460c      	mov	r4, r1
 8007754:	b913      	cbnz	r3, 800775c <_fflush_r+0x10>
 8007756:	2500      	movs	r5, #0
 8007758:	4628      	mov	r0, r5
 800775a:	bd38      	pop	{r3, r4, r5, pc}
 800775c:	b118      	cbz	r0, 8007766 <_fflush_r+0x1a>
 800775e:	6a03      	ldr	r3, [r0, #32]
 8007760:	b90b      	cbnz	r3, 8007766 <_fflush_r+0x1a>
 8007762:	f7fd fa7b 	bl	8004c5c <__sinit>
 8007766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d0f3      	beq.n	8007756 <_fflush_r+0xa>
 800776e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007770:	07d0      	lsls	r0, r2, #31
 8007772:	d404      	bmi.n	800777e <_fflush_r+0x32>
 8007774:	0599      	lsls	r1, r3, #22
 8007776:	d402      	bmi.n	800777e <_fflush_r+0x32>
 8007778:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800777a:	f7fd fb86 	bl	8004e8a <__retarget_lock_acquire_recursive>
 800777e:	4628      	mov	r0, r5
 8007780:	4621      	mov	r1, r4
 8007782:	f7ff ff63 	bl	800764c <__sflush_r>
 8007786:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007788:	4605      	mov	r5, r0
 800778a:	07da      	lsls	r2, r3, #31
 800778c:	d4e4      	bmi.n	8007758 <_fflush_r+0xc>
 800778e:	89a3      	ldrh	r3, [r4, #12]
 8007790:	059b      	lsls	r3, r3, #22
 8007792:	d4e1      	bmi.n	8007758 <_fflush_r+0xc>
 8007794:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007796:	f7fd fb79 	bl	8004e8c <__retarget_lock_release_recursive>
 800779a:	e7dd      	b.n	8007758 <_fflush_r+0xc>

0800779c <memmove>:
 800779c:	4288      	cmp	r0, r1
 800779e:	b510      	push	{r4, lr}
 80077a0:	eb01 0402 	add.w	r4, r1, r2
 80077a4:	d902      	bls.n	80077ac <memmove+0x10>
 80077a6:	4284      	cmp	r4, r0
 80077a8:	4623      	mov	r3, r4
 80077aa:	d807      	bhi.n	80077bc <memmove+0x20>
 80077ac:	1e43      	subs	r3, r0, #1
 80077ae:	42a1      	cmp	r1, r4
 80077b0:	d008      	beq.n	80077c4 <memmove+0x28>
 80077b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077ba:	e7f8      	b.n	80077ae <memmove+0x12>
 80077bc:	4601      	mov	r1, r0
 80077be:	4402      	add	r2, r0
 80077c0:	428a      	cmp	r2, r1
 80077c2:	d100      	bne.n	80077c6 <memmove+0x2a>
 80077c4:	bd10      	pop	{r4, pc}
 80077c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077ce:	e7f7      	b.n	80077c0 <memmove+0x24>

080077d0 <strncmp>:
 80077d0:	b510      	push	{r4, lr}
 80077d2:	b16a      	cbz	r2, 80077f0 <strncmp+0x20>
 80077d4:	3901      	subs	r1, #1
 80077d6:	1884      	adds	r4, r0, r2
 80077d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d103      	bne.n	80077ec <strncmp+0x1c>
 80077e4:	42a0      	cmp	r0, r4
 80077e6:	d001      	beq.n	80077ec <strncmp+0x1c>
 80077e8:	2a00      	cmp	r2, #0
 80077ea:	d1f5      	bne.n	80077d8 <strncmp+0x8>
 80077ec:	1ad0      	subs	r0, r2, r3
 80077ee:	bd10      	pop	{r4, pc}
 80077f0:	4610      	mov	r0, r2
 80077f2:	e7fc      	b.n	80077ee <strncmp+0x1e>

080077f4 <_sbrk_r>:
 80077f4:	b538      	push	{r3, r4, r5, lr}
 80077f6:	2300      	movs	r3, #0
 80077f8:	4d05      	ldr	r5, [pc, #20]	@ (8007810 <_sbrk_r+0x1c>)
 80077fa:	4604      	mov	r4, r0
 80077fc:	4608      	mov	r0, r1
 80077fe:	602b      	str	r3, [r5, #0]
 8007800:	f7fa fae6 	bl	8001dd0 <_sbrk>
 8007804:	1c43      	adds	r3, r0, #1
 8007806:	d102      	bne.n	800780e <_sbrk_r+0x1a>
 8007808:	682b      	ldr	r3, [r5, #0]
 800780a:	b103      	cbz	r3, 800780e <_sbrk_r+0x1a>
 800780c:	6023      	str	r3, [r4, #0]
 800780e:	bd38      	pop	{r3, r4, r5, pc}
 8007810:	2000041c 	.word	0x2000041c

08007814 <memcpy>:
 8007814:	440a      	add	r2, r1
 8007816:	4291      	cmp	r1, r2
 8007818:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800781c:	d100      	bne.n	8007820 <memcpy+0xc>
 800781e:	4770      	bx	lr
 8007820:	b510      	push	{r4, lr}
 8007822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007826:	4291      	cmp	r1, r2
 8007828:	f803 4f01 	strb.w	r4, [r3, #1]!
 800782c:	d1f9      	bne.n	8007822 <memcpy+0xe>
 800782e:	bd10      	pop	{r4, pc}

08007830 <nan>:
 8007830:	2000      	movs	r0, #0
 8007832:	4901      	ldr	r1, [pc, #4]	@ (8007838 <nan+0x8>)
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	7ff80000 	.word	0x7ff80000

0800783c <__assert_func>:
 800783c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800783e:	4614      	mov	r4, r2
 8007840:	461a      	mov	r2, r3
 8007842:	4b09      	ldr	r3, [pc, #36]	@ (8007868 <__assert_func+0x2c>)
 8007844:	4605      	mov	r5, r0
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68d8      	ldr	r0, [r3, #12]
 800784a:	b954      	cbnz	r4, 8007862 <__assert_func+0x26>
 800784c:	4b07      	ldr	r3, [pc, #28]	@ (800786c <__assert_func+0x30>)
 800784e:	461c      	mov	r4, r3
 8007850:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007854:	9100      	str	r1, [sp, #0]
 8007856:	462b      	mov	r3, r5
 8007858:	4905      	ldr	r1, [pc, #20]	@ (8007870 <__assert_func+0x34>)
 800785a:	f000 fba7 	bl	8007fac <fiprintf>
 800785e:	f000 fbb7 	bl	8007fd0 <abort>
 8007862:	4b04      	ldr	r3, [pc, #16]	@ (8007874 <__assert_func+0x38>)
 8007864:	e7f4      	b.n	8007850 <__assert_func+0x14>
 8007866:	bf00      	nop
 8007868:	20000018 	.word	0x20000018
 800786c:	0800897d 	.word	0x0800897d
 8007870:	0800894f 	.word	0x0800894f
 8007874:	08008942 	.word	0x08008942

08007878 <_calloc_r>:
 8007878:	b570      	push	{r4, r5, r6, lr}
 800787a:	fba1 5402 	umull	r5, r4, r1, r2
 800787e:	b93c      	cbnz	r4, 8007890 <_calloc_r+0x18>
 8007880:	4629      	mov	r1, r5
 8007882:	f7fe f9db 	bl	8005c3c <_malloc_r>
 8007886:	4606      	mov	r6, r0
 8007888:	b928      	cbnz	r0, 8007896 <_calloc_r+0x1e>
 800788a:	2600      	movs	r6, #0
 800788c:	4630      	mov	r0, r6
 800788e:	bd70      	pop	{r4, r5, r6, pc}
 8007890:	220c      	movs	r2, #12
 8007892:	6002      	str	r2, [r0, #0]
 8007894:	e7f9      	b.n	800788a <_calloc_r+0x12>
 8007896:	462a      	mov	r2, r5
 8007898:	4621      	mov	r1, r4
 800789a:	f7fd fa78 	bl	8004d8e <memset>
 800789e:	e7f5      	b.n	800788c <_calloc_r+0x14>

080078a0 <rshift>:
 80078a0:	6903      	ldr	r3, [r0, #16]
 80078a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80078aa:	f100 0414 	add.w	r4, r0, #20
 80078ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80078b2:	dd46      	ble.n	8007942 <rshift+0xa2>
 80078b4:	f011 011f 	ands.w	r1, r1, #31
 80078b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80078bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80078c0:	d10c      	bne.n	80078dc <rshift+0x3c>
 80078c2:	4629      	mov	r1, r5
 80078c4:	f100 0710 	add.w	r7, r0, #16
 80078c8:	42b1      	cmp	r1, r6
 80078ca:	d335      	bcc.n	8007938 <rshift+0x98>
 80078cc:	1a9b      	subs	r3, r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	1eea      	subs	r2, r5, #3
 80078d2:	4296      	cmp	r6, r2
 80078d4:	bf38      	it	cc
 80078d6:	2300      	movcc	r3, #0
 80078d8:	4423      	add	r3, r4
 80078da:	e015      	b.n	8007908 <rshift+0x68>
 80078dc:	46a1      	mov	r9, r4
 80078de:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80078e2:	f1c1 0820 	rsb	r8, r1, #32
 80078e6:	40cf      	lsrs	r7, r1
 80078e8:	f105 0e04 	add.w	lr, r5, #4
 80078ec:	4576      	cmp	r6, lr
 80078ee:	46f4      	mov	ip, lr
 80078f0:	d816      	bhi.n	8007920 <rshift+0x80>
 80078f2:	1a9a      	subs	r2, r3, r2
 80078f4:	0092      	lsls	r2, r2, #2
 80078f6:	3a04      	subs	r2, #4
 80078f8:	3501      	adds	r5, #1
 80078fa:	42ae      	cmp	r6, r5
 80078fc:	bf38      	it	cc
 80078fe:	2200      	movcc	r2, #0
 8007900:	18a3      	adds	r3, r4, r2
 8007902:	50a7      	str	r7, [r4, r2]
 8007904:	b107      	cbz	r7, 8007908 <rshift+0x68>
 8007906:	3304      	adds	r3, #4
 8007908:	42a3      	cmp	r3, r4
 800790a:	eba3 0204 	sub.w	r2, r3, r4
 800790e:	bf08      	it	eq
 8007910:	2300      	moveq	r3, #0
 8007912:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007916:	6102      	str	r2, [r0, #16]
 8007918:	bf08      	it	eq
 800791a:	6143      	streq	r3, [r0, #20]
 800791c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007920:	f8dc c000 	ldr.w	ip, [ip]
 8007924:	fa0c fc08 	lsl.w	ip, ip, r8
 8007928:	ea4c 0707 	orr.w	r7, ip, r7
 800792c:	f849 7b04 	str.w	r7, [r9], #4
 8007930:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007934:	40cf      	lsrs	r7, r1
 8007936:	e7d9      	b.n	80078ec <rshift+0x4c>
 8007938:	f851 cb04 	ldr.w	ip, [r1], #4
 800793c:	f847 cf04 	str.w	ip, [r7, #4]!
 8007940:	e7c2      	b.n	80078c8 <rshift+0x28>
 8007942:	4623      	mov	r3, r4
 8007944:	e7e0      	b.n	8007908 <rshift+0x68>

08007946 <__hexdig_fun>:
 8007946:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800794a:	2b09      	cmp	r3, #9
 800794c:	d802      	bhi.n	8007954 <__hexdig_fun+0xe>
 800794e:	3820      	subs	r0, #32
 8007950:	b2c0      	uxtb	r0, r0
 8007952:	4770      	bx	lr
 8007954:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007958:	2b05      	cmp	r3, #5
 800795a:	d801      	bhi.n	8007960 <__hexdig_fun+0x1a>
 800795c:	3847      	subs	r0, #71	@ 0x47
 800795e:	e7f7      	b.n	8007950 <__hexdig_fun+0xa>
 8007960:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007964:	2b05      	cmp	r3, #5
 8007966:	d801      	bhi.n	800796c <__hexdig_fun+0x26>
 8007968:	3827      	subs	r0, #39	@ 0x27
 800796a:	e7f1      	b.n	8007950 <__hexdig_fun+0xa>
 800796c:	2000      	movs	r0, #0
 800796e:	4770      	bx	lr

08007970 <__gethex>:
 8007970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007974:	468a      	mov	sl, r1
 8007976:	4690      	mov	r8, r2
 8007978:	b085      	sub	sp, #20
 800797a:	9302      	str	r3, [sp, #8]
 800797c:	680b      	ldr	r3, [r1, #0]
 800797e:	9001      	str	r0, [sp, #4]
 8007980:	1c9c      	adds	r4, r3, #2
 8007982:	46a1      	mov	r9, r4
 8007984:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007988:	2830      	cmp	r0, #48	@ 0x30
 800798a:	d0fa      	beq.n	8007982 <__gethex+0x12>
 800798c:	eba9 0303 	sub.w	r3, r9, r3
 8007990:	f1a3 0b02 	sub.w	fp, r3, #2
 8007994:	f7ff ffd7 	bl	8007946 <__hexdig_fun>
 8007998:	4605      	mov	r5, r0
 800799a:	2800      	cmp	r0, #0
 800799c:	d168      	bne.n	8007a70 <__gethex+0x100>
 800799e:	2201      	movs	r2, #1
 80079a0:	4648      	mov	r0, r9
 80079a2:	499f      	ldr	r1, [pc, #636]	@ (8007c20 <__gethex+0x2b0>)
 80079a4:	f7ff ff14 	bl	80077d0 <strncmp>
 80079a8:	4607      	mov	r7, r0
 80079aa:	2800      	cmp	r0, #0
 80079ac:	d167      	bne.n	8007a7e <__gethex+0x10e>
 80079ae:	f899 0001 	ldrb.w	r0, [r9, #1]
 80079b2:	4626      	mov	r6, r4
 80079b4:	f7ff ffc7 	bl	8007946 <__hexdig_fun>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	d062      	beq.n	8007a82 <__gethex+0x112>
 80079bc:	4623      	mov	r3, r4
 80079be:	7818      	ldrb	r0, [r3, #0]
 80079c0:	4699      	mov	r9, r3
 80079c2:	2830      	cmp	r0, #48	@ 0x30
 80079c4:	f103 0301 	add.w	r3, r3, #1
 80079c8:	d0f9      	beq.n	80079be <__gethex+0x4e>
 80079ca:	f7ff ffbc 	bl	8007946 <__hexdig_fun>
 80079ce:	fab0 f580 	clz	r5, r0
 80079d2:	f04f 0b01 	mov.w	fp, #1
 80079d6:	096d      	lsrs	r5, r5, #5
 80079d8:	464a      	mov	r2, r9
 80079da:	4616      	mov	r6, r2
 80079dc:	7830      	ldrb	r0, [r6, #0]
 80079de:	3201      	adds	r2, #1
 80079e0:	f7ff ffb1 	bl	8007946 <__hexdig_fun>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d1f8      	bne.n	80079da <__gethex+0x6a>
 80079e8:	2201      	movs	r2, #1
 80079ea:	4630      	mov	r0, r6
 80079ec:	498c      	ldr	r1, [pc, #560]	@ (8007c20 <__gethex+0x2b0>)
 80079ee:	f7ff feef 	bl	80077d0 <strncmp>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d13f      	bne.n	8007a76 <__gethex+0x106>
 80079f6:	b944      	cbnz	r4, 8007a0a <__gethex+0x9a>
 80079f8:	1c74      	adds	r4, r6, #1
 80079fa:	4622      	mov	r2, r4
 80079fc:	4616      	mov	r6, r2
 80079fe:	7830      	ldrb	r0, [r6, #0]
 8007a00:	3201      	adds	r2, #1
 8007a02:	f7ff ffa0 	bl	8007946 <__hexdig_fun>
 8007a06:	2800      	cmp	r0, #0
 8007a08:	d1f8      	bne.n	80079fc <__gethex+0x8c>
 8007a0a:	1ba4      	subs	r4, r4, r6
 8007a0c:	00a7      	lsls	r7, r4, #2
 8007a0e:	7833      	ldrb	r3, [r6, #0]
 8007a10:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007a14:	2b50      	cmp	r3, #80	@ 0x50
 8007a16:	d13e      	bne.n	8007a96 <__gethex+0x126>
 8007a18:	7873      	ldrb	r3, [r6, #1]
 8007a1a:	2b2b      	cmp	r3, #43	@ 0x2b
 8007a1c:	d033      	beq.n	8007a86 <__gethex+0x116>
 8007a1e:	2b2d      	cmp	r3, #45	@ 0x2d
 8007a20:	d034      	beq.n	8007a8c <__gethex+0x11c>
 8007a22:	2400      	movs	r4, #0
 8007a24:	1c71      	adds	r1, r6, #1
 8007a26:	7808      	ldrb	r0, [r1, #0]
 8007a28:	f7ff ff8d 	bl	8007946 <__hexdig_fun>
 8007a2c:	1e43      	subs	r3, r0, #1
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	2b18      	cmp	r3, #24
 8007a32:	d830      	bhi.n	8007a96 <__gethex+0x126>
 8007a34:	f1a0 0210 	sub.w	r2, r0, #16
 8007a38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007a3c:	f7ff ff83 	bl	8007946 <__hexdig_fun>
 8007a40:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8007a44:	fa5f fc8c 	uxtb.w	ip, ip
 8007a48:	f1bc 0f18 	cmp.w	ip, #24
 8007a4c:	f04f 030a 	mov.w	r3, #10
 8007a50:	d91e      	bls.n	8007a90 <__gethex+0x120>
 8007a52:	b104      	cbz	r4, 8007a56 <__gethex+0xe6>
 8007a54:	4252      	negs	r2, r2
 8007a56:	4417      	add	r7, r2
 8007a58:	f8ca 1000 	str.w	r1, [sl]
 8007a5c:	b1ed      	cbz	r5, 8007a9a <__gethex+0x12a>
 8007a5e:	f1bb 0f00 	cmp.w	fp, #0
 8007a62:	bf0c      	ite	eq
 8007a64:	2506      	moveq	r5, #6
 8007a66:	2500      	movne	r5, #0
 8007a68:	4628      	mov	r0, r5
 8007a6a:	b005      	add	sp, #20
 8007a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a70:	2500      	movs	r5, #0
 8007a72:	462c      	mov	r4, r5
 8007a74:	e7b0      	b.n	80079d8 <__gethex+0x68>
 8007a76:	2c00      	cmp	r4, #0
 8007a78:	d1c7      	bne.n	8007a0a <__gethex+0x9a>
 8007a7a:	4627      	mov	r7, r4
 8007a7c:	e7c7      	b.n	8007a0e <__gethex+0x9e>
 8007a7e:	464e      	mov	r6, r9
 8007a80:	462f      	mov	r7, r5
 8007a82:	2501      	movs	r5, #1
 8007a84:	e7c3      	b.n	8007a0e <__gethex+0x9e>
 8007a86:	2400      	movs	r4, #0
 8007a88:	1cb1      	adds	r1, r6, #2
 8007a8a:	e7cc      	b.n	8007a26 <__gethex+0xb6>
 8007a8c:	2401      	movs	r4, #1
 8007a8e:	e7fb      	b.n	8007a88 <__gethex+0x118>
 8007a90:	fb03 0002 	mla	r0, r3, r2, r0
 8007a94:	e7ce      	b.n	8007a34 <__gethex+0xc4>
 8007a96:	4631      	mov	r1, r6
 8007a98:	e7de      	b.n	8007a58 <__gethex+0xe8>
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	eba6 0309 	sub.w	r3, r6, r9
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	2b07      	cmp	r3, #7
 8007aa4:	dc0a      	bgt.n	8007abc <__gethex+0x14c>
 8007aa6:	9801      	ldr	r0, [sp, #4]
 8007aa8:	f7fe f954 	bl	8005d54 <_Balloc>
 8007aac:	4604      	mov	r4, r0
 8007aae:	b940      	cbnz	r0, 8007ac2 <__gethex+0x152>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	21e4      	movs	r1, #228	@ 0xe4
 8007ab4:	4b5b      	ldr	r3, [pc, #364]	@ (8007c24 <__gethex+0x2b4>)
 8007ab6:	485c      	ldr	r0, [pc, #368]	@ (8007c28 <__gethex+0x2b8>)
 8007ab8:	f7ff fec0 	bl	800783c <__assert_func>
 8007abc:	3101      	adds	r1, #1
 8007abe:	105b      	asrs	r3, r3, #1
 8007ac0:	e7ef      	b.n	8007aa2 <__gethex+0x132>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	f100 0a14 	add.w	sl, r0, #20
 8007ac8:	4655      	mov	r5, sl
 8007aca:	469b      	mov	fp, r3
 8007acc:	45b1      	cmp	r9, r6
 8007ace:	d337      	bcc.n	8007b40 <__gethex+0x1d0>
 8007ad0:	f845 bb04 	str.w	fp, [r5], #4
 8007ad4:	eba5 050a 	sub.w	r5, r5, sl
 8007ad8:	10ad      	asrs	r5, r5, #2
 8007ada:	6125      	str	r5, [r4, #16]
 8007adc:	4658      	mov	r0, fp
 8007ade:	f7fe fa2b 	bl	8005f38 <__hi0bits>
 8007ae2:	016d      	lsls	r5, r5, #5
 8007ae4:	f8d8 6000 	ldr.w	r6, [r8]
 8007ae8:	1a2d      	subs	r5, r5, r0
 8007aea:	42b5      	cmp	r5, r6
 8007aec:	dd54      	ble.n	8007b98 <__gethex+0x228>
 8007aee:	1bad      	subs	r5, r5, r6
 8007af0:	4629      	mov	r1, r5
 8007af2:	4620      	mov	r0, r4
 8007af4:	f7fe fdb3 	bl	800665e <__any_on>
 8007af8:	4681      	mov	r9, r0
 8007afa:	b178      	cbz	r0, 8007b1c <__gethex+0x1ac>
 8007afc:	f04f 0901 	mov.w	r9, #1
 8007b00:	1e6b      	subs	r3, r5, #1
 8007b02:	1159      	asrs	r1, r3, #5
 8007b04:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007b08:	f003 021f 	and.w	r2, r3, #31
 8007b0c:	fa09 f202 	lsl.w	r2, r9, r2
 8007b10:	420a      	tst	r2, r1
 8007b12:	d003      	beq.n	8007b1c <__gethex+0x1ac>
 8007b14:	454b      	cmp	r3, r9
 8007b16:	dc36      	bgt.n	8007b86 <__gethex+0x216>
 8007b18:	f04f 0902 	mov.w	r9, #2
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f7ff febe 	bl	80078a0 <rshift>
 8007b24:	442f      	add	r7, r5
 8007b26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b2a:	42bb      	cmp	r3, r7
 8007b2c:	da42      	bge.n	8007bb4 <__gethex+0x244>
 8007b2e:	4621      	mov	r1, r4
 8007b30:	9801      	ldr	r0, [sp, #4]
 8007b32:	f7fe f94f 	bl	8005dd4 <_Bfree>
 8007b36:	2300      	movs	r3, #0
 8007b38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b3a:	25a3      	movs	r5, #163	@ 0xa3
 8007b3c:	6013      	str	r3, [r2, #0]
 8007b3e:	e793      	b.n	8007a68 <__gethex+0xf8>
 8007b40:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007b44:	2a2e      	cmp	r2, #46	@ 0x2e
 8007b46:	d012      	beq.n	8007b6e <__gethex+0x1fe>
 8007b48:	2b20      	cmp	r3, #32
 8007b4a:	d104      	bne.n	8007b56 <__gethex+0x1e6>
 8007b4c:	f845 bb04 	str.w	fp, [r5], #4
 8007b50:	f04f 0b00 	mov.w	fp, #0
 8007b54:	465b      	mov	r3, fp
 8007b56:	7830      	ldrb	r0, [r6, #0]
 8007b58:	9303      	str	r3, [sp, #12]
 8007b5a:	f7ff fef4 	bl	8007946 <__hexdig_fun>
 8007b5e:	9b03      	ldr	r3, [sp, #12]
 8007b60:	f000 000f 	and.w	r0, r0, #15
 8007b64:	4098      	lsls	r0, r3
 8007b66:	ea4b 0b00 	orr.w	fp, fp, r0
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	e7ae      	b.n	8007acc <__gethex+0x15c>
 8007b6e:	45b1      	cmp	r9, r6
 8007b70:	d8ea      	bhi.n	8007b48 <__gethex+0x1d8>
 8007b72:	2201      	movs	r2, #1
 8007b74:	4630      	mov	r0, r6
 8007b76:	492a      	ldr	r1, [pc, #168]	@ (8007c20 <__gethex+0x2b0>)
 8007b78:	9303      	str	r3, [sp, #12]
 8007b7a:	f7ff fe29 	bl	80077d0 <strncmp>
 8007b7e:	9b03      	ldr	r3, [sp, #12]
 8007b80:	2800      	cmp	r0, #0
 8007b82:	d1e1      	bne.n	8007b48 <__gethex+0x1d8>
 8007b84:	e7a2      	b.n	8007acc <__gethex+0x15c>
 8007b86:	4620      	mov	r0, r4
 8007b88:	1ea9      	subs	r1, r5, #2
 8007b8a:	f7fe fd68 	bl	800665e <__any_on>
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	d0c2      	beq.n	8007b18 <__gethex+0x1a8>
 8007b92:	f04f 0903 	mov.w	r9, #3
 8007b96:	e7c1      	b.n	8007b1c <__gethex+0x1ac>
 8007b98:	da09      	bge.n	8007bae <__gethex+0x23e>
 8007b9a:	1b75      	subs	r5, r6, r5
 8007b9c:	4621      	mov	r1, r4
 8007b9e:	462a      	mov	r2, r5
 8007ba0:	9801      	ldr	r0, [sp, #4]
 8007ba2:	f7fe fb2d 	bl	8006200 <__lshift>
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	1b7f      	subs	r7, r7, r5
 8007baa:	f100 0a14 	add.w	sl, r0, #20
 8007bae:	f04f 0900 	mov.w	r9, #0
 8007bb2:	e7b8      	b.n	8007b26 <__gethex+0x1b6>
 8007bb4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007bb8:	42bd      	cmp	r5, r7
 8007bba:	dd6f      	ble.n	8007c9c <__gethex+0x32c>
 8007bbc:	1bed      	subs	r5, r5, r7
 8007bbe:	42ae      	cmp	r6, r5
 8007bc0:	dc34      	bgt.n	8007c2c <__gethex+0x2bc>
 8007bc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d022      	beq.n	8007c10 <__gethex+0x2a0>
 8007bca:	2b03      	cmp	r3, #3
 8007bcc:	d024      	beq.n	8007c18 <__gethex+0x2a8>
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d115      	bne.n	8007bfe <__gethex+0x28e>
 8007bd2:	42ae      	cmp	r6, r5
 8007bd4:	d113      	bne.n	8007bfe <__gethex+0x28e>
 8007bd6:	2e01      	cmp	r6, #1
 8007bd8:	d10b      	bne.n	8007bf2 <__gethex+0x282>
 8007bda:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007bde:	9a02      	ldr	r2, [sp, #8]
 8007be0:	2562      	movs	r5, #98	@ 0x62
 8007be2:	6013      	str	r3, [r2, #0]
 8007be4:	2301      	movs	r3, #1
 8007be6:	6123      	str	r3, [r4, #16]
 8007be8:	f8ca 3000 	str.w	r3, [sl]
 8007bec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bee:	601c      	str	r4, [r3, #0]
 8007bf0:	e73a      	b.n	8007a68 <__gethex+0xf8>
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	1e71      	subs	r1, r6, #1
 8007bf6:	f7fe fd32 	bl	800665e <__any_on>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	d1ed      	bne.n	8007bda <__gethex+0x26a>
 8007bfe:	4621      	mov	r1, r4
 8007c00:	9801      	ldr	r0, [sp, #4]
 8007c02:	f7fe f8e7 	bl	8005dd4 <_Bfree>
 8007c06:	2300      	movs	r3, #0
 8007c08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c0a:	2550      	movs	r5, #80	@ 0x50
 8007c0c:	6013      	str	r3, [r2, #0]
 8007c0e:	e72b      	b.n	8007a68 <__gethex+0xf8>
 8007c10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1f3      	bne.n	8007bfe <__gethex+0x28e>
 8007c16:	e7e0      	b.n	8007bda <__gethex+0x26a>
 8007c18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1dd      	bne.n	8007bda <__gethex+0x26a>
 8007c1e:	e7ee      	b.n	8007bfe <__gethex+0x28e>
 8007c20:	080087d0 	.word	0x080087d0
 8007c24:	08008663 	.word	0x08008663
 8007c28:	0800897e 	.word	0x0800897e
 8007c2c:	1e6f      	subs	r7, r5, #1
 8007c2e:	f1b9 0f00 	cmp.w	r9, #0
 8007c32:	d130      	bne.n	8007c96 <__gethex+0x326>
 8007c34:	b127      	cbz	r7, 8007c40 <__gethex+0x2d0>
 8007c36:	4639      	mov	r1, r7
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f7fe fd10 	bl	800665e <__any_on>
 8007c3e:	4681      	mov	r9, r0
 8007c40:	2301      	movs	r3, #1
 8007c42:	4629      	mov	r1, r5
 8007c44:	1b76      	subs	r6, r6, r5
 8007c46:	2502      	movs	r5, #2
 8007c48:	117a      	asrs	r2, r7, #5
 8007c4a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007c4e:	f007 071f 	and.w	r7, r7, #31
 8007c52:	40bb      	lsls	r3, r7
 8007c54:	4213      	tst	r3, r2
 8007c56:	4620      	mov	r0, r4
 8007c58:	bf18      	it	ne
 8007c5a:	f049 0902 	orrne.w	r9, r9, #2
 8007c5e:	f7ff fe1f 	bl	80078a0 <rshift>
 8007c62:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007c66:	f1b9 0f00 	cmp.w	r9, #0
 8007c6a:	d047      	beq.n	8007cfc <__gethex+0x38c>
 8007c6c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d015      	beq.n	8007ca0 <__gethex+0x330>
 8007c74:	2b03      	cmp	r3, #3
 8007c76:	d017      	beq.n	8007ca8 <__gethex+0x338>
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d109      	bne.n	8007c90 <__gethex+0x320>
 8007c7c:	f019 0f02 	tst.w	r9, #2
 8007c80:	d006      	beq.n	8007c90 <__gethex+0x320>
 8007c82:	f8da 3000 	ldr.w	r3, [sl]
 8007c86:	ea49 0903 	orr.w	r9, r9, r3
 8007c8a:	f019 0f01 	tst.w	r9, #1
 8007c8e:	d10e      	bne.n	8007cae <__gethex+0x33e>
 8007c90:	f045 0510 	orr.w	r5, r5, #16
 8007c94:	e032      	b.n	8007cfc <__gethex+0x38c>
 8007c96:	f04f 0901 	mov.w	r9, #1
 8007c9a:	e7d1      	b.n	8007c40 <__gethex+0x2d0>
 8007c9c:	2501      	movs	r5, #1
 8007c9e:	e7e2      	b.n	8007c66 <__gethex+0x2f6>
 8007ca0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ca2:	f1c3 0301 	rsb	r3, r3, #1
 8007ca6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ca8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0f0      	beq.n	8007c90 <__gethex+0x320>
 8007cae:	f04f 0c00 	mov.w	ip, #0
 8007cb2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007cb6:	f104 0314 	add.w	r3, r4, #20
 8007cba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007cbe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cc8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8007ccc:	d01b      	beq.n	8007d06 <__gethex+0x396>
 8007cce:	3201      	adds	r2, #1
 8007cd0:	6002      	str	r2, [r0, #0]
 8007cd2:	2d02      	cmp	r5, #2
 8007cd4:	f104 0314 	add.w	r3, r4, #20
 8007cd8:	d13c      	bne.n	8007d54 <__gethex+0x3e4>
 8007cda:	f8d8 2000 	ldr.w	r2, [r8]
 8007cde:	3a01      	subs	r2, #1
 8007ce0:	42b2      	cmp	r2, r6
 8007ce2:	d109      	bne.n	8007cf8 <__gethex+0x388>
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	1171      	asrs	r1, r6, #5
 8007ce8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007cec:	f006 061f 	and.w	r6, r6, #31
 8007cf0:	fa02 f606 	lsl.w	r6, r2, r6
 8007cf4:	421e      	tst	r6, r3
 8007cf6:	d13a      	bne.n	8007d6e <__gethex+0x3fe>
 8007cf8:	f045 0520 	orr.w	r5, r5, #32
 8007cfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cfe:	601c      	str	r4, [r3, #0]
 8007d00:	9b02      	ldr	r3, [sp, #8]
 8007d02:	601f      	str	r7, [r3, #0]
 8007d04:	e6b0      	b.n	8007a68 <__gethex+0xf8>
 8007d06:	4299      	cmp	r1, r3
 8007d08:	f843 cc04 	str.w	ip, [r3, #-4]
 8007d0c:	d8d9      	bhi.n	8007cc2 <__gethex+0x352>
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	459b      	cmp	fp, r3
 8007d12:	db17      	blt.n	8007d44 <__gethex+0x3d4>
 8007d14:	6861      	ldr	r1, [r4, #4]
 8007d16:	9801      	ldr	r0, [sp, #4]
 8007d18:	3101      	adds	r1, #1
 8007d1a:	f7fe f81b 	bl	8005d54 <_Balloc>
 8007d1e:	4681      	mov	r9, r0
 8007d20:	b918      	cbnz	r0, 8007d2a <__gethex+0x3ba>
 8007d22:	4602      	mov	r2, r0
 8007d24:	2184      	movs	r1, #132	@ 0x84
 8007d26:	4b19      	ldr	r3, [pc, #100]	@ (8007d8c <__gethex+0x41c>)
 8007d28:	e6c5      	b.n	8007ab6 <__gethex+0x146>
 8007d2a:	6922      	ldr	r2, [r4, #16]
 8007d2c:	f104 010c 	add.w	r1, r4, #12
 8007d30:	3202      	adds	r2, #2
 8007d32:	0092      	lsls	r2, r2, #2
 8007d34:	300c      	adds	r0, #12
 8007d36:	f7ff fd6d 	bl	8007814 <memcpy>
 8007d3a:	4621      	mov	r1, r4
 8007d3c:	9801      	ldr	r0, [sp, #4]
 8007d3e:	f7fe f849 	bl	8005dd4 <_Bfree>
 8007d42:	464c      	mov	r4, r9
 8007d44:	6923      	ldr	r3, [r4, #16]
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	6122      	str	r2, [r4, #16]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007d50:	615a      	str	r2, [r3, #20]
 8007d52:	e7be      	b.n	8007cd2 <__gethex+0x362>
 8007d54:	6922      	ldr	r2, [r4, #16]
 8007d56:	455a      	cmp	r2, fp
 8007d58:	dd0b      	ble.n	8007d72 <__gethex+0x402>
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f7ff fd9f 	bl	80078a0 <rshift>
 8007d62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d66:	3701      	adds	r7, #1
 8007d68:	42bb      	cmp	r3, r7
 8007d6a:	f6ff aee0 	blt.w	8007b2e <__gethex+0x1be>
 8007d6e:	2501      	movs	r5, #1
 8007d70:	e7c2      	b.n	8007cf8 <__gethex+0x388>
 8007d72:	f016 061f 	ands.w	r6, r6, #31
 8007d76:	d0fa      	beq.n	8007d6e <__gethex+0x3fe>
 8007d78:	4453      	add	r3, sl
 8007d7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007d7e:	f7fe f8db 	bl	8005f38 <__hi0bits>
 8007d82:	f1c6 0620 	rsb	r6, r6, #32
 8007d86:	42b0      	cmp	r0, r6
 8007d88:	dbe7      	blt.n	8007d5a <__gethex+0x3ea>
 8007d8a:	e7f0      	b.n	8007d6e <__gethex+0x3fe>
 8007d8c:	08008663 	.word	0x08008663

08007d90 <L_shift>:
 8007d90:	f1c2 0208 	rsb	r2, r2, #8
 8007d94:	0092      	lsls	r2, r2, #2
 8007d96:	b570      	push	{r4, r5, r6, lr}
 8007d98:	f1c2 0620 	rsb	r6, r2, #32
 8007d9c:	6843      	ldr	r3, [r0, #4]
 8007d9e:	6804      	ldr	r4, [r0, #0]
 8007da0:	fa03 f506 	lsl.w	r5, r3, r6
 8007da4:	432c      	orrs	r4, r5
 8007da6:	40d3      	lsrs	r3, r2
 8007da8:	6004      	str	r4, [r0, #0]
 8007daa:	f840 3f04 	str.w	r3, [r0, #4]!
 8007dae:	4288      	cmp	r0, r1
 8007db0:	d3f4      	bcc.n	8007d9c <L_shift+0xc>
 8007db2:	bd70      	pop	{r4, r5, r6, pc}

08007db4 <__match>:
 8007db4:	b530      	push	{r4, r5, lr}
 8007db6:	6803      	ldr	r3, [r0, #0]
 8007db8:	3301      	adds	r3, #1
 8007dba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dbe:	b914      	cbnz	r4, 8007dc6 <__match+0x12>
 8007dc0:	6003      	str	r3, [r0, #0]
 8007dc2:	2001      	movs	r0, #1
 8007dc4:	bd30      	pop	{r4, r5, pc}
 8007dc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dca:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007dce:	2d19      	cmp	r5, #25
 8007dd0:	bf98      	it	ls
 8007dd2:	3220      	addls	r2, #32
 8007dd4:	42a2      	cmp	r2, r4
 8007dd6:	d0f0      	beq.n	8007dba <__match+0x6>
 8007dd8:	2000      	movs	r0, #0
 8007dda:	e7f3      	b.n	8007dc4 <__match+0x10>

08007ddc <__hexnan>:
 8007ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de0:	2500      	movs	r5, #0
 8007de2:	680b      	ldr	r3, [r1, #0]
 8007de4:	4682      	mov	sl, r0
 8007de6:	115e      	asrs	r6, r3, #5
 8007de8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007dec:	f013 031f 	ands.w	r3, r3, #31
 8007df0:	bf18      	it	ne
 8007df2:	3604      	addne	r6, #4
 8007df4:	1f37      	subs	r7, r6, #4
 8007df6:	4690      	mov	r8, r2
 8007df8:	46b9      	mov	r9, r7
 8007dfa:	463c      	mov	r4, r7
 8007dfc:	46ab      	mov	fp, r5
 8007dfe:	b087      	sub	sp, #28
 8007e00:	6801      	ldr	r1, [r0, #0]
 8007e02:	9301      	str	r3, [sp, #4]
 8007e04:	f846 5c04 	str.w	r5, [r6, #-4]
 8007e08:	9502      	str	r5, [sp, #8]
 8007e0a:	784a      	ldrb	r2, [r1, #1]
 8007e0c:	1c4b      	adds	r3, r1, #1
 8007e0e:	9303      	str	r3, [sp, #12]
 8007e10:	b342      	cbz	r2, 8007e64 <__hexnan+0x88>
 8007e12:	4610      	mov	r0, r2
 8007e14:	9105      	str	r1, [sp, #20]
 8007e16:	9204      	str	r2, [sp, #16]
 8007e18:	f7ff fd95 	bl	8007946 <__hexdig_fun>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d151      	bne.n	8007ec4 <__hexnan+0xe8>
 8007e20:	9a04      	ldr	r2, [sp, #16]
 8007e22:	9905      	ldr	r1, [sp, #20]
 8007e24:	2a20      	cmp	r2, #32
 8007e26:	d818      	bhi.n	8007e5a <__hexnan+0x7e>
 8007e28:	9b02      	ldr	r3, [sp, #8]
 8007e2a:	459b      	cmp	fp, r3
 8007e2c:	dd13      	ble.n	8007e56 <__hexnan+0x7a>
 8007e2e:	454c      	cmp	r4, r9
 8007e30:	d206      	bcs.n	8007e40 <__hexnan+0x64>
 8007e32:	2d07      	cmp	r5, #7
 8007e34:	dc04      	bgt.n	8007e40 <__hexnan+0x64>
 8007e36:	462a      	mov	r2, r5
 8007e38:	4649      	mov	r1, r9
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f7ff ffa8 	bl	8007d90 <L_shift>
 8007e40:	4544      	cmp	r4, r8
 8007e42:	d952      	bls.n	8007eea <__hexnan+0x10e>
 8007e44:	2300      	movs	r3, #0
 8007e46:	f1a4 0904 	sub.w	r9, r4, #4
 8007e4a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e4e:	461d      	mov	r5, r3
 8007e50:	464c      	mov	r4, r9
 8007e52:	f8cd b008 	str.w	fp, [sp, #8]
 8007e56:	9903      	ldr	r1, [sp, #12]
 8007e58:	e7d7      	b.n	8007e0a <__hexnan+0x2e>
 8007e5a:	2a29      	cmp	r2, #41	@ 0x29
 8007e5c:	d157      	bne.n	8007f0e <__hexnan+0x132>
 8007e5e:	3102      	adds	r1, #2
 8007e60:	f8ca 1000 	str.w	r1, [sl]
 8007e64:	f1bb 0f00 	cmp.w	fp, #0
 8007e68:	d051      	beq.n	8007f0e <__hexnan+0x132>
 8007e6a:	454c      	cmp	r4, r9
 8007e6c:	d206      	bcs.n	8007e7c <__hexnan+0xa0>
 8007e6e:	2d07      	cmp	r5, #7
 8007e70:	dc04      	bgt.n	8007e7c <__hexnan+0xa0>
 8007e72:	462a      	mov	r2, r5
 8007e74:	4649      	mov	r1, r9
 8007e76:	4620      	mov	r0, r4
 8007e78:	f7ff ff8a 	bl	8007d90 <L_shift>
 8007e7c:	4544      	cmp	r4, r8
 8007e7e:	d936      	bls.n	8007eee <__hexnan+0x112>
 8007e80:	4623      	mov	r3, r4
 8007e82:	f1a8 0204 	sub.w	r2, r8, #4
 8007e86:	f853 1b04 	ldr.w	r1, [r3], #4
 8007e8a:	429f      	cmp	r7, r3
 8007e8c:	f842 1f04 	str.w	r1, [r2, #4]!
 8007e90:	d2f9      	bcs.n	8007e86 <__hexnan+0xaa>
 8007e92:	1b3b      	subs	r3, r7, r4
 8007e94:	f023 0303 	bic.w	r3, r3, #3
 8007e98:	3304      	adds	r3, #4
 8007e9a:	3401      	adds	r4, #1
 8007e9c:	3e03      	subs	r6, #3
 8007e9e:	42b4      	cmp	r4, r6
 8007ea0:	bf88      	it	hi
 8007ea2:	2304      	movhi	r3, #4
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	4443      	add	r3, r8
 8007ea8:	f843 2b04 	str.w	r2, [r3], #4
 8007eac:	429f      	cmp	r7, r3
 8007eae:	d2fb      	bcs.n	8007ea8 <__hexnan+0xcc>
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	b91b      	cbnz	r3, 8007ebc <__hexnan+0xe0>
 8007eb4:	4547      	cmp	r7, r8
 8007eb6:	d128      	bne.n	8007f0a <__hexnan+0x12e>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	603b      	str	r3, [r7, #0]
 8007ebc:	2005      	movs	r0, #5
 8007ebe:	b007      	add	sp, #28
 8007ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec4:	3501      	adds	r5, #1
 8007ec6:	2d08      	cmp	r5, #8
 8007ec8:	f10b 0b01 	add.w	fp, fp, #1
 8007ecc:	dd06      	ble.n	8007edc <__hexnan+0x100>
 8007ece:	4544      	cmp	r4, r8
 8007ed0:	d9c1      	bls.n	8007e56 <__hexnan+0x7a>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	2501      	movs	r5, #1
 8007ed6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007eda:	3c04      	subs	r4, #4
 8007edc:	6822      	ldr	r2, [r4, #0]
 8007ede:	f000 000f 	and.w	r0, r0, #15
 8007ee2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007ee6:	6020      	str	r0, [r4, #0]
 8007ee8:	e7b5      	b.n	8007e56 <__hexnan+0x7a>
 8007eea:	2508      	movs	r5, #8
 8007eec:	e7b3      	b.n	8007e56 <__hexnan+0x7a>
 8007eee:	9b01      	ldr	r3, [sp, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d0dd      	beq.n	8007eb0 <__hexnan+0xd4>
 8007ef4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ef8:	f1c3 0320 	rsb	r3, r3, #32
 8007efc:	40da      	lsrs	r2, r3
 8007efe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007f02:	4013      	ands	r3, r2
 8007f04:	f846 3c04 	str.w	r3, [r6, #-4]
 8007f08:	e7d2      	b.n	8007eb0 <__hexnan+0xd4>
 8007f0a:	3f04      	subs	r7, #4
 8007f0c:	e7d0      	b.n	8007eb0 <__hexnan+0xd4>
 8007f0e:	2004      	movs	r0, #4
 8007f10:	e7d5      	b.n	8007ebe <__hexnan+0xe2>

08007f12 <__ascii_mbtowc>:
 8007f12:	b082      	sub	sp, #8
 8007f14:	b901      	cbnz	r1, 8007f18 <__ascii_mbtowc+0x6>
 8007f16:	a901      	add	r1, sp, #4
 8007f18:	b142      	cbz	r2, 8007f2c <__ascii_mbtowc+0x1a>
 8007f1a:	b14b      	cbz	r3, 8007f30 <__ascii_mbtowc+0x1e>
 8007f1c:	7813      	ldrb	r3, [r2, #0]
 8007f1e:	600b      	str	r3, [r1, #0]
 8007f20:	7812      	ldrb	r2, [r2, #0]
 8007f22:	1e10      	subs	r0, r2, #0
 8007f24:	bf18      	it	ne
 8007f26:	2001      	movne	r0, #1
 8007f28:	b002      	add	sp, #8
 8007f2a:	4770      	bx	lr
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	e7fb      	b.n	8007f28 <__ascii_mbtowc+0x16>
 8007f30:	f06f 0001 	mvn.w	r0, #1
 8007f34:	e7f8      	b.n	8007f28 <__ascii_mbtowc+0x16>

08007f36 <_realloc_r>:
 8007f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f3a:	4680      	mov	r8, r0
 8007f3c:	4615      	mov	r5, r2
 8007f3e:	460c      	mov	r4, r1
 8007f40:	b921      	cbnz	r1, 8007f4c <_realloc_r+0x16>
 8007f42:	4611      	mov	r1, r2
 8007f44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f48:	f7fd be78 	b.w	8005c3c <_malloc_r>
 8007f4c:	b92a      	cbnz	r2, 8007f5a <_realloc_r+0x24>
 8007f4e:	f7fd fe03 	bl	8005b58 <_free_r>
 8007f52:	2400      	movs	r4, #0
 8007f54:	4620      	mov	r0, r4
 8007f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f5a:	f000 f840 	bl	8007fde <_malloc_usable_size_r>
 8007f5e:	4285      	cmp	r5, r0
 8007f60:	4606      	mov	r6, r0
 8007f62:	d802      	bhi.n	8007f6a <_realloc_r+0x34>
 8007f64:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007f68:	d8f4      	bhi.n	8007f54 <_realloc_r+0x1e>
 8007f6a:	4629      	mov	r1, r5
 8007f6c:	4640      	mov	r0, r8
 8007f6e:	f7fd fe65 	bl	8005c3c <_malloc_r>
 8007f72:	4607      	mov	r7, r0
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d0ec      	beq.n	8007f52 <_realloc_r+0x1c>
 8007f78:	42b5      	cmp	r5, r6
 8007f7a:	462a      	mov	r2, r5
 8007f7c:	4621      	mov	r1, r4
 8007f7e:	bf28      	it	cs
 8007f80:	4632      	movcs	r2, r6
 8007f82:	f7ff fc47 	bl	8007814 <memcpy>
 8007f86:	4621      	mov	r1, r4
 8007f88:	4640      	mov	r0, r8
 8007f8a:	f7fd fde5 	bl	8005b58 <_free_r>
 8007f8e:	463c      	mov	r4, r7
 8007f90:	e7e0      	b.n	8007f54 <_realloc_r+0x1e>

08007f92 <__ascii_wctomb>:
 8007f92:	4603      	mov	r3, r0
 8007f94:	4608      	mov	r0, r1
 8007f96:	b141      	cbz	r1, 8007faa <__ascii_wctomb+0x18>
 8007f98:	2aff      	cmp	r2, #255	@ 0xff
 8007f9a:	d904      	bls.n	8007fa6 <__ascii_wctomb+0x14>
 8007f9c:	228a      	movs	r2, #138	@ 0x8a
 8007f9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	4770      	bx	lr
 8007fa6:	2001      	movs	r0, #1
 8007fa8:	700a      	strb	r2, [r1, #0]
 8007faa:	4770      	bx	lr

08007fac <fiprintf>:
 8007fac:	b40e      	push	{r1, r2, r3}
 8007fae:	b503      	push	{r0, r1, lr}
 8007fb0:	4601      	mov	r1, r0
 8007fb2:	ab03      	add	r3, sp, #12
 8007fb4:	4805      	ldr	r0, [pc, #20]	@ (8007fcc <fiprintf+0x20>)
 8007fb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fba:	6800      	ldr	r0, [r0, #0]
 8007fbc:	9301      	str	r3, [sp, #4]
 8007fbe:	f000 f83d 	bl	800803c <_vfiprintf_r>
 8007fc2:	b002      	add	sp, #8
 8007fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fc8:	b003      	add	sp, #12
 8007fca:	4770      	bx	lr
 8007fcc:	20000018 	.word	0x20000018

08007fd0 <abort>:
 8007fd0:	2006      	movs	r0, #6
 8007fd2:	b508      	push	{r3, lr}
 8007fd4:	f000 fa06 	bl	80083e4 <raise>
 8007fd8:	2001      	movs	r0, #1
 8007fda:	f7f9 fe84 	bl	8001ce6 <_exit>

08007fde <_malloc_usable_size_r>:
 8007fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fe2:	1f18      	subs	r0, r3, #4
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	bfbc      	itt	lt
 8007fe8:	580b      	ldrlt	r3, [r1, r0]
 8007fea:	18c0      	addlt	r0, r0, r3
 8007fec:	4770      	bx	lr

08007fee <__sfputc_r>:
 8007fee:	6893      	ldr	r3, [r2, #8]
 8007ff0:	b410      	push	{r4}
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	6093      	str	r3, [r2, #8]
 8007ff8:	da07      	bge.n	800800a <__sfputc_r+0x1c>
 8007ffa:	6994      	ldr	r4, [r2, #24]
 8007ffc:	42a3      	cmp	r3, r4
 8007ffe:	db01      	blt.n	8008004 <__sfputc_r+0x16>
 8008000:	290a      	cmp	r1, #10
 8008002:	d102      	bne.n	800800a <__sfputc_r+0x1c>
 8008004:	bc10      	pop	{r4}
 8008006:	f000 b931 	b.w	800826c <__swbuf_r>
 800800a:	6813      	ldr	r3, [r2, #0]
 800800c:	1c58      	adds	r0, r3, #1
 800800e:	6010      	str	r0, [r2, #0]
 8008010:	7019      	strb	r1, [r3, #0]
 8008012:	4608      	mov	r0, r1
 8008014:	bc10      	pop	{r4}
 8008016:	4770      	bx	lr

08008018 <__sfputs_r>:
 8008018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801a:	4606      	mov	r6, r0
 800801c:	460f      	mov	r7, r1
 800801e:	4614      	mov	r4, r2
 8008020:	18d5      	adds	r5, r2, r3
 8008022:	42ac      	cmp	r4, r5
 8008024:	d101      	bne.n	800802a <__sfputs_r+0x12>
 8008026:	2000      	movs	r0, #0
 8008028:	e007      	b.n	800803a <__sfputs_r+0x22>
 800802a:	463a      	mov	r2, r7
 800802c:	4630      	mov	r0, r6
 800802e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008032:	f7ff ffdc 	bl	8007fee <__sfputc_r>
 8008036:	1c43      	adds	r3, r0, #1
 8008038:	d1f3      	bne.n	8008022 <__sfputs_r+0xa>
 800803a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800803c <_vfiprintf_r>:
 800803c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008040:	460d      	mov	r5, r1
 8008042:	4614      	mov	r4, r2
 8008044:	4698      	mov	r8, r3
 8008046:	4606      	mov	r6, r0
 8008048:	b09d      	sub	sp, #116	@ 0x74
 800804a:	b118      	cbz	r0, 8008054 <_vfiprintf_r+0x18>
 800804c:	6a03      	ldr	r3, [r0, #32]
 800804e:	b90b      	cbnz	r3, 8008054 <_vfiprintf_r+0x18>
 8008050:	f7fc fe04 	bl	8004c5c <__sinit>
 8008054:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008056:	07d9      	lsls	r1, r3, #31
 8008058:	d405      	bmi.n	8008066 <_vfiprintf_r+0x2a>
 800805a:	89ab      	ldrh	r3, [r5, #12]
 800805c:	059a      	lsls	r2, r3, #22
 800805e:	d402      	bmi.n	8008066 <_vfiprintf_r+0x2a>
 8008060:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008062:	f7fc ff12 	bl	8004e8a <__retarget_lock_acquire_recursive>
 8008066:	89ab      	ldrh	r3, [r5, #12]
 8008068:	071b      	lsls	r3, r3, #28
 800806a:	d501      	bpl.n	8008070 <_vfiprintf_r+0x34>
 800806c:	692b      	ldr	r3, [r5, #16]
 800806e:	b99b      	cbnz	r3, 8008098 <_vfiprintf_r+0x5c>
 8008070:	4629      	mov	r1, r5
 8008072:	4630      	mov	r0, r6
 8008074:	f000 f938 	bl	80082e8 <__swsetup_r>
 8008078:	b170      	cbz	r0, 8008098 <_vfiprintf_r+0x5c>
 800807a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800807c:	07dc      	lsls	r4, r3, #31
 800807e:	d504      	bpl.n	800808a <_vfiprintf_r+0x4e>
 8008080:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008084:	b01d      	add	sp, #116	@ 0x74
 8008086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800808a:	89ab      	ldrh	r3, [r5, #12]
 800808c:	0598      	lsls	r0, r3, #22
 800808e:	d4f7      	bmi.n	8008080 <_vfiprintf_r+0x44>
 8008090:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008092:	f7fc fefb 	bl	8004e8c <__retarget_lock_release_recursive>
 8008096:	e7f3      	b.n	8008080 <_vfiprintf_r+0x44>
 8008098:	2300      	movs	r3, #0
 800809a:	9309      	str	r3, [sp, #36]	@ 0x24
 800809c:	2320      	movs	r3, #32
 800809e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080a2:	2330      	movs	r3, #48	@ 0x30
 80080a4:	f04f 0901 	mov.w	r9, #1
 80080a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80080ac:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008258 <_vfiprintf_r+0x21c>
 80080b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080b4:	4623      	mov	r3, r4
 80080b6:	469a      	mov	sl, r3
 80080b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080bc:	b10a      	cbz	r2, 80080c2 <_vfiprintf_r+0x86>
 80080be:	2a25      	cmp	r2, #37	@ 0x25
 80080c0:	d1f9      	bne.n	80080b6 <_vfiprintf_r+0x7a>
 80080c2:	ebba 0b04 	subs.w	fp, sl, r4
 80080c6:	d00b      	beq.n	80080e0 <_vfiprintf_r+0xa4>
 80080c8:	465b      	mov	r3, fp
 80080ca:	4622      	mov	r2, r4
 80080cc:	4629      	mov	r1, r5
 80080ce:	4630      	mov	r0, r6
 80080d0:	f7ff ffa2 	bl	8008018 <__sfputs_r>
 80080d4:	3001      	adds	r0, #1
 80080d6:	f000 80a7 	beq.w	8008228 <_vfiprintf_r+0x1ec>
 80080da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080dc:	445a      	add	r2, fp
 80080de:	9209      	str	r2, [sp, #36]	@ 0x24
 80080e0:	f89a 3000 	ldrb.w	r3, [sl]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f000 809f 	beq.w	8008228 <_vfiprintf_r+0x1ec>
 80080ea:	2300      	movs	r3, #0
 80080ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80080f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080f4:	f10a 0a01 	add.w	sl, sl, #1
 80080f8:	9304      	str	r3, [sp, #16]
 80080fa:	9307      	str	r3, [sp, #28]
 80080fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008100:	931a      	str	r3, [sp, #104]	@ 0x68
 8008102:	4654      	mov	r4, sl
 8008104:	2205      	movs	r2, #5
 8008106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800810a:	4853      	ldr	r0, [pc, #332]	@ (8008258 <_vfiprintf_r+0x21c>)
 800810c:	f7fc febf 	bl	8004e8e <memchr>
 8008110:	9a04      	ldr	r2, [sp, #16]
 8008112:	b9d8      	cbnz	r0, 800814c <_vfiprintf_r+0x110>
 8008114:	06d1      	lsls	r1, r2, #27
 8008116:	bf44      	itt	mi
 8008118:	2320      	movmi	r3, #32
 800811a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800811e:	0713      	lsls	r3, r2, #28
 8008120:	bf44      	itt	mi
 8008122:	232b      	movmi	r3, #43	@ 0x2b
 8008124:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008128:	f89a 3000 	ldrb.w	r3, [sl]
 800812c:	2b2a      	cmp	r3, #42	@ 0x2a
 800812e:	d015      	beq.n	800815c <_vfiprintf_r+0x120>
 8008130:	4654      	mov	r4, sl
 8008132:	2000      	movs	r0, #0
 8008134:	f04f 0c0a 	mov.w	ip, #10
 8008138:	9a07      	ldr	r2, [sp, #28]
 800813a:	4621      	mov	r1, r4
 800813c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008140:	3b30      	subs	r3, #48	@ 0x30
 8008142:	2b09      	cmp	r3, #9
 8008144:	d94b      	bls.n	80081de <_vfiprintf_r+0x1a2>
 8008146:	b1b0      	cbz	r0, 8008176 <_vfiprintf_r+0x13a>
 8008148:	9207      	str	r2, [sp, #28]
 800814a:	e014      	b.n	8008176 <_vfiprintf_r+0x13a>
 800814c:	eba0 0308 	sub.w	r3, r0, r8
 8008150:	fa09 f303 	lsl.w	r3, r9, r3
 8008154:	4313      	orrs	r3, r2
 8008156:	46a2      	mov	sl, r4
 8008158:	9304      	str	r3, [sp, #16]
 800815a:	e7d2      	b.n	8008102 <_vfiprintf_r+0xc6>
 800815c:	9b03      	ldr	r3, [sp, #12]
 800815e:	1d19      	adds	r1, r3, #4
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	9103      	str	r1, [sp, #12]
 8008164:	2b00      	cmp	r3, #0
 8008166:	bfbb      	ittet	lt
 8008168:	425b      	neglt	r3, r3
 800816a:	f042 0202 	orrlt.w	r2, r2, #2
 800816e:	9307      	strge	r3, [sp, #28]
 8008170:	9307      	strlt	r3, [sp, #28]
 8008172:	bfb8      	it	lt
 8008174:	9204      	strlt	r2, [sp, #16]
 8008176:	7823      	ldrb	r3, [r4, #0]
 8008178:	2b2e      	cmp	r3, #46	@ 0x2e
 800817a:	d10a      	bne.n	8008192 <_vfiprintf_r+0x156>
 800817c:	7863      	ldrb	r3, [r4, #1]
 800817e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008180:	d132      	bne.n	80081e8 <_vfiprintf_r+0x1ac>
 8008182:	9b03      	ldr	r3, [sp, #12]
 8008184:	3402      	adds	r4, #2
 8008186:	1d1a      	adds	r2, r3, #4
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	9203      	str	r2, [sp, #12]
 800818c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008190:	9305      	str	r3, [sp, #20]
 8008192:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800825c <_vfiprintf_r+0x220>
 8008196:	2203      	movs	r2, #3
 8008198:	4650      	mov	r0, sl
 800819a:	7821      	ldrb	r1, [r4, #0]
 800819c:	f7fc fe77 	bl	8004e8e <memchr>
 80081a0:	b138      	cbz	r0, 80081b2 <_vfiprintf_r+0x176>
 80081a2:	2240      	movs	r2, #64	@ 0x40
 80081a4:	9b04      	ldr	r3, [sp, #16]
 80081a6:	eba0 000a 	sub.w	r0, r0, sl
 80081aa:	4082      	lsls	r2, r0
 80081ac:	4313      	orrs	r3, r2
 80081ae:	3401      	adds	r4, #1
 80081b0:	9304      	str	r3, [sp, #16]
 80081b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b6:	2206      	movs	r2, #6
 80081b8:	4829      	ldr	r0, [pc, #164]	@ (8008260 <_vfiprintf_r+0x224>)
 80081ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081be:	f7fc fe66 	bl	8004e8e <memchr>
 80081c2:	2800      	cmp	r0, #0
 80081c4:	d03f      	beq.n	8008246 <_vfiprintf_r+0x20a>
 80081c6:	4b27      	ldr	r3, [pc, #156]	@ (8008264 <_vfiprintf_r+0x228>)
 80081c8:	bb1b      	cbnz	r3, 8008212 <_vfiprintf_r+0x1d6>
 80081ca:	9b03      	ldr	r3, [sp, #12]
 80081cc:	3307      	adds	r3, #7
 80081ce:	f023 0307 	bic.w	r3, r3, #7
 80081d2:	3308      	adds	r3, #8
 80081d4:	9303      	str	r3, [sp, #12]
 80081d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081d8:	443b      	add	r3, r7
 80081da:	9309      	str	r3, [sp, #36]	@ 0x24
 80081dc:	e76a      	b.n	80080b4 <_vfiprintf_r+0x78>
 80081de:	460c      	mov	r4, r1
 80081e0:	2001      	movs	r0, #1
 80081e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80081e6:	e7a8      	b.n	800813a <_vfiprintf_r+0xfe>
 80081e8:	2300      	movs	r3, #0
 80081ea:	f04f 0c0a 	mov.w	ip, #10
 80081ee:	4619      	mov	r1, r3
 80081f0:	3401      	adds	r4, #1
 80081f2:	9305      	str	r3, [sp, #20]
 80081f4:	4620      	mov	r0, r4
 80081f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081fa:	3a30      	subs	r2, #48	@ 0x30
 80081fc:	2a09      	cmp	r2, #9
 80081fe:	d903      	bls.n	8008208 <_vfiprintf_r+0x1cc>
 8008200:	2b00      	cmp	r3, #0
 8008202:	d0c6      	beq.n	8008192 <_vfiprintf_r+0x156>
 8008204:	9105      	str	r1, [sp, #20]
 8008206:	e7c4      	b.n	8008192 <_vfiprintf_r+0x156>
 8008208:	4604      	mov	r4, r0
 800820a:	2301      	movs	r3, #1
 800820c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008210:	e7f0      	b.n	80081f4 <_vfiprintf_r+0x1b8>
 8008212:	ab03      	add	r3, sp, #12
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	462a      	mov	r2, r5
 8008218:	4630      	mov	r0, r6
 800821a:	4b13      	ldr	r3, [pc, #76]	@ (8008268 <_vfiprintf_r+0x22c>)
 800821c:	a904      	add	r1, sp, #16
 800821e:	f7fb fec3 	bl	8003fa8 <_printf_float>
 8008222:	4607      	mov	r7, r0
 8008224:	1c78      	adds	r0, r7, #1
 8008226:	d1d6      	bne.n	80081d6 <_vfiprintf_r+0x19a>
 8008228:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800822a:	07d9      	lsls	r1, r3, #31
 800822c:	d405      	bmi.n	800823a <_vfiprintf_r+0x1fe>
 800822e:	89ab      	ldrh	r3, [r5, #12]
 8008230:	059a      	lsls	r2, r3, #22
 8008232:	d402      	bmi.n	800823a <_vfiprintf_r+0x1fe>
 8008234:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008236:	f7fc fe29 	bl	8004e8c <__retarget_lock_release_recursive>
 800823a:	89ab      	ldrh	r3, [r5, #12]
 800823c:	065b      	lsls	r3, r3, #25
 800823e:	f53f af1f 	bmi.w	8008080 <_vfiprintf_r+0x44>
 8008242:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008244:	e71e      	b.n	8008084 <_vfiprintf_r+0x48>
 8008246:	ab03      	add	r3, sp, #12
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	462a      	mov	r2, r5
 800824c:	4630      	mov	r0, r6
 800824e:	4b06      	ldr	r3, [pc, #24]	@ (8008268 <_vfiprintf_r+0x22c>)
 8008250:	a904      	add	r1, sp, #16
 8008252:	f7fc f947 	bl	80044e4 <_printf_i>
 8008256:	e7e4      	b.n	8008222 <_vfiprintf_r+0x1e6>
 8008258:	08008929 	.word	0x08008929
 800825c:	0800892f 	.word	0x0800892f
 8008260:	08008933 	.word	0x08008933
 8008264:	08003fa9 	.word	0x08003fa9
 8008268:	08008019 	.word	0x08008019

0800826c <__swbuf_r>:
 800826c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826e:	460e      	mov	r6, r1
 8008270:	4614      	mov	r4, r2
 8008272:	4605      	mov	r5, r0
 8008274:	b118      	cbz	r0, 800827e <__swbuf_r+0x12>
 8008276:	6a03      	ldr	r3, [r0, #32]
 8008278:	b90b      	cbnz	r3, 800827e <__swbuf_r+0x12>
 800827a:	f7fc fcef 	bl	8004c5c <__sinit>
 800827e:	69a3      	ldr	r3, [r4, #24]
 8008280:	60a3      	str	r3, [r4, #8]
 8008282:	89a3      	ldrh	r3, [r4, #12]
 8008284:	071a      	lsls	r2, r3, #28
 8008286:	d501      	bpl.n	800828c <__swbuf_r+0x20>
 8008288:	6923      	ldr	r3, [r4, #16]
 800828a:	b943      	cbnz	r3, 800829e <__swbuf_r+0x32>
 800828c:	4621      	mov	r1, r4
 800828e:	4628      	mov	r0, r5
 8008290:	f000 f82a 	bl	80082e8 <__swsetup_r>
 8008294:	b118      	cbz	r0, 800829e <__swbuf_r+0x32>
 8008296:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800829a:	4638      	mov	r0, r7
 800829c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	6922      	ldr	r2, [r4, #16]
 80082a2:	b2f6      	uxtb	r6, r6
 80082a4:	1a98      	subs	r0, r3, r2
 80082a6:	6963      	ldr	r3, [r4, #20]
 80082a8:	4637      	mov	r7, r6
 80082aa:	4283      	cmp	r3, r0
 80082ac:	dc05      	bgt.n	80082ba <__swbuf_r+0x4e>
 80082ae:	4621      	mov	r1, r4
 80082b0:	4628      	mov	r0, r5
 80082b2:	f7ff fa4b 	bl	800774c <_fflush_r>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d1ed      	bne.n	8008296 <__swbuf_r+0x2a>
 80082ba:	68a3      	ldr	r3, [r4, #8]
 80082bc:	3b01      	subs	r3, #1
 80082be:	60a3      	str	r3, [r4, #8]
 80082c0:	6823      	ldr	r3, [r4, #0]
 80082c2:	1c5a      	adds	r2, r3, #1
 80082c4:	6022      	str	r2, [r4, #0]
 80082c6:	701e      	strb	r6, [r3, #0]
 80082c8:	6962      	ldr	r2, [r4, #20]
 80082ca:	1c43      	adds	r3, r0, #1
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d004      	beq.n	80082da <__swbuf_r+0x6e>
 80082d0:	89a3      	ldrh	r3, [r4, #12]
 80082d2:	07db      	lsls	r3, r3, #31
 80082d4:	d5e1      	bpl.n	800829a <__swbuf_r+0x2e>
 80082d6:	2e0a      	cmp	r6, #10
 80082d8:	d1df      	bne.n	800829a <__swbuf_r+0x2e>
 80082da:	4621      	mov	r1, r4
 80082dc:	4628      	mov	r0, r5
 80082de:	f7ff fa35 	bl	800774c <_fflush_r>
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d0d9      	beq.n	800829a <__swbuf_r+0x2e>
 80082e6:	e7d6      	b.n	8008296 <__swbuf_r+0x2a>

080082e8 <__swsetup_r>:
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	4b29      	ldr	r3, [pc, #164]	@ (8008390 <__swsetup_r+0xa8>)
 80082ec:	4605      	mov	r5, r0
 80082ee:	6818      	ldr	r0, [r3, #0]
 80082f0:	460c      	mov	r4, r1
 80082f2:	b118      	cbz	r0, 80082fc <__swsetup_r+0x14>
 80082f4:	6a03      	ldr	r3, [r0, #32]
 80082f6:	b90b      	cbnz	r3, 80082fc <__swsetup_r+0x14>
 80082f8:	f7fc fcb0 	bl	8004c5c <__sinit>
 80082fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008300:	0719      	lsls	r1, r3, #28
 8008302:	d422      	bmi.n	800834a <__swsetup_r+0x62>
 8008304:	06da      	lsls	r2, r3, #27
 8008306:	d407      	bmi.n	8008318 <__swsetup_r+0x30>
 8008308:	2209      	movs	r2, #9
 800830a:	602a      	str	r2, [r5, #0]
 800830c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008310:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008314:	81a3      	strh	r3, [r4, #12]
 8008316:	e033      	b.n	8008380 <__swsetup_r+0x98>
 8008318:	0758      	lsls	r0, r3, #29
 800831a:	d512      	bpl.n	8008342 <__swsetup_r+0x5a>
 800831c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800831e:	b141      	cbz	r1, 8008332 <__swsetup_r+0x4a>
 8008320:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008324:	4299      	cmp	r1, r3
 8008326:	d002      	beq.n	800832e <__swsetup_r+0x46>
 8008328:	4628      	mov	r0, r5
 800832a:	f7fd fc15 	bl	8005b58 <_free_r>
 800832e:	2300      	movs	r3, #0
 8008330:	6363      	str	r3, [r4, #52]	@ 0x34
 8008332:	89a3      	ldrh	r3, [r4, #12]
 8008334:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008338:	81a3      	strh	r3, [r4, #12]
 800833a:	2300      	movs	r3, #0
 800833c:	6063      	str	r3, [r4, #4]
 800833e:	6923      	ldr	r3, [r4, #16]
 8008340:	6023      	str	r3, [r4, #0]
 8008342:	89a3      	ldrh	r3, [r4, #12]
 8008344:	f043 0308 	orr.w	r3, r3, #8
 8008348:	81a3      	strh	r3, [r4, #12]
 800834a:	6923      	ldr	r3, [r4, #16]
 800834c:	b94b      	cbnz	r3, 8008362 <__swsetup_r+0x7a>
 800834e:	89a3      	ldrh	r3, [r4, #12]
 8008350:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008354:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008358:	d003      	beq.n	8008362 <__swsetup_r+0x7a>
 800835a:	4621      	mov	r1, r4
 800835c:	4628      	mov	r0, r5
 800835e:	f000 f882 	bl	8008466 <__smakebuf_r>
 8008362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008366:	f013 0201 	ands.w	r2, r3, #1
 800836a:	d00a      	beq.n	8008382 <__swsetup_r+0x9a>
 800836c:	2200      	movs	r2, #0
 800836e:	60a2      	str	r2, [r4, #8]
 8008370:	6962      	ldr	r2, [r4, #20]
 8008372:	4252      	negs	r2, r2
 8008374:	61a2      	str	r2, [r4, #24]
 8008376:	6922      	ldr	r2, [r4, #16]
 8008378:	b942      	cbnz	r2, 800838c <__swsetup_r+0xa4>
 800837a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800837e:	d1c5      	bne.n	800830c <__swsetup_r+0x24>
 8008380:	bd38      	pop	{r3, r4, r5, pc}
 8008382:	0799      	lsls	r1, r3, #30
 8008384:	bf58      	it	pl
 8008386:	6962      	ldrpl	r2, [r4, #20]
 8008388:	60a2      	str	r2, [r4, #8]
 800838a:	e7f4      	b.n	8008376 <__swsetup_r+0x8e>
 800838c:	2000      	movs	r0, #0
 800838e:	e7f7      	b.n	8008380 <__swsetup_r+0x98>
 8008390:	20000018 	.word	0x20000018

08008394 <_raise_r>:
 8008394:	291f      	cmp	r1, #31
 8008396:	b538      	push	{r3, r4, r5, lr}
 8008398:	4605      	mov	r5, r0
 800839a:	460c      	mov	r4, r1
 800839c:	d904      	bls.n	80083a8 <_raise_r+0x14>
 800839e:	2316      	movs	r3, #22
 80083a0:	6003      	str	r3, [r0, #0]
 80083a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083a6:	bd38      	pop	{r3, r4, r5, pc}
 80083a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80083aa:	b112      	cbz	r2, 80083b2 <_raise_r+0x1e>
 80083ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083b0:	b94b      	cbnz	r3, 80083c6 <_raise_r+0x32>
 80083b2:	4628      	mov	r0, r5
 80083b4:	f000 f830 	bl	8008418 <_getpid_r>
 80083b8:	4622      	mov	r2, r4
 80083ba:	4601      	mov	r1, r0
 80083bc:	4628      	mov	r0, r5
 80083be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083c2:	f000 b817 	b.w	80083f4 <_kill_r>
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d00a      	beq.n	80083e0 <_raise_r+0x4c>
 80083ca:	1c59      	adds	r1, r3, #1
 80083cc:	d103      	bne.n	80083d6 <_raise_r+0x42>
 80083ce:	2316      	movs	r3, #22
 80083d0:	6003      	str	r3, [r0, #0]
 80083d2:	2001      	movs	r0, #1
 80083d4:	e7e7      	b.n	80083a6 <_raise_r+0x12>
 80083d6:	2100      	movs	r1, #0
 80083d8:	4620      	mov	r0, r4
 80083da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80083de:	4798      	blx	r3
 80083e0:	2000      	movs	r0, #0
 80083e2:	e7e0      	b.n	80083a6 <_raise_r+0x12>

080083e4 <raise>:
 80083e4:	4b02      	ldr	r3, [pc, #8]	@ (80083f0 <raise+0xc>)
 80083e6:	4601      	mov	r1, r0
 80083e8:	6818      	ldr	r0, [r3, #0]
 80083ea:	f7ff bfd3 	b.w	8008394 <_raise_r>
 80083ee:	bf00      	nop
 80083f0:	20000018 	.word	0x20000018

080083f4 <_kill_r>:
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	2300      	movs	r3, #0
 80083f8:	4d06      	ldr	r5, [pc, #24]	@ (8008414 <_kill_r+0x20>)
 80083fa:	4604      	mov	r4, r0
 80083fc:	4608      	mov	r0, r1
 80083fe:	4611      	mov	r1, r2
 8008400:	602b      	str	r3, [r5, #0]
 8008402:	f7f9 fc60 	bl	8001cc6 <_kill>
 8008406:	1c43      	adds	r3, r0, #1
 8008408:	d102      	bne.n	8008410 <_kill_r+0x1c>
 800840a:	682b      	ldr	r3, [r5, #0]
 800840c:	b103      	cbz	r3, 8008410 <_kill_r+0x1c>
 800840e:	6023      	str	r3, [r4, #0]
 8008410:	bd38      	pop	{r3, r4, r5, pc}
 8008412:	bf00      	nop
 8008414:	2000041c 	.word	0x2000041c

08008418 <_getpid_r>:
 8008418:	f7f9 bc4e 	b.w	8001cb8 <_getpid>

0800841c <__swhatbuf_r>:
 800841c:	b570      	push	{r4, r5, r6, lr}
 800841e:	460c      	mov	r4, r1
 8008420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008424:	4615      	mov	r5, r2
 8008426:	2900      	cmp	r1, #0
 8008428:	461e      	mov	r6, r3
 800842a:	b096      	sub	sp, #88	@ 0x58
 800842c:	da0c      	bge.n	8008448 <__swhatbuf_r+0x2c>
 800842e:	89a3      	ldrh	r3, [r4, #12]
 8008430:	2100      	movs	r1, #0
 8008432:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008436:	bf14      	ite	ne
 8008438:	2340      	movne	r3, #64	@ 0x40
 800843a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800843e:	2000      	movs	r0, #0
 8008440:	6031      	str	r1, [r6, #0]
 8008442:	602b      	str	r3, [r5, #0]
 8008444:	b016      	add	sp, #88	@ 0x58
 8008446:	bd70      	pop	{r4, r5, r6, pc}
 8008448:	466a      	mov	r2, sp
 800844a:	f000 f849 	bl	80084e0 <_fstat_r>
 800844e:	2800      	cmp	r0, #0
 8008450:	dbed      	blt.n	800842e <__swhatbuf_r+0x12>
 8008452:	9901      	ldr	r1, [sp, #4]
 8008454:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008458:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800845c:	4259      	negs	r1, r3
 800845e:	4159      	adcs	r1, r3
 8008460:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008464:	e7eb      	b.n	800843e <__swhatbuf_r+0x22>

08008466 <__smakebuf_r>:
 8008466:	898b      	ldrh	r3, [r1, #12]
 8008468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800846a:	079d      	lsls	r5, r3, #30
 800846c:	4606      	mov	r6, r0
 800846e:	460c      	mov	r4, r1
 8008470:	d507      	bpl.n	8008482 <__smakebuf_r+0x1c>
 8008472:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008476:	6023      	str	r3, [r4, #0]
 8008478:	6123      	str	r3, [r4, #16]
 800847a:	2301      	movs	r3, #1
 800847c:	6163      	str	r3, [r4, #20]
 800847e:	b003      	add	sp, #12
 8008480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008482:	466a      	mov	r2, sp
 8008484:	ab01      	add	r3, sp, #4
 8008486:	f7ff ffc9 	bl	800841c <__swhatbuf_r>
 800848a:	9f00      	ldr	r7, [sp, #0]
 800848c:	4605      	mov	r5, r0
 800848e:	4639      	mov	r1, r7
 8008490:	4630      	mov	r0, r6
 8008492:	f7fd fbd3 	bl	8005c3c <_malloc_r>
 8008496:	b948      	cbnz	r0, 80084ac <__smakebuf_r+0x46>
 8008498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800849c:	059a      	lsls	r2, r3, #22
 800849e:	d4ee      	bmi.n	800847e <__smakebuf_r+0x18>
 80084a0:	f023 0303 	bic.w	r3, r3, #3
 80084a4:	f043 0302 	orr.w	r3, r3, #2
 80084a8:	81a3      	strh	r3, [r4, #12]
 80084aa:	e7e2      	b.n	8008472 <__smakebuf_r+0xc>
 80084ac:	89a3      	ldrh	r3, [r4, #12]
 80084ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80084b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084b6:	81a3      	strh	r3, [r4, #12]
 80084b8:	9b01      	ldr	r3, [sp, #4]
 80084ba:	6020      	str	r0, [r4, #0]
 80084bc:	b15b      	cbz	r3, 80084d6 <__smakebuf_r+0x70>
 80084be:	4630      	mov	r0, r6
 80084c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084c4:	f000 f81e 	bl	8008504 <_isatty_r>
 80084c8:	b128      	cbz	r0, 80084d6 <__smakebuf_r+0x70>
 80084ca:	89a3      	ldrh	r3, [r4, #12]
 80084cc:	f023 0303 	bic.w	r3, r3, #3
 80084d0:	f043 0301 	orr.w	r3, r3, #1
 80084d4:	81a3      	strh	r3, [r4, #12]
 80084d6:	89a3      	ldrh	r3, [r4, #12]
 80084d8:	431d      	orrs	r5, r3
 80084da:	81a5      	strh	r5, [r4, #12]
 80084dc:	e7cf      	b.n	800847e <__smakebuf_r+0x18>
	...

080084e0 <_fstat_r>:
 80084e0:	b538      	push	{r3, r4, r5, lr}
 80084e2:	2300      	movs	r3, #0
 80084e4:	4d06      	ldr	r5, [pc, #24]	@ (8008500 <_fstat_r+0x20>)
 80084e6:	4604      	mov	r4, r0
 80084e8:	4608      	mov	r0, r1
 80084ea:	4611      	mov	r1, r2
 80084ec:	602b      	str	r3, [r5, #0]
 80084ee:	f7f9 fc49 	bl	8001d84 <_fstat>
 80084f2:	1c43      	adds	r3, r0, #1
 80084f4:	d102      	bne.n	80084fc <_fstat_r+0x1c>
 80084f6:	682b      	ldr	r3, [r5, #0]
 80084f8:	b103      	cbz	r3, 80084fc <_fstat_r+0x1c>
 80084fa:	6023      	str	r3, [r4, #0]
 80084fc:	bd38      	pop	{r3, r4, r5, pc}
 80084fe:	bf00      	nop
 8008500:	2000041c 	.word	0x2000041c

08008504 <_isatty_r>:
 8008504:	b538      	push	{r3, r4, r5, lr}
 8008506:	2300      	movs	r3, #0
 8008508:	4d05      	ldr	r5, [pc, #20]	@ (8008520 <_isatty_r+0x1c>)
 800850a:	4604      	mov	r4, r0
 800850c:	4608      	mov	r0, r1
 800850e:	602b      	str	r3, [r5, #0]
 8008510:	f7f9 fc47 	bl	8001da2 <_isatty>
 8008514:	1c43      	adds	r3, r0, #1
 8008516:	d102      	bne.n	800851e <_isatty_r+0x1a>
 8008518:	682b      	ldr	r3, [r5, #0]
 800851a:	b103      	cbz	r3, 800851e <_isatty_r+0x1a>
 800851c:	6023      	str	r3, [r4, #0]
 800851e:	bd38      	pop	{r3, r4, r5, pc}
 8008520:	2000041c 	.word	0x2000041c

08008524 <_init>:
 8008524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008526:	bf00      	nop
 8008528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800852a:	bc08      	pop	{r3}
 800852c:	469e      	mov	lr, r3
 800852e:	4770      	bx	lr

08008530 <_fini>:
 8008530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008532:	bf00      	nop
 8008534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008536:	bc08      	pop	{r3}
 8008538:	469e      	mov	lr, r3
 800853a:	4770      	bx	lr
