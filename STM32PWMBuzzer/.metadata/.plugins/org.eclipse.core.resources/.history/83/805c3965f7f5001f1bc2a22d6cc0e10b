/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <math.h> // Sinüs hesaplamaları için gerekli
#include "stdio.h"
#include "LCD1602.h"
#include <stdlib.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* USER CODE BEGIN PV */
float deger=100;
float carpan=0.2;
float ekle=100;
int ARR=4000;
int PSC=1;
int frekans=38400;
float F_sayisi=0;
float toplam=0;
float oran=0;
#define TIMCLOCK 72000000.0
#define PRESCALAR 72

uint32_t IC_Val1=0;
uint32_t IC_Val2=0;
uint32_t Difference=0;

int Is_First_Captured=0;

int freq=0;
float frequency = 0;
int gpio9=0;
//periot=(psc-1)*(arr-1)/8000000
//frekans=8000000/((psc-1)*(arr-1))
//frekans*((psc-1)*(arr-1))=8000000
//arr-1=8000000/(frekans*(psc-1))

// Gönderilecek veri
uint8_t txData = 0x00; // Örneğin, 8 bitlik 0x55 verisi (01010101)

// Alınan veri için bir değişken
uint8_t rxData;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int row=0;
int col=0;
char data[32];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
    if (GPIO_Pin == GPIO_PIN_4) {
        if (GPIOB->IDR & GPIO_IDR_IDR4) {

/*
        	txData++;

        	ARR=(TIMCLOCK/(frekans*(PSC+1)))-1;
      	    TIM1->CCR4=ARR*0.5;
      	    TIM1->ARR=ARR;
      	    TIM1->PSC=PSC;

      	    //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);










        	if(frekans==38400){
        		ekle=-100;
        		frekans=30000;
        	}
        	else if(frekans <= 30000){
        		ekle=100;
        		frekans=38400;
        	}
*/


        }
    }

}

/*
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
    if (htim->Instance == TIM3) {

  	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  	  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);

    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);

    }

}
*/



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
	{
		if (Is_First_Captured==0) // if the first rising edge is not captured
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read the first value
			Is_First_Captured = 1;  // set the first captured as true
		}

		else   // If the first rising edge is captured, now we will capture the second edge
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value

			if (IC_Val2 > IC_Val1)
			{
				Difference = IC_Val2-IC_Val1;
			}

			else if (IC_Val1 > IC_Val2)
			{
				Difference = (0xffffffff - IC_Val1) + IC_Val2;
			}

			float refClock = TIMCLOCK/(PRESCALAR);

			frequency = refClock/Difference;

			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured = 0; // set it back to false
		}
	}
}
/*
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){

	if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_4){

		if(is_first_captured==0){

			IC_Val1= HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_4); //__HAL_TIM_GET_COMPARE(htim,TIM_CHANNEL_1);  //HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
			is_first_captured=1;

			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_4,TIM_INPUTCHANNELPOLARITY_FALLING);
		}


		else if(is_first_captured==1){
			IC_Val2=HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_4); //__HAL_TIM_GET_COMPARE(htim,TIM_CHANNEL_1); //HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
			__HAL_TIM_SET_COUNTER(htim, 0);
			if(IC_Val2 > IC_Val1){
				Difference=(IC_Val2-IC_Val1)/100000;

			}
			is_first_captured=0;
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_4,TIM_INPUTCHANNELPOLARITY_RISING);

	      }
	}


}

*/
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  //LCD_Init();
  //lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE);
  //lcd_clear();

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM1_Init();
  MX_TIM4_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);

  lcd_init();
   lcd_put_cur(0, 0);
   lcd_send_string("TUBITAK2209-A ");
   HAL_Delay(1000);
   lcd_put_cur(1, 0);
   lcd_send_string("----->AMKS<----- ");
   HAL_Delay(2000);
   lcd_clear();

   lcd_put_cur(0, 0);
   lcd_send_string("Frekans:");







/*
 // HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_Base_Start(&htim1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);

  HAL_TIM_Base_Start(&htim2);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
  TIM2->CCR4=200*0.5;


  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);



  ARR=(TIMCLOCK/(frekans*(PSC+1)))-1;
  TIM1->CCR4=ARR*0.6;
  TIM1->ARR=ARR;
  TIM1->PSC=PSC;
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);


*/

  //MX_USART3_UART_Init();

  //lcd_print(1, 1,"LCD");
  //lcd_print(2, 1,"ayarlanıyor...");
  //HAL_Delay(250);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

int fark38;
int fark37;
float f37=1;
float f38=1;
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
float oran;
float eskioran;
int artis=0;
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //sprintf(data, "%lu Hz", (unsigned long)Difference);
	  sprintf(data, "%d Hz", (int)frequency);  // %.2f = 2 basamak hassasiyet
	   lcd_put_cur(0, 0);
	   lcd_send_string("Frekans:");
	   lcd_put_cur(0, 8);
	   lcd_send_string(data);
	   HAL_Delay(10);
	   lcd_clear();

	   fark38=(int)frequency-38000;
	   fark37=(int)frequency-37000;



	   if(abs(fark38) <=500){
		   f38++;

	   }
	   else if(abs(fark37) <=500){
		   f37++;

	   }

	   oran=f38/f37;
	   if(oran>eskioran){
		   artis=1;
		   eskioran=oran;
	   }

	   else if(oran<eskioran){
		   artis=0;
		   eskioran=oran;
	   }

	   else{
		   artis=-1;
		   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
		   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
	   }

	   if(artis==1){
		   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
		   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
	   }

	   else if(artis==0){

		   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
		   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
	   }


	   lcd_put_cur(1, 0);
	   lcd_send_string("F_38/F_37:");
	   sprintf(data, "%.2f", oran);
	   lcd_put_cur(1, 10);
	   lcd_send_string(data);



	  /*
	  for (int i=0;i<128;i++)
	  {
		  lcd_put_cur(row, col);

		  lcd_send_data(i+48);

		  col++;

		  if (col > 15) {row++; col = 0;}
		  if (row > 1) row=0;

		  HAL_Delay(250);
	  }
*/

/*
  	for(int frekans=38400;frekans<=44000;frekans+=5600){

			ARR=(TIMCLOCK/(frekans*(PSC+1)))-1;
			TIM1->CCR4=ARR*0.5;
			TIM1->ARR=ARR;
			TIM1->PSC=PSC;

			//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
			HAL_Delay(100);
  	}

  	for(int frekans=44000;frekans>=38400;frekans-=5600){

			ARR=(TIMCLOCK/(frekans*(PSC+1)))-1;
			TIM1->CCR4=ARR*0.5;
			TIM1->ARR=ARR;
			TIM1->PSC=PSC;

			//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
			HAL_Delay(0.5);
  	}
*/
	  /*
	  gpio9=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);

	  if(gpio9){
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
		  F_sayisi++;
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
		  toplam++;
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
	  }



*/


	  /*

	  if(freq == 38461){
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);


	  }
	  else{
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
	  }

	  */
	 // oran=F_sayisi/toplam;






    /*
	  for(int frekans=20000; frekans<=50000;frekans+=100){

      	ARR=(8000000/(frekans*(PSC+1)))-1;
    	TIM1->CCR4=ARR*0.5;
    	TIM1->ARR=ARR;
    	TIM1->PSC=PSC;
    	HAL_Delay(100);
	  }

	  for(int frekans=50000; frekans>=20000;frekans-=100){

      	ARR=(8000000/(frekans*(PSC+1)))-1;
    	TIM1->CCR4=ARR*0.5;
    	TIM1->ARR=ARR;
    	TIM1->PSC=PSC;
    	HAL_Delay(100);
	  }

	*/




      // 8 bitlik veri gönderme
      /*HAL_UART_Transmit(&huart3, &txData, 1, HAL_MAX_DELAY);
      for (int i = 0; i < SAMPLES; i++) {
          // Her örneği UART üzerinden gönder
          HAL_UART_Transmit(&huart3, &sine_wave[i], 1, HAL_MAX_DELAY);
      }

       8 bitlik veri alma
      //HAL_UART_Receive(&huart3, &rxData, 1, HAL_MAX_DELAY);

       Alınan veriyi kontrol edebilirsiniz
      if (rxData == 0x55) {
          // Örneğin: LED yakmak veya başka bir işlem yapmak
          HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
          HAL_Delay(500); // 500ms bekleme
      }
      */



  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 72-1;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0xffff-1;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_IC_InitTypeDef sConfigIC = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 72-1;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 0xffff-1;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
