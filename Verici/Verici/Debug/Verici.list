
Verici.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000766c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08007780  08007780  00008780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bd0  08007bd0  000091e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007bd0  08007bd0  00008bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bd8  08007bd8  000091e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bd8  08007bd8  00008bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007bdc  08007bdc  00008bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08007be0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200001e4  08007dc4  000091e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08007dc4  0000939c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000876a  00000000  00000000  0000920d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018a0  00000000  00000000  00011977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  00013218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c2  00000000  00000000  00013c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ea7  00000000  00000000  000143fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a134  00000000  00000000  0002c2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000899b0  00000000  00000000  000363d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bfd85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e64  00000000  00000000  000bfdc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000c3c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007764 	.word	0x08007764

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08007764 	.word	0x08007764

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_3) {
 8000bde:	88fb      	ldrh	r3, [r7, #6]
 8000be0:	2b08      	cmp	r3, #8
 8000be2:	d142      	bne.n	8000c6a <HAL_GPIO_EXTI_Callback+0x96>
        if (GPIOA->IDR & GPIO_IDR_IDR3) {
 8000be4:	4b23      	ldr	r3, [pc, #140]	@ (8000c74 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	f003 0308 	and.w	r3, r3, #8
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d03c      	beq.n	8000c6a <HAL_GPIO_EXTI_Callback+0x96>


        	//frekans+=ekle;

        	ARR=(TIMCLOCK/(frekans*(PSC+1)))-1;
 8000bf0:	4b21      	ldr	r3, [pc, #132]	@ (8000c78 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <HAL_GPIO_EXTI_Callback+0xa8>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	4921      	ldr	r1, [pc, #132]	@ (8000c80 <HAL_GPIO_EXTI_Callback+0xac>)
 8000bfc:	6809      	ldr	r1, [r1, #0]
 8000bfe:	fb01 f303 	mul.w	r3, r1, r3
 8000c02:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c06:	3b01      	subs	r3, #1
 8000c08:	4a1e      	ldr	r2, [pc, #120]	@ (8000c84 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000c0a:	6013      	str	r3, [r2, #0]
      	    TIM1->CCR4=ARR*0.5;
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c84 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fbf7 	bl	8000404 <__aeabi_i2d>
 8000c16:	f04f 0200 	mov.w	r2, #0
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c88 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000c1c:	f7ff fc5c 	bl	80004d8 <__aeabi_dmul>
 8000c20:	4602      	mov	r2, r0
 8000c22:	460b      	mov	r3, r1
 8000c24:	4c19      	ldr	r4, [pc, #100]	@ (8000c8c <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c26:	4610      	mov	r0, r2
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f7ff ff2d 	bl	8000a88 <__aeabi_d2uiz>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6423      	str	r3, [r4, #64]	@ 0x40
      	    TIM1->ARR=ARR;
 8000c32:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c38:	62da      	str	r2, [r3, #44]	@ 0x2c
      	    TIM1->PSC=PSC;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <HAL_GPIO_EXTI_Callback+0xa8>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	4b13      	ldr	r3, [pc, #76]	@ (8000c8c <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c40:	629a      	str	r2, [r3, #40]	@ 0x28





        	if(frekans==38400){
 8000c42:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <HAL_GPIO_EXTI_Callback+0xac>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000c4a:	d104      	bne.n	8000c56 <HAL_GPIO_EXTI_Callback+0x82>
        		//ekle=-100;
        		frekans=37100;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <HAL_GPIO_EXTI_Callback+0xac>)
 8000c4e:	f249 02ec 	movw	r2, #37100	@ 0x90ec
 8000c52:	601a      	str	r2, [r3, #0]


        }
    }

}
 8000c54:	e009      	b.n	8000c6a <HAL_GPIO_EXTI_Callback+0x96>
        	else if(frekans == 37100){
 8000c56:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <HAL_GPIO_EXTI_Callback+0xac>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f249 02ec 	movw	r2, #37100	@ 0x90ec
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d103      	bne.n	8000c6a <HAL_GPIO_EXTI_Callback+0x96>
        		frekans=38400;
 8000c62:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <HAL_GPIO_EXTI_Callback+0xac>)
 8000c64:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000c68:	601a      	str	r2, [r3, #0]
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd90      	pop	{r4, r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40010800 	.word	0x40010800
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000004 	.word	0x20000004
 8000c80:	2000000c 	.word	0x2000000c
 8000c84:	20000000 	.word	0x20000000
 8000c88:	3fe00000 	.word	0x3fe00000
 8000c8c:	40012c00 	.word	0x40012c00

08000c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c90:	b598      	push	{r3, r4, r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c94:	f000 fb9a 	bl	80013cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c98:	f000 f88a 	bl	8000db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c9c:	f000 f962 	bl	8000f64 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000ca0:	f000 f8c2 	bl	8000e28 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000ca4:	210c      	movs	r1, #12
 8000ca6:	483b      	ldr	r0, [pc, #236]	@ (8000d94 <main+0x104>)
 8000ca8:	f001 fb46 	bl	8002338 <HAL_TIM_PWM_Start>

	ARR=(TIMCLOCK/(frekans*(PSC+1)))-1;
 8000cac:	4b3a      	ldr	r3, [pc, #232]	@ (8000d98 <main+0x108>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b3a      	ldr	r3, [pc, #232]	@ (8000d9c <main+0x10c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	493a      	ldr	r1, [pc, #232]	@ (8000da0 <main+0x110>)
 8000cb8:	6809      	ldr	r1, [r1, #0]
 8000cba:	fb01 f303 	mul.w	r3, r1, r3
 8000cbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	4a37      	ldr	r2, [pc, #220]	@ (8000da4 <main+0x114>)
 8000cc6:	6013      	str	r3, [r2, #0]
    TIM1->CCR4=ARR*0.5;
 8000cc8:	4b36      	ldr	r3, [pc, #216]	@ (8000da4 <main+0x114>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fb99 	bl	8000404 <__aeabi_i2d>
 8000cd2:	f04f 0200 	mov.w	r2, #0
 8000cd6:	4b34      	ldr	r3, [pc, #208]	@ (8000da8 <main+0x118>)
 8000cd8:	f7ff fbfe 	bl	80004d8 <__aeabi_dmul>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4c32      	ldr	r4, [pc, #200]	@ (8000dac <main+0x11c>)
 8000ce2:	4610      	mov	r0, r2
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f7ff fecf 	bl	8000a88 <__aeabi_d2uiz>
 8000cea:	4603      	mov	r3, r0
 8000cec:	6423      	str	r3, [r4, #64]	@ 0x40
    TIM1->ARR=ARR;
 8000cee:	4b2d      	ldr	r3, [pc, #180]	@ (8000da4 <main+0x114>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	4b2e      	ldr	r3, [pc, #184]	@ (8000dac <main+0x11c>)
 8000cf4:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM1->PSC=PSC;
 8000cf6:	4b29      	ldr	r3, [pc, #164]	@ (8000d9c <main+0x10c>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8000dac <main+0x11c>)
 8000cfc:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
frekans=38400;
 8000cfe:	4b28      	ldr	r3, [pc, #160]	@ (8000da0 <main+0x110>)
 8000d00:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000d04:	601a      	str	r2, [r3, #0]

    /* USER CODE BEGIN 3 */



		ARR=(TIMCLOCK/(frekans*(PSC+1)))-1;
 8000d06:	4b24      	ldr	r3, [pc, #144]	@ (8000d98 <main+0x108>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	4b24      	ldr	r3, [pc, #144]	@ (8000d9c <main+0x10c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	4923      	ldr	r1, [pc, #140]	@ (8000da0 <main+0x110>)
 8000d12:	6809      	ldr	r1, [r1, #0]
 8000d14:	fb01 f303 	mul.w	r3, r1, r3
 8000d18:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	4a21      	ldr	r2, [pc, #132]	@ (8000da4 <main+0x114>)
 8000d20:	6013      	str	r3, [r2, #0]
	    TIM1->CCR4=ARR*0.5;
 8000d22:	4b20      	ldr	r3, [pc, #128]	@ (8000da4 <main+0x114>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fb6c 	bl	8000404 <__aeabi_i2d>
 8000d2c:	f04f 0200 	mov.w	r2, #0
 8000d30:	4b1d      	ldr	r3, [pc, #116]	@ (8000da8 <main+0x118>)
 8000d32:	f7ff fbd1 	bl	80004d8 <__aeabi_dmul>
 8000d36:	4602      	mov	r2, r0
 8000d38:	460b      	mov	r3, r1
 8000d3a:	4c1c      	ldr	r4, [pc, #112]	@ (8000dac <main+0x11c>)
 8000d3c:	4610      	mov	r0, r2
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f7ff fea2 	bl	8000a88 <__aeabi_d2uiz>
 8000d44:	4603      	mov	r3, r0
 8000d46:	6423      	str	r3, [r4, #64]	@ 0x40
	    TIM1->ARR=ARR;
 8000d48:	4b16      	ldr	r3, [pc, #88]	@ (8000da4 <main+0x114>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b17      	ldr	r3, [pc, #92]	@ (8000dac <main+0x11c>)
 8000d4e:	62da      	str	r2, [r3, #44]	@ 0x2c
	    TIM1->PSC=PSC;
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <main+0x10c>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <main+0x11c>)
 8000d56:	629a      	str	r2, [r3, #40]	@ 0x28
	    if (frekans==38400){
 8000d58:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <main+0x110>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000d60:	d108      	bne.n	8000d74 <main+0xe4>
	    	frekans=37100;
 8000d62:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <main+0x110>)
 8000d64:	f249 02ec 	movw	r2, #37100	@ 0x90ec
 8000d68:	601a      	str	r2, [r3, #0]
	    	HAL_Delay(500);
 8000d6a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d6e:	f000 fb8f 	bl	8001490 <HAL_Delay>
 8000d72:	e7c8      	b.n	8000d06 <main+0x76>
	    }


	    else if(frekans ==37100){
 8000d74:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <main+0x110>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f249 02ec 	movw	r2, #37100	@ 0x90ec
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d1c2      	bne.n	8000d06 <main+0x76>
	    	frekans=38400;
 8000d80:	4b07      	ldr	r3, [pc, #28]	@ (8000da0 <main+0x110>)
 8000d82:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000d86:	601a      	str	r2, [r3, #0]
	    	HAL_Delay(500);
 8000d88:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d8c:	f000 fb80 	bl	8001490 <HAL_Delay>
		ARR=(TIMCLOCK/(frekans*(PSC+1)))-1;
 8000d90:	e7b9      	b.n	8000d06 <main+0x76>
 8000d92:	bf00      	nop
 8000d94:	20000200 	.word	0x20000200
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000004 	.word	0x20000004
 8000da0:	2000000c 	.word	0x2000000c
 8000da4:	20000000 	.word	0x20000000
 8000da8:	3fe00000 	.word	0x3fe00000
 8000dac:	40012c00 	.word	0x40012c00

08000db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b090      	sub	sp, #64	@ 0x40
 8000db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db6:	f107 0318 	add.w	r3, r7, #24
 8000dba:	2228      	movs	r2, #40	@ 0x28
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f003 f905 	bl	8003fce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dda:	2310      	movs	r3, #16
 8000ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de2:	f107 0318 	add.w	r3, r7, #24
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 fe20 	bl	8001a2c <HAL_RCC_OscConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000df2:	f000 f8f7 	bl	8000fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df6:	230f      	movs	r3, #15
 8000df8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f001 f88e 	bl	8001f30 <HAL_RCC_ClockConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e1a:	f000 f8e3 	bl	8000fe4 <Error_Handler>
  }
}
 8000e1e:	bf00      	nop
 8000e20:	3740      	adds	r7, #64	@ 0x40
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b096      	sub	sp, #88	@ 0x58
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e2e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e3c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]
 8000e56:	615a      	str	r2, [r3, #20]
 8000e58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	2220      	movs	r2, #32
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f003 f8b4 	bl	8003fce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e66:	4b3d      	ldr	r3, [pc, #244]	@ (8000f5c <MX_TIM1_Init+0x134>)
 8000e68:	4a3d      	ldr	r2, [pc, #244]	@ (8000f60 <MX_TIM1_Init+0x138>)
 8000e6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8000e6c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f5c <MX_TIM1_Init+0x134>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e72:	4b3a      	ldr	r3, [pc, #232]	@ (8000f5c <MX_TIM1_Init+0x134>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000e78:	4b38      	ldr	r3, [pc, #224]	@ (8000f5c <MX_TIM1_Init+0x134>)
 8000e7a:	2263      	movs	r2, #99	@ 0x63
 8000e7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7e:	4b37      	ldr	r3, [pc, #220]	@ (8000f5c <MX_TIM1_Init+0x134>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e84:	4b35      	ldr	r3, [pc, #212]	@ (8000f5c <MX_TIM1_Init+0x134>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e8a:	4b34      	ldr	r3, [pc, #208]	@ (8000f5c <MX_TIM1_Init+0x134>)
 8000e8c:	2280      	movs	r2, #128	@ 0x80
 8000e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e90:	4832      	ldr	r0, [pc, #200]	@ (8000f5c <MX_TIM1_Init+0x134>)
 8000e92:	f001 f9a9 	bl	80021e8 <HAL_TIM_Base_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000e9c:	f000 f8a2 	bl	8000fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ea6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000eaa:	4619      	mov	r1, r3
 8000eac:	482b      	ldr	r0, [pc, #172]	@ (8000f5c <MX_TIM1_Init+0x134>)
 8000eae:	f001 fc97 	bl	80027e0 <HAL_TIM_ConfigClockSource>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000eb8:	f000 f894 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ebc:	4827      	ldr	r0, [pc, #156]	@ (8000f5c <MX_TIM1_Init+0x134>)
 8000ebe:	f001 f9e2 	bl	8002286 <HAL_TIM_PWM_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000ec8:	f000 f88c 	bl	8000fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ed4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4820      	ldr	r0, [pc, #128]	@ (8000f5c <MX_TIM1_Init+0x134>)
 8000edc:	f002 f824 	bl	8002f28 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000ee6:	f000 f87d 	bl	8000fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eea:	2360      	movs	r3, #96	@ 0x60
 8000eec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f06:	220c      	movs	r2, #12
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4814      	ldr	r0, [pc, #80]	@ (8000f5c <MX_TIM1_Init+0x134>)
 8000f0c:	f001 fba6 	bl	800265c <HAL_TIM_PWM_ConfigChannel>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000f16:	f000 f865 	bl	8000fe4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f32:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4807      	ldr	r0, [pc, #28]	@ (8000f5c <MX_TIM1_Init+0x134>)
 8000f3e:	f002 f851 	bl	8002fe4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000f48:	f000 f84c 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f4c:	4803      	ldr	r0, [pc, #12]	@ (8000f5c <MX_TIM1_Init+0x134>)
 8000f4e:	f000 f8bf 	bl	80010d0 <HAL_TIM_MspPostInit>

}
 8000f52:	bf00      	nop
 8000f54:	3758      	adds	r7, #88	@ 0x58
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000200 	.word	0x20000200
 8000f60:	40012c00 	.word	0x40012c00

08000f64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f78:	4b17      	ldr	r3, [pc, #92]	@ (8000fd8 <MX_GPIO_Init+0x74>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a16      	ldr	r2, [pc, #88]	@ (8000fd8 <MX_GPIO_Init+0x74>)
 8000f7e:	f043 0320 	orr.w	r3, r3, #32
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <MX_GPIO_Init+0x74>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0320 	and.w	r3, r3, #32
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f90:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <MX_GPIO_Init+0x74>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a10      	ldr	r2, [pc, #64]	@ (8000fd8 <MX_GPIO_Init+0x74>)
 8000f96:	f043 0304 	orr.w	r3, r3, #4
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <MX_GPIO_Init+0x74>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f003 0304 	and.w	r3, r3, #4
 8000fa4:	603b      	str	r3, [r7, #0]
 8000fa6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fa8:	2308      	movs	r3, #8
 8000faa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fac:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <MX_GPIO_Init+0x78>)
 8000fae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f107 0308 	add.w	r3, r7, #8
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4809      	ldr	r0, [pc, #36]	@ (8000fe0 <MX_GPIO_Init+0x7c>)
 8000fbc:	f000 fb9a 	bl	80016f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2009      	movs	r0, #9
 8000fc6:	f000 fb5e 	bl	8001686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000fca:	2009      	movs	r0, #9
 8000fcc:	f000 fb77 	bl	80016be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	10110000 	.word	0x10110000
 8000fe0:	40010800 	.word	0x40010800

08000fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <Error_Handler+0x8>

08000ff0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff6:	4b15      	ldr	r3, [pc, #84]	@ (800104c <HAL_MspInit+0x5c>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	4a14      	ldr	r2, [pc, #80]	@ (800104c <HAL_MspInit+0x5c>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6193      	str	r3, [r2, #24]
 8001002:	4b12      	ldr	r3, [pc, #72]	@ (800104c <HAL_MspInit+0x5c>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <HAL_MspInit+0x5c>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a0e      	ldr	r2, [pc, #56]	@ (800104c <HAL_MspInit+0x5c>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001018:	61d3      	str	r3, [r2, #28]
 800101a:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <HAL_MspInit+0x5c>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001026:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <HAL_MspInit+0x60>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <HAL_MspInit+0x60>)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	40021000 	.word	0x40021000
 8001050:	40010000 	.word	0x40010000

08001054 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a19      	ldr	r2, [pc, #100]	@ (80010c8 <HAL_TIM_Base_MspInit+0x74>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d12b      	bne.n	80010be <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001066:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <HAL_TIM_Base_MspInit+0x78>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	4a18      	ldr	r2, [pc, #96]	@ (80010cc <HAL_TIM_Base_MspInit+0x78>)
 800106c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001070:	6193      	str	r3, [r2, #24]
 8001072:	4b16      	ldr	r3, [pc, #88]	@ (80010cc <HAL_TIM_Base_MspInit+0x78>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2018      	movs	r0, #24
 8001084:	f000 faff 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001088:	2018      	movs	r0, #24
 800108a:	f000 fb18 	bl	80016be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2019      	movs	r0, #25
 8001094:	f000 faf7 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001098:	2019      	movs	r0, #25
 800109a:	f000 fb10 	bl	80016be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	201a      	movs	r0, #26
 80010a4:	f000 faef 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80010a8:	201a      	movs	r0, #26
 80010aa:	f000 fb08 	bl	80016be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	201b      	movs	r0, #27
 80010b4:	f000 fae7 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80010b8:	201b      	movs	r0, #27
 80010ba:	f000 fb00 	bl	80016be <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40012c00 	.word	0x40012c00
 80010cc:	40021000 	.word	0x40021000

080010d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a10      	ldr	r2, [pc, #64]	@ (800112c <HAL_TIM_MspPostInit+0x5c>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d118      	bne.n	8001122 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <HAL_TIM_MspPostInit+0x60>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001130 <HAL_TIM_MspPostInit+0x60>)
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	6193      	str	r3, [r2, #24]
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <HAL_TIM_MspPostInit+0x60>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001108:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800110c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2302      	movs	r3, #2
 8001114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	@ (8001134 <HAL_TIM_MspPostInit+0x64>)
 800111e:	f000 fae9 	bl	80016f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001122:	bf00      	nop
 8001124:	3720      	adds	r7, #32
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40012c00 	.word	0x40012c00
 8001130:	40021000 	.word	0x40021000
 8001134:	40010800 	.word	0x40010800

08001138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <NMI_Handler+0x4>

08001140 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <HardFault_Handler+0x4>

08001148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <MemManage_Handler+0x4>

08001150 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <BusFault_Handler+0x4>

08001158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <UsageFault_Handler+0x4>

08001160 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001188:	f000 f966 	bl	8001458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}

08001190 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001194:	2008      	movs	r0, #8
 8001196:	f000 fc31 	bl	80019fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011a4:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <TIM1_BRK_IRQHandler+0x10>)
 80011a6:	f001 f969 	bl	800247c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000200 	.word	0x20000200

080011b4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011b8:	4802      	ldr	r0, [pc, #8]	@ (80011c4 <TIM1_UP_IRQHandler+0x10>)
 80011ba:	f001 f95f 	bl	800247c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000200 	.word	0x20000200

080011c8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011cc:	4802      	ldr	r0, [pc, #8]	@ (80011d8 <TIM1_TRG_COM_IRQHandler+0x10>)
 80011ce:	f001 f955 	bl	800247c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000200 	.word	0x20000200

080011dc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011e0:	4802      	ldr	r0, [pc, #8]	@ (80011ec <TIM1_CC_IRQHandler+0x10>)
 80011e2:	f001 f94b 	bl	800247c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000200 	.word	0x20000200

080011f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return 1;
 80011f4:	2301      	movs	r3, #1
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr

080011fe <_kill>:

int _kill(int pid, int sig)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001208:	f002 ff34 	bl	8004074 <__errno>
 800120c:	4603      	mov	r3, r0
 800120e:	2216      	movs	r2, #22
 8001210:	601a      	str	r2, [r3, #0]
  return -1;
 8001212:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <_exit>:

void _exit (int status)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001226:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ffe7 	bl	80011fe <_kill>
  while (1) {}    /* Make sure we hang here */
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <_exit+0x12>

08001234 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	e00a      	b.n	800125c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001246:	f3af 8000 	nop.w
 800124a:	4601      	mov	r1, r0
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	60ba      	str	r2, [r7, #8]
 8001252:	b2ca      	uxtb	r2, r1
 8001254:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3301      	adds	r3, #1
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	429a      	cmp	r2, r3
 8001262:	dbf0      	blt.n	8001246 <_read+0x12>
  }

  return len;
 8001264:	687b      	ldr	r3, [r7, #4]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	e009      	b.n	8001294 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	60ba      	str	r2, [r7, #8]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	3301      	adds	r3, #1
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	429a      	cmp	r2, r3
 800129a:	dbf1      	blt.n	8001280 <_write+0x12>
  }
  return len;
 800129c:	687b      	ldr	r3, [r7, #4]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <_close>:

int _close(int file)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012cc:	605a      	str	r2, [r3, #4]
  return 0;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <_isatty>:

int _isatty(int file)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr

080012ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b085      	sub	sp, #20
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
	...

08001308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001310:	4a14      	ldr	r2, [pc, #80]	@ (8001364 <_sbrk+0x5c>)
 8001312:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <_sbrk+0x60>)
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800131c:	4b13      	ldr	r3, [pc, #76]	@ (800136c <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d102      	bne.n	800132a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <_sbrk+0x64>)
 8001326:	4a12      	ldr	r2, [pc, #72]	@ (8001370 <_sbrk+0x68>)
 8001328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	429a      	cmp	r2, r3
 8001336:	d207      	bcs.n	8001348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001338:	f002 fe9c 	bl	8004074 <__errno>
 800133c:	4603      	mov	r3, r0
 800133e:	220c      	movs	r2, #12
 8001340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001346:	e009      	b.n	800135c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001348:	4b08      	ldr	r3, [pc, #32]	@ (800136c <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134e:	4b07      	ldr	r3, [pc, #28]	@ (800136c <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	4a05      	ldr	r2, [pc, #20]	@ (800136c <_sbrk+0x64>)
 8001358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800135a:	68fb      	ldr	r3, [r7, #12]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20005000 	.word	0x20005000
 8001368:	00000400 	.word	0x00000400
 800136c:	20000248 	.word	0x20000248
 8001370:	200003a0 	.word	0x200003a0

08001374 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001380:	f7ff fff8 	bl	8001374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001384:	480b      	ldr	r0, [pc, #44]	@ (80013b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001386:	490c      	ldr	r1, [pc, #48]	@ (80013b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001388:	4a0c      	ldr	r2, [pc, #48]	@ (80013bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800138c:	e002      	b.n	8001394 <LoopCopyDataInit>

0800138e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001392:	3304      	adds	r3, #4

08001394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001398:	d3f9      	bcc.n	800138e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139a:	4a09      	ldr	r2, [pc, #36]	@ (80013c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800139c:	4c09      	ldr	r4, [pc, #36]	@ (80013c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a0:	e001      	b.n	80013a6 <LoopFillZerobss>

080013a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a4:	3204      	adds	r2, #4

080013a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a8:	d3fb      	bcc.n	80013a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013aa:	f002 fe69 	bl	8004080 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ae:	f7ff fc6f 	bl	8000c90 <main>
  bx lr
 80013b2:	4770      	bx	lr
  ldr r0, =_sdata
 80013b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80013bc:	08007be0 	.word	0x08007be0
  ldr r2, =_sbss
 80013c0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80013c4:	2000039c 	.word	0x2000039c

080013c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC1_2_IRQHandler>
	...

080013cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d0:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <HAL_Init+0x28>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a07      	ldr	r2, [pc, #28]	@ (80013f4 <HAL_Init+0x28>)
 80013d6:	f043 0310 	orr.w	r3, r3, #16
 80013da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013dc:	2003      	movs	r0, #3
 80013de:	f000 f947 	bl	8001670 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e2:	200f      	movs	r0, #15
 80013e4:	f000 f808 	bl	80013f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e8:	f7ff fe02 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40022000 	.word	0x40022000

080013f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001400:	4b12      	ldr	r3, [pc, #72]	@ (800144c <HAL_InitTick+0x54>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <HAL_InitTick+0x58>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800140e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f95f 	bl	80016da <HAL_SYSTICK_Config>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e00e      	b.n	8001444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d80a      	bhi.n	8001442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001434:	f000 f927 	bl	8001686 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001438:	4a06      	ldr	r2, [pc, #24]	@ (8001454 <HAL_InitTick+0x5c>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	e000      	b.n	8001444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000010 	.word	0x20000010
 8001450:	20000018 	.word	0x20000018
 8001454:	20000014 	.word	0x20000014

08001458 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800145c:	4b05      	ldr	r3, [pc, #20]	@ (8001474 <HAL_IncTick+0x1c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <HAL_IncTick+0x20>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4413      	add	r3, r2
 8001468:	4a03      	ldr	r2, [pc, #12]	@ (8001478 <HAL_IncTick+0x20>)
 800146a:	6013      	str	r3, [r2, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	20000018 	.word	0x20000018
 8001478:	2000024c 	.word	0x2000024c

0800147c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b02      	ldr	r3, [pc, #8]	@ (800148c <HAL_GetTick+0x10>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	2000024c 	.word	0x2000024c

08001490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001498:	f7ff fff0 	bl	800147c <HAL_GetTick>
 800149c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80014a8:	d005      	beq.n	80014b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014aa:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <HAL_Delay+0x44>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4413      	add	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014b6:	bf00      	nop
 80014b8:	f7ff ffe0 	bl	800147c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d8f7      	bhi.n	80014b8 <HAL_Delay+0x28>
  {
  }
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000018 	.word	0x20000018

080014d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <__NVIC_SetPriorityGrouping+0x44>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001500:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150a:	4a04      	ldr	r2, [pc, #16]	@ (800151c <__NVIC_SetPriorityGrouping+0x44>)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	60d3      	str	r3, [r2, #12]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	@ (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db0b      	blt.n	8001566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 021f 	and.w	r2, r3, #31
 8001554:	4906      	ldr	r1, [pc, #24]	@ (8001570 <__NVIC_EnableIRQ+0x34>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	2001      	movs	r0, #1
 800155e:	fa00 f202 	lsl.w	r2, r0, r2
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	e000e100 	.word	0xe000e100

08001574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	db0a      	blt.n	800159e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	b2da      	uxtb	r2, r3
 800158c:	490c      	ldr	r1, [pc, #48]	@ (80015c0 <__NVIC_SetPriority+0x4c>)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	0112      	lsls	r2, r2, #4
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	440b      	add	r3, r1
 8001598:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800159c:	e00a      	b.n	80015b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4908      	ldr	r1, [pc, #32]	@ (80015c4 <__NVIC_SetPriority+0x50>)
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	3b04      	subs	r3, #4
 80015ac:	0112      	lsls	r2, r2, #4
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	440b      	add	r3, r1
 80015b2:	761a      	strb	r2, [r3, #24]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000e100 	.word	0xe000e100
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b089      	sub	sp, #36	@ 0x24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f1c3 0307 	rsb	r3, r3, #7
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	bf28      	it	cs
 80015e6:	2304      	movcs	r3, #4
 80015e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3304      	adds	r3, #4
 80015ee:	2b06      	cmp	r3, #6
 80015f0:	d902      	bls.n	80015f8 <NVIC_EncodePriority+0x30>
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3b03      	subs	r3, #3
 80015f6:	e000      	b.n	80015fa <NVIC_EncodePriority+0x32>
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43da      	mvns	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	401a      	ands	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001610:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	fa01 f303 	lsl.w	r3, r1, r3
 800161a:	43d9      	mvns	r1, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	4313      	orrs	r3, r2
         );
}
 8001622:	4618      	mov	r0, r3
 8001624:	3724      	adds	r7, #36	@ 0x24
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800163c:	d301      	bcc.n	8001642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163e:	2301      	movs	r3, #1
 8001640:	e00f      	b.n	8001662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001642:	4a0a      	ldr	r2, [pc, #40]	@ (800166c <SysTick_Config+0x40>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164a:	210f      	movs	r1, #15
 800164c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001650:	f7ff ff90 	bl	8001574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001654:	4b05      	ldr	r3, [pc, #20]	@ (800166c <SysTick_Config+0x40>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165a:	4b04      	ldr	r3, [pc, #16]	@ (800166c <SysTick_Config+0x40>)
 800165c:	2207      	movs	r2, #7
 800165e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	e000e010 	.word	0xe000e010

08001670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ff2d 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001698:	f7ff ff42 	bl	8001520 <__NVIC_GetPriorityGrouping>
 800169c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	6978      	ldr	r0, [r7, #20]
 80016a4:	f7ff ff90 	bl	80015c8 <NVIC_EncodePriority>
 80016a8:	4602      	mov	r2, r0
 80016aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff5f 	bl	8001574 <__NVIC_SetPriority>
}
 80016b6:	bf00      	nop
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff35 	bl	800153c <__NVIC_EnableIRQ>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ffa2 	bl	800162c <SysTick_Config>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b08b      	sub	sp, #44	@ 0x2c
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001706:	e169      	b.n	80019dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001708:	2201      	movs	r2, #1
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	429a      	cmp	r2, r3
 8001722:	f040 8158 	bne.w	80019d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	4a9a      	ldr	r2, [pc, #616]	@ (8001994 <HAL_GPIO_Init+0x2a0>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d05e      	beq.n	80017ee <HAL_GPIO_Init+0xfa>
 8001730:	4a98      	ldr	r2, [pc, #608]	@ (8001994 <HAL_GPIO_Init+0x2a0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d875      	bhi.n	8001822 <HAL_GPIO_Init+0x12e>
 8001736:	4a98      	ldr	r2, [pc, #608]	@ (8001998 <HAL_GPIO_Init+0x2a4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d058      	beq.n	80017ee <HAL_GPIO_Init+0xfa>
 800173c:	4a96      	ldr	r2, [pc, #600]	@ (8001998 <HAL_GPIO_Init+0x2a4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d86f      	bhi.n	8001822 <HAL_GPIO_Init+0x12e>
 8001742:	4a96      	ldr	r2, [pc, #600]	@ (800199c <HAL_GPIO_Init+0x2a8>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d052      	beq.n	80017ee <HAL_GPIO_Init+0xfa>
 8001748:	4a94      	ldr	r2, [pc, #592]	@ (800199c <HAL_GPIO_Init+0x2a8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d869      	bhi.n	8001822 <HAL_GPIO_Init+0x12e>
 800174e:	4a94      	ldr	r2, [pc, #592]	@ (80019a0 <HAL_GPIO_Init+0x2ac>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d04c      	beq.n	80017ee <HAL_GPIO_Init+0xfa>
 8001754:	4a92      	ldr	r2, [pc, #584]	@ (80019a0 <HAL_GPIO_Init+0x2ac>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d863      	bhi.n	8001822 <HAL_GPIO_Init+0x12e>
 800175a:	4a92      	ldr	r2, [pc, #584]	@ (80019a4 <HAL_GPIO_Init+0x2b0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d046      	beq.n	80017ee <HAL_GPIO_Init+0xfa>
 8001760:	4a90      	ldr	r2, [pc, #576]	@ (80019a4 <HAL_GPIO_Init+0x2b0>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d85d      	bhi.n	8001822 <HAL_GPIO_Init+0x12e>
 8001766:	2b12      	cmp	r3, #18
 8001768:	d82a      	bhi.n	80017c0 <HAL_GPIO_Init+0xcc>
 800176a:	2b12      	cmp	r3, #18
 800176c:	d859      	bhi.n	8001822 <HAL_GPIO_Init+0x12e>
 800176e:	a201      	add	r2, pc, #4	@ (adr r2, 8001774 <HAL_GPIO_Init+0x80>)
 8001770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001774:	080017ef 	.word	0x080017ef
 8001778:	080017c9 	.word	0x080017c9
 800177c:	080017db 	.word	0x080017db
 8001780:	0800181d 	.word	0x0800181d
 8001784:	08001823 	.word	0x08001823
 8001788:	08001823 	.word	0x08001823
 800178c:	08001823 	.word	0x08001823
 8001790:	08001823 	.word	0x08001823
 8001794:	08001823 	.word	0x08001823
 8001798:	08001823 	.word	0x08001823
 800179c:	08001823 	.word	0x08001823
 80017a0:	08001823 	.word	0x08001823
 80017a4:	08001823 	.word	0x08001823
 80017a8:	08001823 	.word	0x08001823
 80017ac:	08001823 	.word	0x08001823
 80017b0:	08001823 	.word	0x08001823
 80017b4:	08001823 	.word	0x08001823
 80017b8:	080017d1 	.word	0x080017d1
 80017bc:	080017e5 	.word	0x080017e5
 80017c0:	4a79      	ldr	r2, [pc, #484]	@ (80019a8 <HAL_GPIO_Init+0x2b4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d013      	beq.n	80017ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017c6:	e02c      	b.n	8001822 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	623b      	str	r3, [r7, #32]
          break;
 80017ce:	e029      	b.n	8001824 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	3304      	adds	r3, #4
 80017d6:	623b      	str	r3, [r7, #32]
          break;
 80017d8:	e024      	b.n	8001824 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	3308      	adds	r3, #8
 80017e0:	623b      	str	r3, [r7, #32]
          break;
 80017e2:	e01f      	b.n	8001824 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	330c      	adds	r3, #12
 80017ea:	623b      	str	r3, [r7, #32]
          break;
 80017ec:	e01a      	b.n	8001824 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d102      	bne.n	80017fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017f6:	2304      	movs	r3, #4
 80017f8:	623b      	str	r3, [r7, #32]
          break;
 80017fa:	e013      	b.n	8001824 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d105      	bne.n	8001810 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001804:	2308      	movs	r3, #8
 8001806:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	611a      	str	r2, [r3, #16]
          break;
 800180e:	e009      	b.n	8001824 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001810:	2308      	movs	r3, #8
 8001812:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	615a      	str	r2, [r3, #20]
          break;
 800181a:	e003      	b.n	8001824 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800181c:	2300      	movs	r3, #0
 800181e:	623b      	str	r3, [r7, #32]
          break;
 8001820:	e000      	b.n	8001824 <HAL_GPIO_Init+0x130>
          break;
 8001822:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2bff      	cmp	r3, #255	@ 0xff
 8001828:	d801      	bhi.n	800182e <HAL_GPIO_Init+0x13a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	e001      	b.n	8001832 <HAL_GPIO_Init+0x13e>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3304      	adds	r3, #4
 8001832:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2bff      	cmp	r3, #255	@ 0xff
 8001838:	d802      	bhi.n	8001840 <HAL_GPIO_Init+0x14c>
 800183a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	e002      	b.n	8001846 <HAL_GPIO_Init+0x152>
 8001840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001842:	3b08      	subs	r3, #8
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	210f      	movs	r1, #15
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	fa01 f303 	lsl.w	r3, r1, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	401a      	ands	r2, r3
 8001858:	6a39      	ldr	r1, [r7, #32]
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	431a      	orrs	r2, r3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 80b1 	beq.w	80019d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001874:	4b4d      	ldr	r3, [pc, #308]	@ (80019ac <HAL_GPIO_Init+0x2b8>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	4a4c      	ldr	r2, [pc, #304]	@ (80019ac <HAL_GPIO_Init+0x2b8>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6193      	str	r3, [r2, #24]
 8001880:	4b4a      	ldr	r3, [pc, #296]	@ (80019ac <HAL_GPIO_Init+0x2b8>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800188c:	4a48      	ldr	r2, [pc, #288]	@ (80019b0 <HAL_GPIO_Init+0x2bc>)
 800188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	3302      	adds	r3, #2
 8001894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001898:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	220f      	movs	r2, #15
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	4013      	ands	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a40      	ldr	r2, [pc, #256]	@ (80019b4 <HAL_GPIO_Init+0x2c0>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d013      	beq.n	80018e0 <HAL_GPIO_Init+0x1ec>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a3f      	ldr	r2, [pc, #252]	@ (80019b8 <HAL_GPIO_Init+0x2c4>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d00d      	beq.n	80018dc <HAL_GPIO_Init+0x1e8>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a3e      	ldr	r2, [pc, #248]	@ (80019bc <HAL_GPIO_Init+0x2c8>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d007      	beq.n	80018d8 <HAL_GPIO_Init+0x1e4>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a3d      	ldr	r2, [pc, #244]	@ (80019c0 <HAL_GPIO_Init+0x2cc>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d101      	bne.n	80018d4 <HAL_GPIO_Init+0x1e0>
 80018d0:	2303      	movs	r3, #3
 80018d2:	e006      	b.n	80018e2 <HAL_GPIO_Init+0x1ee>
 80018d4:	2304      	movs	r3, #4
 80018d6:	e004      	b.n	80018e2 <HAL_GPIO_Init+0x1ee>
 80018d8:	2302      	movs	r3, #2
 80018da:	e002      	b.n	80018e2 <HAL_GPIO_Init+0x1ee>
 80018dc:	2301      	movs	r3, #1
 80018de:	e000      	b.n	80018e2 <HAL_GPIO_Init+0x1ee>
 80018e0:	2300      	movs	r3, #0
 80018e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018e4:	f002 0203 	and.w	r2, r2, #3
 80018e8:	0092      	lsls	r2, r2, #2
 80018ea:	4093      	lsls	r3, r2
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018f2:	492f      	ldr	r1, [pc, #188]	@ (80019b0 <HAL_GPIO_Init+0x2bc>)
 80018f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	3302      	adds	r3, #2
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d006      	beq.n	800191a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800190c:	4b2d      	ldr	r3, [pc, #180]	@ (80019c4 <HAL_GPIO_Init+0x2d0>)
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	492c      	ldr	r1, [pc, #176]	@ (80019c4 <HAL_GPIO_Init+0x2d0>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	608b      	str	r3, [r1, #8]
 8001918:	e006      	b.n	8001928 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800191a:	4b2a      	ldr	r3, [pc, #168]	@ (80019c4 <HAL_GPIO_Init+0x2d0>)
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	43db      	mvns	r3, r3
 8001922:	4928      	ldr	r1, [pc, #160]	@ (80019c4 <HAL_GPIO_Init+0x2d0>)
 8001924:	4013      	ands	r3, r2
 8001926:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d006      	beq.n	8001942 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001934:	4b23      	ldr	r3, [pc, #140]	@ (80019c4 <HAL_GPIO_Init+0x2d0>)
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	4922      	ldr	r1, [pc, #136]	@ (80019c4 <HAL_GPIO_Init+0x2d0>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	60cb      	str	r3, [r1, #12]
 8001940:	e006      	b.n	8001950 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001942:	4b20      	ldr	r3, [pc, #128]	@ (80019c4 <HAL_GPIO_Init+0x2d0>)
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	43db      	mvns	r3, r3
 800194a:	491e      	ldr	r1, [pc, #120]	@ (80019c4 <HAL_GPIO_Init+0x2d0>)
 800194c:	4013      	ands	r3, r2
 800194e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d006      	beq.n	800196a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800195c:	4b19      	ldr	r3, [pc, #100]	@ (80019c4 <HAL_GPIO_Init+0x2d0>)
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	4918      	ldr	r1, [pc, #96]	@ (80019c4 <HAL_GPIO_Init+0x2d0>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	604b      	str	r3, [r1, #4]
 8001968:	e006      	b.n	8001978 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800196a:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <HAL_GPIO_Init+0x2d0>)
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	43db      	mvns	r3, r3
 8001972:	4914      	ldr	r1, [pc, #80]	@ (80019c4 <HAL_GPIO_Init+0x2d0>)
 8001974:	4013      	ands	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d021      	beq.n	80019c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001984:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <HAL_GPIO_Init+0x2d0>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	490e      	ldr	r1, [pc, #56]	@ (80019c4 <HAL_GPIO_Init+0x2d0>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	600b      	str	r3, [r1, #0]
 8001990:	e021      	b.n	80019d6 <HAL_GPIO_Init+0x2e2>
 8001992:	bf00      	nop
 8001994:	10320000 	.word	0x10320000
 8001998:	10310000 	.word	0x10310000
 800199c:	10220000 	.word	0x10220000
 80019a0:	10210000 	.word	0x10210000
 80019a4:	10120000 	.word	0x10120000
 80019a8:	10110000 	.word	0x10110000
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40010000 	.word	0x40010000
 80019b4:	40010800 	.word	0x40010800
 80019b8:	40010c00 	.word	0x40010c00
 80019bc:	40011000 	.word	0x40011000
 80019c0:	40011400 	.word	0x40011400
 80019c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019c8:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <HAL_GPIO_Init+0x304>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	4909      	ldr	r1, [pc, #36]	@ (80019f8 <HAL_GPIO_Init+0x304>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	3301      	adds	r3, #1
 80019da:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e2:	fa22 f303 	lsr.w	r3, r2, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f47f ae8e 	bne.w	8001708 <HAL_GPIO_Init+0x14>
  }
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	372c      	adds	r7, #44	@ 0x2c
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	40010400 	.word	0x40010400

080019fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a06:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d006      	beq.n	8001a20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a12:	4a05      	ldr	r2, [pc, #20]	@ (8001a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff f8da 	bl	8000bd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40010400 	.word	0x40010400

08001a2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e272      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 8087 	beq.w	8001b5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a4c:	4b92      	ldr	r3, [pc, #584]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d00c      	beq.n	8001a72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a58:	4b8f      	ldr	r3, [pc, #572]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d112      	bne.n	8001a8a <HAL_RCC_OscConfig+0x5e>
 8001a64:	4b8c      	ldr	r3, [pc, #560]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a70:	d10b      	bne.n	8001a8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a72:	4b89      	ldr	r3, [pc, #548]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d06c      	beq.n	8001b58 <HAL_RCC_OscConfig+0x12c>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d168      	bne.n	8001b58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e24c      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a92:	d106      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x76>
 8001a94:	4b80      	ldr	r3, [pc, #512]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a7f      	ldr	r2, [pc, #508]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	e02e      	b.n	8001b00 <HAL_RCC_OscConfig+0xd4>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x98>
 8001aaa:	4b7b      	ldr	r3, [pc, #492]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a7a      	ldr	r2, [pc, #488]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	4b78      	ldr	r3, [pc, #480]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a77      	ldr	r2, [pc, #476]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e01d      	b.n	8001b00 <HAL_RCC_OscConfig+0xd4>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001acc:	d10c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0xbc>
 8001ace:	4b72      	ldr	r3, [pc, #456]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a71      	ldr	r2, [pc, #452]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	4b6f      	ldr	r3, [pc, #444]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a6e      	ldr	r2, [pc, #440]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e00b      	b.n	8001b00 <HAL_RCC_OscConfig+0xd4>
 8001ae8:	4b6b      	ldr	r3, [pc, #428]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a6a      	ldr	r2, [pc, #424]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	4b68      	ldr	r3, [pc, #416]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a67      	ldr	r2, [pc, #412]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001afe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d013      	beq.n	8001b30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b08:	f7ff fcb8 	bl	800147c <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b10:	f7ff fcb4 	bl	800147c <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	@ 0x64
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e200      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b22:	4b5d      	ldr	r3, [pc, #372]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0xe4>
 8001b2e:	e014      	b.n	8001b5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7ff fca4 	bl	800147c <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b38:	f7ff fca0 	bl	800147c <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b64      	cmp	r3, #100	@ 0x64
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e1ec      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4a:	4b53      	ldr	r3, [pc, #332]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x10c>
 8001b56:	e000      	b.n	8001b5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d063      	beq.n	8001c2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b66:	4b4c      	ldr	r3, [pc, #304]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00b      	beq.n	8001b8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b72:	4b49      	ldr	r3, [pc, #292]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d11c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x18c>
 8001b7e:	4b46      	ldr	r3, [pc, #280]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d116      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8a:	4b43      	ldr	r3, [pc, #268]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d005      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x176>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d001      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e1c0      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba2:	4b3d      	ldr	r3, [pc, #244]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4939      	ldr	r1, [pc, #228]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb6:	e03a      	b.n	8001c2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d020      	beq.n	8001c02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bc0:	4b36      	ldr	r3, [pc, #216]	@ (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc6:	f7ff fc59 	bl	800147c <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bce:	f7ff fc55 	bl	800147c <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e1a1      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bec:	4b2a      	ldr	r3, [pc, #168]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4927      	ldr	r1, [pc, #156]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]
 8001c00:	e015      	b.n	8001c2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c02:	4b26      	ldr	r3, [pc, #152]	@ (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7ff fc38 	bl	800147c <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c10:	f7ff fc34 	bl	800147c <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e180      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c22:	4b1d      	ldr	r3, [pc, #116]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d03a      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d019      	beq.n	8001c76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c42:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <HAL_RCC_OscConfig+0x274>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c48:	f7ff fc18 	bl	800147c <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c50:	f7ff fc14 	bl	800147c <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e160      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c62:	4b0d      	ldr	r3, [pc, #52]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c6e:	2001      	movs	r0, #1
 8001c70:	f000 fa9c 	bl	80021ac <RCC_Delay>
 8001c74:	e01c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <HAL_RCC_OscConfig+0x274>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7c:	f7ff fbfe 	bl	800147c <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c82:	e00f      	b.n	8001ca4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c84:	f7ff fbfa 	bl	800147c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d908      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e146      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	42420000 	.word	0x42420000
 8001ca0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca4:	4b92      	ldr	r3, [pc, #584]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1e9      	bne.n	8001c84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 80a6 	beq.w	8001e0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc2:	4b8b      	ldr	r3, [pc, #556]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10d      	bne.n	8001cea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cce:	4b88      	ldr	r3, [pc, #544]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	4a87      	ldr	r2, [pc, #540]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd8:	61d3      	str	r3, [r2, #28]
 8001cda:	4b85      	ldr	r3, [pc, #532]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cea:	4b82      	ldr	r3, [pc, #520]	@ (8001ef4 <HAL_RCC_OscConfig+0x4c8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d118      	bne.n	8001d28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cf6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ef4 <HAL_RCC_OscConfig+0x4c8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a7e      	ldr	r2, [pc, #504]	@ (8001ef4 <HAL_RCC_OscConfig+0x4c8>)
 8001cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d02:	f7ff fbbb 	bl	800147c <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d0a:	f7ff fbb7 	bl	800147c <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b64      	cmp	r3, #100	@ 0x64
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e103      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1c:	4b75      	ldr	r3, [pc, #468]	@ (8001ef4 <HAL_RCC_OscConfig+0x4c8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d106      	bne.n	8001d3e <HAL_RCC_OscConfig+0x312>
 8001d30:	4b6f      	ldr	r3, [pc, #444]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	4a6e      	ldr	r2, [pc, #440]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6213      	str	r3, [r2, #32]
 8001d3c:	e02d      	b.n	8001d9a <HAL_RCC_OscConfig+0x36e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x334>
 8001d46:	4b6a      	ldr	r3, [pc, #424]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	4a69      	ldr	r2, [pc, #420]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	f023 0301 	bic.w	r3, r3, #1
 8001d50:	6213      	str	r3, [r2, #32]
 8001d52:	4b67      	ldr	r3, [pc, #412]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	4a66      	ldr	r2, [pc, #408]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	f023 0304 	bic.w	r3, r3, #4
 8001d5c:	6213      	str	r3, [r2, #32]
 8001d5e:	e01c      	b.n	8001d9a <HAL_RCC_OscConfig+0x36e>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b05      	cmp	r3, #5
 8001d66:	d10c      	bne.n	8001d82 <HAL_RCC_OscConfig+0x356>
 8001d68:	4b61      	ldr	r3, [pc, #388]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a60      	ldr	r2, [pc, #384]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	f043 0304 	orr.w	r3, r3, #4
 8001d72:	6213      	str	r3, [r2, #32]
 8001d74:	4b5e      	ldr	r3, [pc, #376]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	4a5d      	ldr	r2, [pc, #372]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6213      	str	r3, [r2, #32]
 8001d80:	e00b      	b.n	8001d9a <HAL_RCC_OscConfig+0x36e>
 8001d82:	4b5b      	ldr	r3, [pc, #364]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	4a5a      	ldr	r2, [pc, #360]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	f023 0301 	bic.w	r3, r3, #1
 8001d8c:	6213      	str	r3, [r2, #32]
 8001d8e:	4b58      	ldr	r3, [pc, #352]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	4a57      	ldr	r2, [pc, #348]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	f023 0304 	bic.w	r3, r3, #4
 8001d98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d015      	beq.n	8001dce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da2:	f7ff fb6b 	bl	800147c <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da8:	e00a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001daa:	f7ff fb67 	bl	800147c <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e0b1      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc0:	4b4b      	ldr	r3, [pc, #300]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0ee      	beq.n	8001daa <HAL_RCC_OscConfig+0x37e>
 8001dcc:	e014      	b.n	8001df8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dce:	f7ff fb55 	bl	800147c <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd6:	f7ff fb51 	bl	800147c <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e09b      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dec:	4b40      	ldr	r3, [pc, #256]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1ee      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001df8:	7dfb      	ldrb	r3, [r7, #23]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d105      	bne.n	8001e0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dfe:	4b3c      	ldr	r3, [pc, #240]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	4a3b      	ldr	r2, [pc, #236]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8087 	beq.w	8001f22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e14:	4b36      	ldr	r3, [pc, #216]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 030c 	and.w	r3, r3, #12
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d061      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d146      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e28:	4b33      	ldr	r3, [pc, #204]	@ (8001ef8 <HAL_RCC_OscConfig+0x4cc>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2e:	f7ff fb25 	bl	800147c <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e36:	f7ff fb21 	bl	800147c <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e06d      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e48:	4b29      	ldr	r3, [pc, #164]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f0      	bne.n	8001e36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e5c:	d108      	bne.n	8001e70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e5e:	4b24      	ldr	r3, [pc, #144]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	4921      	ldr	r1, [pc, #132]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e70:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a19      	ldr	r1, [r3, #32]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e80:	430b      	orrs	r3, r1
 8001e82:	491b      	ldr	r1, [pc, #108]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e88:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef8 <HAL_RCC_OscConfig+0x4cc>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8e:	f7ff faf5 	bl	800147c <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e96:	f7ff faf1 	bl	800147c <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e03d      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea8:	4b11      	ldr	r3, [pc, #68]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x46a>
 8001eb4:	e035      	b.n	8001f22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ef8 <HAL_RCC_OscConfig+0x4cc>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7ff fade 	bl	800147c <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7ff fada 	bl	800147c <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e026      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x498>
 8001ee2:	e01e      	b.n	8001f22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e019      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001efc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f2c <HAL_RCC_OscConfig+0x500>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d106      	bne.n	8001f1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d001      	beq.n	8001f22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000

08001f30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0d0      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f44:	4b6a      	ldr	r3, [pc, #424]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d910      	bls.n	8001f74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f52:	4b67      	ldr	r3, [pc, #412]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 0207 	bic.w	r2, r3, #7
 8001f5a:	4965      	ldr	r1, [pc, #404]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f62:	4b63      	ldr	r3, [pc, #396]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0b8      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d020      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f8c:	4b59      	ldr	r3, [pc, #356]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4a58      	ldr	r2, [pc, #352]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fa4:	4b53      	ldr	r3, [pc, #332]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4a52      	ldr	r2, [pc, #328]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001fae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb0:	4b50      	ldr	r3, [pc, #320]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	494d      	ldr	r1, [pc, #308]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d040      	beq.n	8002050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd6:	4b47      	ldr	r3, [pc, #284]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d115      	bne.n	800200e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e07f      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d107      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fee:	4b41      	ldr	r3, [pc, #260]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d109      	bne.n	800200e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e073      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffe:	4b3d      	ldr	r3, [pc, #244]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e06b      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800200e:	4b39      	ldr	r3, [pc, #228]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f023 0203 	bic.w	r2, r3, #3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	4936      	ldr	r1, [pc, #216]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002020:	f7ff fa2c 	bl	800147c <HAL_GetTick>
 8002024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002026:	e00a      	b.n	800203e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002028:	f7ff fa28 	bl	800147c <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e053      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203e:	4b2d      	ldr	r3, [pc, #180]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 020c 	and.w	r2, r3, #12
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	429a      	cmp	r2, r3
 800204e:	d1eb      	bne.n	8002028 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002050:	4b27      	ldr	r3, [pc, #156]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d210      	bcs.n	8002080 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205e:	4b24      	ldr	r3, [pc, #144]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 0207 	bic.w	r2, r3, #7
 8002066:	4922      	ldr	r1, [pc, #136]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206e:	4b20      	ldr	r3, [pc, #128]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e032      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d008      	beq.n	800209e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800208c:	4b19      	ldr	r3, [pc, #100]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4916      	ldr	r1, [pc, #88]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	4313      	orrs	r3, r2
 800209c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020aa:	4b12      	ldr	r3, [pc, #72]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	490e      	ldr	r1, [pc, #56]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020be:	f000 f821 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 80020c2:	4602      	mov	r2, r0
 80020c4:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	490a      	ldr	r1, [pc, #40]	@ (80020f8 <HAL_RCC_ClockConfig+0x1c8>)
 80020d0:	5ccb      	ldrb	r3, [r1, r3]
 80020d2:	fa22 f303 	lsr.w	r3, r2, r3
 80020d6:	4a09      	ldr	r2, [pc, #36]	@ (80020fc <HAL_RCC_ClockConfig+0x1cc>)
 80020d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020da:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <HAL_RCC_ClockConfig+0x1d0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff f98a 	bl	80013f8 <HAL_InitTick>

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40022000 	.word	0x40022000
 80020f4:	40021000 	.word	0x40021000
 80020f8:	08007780 	.word	0x08007780
 80020fc:	20000010 	.word	0x20000010
 8002100:	20000014 	.word	0x20000014

08002104 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800211e:	4b1e      	ldr	r3, [pc, #120]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x94>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b04      	cmp	r3, #4
 800212c:	d002      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x30>
 800212e:	2b08      	cmp	r3, #8
 8002130:	d003      	beq.n	800213a <HAL_RCC_GetSysClockFreq+0x36>
 8002132:	e027      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002134:	4b19      	ldr	r3, [pc, #100]	@ (800219c <HAL_RCC_GetSysClockFreq+0x98>)
 8002136:	613b      	str	r3, [r7, #16]
      break;
 8002138:	e027      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	0c9b      	lsrs	r3, r3, #18
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	4a17      	ldr	r2, [pc, #92]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002144:	5cd3      	ldrb	r3, [r2, r3]
 8002146:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d010      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002152:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x94>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	0c5b      	lsrs	r3, r3, #17
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	4a11      	ldr	r2, [pc, #68]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800215e:	5cd3      	ldrb	r3, [r2, r3]
 8002160:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a0d      	ldr	r2, [pc, #52]	@ (800219c <HAL_RCC_GetSysClockFreq+0x98>)
 8002166:	fb03 f202 	mul.w	r2, r3, r2
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	e004      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a0c      	ldr	r2, [pc, #48]	@ (80021a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002178:	fb02 f303 	mul.w	r3, r2, r3
 800217c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	613b      	str	r3, [r7, #16]
      break;
 8002182:	e002      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002184:	4b05      	ldr	r3, [pc, #20]	@ (800219c <HAL_RCC_GetSysClockFreq+0x98>)
 8002186:	613b      	str	r3, [r7, #16]
      break;
 8002188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800218a:	693b      	ldr	r3, [r7, #16]
}
 800218c:	4618      	mov	r0, r3
 800218e:	371c      	adds	r7, #28
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
 800219c:	007a1200 	.word	0x007a1200
 80021a0:	08007790 	.word	0x08007790
 80021a4:	080077a0 	.word	0x080077a0
 80021a8:	003d0900 	.word	0x003d0900

080021ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021b4:	4b0a      	ldr	r3, [pc, #40]	@ (80021e0 <RCC_Delay+0x34>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0a      	ldr	r2, [pc, #40]	@ (80021e4 <RCC_Delay+0x38>)
 80021ba:	fba2 2303 	umull	r2, r3, r2, r3
 80021be:	0a5b      	lsrs	r3, r3, #9
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	fb02 f303 	mul.w	r3, r2, r3
 80021c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021c8:	bf00      	nop
  }
  while (Delay --);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1e5a      	subs	r2, r3, #1
 80021ce:	60fa      	str	r2, [r7, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f9      	bne.n	80021c8 <RCC_Delay+0x1c>
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	20000010 	.word	0x20000010
 80021e4:	10624dd3 	.word	0x10624dd3

080021e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e041      	b.n	800227e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d106      	bne.n	8002214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7fe ff20 	bl	8001054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3304      	adds	r3, #4
 8002224:	4619      	mov	r1, r3
 8002226:	4610      	mov	r0, r2
 8002228:	f000 fbce 	bl	80029c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e041      	b.n	800231c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d106      	bne.n	80022b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f839 	bl	8002324 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2202      	movs	r2, #2
 80022b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3304      	adds	r3, #4
 80022c2:	4619      	mov	r1, r3
 80022c4:	4610      	mov	r0, r2
 80022c6:	f000 fb7f 	bl	80029c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr
	...

08002338 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d109      	bne.n	800235c <HAL_TIM_PWM_Start+0x24>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b01      	cmp	r3, #1
 8002352:	bf14      	ite	ne
 8002354:	2301      	movne	r3, #1
 8002356:	2300      	moveq	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	e022      	b.n	80023a2 <HAL_TIM_PWM_Start+0x6a>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b04      	cmp	r3, #4
 8002360:	d109      	bne.n	8002376 <HAL_TIM_PWM_Start+0x3e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b01      	cmp	r3, #1
 800236c:	bf14      	ite	ne
 800236e:	2301      	movne	r3, #1
 8002370:	2300      	moveq	r3, #0
 8002372:	b2db      	uxtb	r3, r3
 8002374:	e015      	b.n	80023a2 <HAL_TIM_PWM_Start+0x6a>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b08      	cmp	r3, #8
 800237a:	d109      	bne.n	8002390 <HAL_TIM_PWM_Start+0x58>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b01      	cmp	r3, #1
 8002386:	bf14      	ite	ne
 8002388:	2301      	movne	r3, #1
 800238a:	2300      	moveq	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	e008      	b.n	80023a2 <HAL_TIM_PWM_Start+0x6a>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b01      	cmp	r3, #1
 800239a:	bf14      	ite	ne
 800239c:	2301      	movne	r3, #1
 800239e:	2300      	moveq	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e05e      	b.n	8002468 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d104      	bne.n	80023ba <HAL_TIM_PWM_Start+0x82>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023b8:	e013      	b.n	80023e2 <HAL_TIM_PWM_Start+0xaa>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d104      	bne.n	80023ca <HAL_TIM_PWM_Start+0x92>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023c8:	e00b      	b.n	80023e2 <HAL_TIM_PWM_Start+0xaa>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d104      	bne.n	80023da <HAL_TIM_PWM_Start+0xa2>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023d8:	e003      	b.n	80023e2 <HAL_TIM_PWM_Start+0xaa>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2202      	movs	r2, #2
 80023de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2201      	movs	r2, #1
 80023e8:	6839      	ldr	r1, [r7, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fd78 	bl	8002ee0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002470 <HAL_TIM_PWM_Start+0x138>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d107      	bne.n	800240a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002408:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a18      	ldr	r2, [pc, #96]	@ (8002470 <HAL_TIM_PWM_Start+0x138>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d00e      	beq.n	8002432 <HAL_TIM_PWM_Start+0xfa>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800241c:	d009      	beq.n	8002432 <HAL_TIM_PWM_Start+0xfa>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a14      	ldr	r2, [pc, #80]	@ (8002474 <HAL_TIM_PWM_Start+0x13c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d004      	beq.n	8002432 <HAL_TIM_PWM_Start+0xfa>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a12      	ldr	r2, [pc, #72]	@ (8002478 <HAL_TIM_PWM_Start+0x140>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d111      	bne.n	8002456 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2b06      	cmp	r3, #6
 8002442:	d010      	beq.n	8002466 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002454:	e007      	b.n	8002466 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0201 	orr.w	r2, r2, #1
 8002464:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40012c00 	.word	0x40012c00
 8002474:	40000400 	.word	0x40000400
 8002478:	40000800 	.word	0x40000800

0800247c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d020      	beq.n	80024e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d01b      	beq.n	80024e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f06f 0202 	mvn.w	r2, #2
 80024b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 fa63 	bl	8002992 <HAL_TIM_IC_CaptureCallback>
 80024cc:	e005      	b.n	80024da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 fa56 	bl	8002980 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fa65 	bl	80029a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d020      	beq.n	800252c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d01b      	beq.n	800252c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0204 	mvn.w	r2, #4
 80024fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2202      	movs	r2, #2
 8002502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fa3d 	bl	8002992 <HAL_TIM_IC_CaptureCallback>
 8002518:	e005      	b.n	8002526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 fa30 	bl	8002980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 fa3f 	bl	80029a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d020      	beq.n	8002578 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d01b      	beq.n	8002578 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0208 	mvn.w	r2, #8
 8002548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2204      	movs	r2, #4
 800254e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fa17 	bl	8002992 <HAL_TIM_IC_CaptureCallback>
 8002564:	e005      	b.n	8002572 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fa0a 	bl	8002980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 fa19 	bl	80029a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f003 0310 	and.w	r3, r3, #16
 800257e:	2b00      	cmp	r3, #0
 8002580:	d020      	beq.n	80025c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b00      	cmp	r3, #0
 800258a:	d01b      	beq.n	80025c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f06f 0210 	mvn.w	r2, #16
 8002594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2208      	movs	r2, #8
 800259a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f9f1 	bl	8002992 <HAL_TIM_IC_CaptureCallback>
 80025b0:	e005      	b.n	80025be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f9e4 	bl	8002980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f9f3 	bl	80029a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00c      	beq.n	80025e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d007      	beq.n	80025e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f06f 0201 	mvn.w	r2, #1
 80025e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f9c3 	bl	800296e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00c      	beq.n	800260c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fd46 	bl	8003098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00c      	beq.n	8002630 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800261c:	2b00      	cmp	r3, #0
 800261e:	d007      	beq.n	8002630 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f9c3 	bl	80029b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00c      	beq.n	8002654 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f003 0320 	and.w	r3, r3, #32
 8002640:	2b00      	cmp	r3, #0
 8002642:	d007      	beq.n	8002654 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f06f 0220 	mvn.w	r2, #32
 800264c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 fd19 	bl	8003086 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002654:	bf00      	nop
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002676:	2302      	movs	r3, #2
 8002678:	e0ae      	b.n	80027d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b0c      	cmp	r3, #12
 8002686:	f200 809f 	bhi.w	80027c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800268a:	a201      	add	r2, pc, #4	@ (adr r2, 8002690 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800268c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002690:	080026c5 	.word	0x080026c5
 8002694:	080027c9 	.word	0x080027c9
 8002698:	080027c9 	.word	0x080027c9
 800269c:	080027c9 	.word	0x080027c9
 80026a0:	08002705 	.word	0x08002705
 80026a4:	080027c9 	.word	0x080027c9
 80026a8:	080027c9 	.word	0x080027c9
 80026ac:	080027c9 	.word	0x080027c9
 80026b0:	08002747 	.word	0x08002747
 80026b4:	080027c9 	.word	0x080027c9
 80026b8:	080027c9 	.word	0x080027c9
 80026bc:	080027c9 	.word	0x080027c9
 80026c0:	08002787 	.word	0x08002787
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68b9      	ldr	r1, [r7, #8]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f9ea 	bl	8002aa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699a      	ldr	r2, [r3, #24]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0208 	orr.w	r2, r2, #8
 80026de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0204 	bic.w	r2, r2, #4
 80026ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6999      	ldr	r1, [r3, #24]
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	691a      	ldr	r2, [r3, #16]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	619a      	str	r2, [r3, #24]
      break;
 8002702:	e064      	b.n	80027ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68b9      	ldr	r1, [r7, #8]
 800270a:	4618      	mov	r0, r3
 800270c:	f000 fa30 	bl	8002b70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800271e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699a      	ldr	r2, [r3, #24]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800272e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6999      	ldr	r1, [r3, #24]
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	021a      	lsls	r2, r3, #8
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	619a      	str	r2, [r3, #24]
      break;
 8002744:	e043      	b.n	80027ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68b9      	ldr	r1, [r7, #8]
 800274c:	4618      	mov	r0, r3
 800274e:	f000 fa79 	bl	8002c44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	69da      	ldr	r2, [r3, #28]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0208 	orr.w	r2, r2, #8
 8002760:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	69da      	ldr	r2, [r3, #28]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0204 	bic.w	r2, r2, #4
 8002770:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	69d9      	ldr	r1, [r3, #28]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	61da      	str	r2, [r3, #28]
      break;
 8002784:	e023      	b.n	80027ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68b9      	ldr	r1, [r7, #8]
 800278c:	4618      	mov	r0, r3
 800278e:	f000 fac3 	bl	8002d18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69da      	ldr	r2, [r3, #28]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	69da      	ldr	r2, [r3, #28]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69d9      	ldr	r1, [r3, #28]
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	021a      	lsls	r2, r3, #8
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	61da      	str	r2, [r3, #28]
      break;
 80027c6:	e002      	b.n	80027ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	75fb      	strb	r3, [r7, #23]
      break;
 80027cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_TIM_ConfigClockSource+0x1c>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e0b4      	b.n	8002966 <HAL_TIM_ConfigClockSource+0x186>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800281a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002822:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002834:	d03e      	beq.n	80028b4 <HAL_TIM_ConfigClockSource+0xd4>
 8002836:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800283a:	f200 8087 	bhi.w	800294c <HAL_TIM_ConfigClockSource+0x16c>
 800283e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002842:	f000 8086 	beq.w	8002952 <HAL_TIM_ConfigClockSource+0x172>
 8002846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800284a:	d87f      	bhi.n	800294c <HAL_TIM_ConfigClockSource+0x16c>
 800284c:	2b70      	cmp	r3, #112	@ 0x70
 800284e:	d01a      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0xa6>
 8002850:	2b70      	cmp	r3, #112	@ 0x70
 8002852:	d87b      	bhi.n	800294c <HAL_TIM_ConfigClockSource+0x16c>
 8002854:	2b60      	cmp	r3, #96	@ 0x60
 8002856:	d050      	beq.n	80028fa <HAL_TIM_ConfigClockSource+0x11a>
 8002858:	2b60      	cmp	r3, #96	@ 0x60
 800285a:	d877      	bhi.n	800294c <HAL_TIM_ConfigClockSource+0x16c>
 800285c:	2b50      	cmp	r3, #80	@ 0x50
 800285e:	d03c      	beq.n	80028da <HAL_TIM_ConfigClockSource+0xfa>
 8002860:	2b50      	cmp	r3, #80	@ 0x50
 8002862:	d873      	bhi.n	800294c <HAL_TIM_ConfigClockSource+0x16c>
 8002864:	2b40      	cmp	r3, #64	@ 0x40
 8002866:	d058      	beq.n	800291a <HAL_TIM_ConfigClockSource+0x13a>
 8002868:	2b40      	cmp	r3, #64	@ 0x40
 800286a:	d86f      	bhi.n	800294c <HAL_TIM_ConfigClockSource+0x16c>
 800286c:	2b30      	cmp	r3, #48	@ 0x30
 800286e:	d064      	beq.n	800293a <HAL_TIM_ConfigClockSource+0x15a>
 8002870:	2b30      	cmp	r3, #48	@ 0x30
 8002872:	d86b      	bhi.n	800294c <HAL_TIM_ConfigClockSource+0x16c>
 8002874:	2b20      	cmp	r3, #32
 8002876:	d060      	beq.n	800293a <HAL_TIM_ConfigClockSource+0x15a>
 8002878:	2b20      	cmp	r3, #32
 800287a:	d867      	bhi.n	800294c <HAL_TIM_ConfigClockSource+0x16c>
 800287c:	2b00      	cmp	r3, #0
 800287e:	d05c      	beq.n	800293a <HAL_TIM_ConfigClockSource+0x15a>
 8002880:	2b10      	cmp	r3, #16
 8002882:	d05a      	beq.n	800293a <HAL_TIM_ConfigClockSource+0x15a>
 8002884:	e062      	b.n	800294c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002896:	f000 fb04 	bl	8002ea2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80028a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	609a      	str	r2, [r3, #8]
      break;
 80028b2:	e04f      	b.n	8002954 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028c4:	f000 faed 	bl	8002ea2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028d6:	609a      	str	r2, [r3, #8]
      break;
 80028d8:	e03c      	b.n	8002954 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028e6:	461a      	mov	r2, r3
 80028e8:	f000 fa64 	bl	8002db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2150      	movs	r1, #80	@ 0x50
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 fabb 	bl	8002e6e <TIM_ITRx_SetConfig>
      break;
 80028f8:	e02c      	b.n	8002954 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002906:	461a      	mov	r2, r3
 8002908:	f000 fa82 	bl	8002e10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2160      	movs	r1, #96	@ 0x60
 8002912:	4618      	mov	r0, r3
 8002914:	f000 faab 	bl	8002e6e <TIM_ITRx_SetConfig>
      break;
 8002918:	e01c      	b.n	8002954 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002926:	461a      	mov	r2, r3
 8002928:	f000 fa44 	bl	8002db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2140      	movs	r1, #64	@ 0x40
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fa9b 	bl	8002e6e <TIM_ITRx_SetConfig>
      break;
 8002938:	e00c      	b.n	8002954 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4619      	mov	r1, r3
 8002944:	4610      	mov	r0, r2
 8002946:	f000 fa92 	bl	8002e6e <TIM_ITRx_SetConfig>
      break;
 800294a:	e003      	b.n	8002954 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
      break;
 8002950:	e000      	b.n	8002954 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002952:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002964:	7bfb      	ldrb	r3, [r7, #15]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr

08002992 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr

080029b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a2f      	ldr	r2, [pc, #188]	@ (8002a98 <TIM_Base_SetConfig+0xd0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d00b      	beq.n	80029f8 <TIM_Base_SetConfig+0x30>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029e6:	d007      	beq.n	80029f8 <TIM_Base_SetConfig+0x30>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a2c      	ldr	r2, [pc, #176]	@ (8002a9c <TIM_Base_SetConfig+0xd4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d003      	beq.n	80029f8 <TIM_Base_SetConfig+0x30>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a2b      	ldr	r2, [pc, #172]	@ (8002aa0 <TIM_Base_SetConfig+0xd8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d108      	bne.n	8002a0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a22      	ldr	r2, [pc, #136]	@ (8002a98 <TIM_Base_SetConfig+0xd0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00b      	beq.n	8002a2a <TIM_Base_SetConfig+0x62>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a18:	d007      	beq.n	8002a2a <TIM_Base_SetConfig+0x62>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8002a9c <TIM_Base_SetConfig+0xd4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d003      	beq.n	8002a2a <TIM_Base_SetConfig+0x62>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a1e      	ldr	r2, [pc, #120]	@ (8002aa0 <TIM_Base_SetConfig+0xd8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d108      	bne.n	8002a3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a0d      	ldr	r2, [pc, #52]	@ (8002a98 <TIM_Base_SetConfig+0xd0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d103      	bne.n	8002a70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d005      	beq.n	8002a8e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f023 0201 	bic.w	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	611a      	str	r2, [r3, #16]
  }
}
 8002a8e:	bf00      	nop
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr
 8002a98:	40012c00 	.word	0x40012c00
 8002a9c:	40000400 	.word	0x40000400
 8002aa0:	40000800 	.word	0x40000800

08002aa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	f023 0201 	bic.w	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f023 0303 	bic.w	r3, r3, #3
 8002ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f023 0302 	bic.w	r3, r3, #2
 8002aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a1c      	ldr	r2, [pc, #112]	@ (8002b6c <TIM_OC1_SetConfig+0xc8>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d10c      	bne.n	8002b1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f023 0308 	bic.w	r3, r3, #8
 8002b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f023 0304 	bic.w	r3, r3, #4
 8002b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a13      	ldr	r2, [pc, #76]	@ (8002b6c <TIM_OC1_SetConfig+0xc8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d111      	bne.n	8002b46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	621a      	str	r2, [r3, #32]
}
 8002b60:	bf00      	nop
 8002b62:	371c      	adds	r7, #28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40012c00 	.word	0x40012c00

08002b70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	f023 0210 	bic.w	r2, r3, #16
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	021b      	lsls	r3, r3, #8
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f023 0320 	bic.w	r3, r3, #32
 8002bba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a1d      	ldr	r2, [pc, #116]	@ (8002c40 <TIM_OC2_SetConfig+0xd0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d10d      	bne.n	8002bec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a14      	ldr	r2, [pc, #80]	@ (8002c40 <TIM_OC2_SetConfig+0xd0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d113      	bne.n	8002c1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	621a      	str	r2, [r3, #32]
}
 8002c36:	bf00      	nop
 8002c38:	371c      	adds	r7, #28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	40012c00 	.word	0x40012c00

08002c44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 0303 	bic.w	r3, r3, #3
 8002c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	021b      	lsls	r3, r3, #8
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002d14 <TIM_OC3_SetConfig+0xd0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d10d      	bne.n	8002cbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ca8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	021b      	lsls	r3, r3, #8
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002cbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a14      	ldr	r2, [pc, #80]	@ (8002d14 <TIM_OC3_SetConfig+0xd0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d113      	bne.n	8002cee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	621a      	str	r2, [r3, #32]
}
 8002d08:	bf00      	nop
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40012c00 	.word	0x40012c00

08002d18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	021b      	lsls	r3, r3, #8
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	031b      	lsls	r3, r3, #12
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a0f      	ldr	r2, [pc, #60]	@ (8002db0 <TIM_OC4_SetConfig+0x98>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d109      	bne.n	8002d8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	019b      	lsls	r3, r3, #6
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	621a      	str	r2, [r3, #32]
}
 8002da6:	bf00      	nop
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr
 8002db0:	40012c00 	.word	0x40012c00

08002db4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	f023 0201 	bic.w	r2, r3, #1
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f023 030a 	bic.w	r3, r3, #10
 8002df0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	621a      	str	r2, [r3, #32]
}
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b087      	sub	sp, #28
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	f023 0210 	bic.w	r2, r3, #16
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	031b      	lsls	r3, r3, #12
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e4c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	621a      	str	r2, [r3, #32]
}
 8002e64:	bf00      	nop
 8002e66:	371c      	adds	r7, #28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b085      	sub	sp, #20
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f043 0307 	orr.w	r3, r3, #7
 8002e90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	609a      	str	r2, [r3, #8]
}
 8002e98:	bf00      	nop
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr

08002ea2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b087      	sub	sp, #28
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]
 8002eae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ebc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	021a      	lsls	r2, r3, #8
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	609a      	str	r2, [r3, #8]
}
 8002ed6:	bf00      	nop
 8002ed8:	371c      	adds	r7, #28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f003 031f 	and.w	r3, r3, #31
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a1a      	ldr	r2, [r3, #32]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	401a      	ands	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a1a      	ldr	r2, [r3, #32]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f003 031f 	and.w	r3, r3, #31
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	fa01 f303 	lsl.w	r3, r1, r3
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	621a      	str	r2, [r3, #32]
}
 8002f1e:	bf00      	nop
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e046      	b.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a16      	ldr	r2, [pc, #88]	@ (8002fd8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00e      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f8c:	d009      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a12      	ldr	r2, [pc, #72]	@ (8002fdc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d004      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a10      	ldr	r2, [pc, #64]	@ (8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d10c      	bne.n	8002fbc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	40012c00 	.word	0x40012c00
 8002fdc:	40000400 	.word	0x40000400
 8002fe0:	40000800 	.word	0x40000800

08002fe4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e03d      	b.n	800307c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4313      	orrs	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr

08003086 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <__cvt>:
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030b0:	461d      	mov	r5, r3
 80030b2:	bfbb      	ittet	lt
 80030b4:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80030b8:	461d      	movlt	r5, r3
 80030ba:	2300      	movge	r3, #0
 80030bc:	232d      	movlt	r3, #45	@ 0x2d
 80030be:	b088      	sub	sp, #32
 80030c0:	4614      	mov	r4, r2
 80030c2:	bfb8      	it	lt
 80030c4:	4614      	movlt	r4, r2
 80030c6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80030c8:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80030ca:	7013      	strb	r3, [r2, #0]
 80030cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80030ce:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80030d2:	f023 0820 	bic.w	r8, r3, #32
 80030d6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80030da:	d005      	beq.n	80030e8 <__cvt+0x3e>
 80030dc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80030e0:	d100      	bne.n	80030e4 <__cvt+0x3a>
 80030e2:	3601      	adds	r6, #1
 80030e4:	2302      	movs	r3, #2
 80030e6:	e000      	b.n	80030ea <__cvt+0x40>
 80030e8:	2303      	movs	r3, #3
 80030ea:	aa07      	add	r2, sp, #28
 80030ec:	9204      	str	r2, [sp, #16]
 80030ee:	aa06      	add	r2, sp, #24
 80030f0:	e9cd a202 	strd	sl, r2, [sp, #8]
 80030f4:	e9cd 3600 	strd	r3, r6, [sp]
 80030f8:	4622      	mov	r2, r4
 80030fa:	462b      	mov	r3, r5
 80030fc:	f001 f884 	bl	8004208 <_dtoa_r>
 8003100:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003104:	4607      	mov	r7, r0
 8003106:	d119      	bne.n	800313c <__cvt+0x92>
 8003108:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800310a:	07db      	lsls	r3, r3, #31
 800310c:	d50e      	bpl.n	800312c <__cvt+0x82>
 800310e:	eb00 0906 	add.w	r9, r0, r6
 8003112:	2200      	movs	r2, #0
 8003114:	2300      	movs	r3, #0
 8003116:	4620      	mov	r0, r4
 8003118:	4629      	mov	r1, r5
 800311a:	f7fd fc45 	bl	80009a8 <__aeabi_dcmpeq>
 800311e:	b108      	cbz	r0, 8003124 <__cvt+0x7a>
 8003120:	f8cd 901c 	str.w	r9, [sp, #28]
 8003124:	2230      	movs	r2, #48	@ 0x30
 8003126:	9b07      	ldr	r3, [sp, #28]
 8003128:	454b      	cmp	r3, r9
 800312a:	d31e      	bcc.n	800316a <__cvt+0xc0>
 800312c:	4638      	mov	r0, r7
 800312e:	9b07      	ldr	r3, [sp, #28]
 8003130:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003132:	1bdb      	subs	r3, r3, r7
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	b008      	add	sp, #32
 8003138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800313c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003140:	eb00 0906 	add.w	r9, r0, r6
 8003144:	d1e5      	bne.n	8003112 <__cvt+0x68>
 8003146:	7803      	ldrb	r3, [r0, #0]
 8003148:	2b30      	cmp	r3, #48	@ 0x30
 800314a:	d10a      	bne.n	8003162 <__cvt+0xb8>
 800314c:	2200      	movs	r2, #0
 800314e:	2300      	movs	r3, #0
 8003150:	4620      	mov	r0, r4
 8003152:	4629      	mov	r1, r5
 8003154:	f7fd fc28 	bl	80009a8 <__aeabi_dcmpeq>
 8003158:	b918      	cbnz	r0, 8003162 <__cvt+0xb8>
 800315a:	f1c6 0601 	rsb	r6, r6, #1
 800315e:	f8ca 6000 	str.w	r6, [sl]
 8003162:	f8da 3000 	ldr.w	r3, [sl]
 8003166:	4499      	add	r9, r3
 8003168:	e7d3      	b.n	8003112 <__cvt+0x68>
 800316a:	1c59      	adds	r1, r3, #1
 800316c:	9107      	str	r1, [sp, #28]
 800316e:	701a      	strb	r2, [r3, #0]
 8003170:	e7d9      	b.n	8003126 <__cvt+0x7c>

08003172 <__exponent>:
 8003172:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003174:	2900      	cmp	r1, #0
 8003176:	bfb6      	itet	lt
 8003178:	232d      	movlt	r3, #45	@ 0x2d
 800317a:	232b      	movge	r3, #43	@ 0x2b
 800317c:	4249      	neglt	r1, r1
 800317e:	2909      	cmp	r1, #9
 8003180:	7002      	strb	r2, [r0, #0]
 8003182:	7043      	strb	r3, [r0, #1]
 8003184:	dd29      	ble.n	80031da <__exponent+0x68>
 8003186:	f10d 0307 	add.w	r3, sp, #7
 800318a:	461d      	mov	r5, r3
 800318c:	270a      	movs	r7, #10
 800318e:	fbb1 f6f7 	udiv	r6, r1, r7
 8003192:	461a      	mov	r2, r3
 8003194:	fb07 1416 	mls	r4, r7, r6, r1
 8003198:	3430      	adds	r4, #48	@ 0x30
 800319a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800319e:	460c      	mov	r4, r1
 80031a0:	2c63      	cmp	r4, #99	@ 0x63
 80031a2:	4631      	mov	r1, r6
 80031a4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80031a8:	dcf1      	bgt.n	800318e <__exponent+0x1c>
 80031aa:	3130      	adds	r1, #48	@ 0x30
 80031ac:	1e94      	subs	r4, r2, #2
 80031ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 80031b2:	4623      	mov	r3, r4
 80031b4:	1c41      	adds	r1, r0, #1
 80031b6:	42ab      	cmp	r3, r5
 80031b8:	d30a      	bcc.n	80031d0 <__exponent+0x5e>
 80031ba:	f10d 0309 	add.w	r3, sp, #9
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	42ac      	cmp	r4, r5
 80031c2:	bf88      	it	hi
 80031c4:	2300      	movhi	r3, #0
 80031c6:	3302      	adds	r3, #2
 80031c8:	4403      	add	r3, r0
 80031ca:	1a18      	subs	r0, r3, r0
 80031cc:	b003      	add	sp, #12
 80031ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80031d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80031d8:	e7ed      	b.n	80031b6 <__exponent+0x44>
 80031da:	2330      	movs	r3, #48	@ 0x30
 80031dc:	3130      	adds	r1, #48	@ 0x30
 80031de:	7083      	strb	r3, [r0, #2]
 80031e0:	70c1      	strb	r1, [r0, #3]
 80031e2:	1d03      	adds	r3, r0, #4
 80031e4:	e7f1      	b.n	80031ca <__exponent+0x58>
	...

080031e8 <_printf_float>:
 80031e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031ec:	b091      	sub	sp, #68	@ 0x44
 80031ee:	460c      	mov	r4, r1
 80031f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80031f4:	4616      	mov	r6, r2
 80031f6:	461f      	mov	r7, r3
 80031f8:	4605      	mov	r5, r0
 80031fa:	f000 fef1 	bl	8003fe0 <_localeconv_r>
 80031fe:	6803      	ldr	r3, [r0, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	9308      	str	r3, [sp, #32]
 8003204:	f7fc ffa4 	bl	8000150 <strlen>
 8003208:	2300      	movs	r3, #0
 800320a:	930e      	str	r3, [sp, #56]	@ 0x38
 800320c:	f8d8 3000 	ldr.w	r3, [r8]
 8003210:	9009      	str	r0, [sp, #36]	@ 0x24
 8003212:	3307      	adds	r3, #7
 8003214:	f023 0307 	bic.w	r3, r3, #7
 8003218:	f103 0208 	add.w	r2, r3, #8
 800321c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003220:	f8d4 b000 	ldr.w	fp, [r4]
 8003224:	f8c8 2000 	str.w	r2, [r8]
 8003228:	e9d3 8900 	ldrd	r8, r9, [r3]
 800322c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003230:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003232:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003236:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800323a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800323e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003242:	4b9c      	ldr	r3, [pc, #624]	@ (80034b4 <_printf_float+0x2cc>)
 8003244:	f7fd fbe2 	bl	8000a0c <__aeabi_dcmpun>
 8003248:	bb70      	cbnz	r0, 80032a8 <_printf_float+0xc0>
 800324a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800324e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003252:	4b98      	ldr	r3, [pc, #608]	@ (80034b4 <_printf_float+0x2cc>)
 8003254:	f7fd fbbc 	bl	80009d0 <__aeabi_dcmple>
 8003258:	bb30      	cbnz	r0, 80032a8 <_printf_float+0xc0>
 800325a:	2200      	movs	r2, #0
 800325c:	2300      	movs	r3, #0
 800325e:	4640      	mov	r0, r8
 8003260:	4649      	mov	r1, r9
 8003262:	f7fd fbab 	bl	80009bc <__aeabi_dcmplt>
 8003266:	b110      	cbz	r0, 800326e <_printf_float+0x86>
 8003268:	232d      	movs	r3, #45	@ 0x2d
 800326a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800326e:	4a92      	ldr	r2, [pc, #584]	@ (80034b8 <_printf_float+0x2d0>)
 8003270:	4b92      	ldr	r3, [pc, #584]	@ (80034bc <_printf_float+0x2d4>)
 8003272:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003276:	bf94      	ite	ls
 8003278:	4690      	movls	r8, r2
 800327a:	4698      	movhi	r8, r3
 800327c:	2303      	movs	r3, #3
 800327e:	f04f 0900 	mov.w	r9, #0
 8003282:	6123      	str	r3, [r4, #16]
 8003284:	f02b 0304 	bic.w	r3, fp, #4
 8003288:	6023      	str	r3, [r4, #0]
 800328a:	4633      	mov	r3, r6
 800328c:	4621      	mov	r1, r4
 800328e:	4628      	mov	r0, r5
 8003290:	9700      	str	r7, [sp, #0]
 8003292:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003294:	f000 f9d4 	bl	8003640 <_printf_common>
 8003298:	3001      	adds	r0, #1
 800329a:	f040 8090 	bne.w	80033be <_printf_float+0x1d6>
 800329e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032a2:	b011      	add	sp, #68	@ 0x44
 80032a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032a8:	4642      	mov	r2, r8
 80032aa:	464b      	mov	r3, r9
 80032ac:	4640      	mov	r0, r8
 80032ae:	4649      	mov	r1, r9
 80032b0:	f7fd fbac 	bl	8000a0c <__aeabi_dcmpun>
 80032b4:	b148      	cbz	r0, 80032ca <_printf_float+0xe2>
 80032b6:	464b      	mov	r3, r9
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	bfb8      	it	lt
 80032bc:	232d      	movlt	r3, #45	@ 0x2d
 80032be:	4a80      	ldr	r2, [pc, #512]	@ (80034c0 <_printf_float+0x2d8>)
 80032c0:	bfb8      	it	lt
 80032c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80032c6:	4b7f      	ldr	r3, [pc, #508]	@ (80034c4 <_printf_float+0x2dc>)
 80032c8:	e7d3      	b.n	8003272 <_printf_float+0x8a>
 80032ca:	6863      	ldr	r3, [r4, #4]
 80032cc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	d13f      	bne.n	8003354 <_printf_float+0x16c>
 80032d4:	2306      	movs	r3, #6
 80032d6:	6063      	str	r3, [r4, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80032de:	6023      	str	r3, [r4, #0]
 80032e0:	9206      	str	r2, [sp, #24]
 80032e2:	aa0e      	add	r2, sp, #56	@ 0x38
 80032e4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80032e8:	aa0d      	add	r2, sp, #52	@ 0x34
 80032ea:	9203      	str	r2, [sp, #12]
 80032ec:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80032f0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80032f4:	6863      	ldr	r3, [r4, #4]
 80032f6:	4642      	mov	r2, r8
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	4628      	mov	r0, r5
 80032fc:	464b      	mov	r3, r9
 80032fe:	910a      	str	r1, [sp, #40]	@ 0x28
 8003300:	f7ff fed3 	bl	80030aa <__cvt>
 8003304:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003306:	4680      	mov	r8, r0
 8003308:	2947      	cmp	r1, #71	@ 0x47
 800330a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800330c:	d128      	bne.n	8003360 <_printf_float+0x178>
 800330e:	1cc8      	adds	r0, r1, #3
 8003310:	db02      	blt.n	8003318 <_printf_float+0x130>
 8003312:	6863      	ldr	r3, [r4, #4]
 8003314:	4299      	cmp	r1, r3
 8003316:	dd40      	ble.n	800339a <_printf_float+0x1b2>
 8003318:	f1aa 0a02 	sub.w	sl, sl, #2
 800331c:	fa5f fa8a 	uxtb.w	sl, sl
 8003320:	4652      	mov	r2, sl
 8003322:	3901      	subs	r1, #1
 8003324:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003328:	910d      	str	r1, [sp, #52]	@ 0x34
 800332a:	f7ff ff22 	bl	8003172 <__exponent>
 800332e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003330:	4681      	mov	r9, r0
 8003332:	1813      	adds	r3, r2, r0
 8003334:	2a01      	cmp	r2, #1
 8003336:	6123      	str	r3, [r4, #16]
 8003338:	dc02      	bgt.n	8003340 <_printf_float+0x158>
 800333a:	6822      	ldr	r2, [r4, #0]
 800333c:	07d2      	lsls	r2, r2, #31
 800333e:	d501      	bpl.n	8003344 <_printf_float+0x15c>
 8003340:	3301      	adds	r3, #1
 8003342:	6123      	str	r3, [r4, #16]
 8003344:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003348:	2b00      	cmp	r3, #0
 800334a:	d09e      	beq.n	800328a <_printf_float+0xa2>
 800334c:	232d      	movs	r3, #45	@ 0x2d
 800334e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003352:	e79a      	b.n	800328a <_printf_float+0xa2>
 8003354:	2947      	cmp	r1, #71	@ 0x47
 8003356:	d1bf      	bne.n	80032d8 <_printf_float+0xf0>
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1bd      	bne.n	80032d8 <_printf_float+0xf0>
 800335c:	2301      	movs	r3, #1
 800335e:	e7ba      	b.n	80032d6 <_printf_float+0xee>
 8003360:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003364:	d9dc      	bls.n	8003320 <_printf_float+0x138>
 8003366:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800336a:	d118      	bne.n	800339e <_printf_float+0x1b6>
 800336c:	2900      	cmp	r1, #0
 800336e:	6863      	ldr	r3, [r4, #4]
 8003370:	dd0b      	ble.n	800338a <_printf_float+0x1a2>
 8003372:	6121      	str	r1, [r4, #16]
 8003374:	b913      	cbnz	r3, 800337c <_printf_float+0x194>
 8003376:	6822      	ldr	r2, [r4, #0]
 8003378:	07d0      	lsls	r0, r2, #31
 800337a:	d502      	bpl.n	8003382 <_printf_float+0x19a>
 800337c:	3301      	adds	r3, #1
 800337e:	440b      	add	r3, r1
 8003380:	6123      	str	r3, [r4, #16]
 8003382:	f04f 0900 	mov.w	r9, #0
 8003386:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003388:	e7dc      	b.n	8003344 <_printf_float+0x15c>
 800338a:	b913      	cbnz	r3, 8003392 <_printf_float+0x1aa>
 800338c:	6822      	ldr	r2, [r4, #0]
 800338e:	07d2      	lsls	r2, r2, #31
 8003390:	d501      	bpl.n	8003396 <_printf_float+0x1ae>
 8003392:	3302      	adds	r3, #2
 8003394:	e7f4      	b.n	8003380 <_printf_float+0x198>
 8003396:	2301      	movs	r3, #1
 8003398:	e7f2      	b.n	8003380 <_printf_float+0x198>
 800339a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800339e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80033a0:	4299      	cmp	r1, r3
 80033a2:	db05      	blt.n	80033b0 <_printf_float+0x1c8>
 80033a4:	6823      	ldr	r3, [r4, #0]
 80033a6:	6121      	str	r1, [r4, #16]
 80033a8:	07d8      	lsls	r0, r3, #31
 80033aa:	d5ea      	bpl.n	8003382 <_printf_float+0x19a>
 80033ac:	1c4b      	adds	r3, r1, #1
 80033ae:	e7e7      	b.n	8003380 <_printf_float+0x198>
 80033b0:	2900      	cmp	r1, #0
 80033b2:	bfcc      	ite	gt
 80033b4:	2201      	movgt	r2, #1
 80033b6:	f1c1 0202 	rsble	r2, r1, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	e7e0      	b.n	8003380 <_printf_float+0x198>
 80033be:	6823      	ldr	r3, [r4, #0]
 80033c0:	055a      	lsls	r2, r3, #21
 80033c2:	d407      	bmi.n	80033d4 <_printf_float+0x1ec>
 80033c4:	6923      	ldr	r3, [r4, #16]
 80033c6:	4642      	mov	r2, r8
 80033c8:	4631      	mov	r1, r6
 80033ca:	4628      	mov	r0, r5
 80033cc:	47b8      	blx	r7
 80033ce:	3001      	adds	r0, #1
 80033d0:	d12b      	bne.n	800342a <_printf_float+0x242>
 80033d2:	e764      	b.n	800329e <_printf_float+0xb6>
 80033d4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80033d8:	f240 80dc 	bls.w	8003594 <_printf_float+0x3ac>
 80033dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80033e0:	2200      	movs	r2, #0
 80033e2:	2300      	movs	r3, #0
 80033e4:	f7fd fae0 	bl	80009a8 <__aeabi_dcmpeq>
 80033e8:	2800      	cmp	r0, #0
 80033ea:	d033      	beq.n	8003454 <_printf_float+0x26c>
 80033ec:	2301      	movs	r3, #1
 80033ee:	4631      	mov	r1, r6
 80033f0:	4628      	mov	r0, r5
 80033f2:	4a35      	ldr	r2, [pc, #212]	@ (80034c8 <_printf_float+0x2e0>)
 80033f4:	47b8      	blx	r7
 80033f6:	3001      	adds	r0, #1
 80033f8:	f43f af51 	beq.w	800329e <_printf_float+0xb6>
 80033fc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003400:	4543      	cmp	r3, r8
 8003402:	db02      	blt.n	800340a <_printf_float+0x222>
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	07d8      	lsls	r0, r3, #31
 8003408:	d50f      	bpl.n	800342a <_printf_float+0x242>
 800340a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800340e:	4631      	mov	r1, r6
 8003410:	4628      	mov	r0, r5
 8003412:	47b8      	blx	r7
 8003414:	3001      	adds	r0, #1
 8003416:	f43f af42 	beq.w	800329e <_printf_float+0xb6>
 800341a:	f04f 0900 	mov.w	r9, #0
 800341e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003422:	f104 0a1a 	add.w	sl, r4, #26
 8003426:	45c8      	cmp	r8, r9
 8003428:	dc09      	bgt.n	800343e <_printf_float+0x256>
 800342a:	6823      	ldr	r3, [r4, #0]
 800342c:	079b      	lsls	r3, r3, #30
 800342e:	f100 8102 	bmi.w	8003636 <_printf_float+0x44e>
 8003432:	68e0      	ldr	r0, [r4, #12]
 8003434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003436:	4298      	cmp	r0, r3
 8003438:	bfb8      	it	lt
 800343a:	4618      	movlt	r0, r3
 800343c:	e731      	b.n	80032a2 <_printf_float+0xba>
 800343e:	2301      	movs	r3, #1
 8003440:	4652      	mov	r2, sl
 8003442:	4631      	mov	r1, r6
 8003444:	4628      	mov	r0, r5
 8003446:	47b8      	blx	r7
 8003448:	3001      	adds	r0, #1
 800344a:	f43f af28 	beq.w	800329e <_printf_float+0xb6>
 800344e:	f109 0901 	add.w	r9, r9, #1
 8003452:	e7e8      	b.n	8003426 <_printf_float+0x23e>
 8003454:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003456:	2b00      	cmp	r3, #0
 8003458:	dc38      	bgt.n	80034cc <_printf_float+0x2e4>
 800345a:	2301      	movs	r3, #1
 800345c:	4631      	mov	r1, r6
 800345e:	4628      	mov	r0, r5
 8003460:	4a19      	ldr	r2, [pc, #100]	@ (80034c8 <_printf_float+0x2e0>)
 8003462:	47b8      	blx	r7
 8003464:	3001      	adds	r0, #1
 8003466:	f43f af1a 	beq.w	800329e <_printf_float+0xb6>
 800346a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800346e:	ea59 0303 	orrs.w	r3, r9, r3
 8003472:	d102      	bne.n	800347a <_printf_float+0x292>
 8003474:	6823      	ldr	r3, [r4, #0]
 8003476:	07d9      	lsls	r1, r3, #31
 8003478:	d5d7      	bpl.n	800342a <_printf_float+0x242>
 800347a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800347e:	4631      	mov	r1, r6
 8003480:	4628      	mov	r0, r5
 8003482:	47b8      	blx	r7
 8003484:	3001      	adds	r0, #1
 8003486:	f43f af0a 	beq.w	800329e <_printf_float+0xb6>
 800348a:	f04f 0a00 	mov.w	sl, #0
 800348e:	f104 0b1a 	add.w	fp, r4, #26
 8003492:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003494:	425b      	negs	r3, r3
 8003496:	4553      	cmp	r3, sl
 8003498:	dc01      	bgt.n	800349e <_printf_float+0x2b6>
 800349a:	464b      	mov	r3, r9
 800349c:	e793      	b.n	80033c6 <_printf_float+0x1de>
 800349e:	2301      	movs	r3, #1
 80034a0:	465a      	mov	r2, fp
 80034a2:	4631      	mov	r1, r6
 80034a4:	4628      	mov	r0, r5
 80034a6:	47b8      	blx	r7
 80034a8:	3001      	adds	r0, #1
 80034aa:	f43f aef8 	beq.w	800329e <_printf_float+0xb6>
 80034ae:	f10a 0a01 	add.w	sl, sl, #1
 80034b2:	e7ee      	b.n	8003492 <_printf_float+0x2aa>
 80034b4:	7fefffff 	.word	0x7fefffff
 80034b8:	080077a2 	.word	0x080077a2
 80034bc:	080077a6 	.word	0x080077a6
 80034c0:	080077aa 	.word	0x080077aa
 80034c4:	080077ae 	.word	0x080077ae
 80034c8:	080077b2 	.word	0x080077b2
 80034cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80034ce:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80034d2:	4553      	cmp	r3, sl
 80034d4:	bfa8      	it	ge
 80034d6:	4653      	movge	r3, sl
 80034d8:	2b00      	cmp	r3, #0
 80034da:	4699      	mov	r9, r3
 80034dc:	dc36      	bgt.n	800354c <_printf_float+0x364>
 80034de:	f04f 0b00 	mov.w	fp, #0
 80034e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80034e6:	f104 021a 	add.w	r2, r4, #26
 80034ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80034ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80034ee:	eba3 0309 	sub.w	r3, r3, r9
 80034f2:	455b      	cmp	r3, fp
 80034f4:	dc31      	bgt.n	800355a <_printf_float+0x372>
 80034f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80034f8:	459a      	cmp	sl, r3
 80034fa:	dc3a      	bgt.n	8003572 <_printf_float+0x38a>
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	07da      	lsls	r2, r3, #31
 8003500:	d437      	bmi.n	8003572 <_printf_float+0x38a>
 8003502:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003504:	ebaa 0903 	sub.w	r9, sl, r3
 8003508:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800350a:	ebaa 0303 	sub.w	r3, sl, r3
 800350e:	4599      	cmp	r9, r3
 8003510:	bfa8      	it	ge
 8003512:	4699      	movge	r9, r3
 8003514:	f1b9 0f00 	cmp.w	r9, #0
 8003518:	dc33      	bgt.n	8003582 <_printf_float+0x39a>
 800351a:	f04f 0800 	mov.w	r8, #0
 800351e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003522:	f104 0b1a 	add.w	fp, r4, #26
 8003526:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003528:	ebaa 0303 	sub.w	r3, sl, r3
 800352c:	eba3 0309 	sub.w	r3, r3, r9
 8003530:	4543      	cmp	r3, r8
 8003532:	f77f af7a 	ble.w	800342a <_printf_float+0x242>
 8003536:	2301      	movs	r3, #1
 8003538:	465a      	mov	r2, fp
 800353a:	4631      	mov	r1, r6
 800353c:	4628      	mov	r0, r5
 800353e:	47b8      	blx	r7
 8003540:	3001      	adds	r0, #1
 8003542:	f43f aeac 	beq.w	800329e <_printf_float+0xb6>
 8003546:	f108 0801 	add.w	r8, r8, #1
 800354a:	e7ec      	b.n	8003526 <_printf_float+0x33e>
 800354c:	4642      	mov	r2, r8
 800354e:	4631      	mov	r1, r6
 8003550:	4628      	mov	r0, r5
 8003552:	47b8      	blx	r7
 8003554:	3001      	adds	r0, #1
 8003556:	d1c2      	bne.n	80034de <_printf_float+0x2f6>
 8003558:	e6a1      	b.n	800329e <_printf_float+0xb6>
 800355a:	2301      	movs	r3, #1
 800355c:	4631      	mov	r1, r6
 800355e:	4628      	mov	r0, r5
 8003560:	920a      	str	r2, [sp, #40]	@ 0x28
 8003562:	47b8      	blx	r7
 8003564:	3001      	adds	r0, #1
 8003566:	f43f ae9a 	beq.w	800329e <_printf_float+0xb6>
 800356a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800356c:	f10b 0b01 	add.w	fp, fp, #1
 8003570:	e7bb      	b.n	80034ea <_printf_float+0x302>
 8003572:	4631      	mov	r1, r6
 8003574:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003578:	4628      	mov	r0, r5
 800357a:	47b8      	blx	r7
 800357c:	3001      	adds	r0, #1
 800357e:	d1c0      	bne.n	8003502 <_printf_float+0x31a>
 8003580:	e68d      	b.n	800329e <_printf_float+0xb6>
 8003582:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003584:	464b      	mov	r3, r9
 8003586:	4631      	mov	r1, r6
 8003588:	4628      	mov	r0, r5
 800358a:	4442      	add	r2, r8
 800358c:	47b8      	blx	r7
 800358e:	3001      	adds	r0, #1
 8003590:	d1c3      	bne.n	800351a <_printf_float+0x332>
 8003592:	e684      	b.n	800329e <_printf_float+0xb6>
 8003594:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003598:	f1ba 0f01 	cmp.w	sl, #1
 800359c:	dc01      	bgt.n	80035a2 <_printf_float+0x3ba>
 800359e:	07db      	lsls	r3, r3, #31
 80035a0:	d536      	bpl.n	8003610 <_printf_float+0x428>
 80035a2:	2301      	movs	r3, #1
 80035a4:	4642      	mov	r2, r8
 80035a6:	4631      	mov	r1, r6
 80035a8:	4628      	mov	r0, r5
 80035aa:	47b8      	blx	r7
 80035ac:	3001      	adds	r0, #1
 80035ae:	f43f ae76 	beq.w	800329e <_printf_float+0xb6>
 80035b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80035b6:	4631      	mov	r1, r6
 80035b8:	4628      	mov	r0, r5
 80035ba:	47b8      	blx	r7
 80035bc:	3001      	adds	r0, #1
 80035be:	f43f ae6e 	beq.w	800329e <_printf_float+0xb6>
 80035c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80035c6:	2200      	movs	r2, #0
 80035c8:	2300      	movs	r3, #0
 80035ca:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80035ce:	f7fd f9eb 	bl	80009a8 <__aeabi_dcmpeq>
 80035d2:	b9c0      	cbnz	r0, 8003606 <_printf_float+0x41e>
 80035d4:	4653      	mov	r3, sl
 80035d6:	f108 0201 	add.w	r2, r8, #1
 80035da:	4631      	mov	r1, r6
 80035dc:	4628      	mov	r0, r5
 80035de:	47b8      	blx	r7
 80035e0:	3001      	adds	r0, #1
 80035e2:	d10c      	bne.n	80035fe <_printf_float+0x416>
 80035e4:	e65b      	b.n	800329e <_printf_float+0xb6>
 80035e6:	2301      	movs	r3, #1
 80035e8:	465a      	mov	r2, fp
 80035ea:	4631      	mov	r1, r6
 80035ec:	4628      	mov	r0, r5
 80035ee:	47b8      	blx	r7
 80035f0:	3001      	adds	r0, #1
 80035f2:	f43f ae54 	beq.w	800329e <_printf_float+0xb6>
 80035f6:	f108 0801 	add.w	r8, r8, #1
 80035fa:	45d0      	cmp	r8, sl
 80035fc:	dbf3      	blt.n	80035e6 <_printf_float+0x3fe>
 80035fe:	464b      	mov	r3, r9
 8003600:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003604:	e6e0      	b.n	80033c8 <_printf_float+0x1e0>
 8003606:	f04f 0800 	mov.w	r8, #0
 800360a:	f104 0b1a 	add.w	fp, r4, #26
 800360e:	e7f4      	b.n	80035fa <_printf_float+0x412>
 8003610:	2301      	movs	r3, #1
 8003612:	4642      	mov	r2, r8
 8003614:	e7e1      	b.n	80035da <_printf_float+0x3f2>
 8003616:	2301      	movs	r3, #1
 8003618:	464a      	mov	r2, r9
 800361a:	4631      	mov	r1, r6
 800361c:	4628      	mov	r0, r5
 800361e:	47b8      	blx	r7
 8003620:	3001      	adds	r0, #1
 8003622:	f43f ae3c 	beq.w	800329e <_printf_float+0xb6>
 8003626:	f108 0801 	add.w	r8, r8, #1
 800362a:	68e3      	ldr	r3, [r4, #12]
 800362c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800362e:	1a5b      	subs	r3, r3, r1
 8003630:	4543      	cmp	r3, r8
 8003632:	dcf0      	bgt.n	8003616 <_printf_float+0x42e>
 8003634:	e6fd      	b.n	8003432 <_printf_float+0x24a>
 8003636:	f04f 0800 	mov.w	r8, #0
 800363a:	f104 0919 	add.w	r9, r4, #25
 800363e:	e7f4      	b.n	800362a <_printf_float+0x442>

08003640 <_printf_common>:
 8003640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003644:	4616      	mov	r6, r2
 8003646:	4698      	mov	r8, r3
 8003648:	688a      	ldr	r2, [r1, #8]
 800364a:	690b      	ldr	r3, [r1, #16]
 800364c:	4607      	mov	r7, r0
 800364e:	4293      	cmp	r3, r2
 8003650:	bfb8      	it	lt
 8003652:	4613      	movlt	r3, r2
 8003654:	6033      	str	r3, [r6, #0]
 8003656:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800365a:	460c      	mov	r4, r1
 800365c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003660:	b10a      	cbz	r2, 8003666 <_printf_common+0x26>
 8003662:	3301      	adds	r3, #1
 8003664:	6033      	str	r3, [r6, #0]
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	0699      	lsls	r1, r3, #26
 800366a:	bf42      	ittt	mi
 800366c:	6833      	ldrmi	r3, [r6, #0]
 800366e:	3302      	addmi	r3, #2
 8003670:	6033      	strmi	r3, [r6, #0]
 8003672:	6825      	ldr	r5, [r4, #0]
 8003674:	f015 0506 	ands.w	r5, r5, #6
 8003678:	d106      	bne.n	8003688 <_printf_common+0x48>
 800367a:	f104 0a19 	add.w	sl, r4, #25
 800367e:	68e3      	ldr	r3, [r4, #12]
 8003680:	6832      	ldr	r2, [r6, #0]
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	42ab      	cmp	r3, r5
 8003686:	dc2b      	bgt.n	80036e0 <_printf_common+0xa0>
 8003688:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800368c:	6822      	ldr	r2, [r4, #0]
 800368e:	3b00      	subs	r3, #0
 8003690:	bf18      	it	ne
 8003692:	2301      	movne	r3, #1
 8003694:	0692      	lsls	r2, r2, #26
 8003696:	d430      	bmi.n	80036fa <_printf_common+0xba>
 8003698:	4641      	mov	r1, r8
 800369a:	4638      	mov	r0, r7
 800369c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80036a0:	47c8      	blx	r9
 80036a2:	3001      	adds	r0, #1
 80036a4:	d023      	beq.n	80036ee <_printf_common+0xae>
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	6922      	ldr	r2, [r4, #16]
 80036aa:	f003 0306 	and.w	r3, r3, #6
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	bf14      	ite	ne
 80036b2:	2500      	movne	r5, #0
 80036b4:	6833      	ldreq	r3, [r6, #0]
 80036b6:	f04f 0600 	mov.w	r6, #0
 80036ba:	bf08      	it	eq
 80036bc:	68e5      	ldreq	r5, [r4, #12]
 80036be:	f104 041a 	add.w	r4, r4, #26
 80036c2:	bf08      	it	eq
 80036c4:	1aed      	subeq	r5, r5, r3
 80036c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80036ca:	bf08      	it	eq
 80036cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036d0:	4293      	cmp	r3, r2
 80036d2:	bfc4      	itt	gt
 80036d4:	1a9b      	subgt	r3, r3, r2
 80036d6:	18ed      	addgt	r5, r5, r3
 80036d8:	42b5      	cmp	r5, r6
 80036da:	d11a      	bne.n	8003712 <_printf_common+0xd2>
 80036dc:	2000      	movs	r0, #0
 80036de:	e008      	b.n	80036f2 <_printf_common+0xb2>
 80036e0:	2301      	movs	r3, #1
 80036e2:	4652      	mov	r2, sl
 80036e4:	4641      	mov	r1, r8
 80036e6:	4638      	mov	r0, r7
 80036e8:	47c8      	blx	r9
 80036ea:	3001      	adds	r0, #1
 80036ec:	d103      	bne.n	80036f6 <_printf_common+0xb6>
 80036ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036f6:	3501      	adds	r5, #1
 80036f8:	e7c1      	b.n	800367e <_printf_common+0x3e>
 80036fa:	2030      	movs	r0, #48	@ 0x30
 80036fc:	18e1      	adds	r1, r4, r3
 80036fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003708:	4422      	add	r2, r4
 800370a:	3302      	adds	r3, #2
 800370c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003710:	e7c2      	b.n	8003698 <_printf_common+0x58>
 8003712:	2301      	movs	r3, #1
 8003714:	4622      	mov	r2, r4
 8003716:	4641      	mov	r1, r8
 8003718:	4638      	mov	r0, r7
 800371a:	47c8      	blx	r9
 800371c:	3001      	adds	r0, #1
 800371e:	d0e6      	beq.n	80036ee <_printf_common+0xae>
 8003720:	3601      	adds	r6, #1
 8003722:	e7d9      	b.n	80036d8 <_printf_common+0x98>

08003724 <_printf_i>:
 8003724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003728:	7e0f      	ldrb	r7, [r1, #24]
 800372a:	4691      	mov	r9, r2
 800372c:	2f78      	cmp	r7, #120	@ 0x78
 800372e:	4680      	mov	r8, r0
 8003730:	460c      	mov	r4, r1
 8003732:	469a      	mov	sl, r3
 8003734:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003736:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800373a:	d807      	bhi.n	800374c <_printf_i+0x28>
 800373c:	2f62      	cmp	r7, #98	@ 0x62
 800373e:	d80a      	bhi.n	8003756 <_printf_i+0x32>
 8003740:	2f00      	cmp	r7, #0
 8003742:	f000 80d3 	beq.w	80038ec <_printf_i+0x1c8>
 8003746:	2f58      	cmp	r7, #88	@ 0x58
 8003748:	f000 80ba 	beq.w	80038c0 <_printf_i+0x19c>
 800374c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003750:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003754:	e03a      	b.n	80037cc <_printf_i+0xa8>
 8003756:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800375a:	2b15      	cmp	r3, #21
 800375c:	d8f6      	bhi.n	800374c <_printf_i+0x28>
 800375e:	a101      	add	r1, pc, #4	@ (adr r1, 8003764 <_printf_i+0x40>)
 8003760:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003764:	080037bd 	.word	0x080037bd
 8003768:	080037d1 	.word	0x080037d1
 800376c:	0800374d 	.word	0x0800374d
 8003770:	0800374d 	.word	0x0800374d
 8003774:	0800374d 	.word	0x0800374d
 8003778:	0800374d 	.word	0x0800374d
 800377c:	080037d1 	.word	0x080037d1
 8003780:	0800374d 	.word	0x0800374d
 8003784:	0800374d 	.word	0x0800374d
 8003788:	0800374d 	.word	0x0800374d
 800378c:	0800374d 	.word	0x0800374d
 8003790:	080038d3 	.word	0x080038d3
 8003794:	080037fb 	.word	0x080037fb
 8003798:	0800388d 	.word	0x0800388d
 800379c:	0800374d 	.word	0x0800374d
 80037a0:	0800374d 	.word	0x0800374d
 80037a4:	080038f5 	.word	0x080038f5
 80037a8:	0800374d 	.word	0x0800374d
 80037ac:	080037fb 	.word	0x080037fb
 80037b0:	0800374d 	.word	0x0800374d
 80037b4:	0800374d 	.word	0x0800374d
 80037b8:	08003895 	.word	0x08003895
 80037bc:	6833      	ldr	r3, [r6, #0]
 80037be:	1d1a      	adds	r2, r3, #4
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6032      	str	r2, [r6, #0]
 80037c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80037cc:	2301      	movs	r3, #1
 80037ce:	e09e      	b.n	800390e <_printf_i+0x1ea>
 80037d0:	6833      	ldr	r3, [r6, #0]
 80037d2:	6820      	ldr	r0, [r4, #0]
 80037d4:	1d19      	adds	r1, r3, #4
 80037d6:	6031      	str	r1, [r6, #0]
 80037d8:	0606      	lsls	r6, r0, #24
 80037da:	d501      	bpl.n	80037e0 <_printf_i+0xbc>
 80037dc:	681d      	ldr	r5, [r3, #0]
 80037de:	e003      	b.n	80037e8 <_printf_i+0xc4>
 80037e0:	0645      	lsls	r5, r0, #25
 80037e2:	d5fb      	bpl.n	80037dc <_printf_i+0xb8>
 80037e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80037e8:	2d00      	cmp	r5, #0
 80037ea:	da03      	bge.n	80037f4 <_printf_i+0xd0>
 80037ec:	232d      	movs	r3, #45	@ 0x2d
 80037ee:	426d      	negs	r5, r5
 80037f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037f4:	230a      	movs	r3, #10
 80037f6:	4859      	ldr	r0, [pc, #356]	@ (800395c <_printf_i+0x238>)
 80037f8:	e011      	b.n	800381e <_printf_i+0xfa>
 80037fa:	6821      	ldr	r1, [r4, #0]
 80037fc:	6833      	ldr	r3, [r6, #0]
 80037fe:	0608      	lsls	r0, r1, #24
 8003800:	f853 5b04 	ldr.w	r5, [r3], #4
 8003804:	d402      	bmi.n	800380c <_printf_i+0xe8>
 8003806:	0649      	lsls	r1, r1, #25
 8003808:	bf48      	it	mi
 800380a:	b2ad      	uxthmi	r5, r5
 800380c:	2f6f      	cmp	r7, #111	@ 0x6f
 800380e:	6033      	str	r3, [r6, #0]
 8003810:	bf14      	ite	ne
 8003812:	230a      	movne	r3, #10
 8003814:	2308      	moveq	r3, #8
 8003816:	4851      	ldr	r0, [pc, #324]	@ (800395c <_printf_i+0x238>)
 8003818:	2100      	movs	r1, #0
 800381a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800381e:	6866      	ldr	r6, [r4, #4]
 8003820:	2e00      	cmp	r6, #0
 8003822:	bfa8      	it	ge
 8003824:	6821      	ldrge	r1, [r4, #0]
 8003826:	60a6      	str	r6, [r4, #8]
 8003828:	bfa4      	itt	ge
 800382a:	f021 0104 	bicge.w	r1, r1, #4
 800382e:	6021      	strge	r1, [r4, #0]
 8003830:	b90d      	cbnz	r5, 8003836 <_printf_i+0x112>
 8003832:	2e00      	cmp	r6, #0
 8003834:	d04b      	beq.n	80038ce <_printf_i+0x1aa>
 8003836:	4616      	mov	r6, r2
 8003838:	fbb5 f1f3 	udiv	r1, r5, r3
 800383c:	fb03 5711 	mls	r7, r3, r1, r5
 8003840:	5dc7      	ldrb	r7, [r0, r7]
 8003842:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003846:	462f      	mov	r7, r5
 8003848:	42bb      	cmp	r3, r7
 800384a:	460d      	mov	r5, r1
 800384c:	d9f4      	bls.n	8003838 <_printf_i+0x114>
 800384e:	2b08      	cmp	r3, #8
 8003850:	d10b      	bne.n	800386a <_printf_i+0x146>
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	07df      	lsls	r7, r3, #31
 8003856:	d508      	bpl.n	800386a <_printf_i+0x146>
 8003858:	6923      	ldr	r3, [r4, #16]
 800385a:	6861      	ldr	r1, [r4, #4]
 800385c:	4299      	cmp	r1, r3
 800385e:	bfde      	ittt	le
 8003860:	2330      	movle	r3, #48	@ 0x30
 8003862:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003866:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800386a:	1b92      	subs	r2, r2, r6
 800386c:	6122      	str	r2, [r4, #16]
 800386e:	464b      	mov	r3, r9
 8003870:	4621      	mov	r1, r4
 8003872:	4640      	mov	r0, r8
 8003874:	f8cd a000 	str.w	sl, [sp]
 8003878:	aa03      	add	r2, sp, #12
 800387a:	f7ff fee1 	bl	8003640 <_printf_common>
 800387e:	3001      	adds	r0, #1
 8003880:	d14a      	bne.n	8003918 <_printf_i+0x1f4>
 8003882:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003886:	b004      	add	sp, #16
 8003888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	f043 0320 	orr.w	r3, r3, #32
 8003892:	6023      	str	r3, [r4, #0]
 8003894:	2778      	movs	r7, #120	@ 0x78
 8003896:	4832      	ldr	r0, [pc, #200]	@ (8003960 <_printf_i+0x23c>)
 8003898:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800389c:	6823      	ldr	r3, [r4, #0]
 800389e:	6831      	ldr	r1, [r6, #0]
 80038a0:	061f      	lsls	r7, r3, #24
 80038a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80038a6:	d402      	bmi.n	80038ae <_printf_i+0x18a>
 80038a8:	065f      	lsls	r7, r3, #25
 80038aa:	bf48      	it	mi
 80038ac:	b2ad      	uxthmi	r5, r5
 80038ae:	6031      	str	r1, [r6, #0]
 80038b0:	07d9      	lsls	r1, r3, #31
 80038b2:	bf44      	itt	mi
 80038b4:	f043 0320 	orrmi.w	r3, r3, #32
 80038b8:	6023      	strmi	r3, [r4, #0]
 80038ba:	b11d      	cbz	r5, 80038c4 <_printf_i+0x1a0>
 80038bc:	2310      	movs	r3, #16
 80038be:	e7ab      	b.n	8003818 <_printf_i+0xf4>
 80038c0:	4826      	ldr	r0, [pc, #152]	@ (800395c <_printf_i+0x238>)
 80038c2:	e7e9      	b.n	8003898 <_printf_i+0x174>
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	f023 0320 	bic.w	r3, r3, #32
 80038ca:	6023      	str	r3, [r4, #0]
 80038cc:	e7f6      	b.n	80038bc <_printf_i+0x198>
 80038ce:	4616      	mov	r6, r2
 80038d0:	e7bd      	b.n	800384e <_printf_i+0x12a>
 80038d2:	6833      	ldr	r3, [r6, #0]
 80038d4:	6825      	ldr	r5, [r4, #0]
 80038d6:	1d18      	adds	r0, r3, #4
 80038d8:	6961      	ldr	r1, [r4, #20]
 80038da:	6030      	str	r0, [r6, #0]
 80038dc:	062e      	lsls	r6, r5, #24
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	d501      	bpl.n	80038e6 <_printf_i+0x1c2>
 80038e2:	6019      	str	r1, [r3, #0]
 80038e4:	e002      	b.n	80038ec <_printf_i+0x1c8>
 80038e6:	0668      	lsls	r0, r5, #25
 80038e8:	d5fb      	bpl.n	80038e2 <_printf_i+0x1be>
 80038ea:	8019      	strh	r1, [r3, #0]
 80038ec:	2300      	movs	r3, #0
 80038ee:	4616      	mov	r6, r2
 80038f0:	6123      	str	r3, [r4, #16]
 80038f2:	e7bc      	b.n	800386e <_printf_i+0x14a>
 80038f4:	6833      	ldr	r3, [r6, #0]
 80038f6:	2100      	movs	r1, #0
 80038f8:	1d1a      	adds	r2, r3, #4
 80038fa:	6032      	str	r2, [r6, #0]
 80038fc:	681e      	ldr	r6, [r3, #0]
 80038fe:	6862      	ldr	r2, [r4, #4]
 8003900:	4630      	mov	r0, r6
 8003902:	f000 fbe4 	bl	80040ce <memchr>
 8003906:	b108      	cbz	r0, 800390c <_printf_i+0x1e8>
 8003908:	1b80      	subs	r0, r0, r6
 800390a:	6060      	str	r0, [r4, #4]
 800390c:	6863      	ldr	r3, [r4, #4]
 800390e:	6123      	str	r3, [r4, #16]
 8003910:	2300      	movs	r3, #0
 8003912:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003916:	e7aa      	b.n	800386e <_printf_i+0x14a>
 8003918:	4632      	mov	r2, r6
 800391a:	4649      	mov	r1, r9
 800391c:	4640      	mov	r0, r8
 800391e:	6923      	ldr	r3, [r4, #16]
 8003920:	47d0      	blx	sl
 8003922:	3001      	adds	r0, #1
 8003924:	d0ad      	beq.n	8003882 <_printf_i+0x15e>
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	079b      	lsls	r3, r3, #30
 800392a:	d413      	bmi.n	8003954 <_printf_i+0x230>
 800392c:	68e0      	ldr	r0, [r4, #12]
 800392e:	9b03      	ldr	r3, [sp, #12]
 8003930:	4298      	cmp	r0, r3
 8003932:	bfb8      	it	lt
 8003934:	4618      	movlt	r0, r3
 8003936:	e7a6      	b.n	8003886 <_printf_i+0x162>
 8003938:	2301      	movs	r3, #1
 800393a:	4632      	mov	r2, r6
 800393c:	4649      	mov	r1, r9
 800393e:	4640      	mov	r0, r8
 8003940:	47d0      	blx	sl
 8003942:	3001      	adds	r0, #1
 8003944:	d09d      	beq.n	8003882 <_printf_i+0x15e>
 8003946:	3501      	adds	r5, #1
 8003948:	68e3      	ldr	r3, [r4, #12]
 800394a:	9903      	ldr	r1, [sp, #12]
 800394c:	1a5b      	subs	r3, r3, r1
 800394e:	42ab      	cmp	r3, r5
 8003950:	dcf2      	bgt.n	8003938 <_printf_i+0x214>
 8003952:	e7eb      	b.n	800392c <_printf_i+0x208>
 8003954:	2500      	movs	r5, #0
 8003956:	f104 0619 	add.w	r6, r4, #25
 800395a:	e7f5      	b.n	8003948 <_printf_i+0x224>
 800395c:	080077b4 	.word	0x080077b4
 8003960:	080077c5 	.word	0x080077c5

08003964 <_scanf_float>:
 8003964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003968:	b087      	sub	sp, #28
 800396a:	9303      	str	r3, [sp, #12]
 800396c:	688b      	ldr	r3, [r1, #8]
 800396e:	4617      	mov	r7, r2
 8003970:	1e5a      	subs	r2, r3, #1
 8003972:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003976:	bf82      	ittt	hi
 8003978:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800397c:	eb03 0b05 	addhi.w	fp, r3, r5
 8003980:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003984:	460a      	mov	r2, r1
 8003986:	f04f 0500 	mov.w	r5, #0
 800398a:	bf88      	it	hi
 800398c:	608b      	strhi	r3, [r1, #8]
 800398e:	680b      	ldr	r3, [r1, #0]
 8003990:	4680      	mov	r8, r0
 8003992:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003996:	f842 3b1c 	str.w	r3, [r2], #28
 800399a:	460c      	mov	r4, r1
 800399c:	bf98      	it	ls
 800399e:	f04f 0b00 	movls.w	fp, #0
 80039a2:	4616      	mov	r6, r2
 80039a4:	46aa      	mov	sl, r5
 80039a6:	46a9      	mov	r9, r5
 80039a8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80039ac:	9201      	str	r2, [sp, #4]
 80039ae:	9502      	str	r5, [sp, #8]
 80039b0:	68a2      	ldr	r2, [r4, #8]
 80039b2:	b152      	cbz	r2, 80039ca <_scanf_float+0x66>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b4e      	cmp	r3, #78	@ 0x4e
 80039ba:	d865      	bhi.n	8003a88 <_scanf_float+0x124>
 80039bc:	2b40      	cmp	r3, #64	@ 0x40
 80039be:	d83d      	bhi.n	8003a3c <_scanf_float+0xd8>
 80039c0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80039c4:	b2c8      	uxtb	r0, r1
 80039c6:	280e      	cmp	r0, #14
 80039c8:	d93b      	bls.n	8003a42 <_scanf_float+0xde>
 80039ca:	f1b9 0f00 	cmp.w	r9, #0
 80039ce:	d003      	beq.n	80039d8 <_scanf_float+0x74>
 80039d0:	6823      	ldr	r3, [r4, #0]
 80039d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039d6:	6023      	str	r3, [r4, #0]
 80039d8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80039dc:	f1ba 0f01 	cmp.w	sl, #1
 80039e0:	f200 8118 	bhi.w	8003c14 <_scanf_float+0x2b0>
 80039e4:	9b01      	ldr	r3, [sp, #4]
 80039e6:	429e      	cmp	r6, r3
 80039e8:	f200 8109 	bhi.w	8003bfe <_scanf_float+0x29a>
 80039ec:	2001      	movs	r0, #1
 80039ee:	b007      	add	sp, #28
 80039f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039f4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80039f8:	2a0d      	cmp	r2, #13
 80039fa:	d8e6      	bhi.n	80039ca <_scanf_float+0x66>
 80039fc:	a101      	add	r1, pc, #4	@ (adr r1, 8003a04 <_scanf_float+0xa0>)
 80039fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003a02:	bf00      	nop
 8003a04:	08003b4b 	.word	0x08003b4b
 8003a08:	080039cb 	.word	0x080039cb
 8003a0c:	080039cb 	.word	0x080039cb
 8003a10:	080039cb 	.word	0x080039cb
 8003a14:	08003bab 	.word	0x08003bab
 8003a18:	08003b83 	.word	0x08003b83
 8003a1c:	080039cb 	.word	0x080039cb
 8003a20:	080039cb 	.word	0x080039cb
 8003a24:	08003b59 	.word	0x08003b59
 8003a28:	080039cb 	.word	0x080039cb
 8003a2c:	080039cb 	.word	0x080039cb
 8003a30:	080039cb 	.word	0x080039cb
 8003a34:	080039cb 	.word	0x080039cb
 8003a38:	08003b11 	.word	0x08003b11
 8003a3c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003a40:	e7da      	b.n	80039f8 <_scanf_float+0x94>
 8003a42:	290e      	cmp	r1, #14
 8003a44:	d8c1      	bhi.n	80039ca <_scanf_float+0x66>
 8003a46:	a001      	add	r0, pc, #4	@ (adr r0, 8003a4c <_scanf_float+0xe8>)
 8003a48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003a4c:	08003b01 	.word	0x08003b01
 8003a50:	080039cb 	.word	0x080039cb
 8003a54:	08003b01 	.word	0x08003b01
 8003a58:	08003b97 	.word	0x08003b97
 8003a5c:	080039cb 	.word	0x080039cb
 8003a60:	08003aa9 	.word	0x08003aa9
 8003a64:	08003ae7 	.word	0x08003ae7
 8003a68:	08003ae7 	.word	0x08003ae7
 8003a6c:	08003ae7 	.word	0x08003ae7
 8003a70:	08003ae7 	.word	0x08003ae7
 8003a74:	08003ae7 	.word	0x08003ae7
 8003a78:	08003ae7 	.word	0x08003ae7
 8003a7c:	08003ae7 	.word	0x08003ae7
 8003a80:	08003ae7 	.word	0x08003ae7
 8003a84:	08003ae7 	.word	0x08003ae7
 8003a88:	2b6e      	cmp	r3, #110	@ 0x6e
 8003a8a:	d809      	bhi.n	8003aa0 <_scanf_float+0x13c>
 8003a8c:	2b60      	cmp	r3, #96	@ 0x60
 8003a8e:	d8b1      	bhi.n	80039f4 <_scanf_float+0x90>
 8003a90:	2b54      	cmp	r3, #84	@ 0x54
 8003a92:	d07b      	beq.n	8003b8c <_scanf_float+0x228>
 8003a94:	2b59      	cmp	r3, #89	@ 0x59
 8003a96:	d198      	bne.n	80039ca <_scanf_float+0x66>
 8003a98:	2d07      	cmp	r5, #7
 8003a9a:	d196      	bne.n	80039ca <_scanf_float+0x66>
 8003a9c:	2508      	movs	r5, #8
 8003a9e:	e02c      	b.n	8003afa <_scanf_float+0x196>
 8003aa0:	2b74      	cmp	r3, #116	@ 0x74
 8003aa2:	d073      	beq.n	8003b8c <_scanf_float+0x228>
 8003aa4:	2b79      	cmp	r3, #121	@ 0x79
 8003aa6:	e7f6      	b.n	8003a96 <_scanf_float+0x132>
 8003aa8:	6821      	ldr	r1, [r4, #0]
 8003aaa:	05c8      	lsls	r0, r1, #23
 8003aac:	d51b      	bpl.n	8003ae6 <_scanf_float+0x182>
 8003aae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003ab2:	6021      	str	r1, [r4, #0]
 8003ab4:	f109 0901 	add.w	r9, r9, #1
 8003ab8:	f1bb 0f00 	cmp.w	fp, #0
 8003abc:	d003      	beq.n	8003ac6 <_scanf_float+0x162>
 8003abe:	3201      	adds	r2, #1
 8003ac0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8003ac4:	60a2      	str	r2, [r4, #8]
 8003ac6:	68a3      	ldr	r3, [r4, #8]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	60a3      	str	r3, [r4, #8]
 8003acc:	6923      	ldr	r3, [r4, #16]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	6123      	str	r3, [r4, #16]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	607b      	str	r3, [r7, #4]
 8003ada:	f340 8087 	ble.w	8003bec <_scanf_float+0x288>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	e764      	b.n	80039b0 <_scanf_float+0x4c>
 8003ae6:	eb1a 0105 	adds.w	r1, sl, r5
 8003aea:	f47f af6e 	bne.w	80039ca <_scanf_float+0x66>
 8003aee:	460d      	mov	r5, r1
 8003af0:	468a      	mov	sl, r1
 8003af2:	6822      	ldr	r2, [r4, #0]
 8003af4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003af8:	6022      	str	r2, [r4, #0]
 8003afa:	f806 3b01 	strb.w	r3, [r6], #1
 8003afe:	e7e2      	b.n	8003ac6 <_scanf_float+0x162>
 8003b00:	6822      	ldr	r2, [r4, #0]
 8003b02:	0610      	lsls	r0, r2, #24
 8003b04:	f57f af61 	bpl.w	80039ca <_scanf_float+0x66>
 8003b08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b0c:	6022      	str	r2, [r4, #0]
 8003b0e:	e7f4      	b.n	8003afa <_scanf_float+0x196>
 8003b10:	f1ba 0f00 	cmp.w	sl, #0
 8003b14:	d10e      	bne.n	8003b34 <_scanf_float+0x1d0>
 8003b16:	f1b9 0f00 	cmp.w	r9, #0
 8003b1a:	d10e      	bne.n	8003b3a <_scanf_float+0x1d6>
 8003b1c:	6822      	ldr	r2, [r4, #0]
 8003b1e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003b22:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003b26:	d108      	bne.n	8003b3a <_scanf_float+0x1d6>
 8003b28:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003b2c:	f04f 0a01 	mov.w	sl, #1
 8003b30:	6022      	str	r2, [r4, #0]
 8003b32:	e7e2      	b.n	8003afa <_scanf_float+0x196>
 8003b34:	f1ba 0f02 	cmp.w	sl, #2
 8003b38:	d055      	beq.n	8003be6 <_scanf_float+0x282>
 8003b3a:	2d01      	cmp	r5, #1
 8003b3c:	d002      	beq.n	8003b44 <_scanf_float+0x1e0>
 8003b3e:	2d04      	cmp	r5, #4
 8003b40:	f47f af43 	bne.w	80039ca <_scanf_float+0x66>
 8003b44:	3501      	adds	r5, #1
 8003b46:	b2ed      	uxtb	r5, r5
 8003b48:	e7d7      	b.n	8003afa <_scanf_float+0x196>
 8003b4a:	f1ba 0f01 	cmp.w	sl, #1
 8003b4e:	f47f af3c 	bne.w	80039ca <_scanf_float+0x66>
 8003b52:	f04f 0a02 	mov.w	sl, #2
 8003b56:	e7d0      	b.n	8003afa <_scanf_float+0x196>
 8003b58:	b97d      	cbnz	r5, 8003b7a <_scanf_float+0x216>
 8003b5a:	f1b9 0f00 	cmp.w	r9, #0
 8003b5e:	f47f af37 	bne.w	80039d0 <_scanf_float+0x6c>
 8003b62:	6822      	ldr	r2, [r4, #0]
 8003b64:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003b68:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003b6c:	f040 8103 	bne.w	8003d76 <_scanf_float+0x412>
 8003b70:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003b74:	2501      	movs	r5, #1
 8003b76:	6022      	str	r2, [r4, #0]
 8003b78:	e7bf      	b.n	8003afa <_scanf_float+0x196>
 8003b7a:	2d03      	cmp	r5, #3
 8003b7c:	d0e2      	beq.n	8003b44 <_scanf_float+0x1e0>
 8003b7e:	2d05      	cmp	r5, #5
 8003b80:	e7de      	b.n	8003b40 <_scanf_float+0x1dc>
 8003b82:	2d02      	cmp	r5, #2
 8003b84:	f47f af21 	bne.w	80039ca <_scanf_float+0x66>
 8003b88:	2503      	movs	r5, #3
 8003b8a:	e7b6      	b.n	8003afa <_scanf_float+0x196>
 8003b8c:	2d06      	cmp	r5, #6
 8003b8e:	f47f af1c 	bne.w	80039ca <_scanf_float+0x66>
 8003b92:	2507      	movs	r5, #7
 8003b94:	e7b1      	b.n	8003afa <_scanf_float+0x196>
 8003b96:	6822      	ldr	r2, [r4, #0]
 8003b98:	0591      	lsls	r1, r2, #22
 8003b9a:	f57f af16 	bpl.w	80039ca <_scanf_float+0x66>
 8003b9e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8003ba2:	6022      	str	r2, [r4, #0]
 8003ba4:	f8cd 9008 	str.w	r9, [sp, #8]
 8003ba8:	e7a7      	b.n	8003afa <_scanf_float+0x196>
 8003baa:	6822      	ldr	r2, [r4, #0]
 8003bac:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8003bb0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003bb4:	d006      	beq.n	8003bc4 <_scanf_float+0x260>
 8003bb6:	0550      	lsls	r0, r2, #21
 8003bb8:	f57f af07 	bpl.w	80039ca <_scanf_float+0x66>
 8003bbc:	f1b9 0f00 	cmp.w	r9, #0
 8003bc0:	f000 80d9 	beq.w	8003d76 <_scanf_float+0x412>
 8003bc4:	0591      	lsls	r1, r2, #22
 8003bc6:	bf58      	it	pl
 8003bc8:	9902      	ldrpl	r1, [sp, #8]
 8003bca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003bce:	bf58      	it	pl
 8003bd0:	eba9 0101 	subpl.w	r1, r9, r1
 8003bd4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8003bd8:	f04f 0900 	mov.w	r9, #0
 8003bdc:	bf58      	it	pl
 8003bde:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003be2:	6022      	str	r2, [r4, #0]
 8003be4:	e789      	b.n	8003afa <_scanf_float+0x196>
 8003be6:	f04f 0a03 	mov.w	sl, #3
 8003bea:	e786      	b.n	8003afa <_scanf_float+0x196>
 8003bec:	4639      	mov	r1, r7
 8003bee:	4640      	mov	r0, r8
 8003bf0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003bf4:	4798      	blx	r3
 8003bf6:	2800      	cmp	r0, #0
 8003bf8:	f43f aeda 	beq.w	80039b0 <_scanf_float+0x4c>
 8003bfc:	e6e5      	b.n	80039ca <_scanf_float+0x66>
 8003bfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003c02:	463a      	mov	r2, r7
 8003c04:	4640      	mov	r0, r8
 8003c06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003c0a:	4798      	blx	r3
 8003c0c:	6923      	ldr	r3, [r4, #16]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	6123      	str	r3, [r4, #16]
 8003c12:	e6e7      	b.n	80039e4 <_scanf_float+0x80>
 8003c14:	1e6b      	subs	r3, r5, #1
 8003c16:	2b06      	cmp	r3, #6
 8003c18:	d824      	bhi.n	8003c64 <_scanf_float+0x300>
 8003c1a:	2d02      	cmp	r5, #2
 8003c1c:	d836      	bhi.n	8003c8c <_scanf_float+0x328>
 8003c1e:	9b01      	ldr	r3, [sp, #4]
 8003c20:	429e      	cmp	r6, r3
 8003c22:	f67f aee3 	bls.w	80039ec <_scanf_float+0x88>
 8003c26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003c2a:	463a      	mov	r2, r7
 8003c2c:	4640      	mov	r0, r8
 8003c2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003c32:	4798      	blx	r3
 8003c34:	6923      	ldr	r3, [r4, #16]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	6123      	str	r3, [r4, #16]
 8003c3a:	e7f0      	b.n	8003c1e <_scanf_float+0x2ba>
 8003c3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003c40:	463a      	mov	r2, r7
 8003c42:	4640      	mov	r0, r8
 8003c44:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003c48:	4798      	blx	r3
 8003c4a:	6923      	ldr	r3, [r4, #16]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	6123      	str	r3, [r4, #16]
 8003c50:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8003c54:	fa5f fa8a 	uxtb.w	sl, sl
 8003c58:	f1ba 0f02 	cmp.w	sl, #2
 8003c5c:	d1ee      	bne.n	8003c3c <_scanf_float+0x2d8>
 8003c5e:	3d03      	subs	r5, #3
 8003c60:	b2ed      	uxtb	r5, r5
 8003c62:	1b76      	subs	r6, r6, r5
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	05da      	lsls	r2, r3, #23
 8003c68:	d530      	bpl.n	8003ccc <_scanf_float+0x368>
 8003c6a:	055b      	lsls	r3, r3, #21
 8003c6c:	d511      	bpl.n	8003c92 <_scanf_float+0x32e>
 8003c6e:	9b01      	ldr	r3, [sp, #4]
 8003c70:	429e      	cmp	r6, r3
 8003c72:	f67f aebb 	bls.w	80039ec <_scanf_float+0x88>
 8003c76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003c7a:	463a      	mov	r2, r7
 8003c7c:	4640      	mov	r0, r8
 8003c7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003c82:	4798      	blx	r3
 8003c84:	6923      	ldr	r3, [r4, #16]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	6123      	str	r3, [r4, #16]
 8003c8a:	e7f0      	b.n	8003c6e <_scanf_float+0x30a>
 8003c8c:	46aa      	mov	sl, r5
 8003c8e:	46b3      	mov	fp, r6
 8003c90:	e7de      	b.n	8003c50 <_scanf_float+0x2ec>
 8003c92:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003c96:	6923      	ldr	r3, [r4, #16]
 8003c98:	2965      	cmp	r1, #101	@ 0x65
 8003c9a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003c9e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8003ca2:	6123      	str	r3, [r4, #16]
 8003ca4:	d00c      	beq.n	8003cc0 <_scanf_float+0x35c>
 8003ca6:	2945      	cmp	r1, #69	@ 0x45
 8003ca8:	d00a      	beq.n	8003cc0 <_scanf_float+0x35c>
 8003caa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003cae:	463a      	mov	r2, r7
 8003cb0:	4640      	mov	r0, r8
 8003cb2:	4798      	blx	r3
 8003cb4:	6923      	ldr	r3, [r4, #16]
 8003cb6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	1eb5      	subs	r5, r6, #2
 8003cbe:	6123      	str	r3, [r4, #16]
 8003cc0:	463a      	mov	r2, r7
 8003cc2:	4640      	mov	r0, r8
 8003cc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003cc8:	4798      	blx	r3
 8003cca:	462e      	mov	r6, r5
 8003ccc:	6822      	ldr	r2, [r4, #0]
 8003cce:	f012 0210 	ands.w	r2, r2, #16
 8003cd2:	d001      	beq.n	8003cd8 <_scanf_float+0x374>
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	e68a      	b.n	80039ee <_scanf_float+0x8a>
 8003cd8:	7032      	strb	r2, [r6, #0]
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ce4:	d11c      	bne.n	8003d20 <_scanf_float+0x3bc>
 8003ce6:	9b02      	ldr	r3, [sp, #8]
 8003ce8:	454b      	cmp	r3, r9
 8003cea:	eba3 0209 	sub.w	r2, r3, r9
 8003cee:	d123      	bne.n	8003d38 <_scanf_float+0x3d4>
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	4640      	mov	r0, r8
 8003cf4:	9901      	ldr	r1, [sp, #4]
 8003cf6:	f002 fbef 	bl	80064d8 <_strtod_r>
 8003cfa:	9b03      	ldr	r3, [sp, #12]
 8003cfc:	6825      	ldr	r5, [r4, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f015 0f02 	tst.w	r5, #2
 8003d04:	4606      	mov	r6, r0
 8003d06:	460f      	mov	r7, r1
 8003d08:	f103 0204 	add.w	r2, r3, #4
 8003d0c:	d01f      	beq.n	8003d4e <_scanf_float+0x3ea>
 8003d0e:	9903      	ldr	r1, [sp, #12]
 8003d10:	600a      	str	r2, [r1, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	e9c3 6700 	strd	r6, r7, [r3]
 8003d18:	68e3      	ldr	r3, [r4, #12]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	60e3      	str	r3, [r4, #12]
 8003d1e:	e7d9      	b.n	8003cd4 <_scanf_float+0x370>
 8003d20:	9b04      	ldr	r3, [sp, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0e4      	beq.n	8003cf0 <_scanf_float+0x38c>
 8003d26:	9905      	ldr	r1, [sp, #20]
 8003d28:	230a      	movs	r3, #10
 8003d2a:	4640      	mov	r0, r8
 8003d2c:	3101      	adds	r1, #1
 8003d2e:	f002 fc53 	bl	80065d8 <_strtol_r>
 8003d32:	9b04      	ldr	r3, [sp, #16]
 8003d34:	9e05      	ldr	r6, [sp, #20]
 8003d36:	1ac2      	subs	r2, r0, r3
 8003d38:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8003d3c:	429e      	cmp	r6, r3
 8003d3e:	bf28      	it	cs
 8003d40:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8003d44:	4630      	mov	r0, r6
 8003d46:	490d      	ldr	r1, [pc, #52]	@ (8003d7c <_scanf_float+0x418>)
 8003d48:	f000 f8de 	bl	8003f08 <siprintf>
 8003d4c:	e7d0      	b.n	8003cf0 <_scanf_float+0x38c>
 8003d4e:	076d      	lsls	r5, r5, #29
 8003d50:	d4dd      	bmi.n	8003d0e <_scanf_float+0x3aa>
 8003d52:	9d03      	ldr	r5, [sp, #12]
 8003d54:	602a      	str	r2, [r5, #0]
 8003d56:	681d      	ldr	r5, [r3, #0]
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	f7fc fe56 	bl	8000a0c <__aeabi_dcmpun>
 8003d60:	b120      	cbz	r0, 8003d6c <_scanf_float+0x408>
 8003d62:	4807      	ldr	r0, [pc, #28]	@ (8003d80 <_scanf_float+0x41c>)
 8003d64:	f000 f9c2 	bl	80040ec <nanf>
 8003d68:	6028      	str	r0, [r5, #0]
 8003d6a:	e7d5      	b.n	8003d18 <_scanf_float+0x3b4>
 8003d6c:	4630      	mov	r0, r6
 8003d6e:	4639      	mov	r1, r7
 8003d70:	f7fc feaa 	bl	8000ac8 <__aeabi_d2f>
 8003d74:	e7f8      	b.n	8003d68 <_scanf_float+0x404>
 8003d76:	f04f 0900 	mov.w	r9, #0
 8003d7a:	e62d      	b.n	80039d8 <_scanf_float+0x74>
 8003d7c:	080077d6 	.word	0x080077d6
 8003d80:	08007b6d 	.word	0x08007b6d

08003d84 <std>:
 8003d84:	2300      	movs	r3, #0
 8003d86:	b510      	push	{r4, lr}
 8003d88:	4604      	mov	r4, r0
 8003d8a:	e9c0 3300 	strd	r3, r3, [r0]
 8003d8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d92:	6083      	str	r3, [r0, #8]
 8003d94:	8181      	strh	r1, [r0, #12]
 8003d96:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d98:	81c2      	strh	r2, [r0, #14]
 8003d9a:	6183      	str	r3, [r0, #24]
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	2208      	movs	r2, #8
 8003da0:	305c      	adds	r0, #92	@ 0x5c
 8003da2:	f000 f914 	bl	8003fce <memset>
 8003da6:	4b0d      	ldr	r3, [pc, #52]	@ (8003ddc <std+0x58>)
 8003da8:	6224      	str	r4, [r4, #32]
 8003daa:	6263      	str	r3, [r4, #36]	@ 0x24
 8003dac:	4b0c      	ldr	r3, [pc, #48]	@ (8003de0 <std+0x5c>)
 8003dae:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003db0:	4b0c      	ldr	r3, [pc, #48]	@ (8003de4 <std+0x60>)
 8003db2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003db4:	4b0c      	ldr	r3, [pc, #48]	@ (8003de8 <std+0x64>)
 8003db6:	6323      	str	r3, [r4, #48]	@ 0x30
 8003db8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dec <std+0x68>)
 8003dba:	429c      	cmp	r4, r3
 8003dbc:	d006      	beq.n	8003dcc <std+0x48>
 8003dbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003dc2:	4294      	cmp	r4, r2
 8003dc4:	d002      	beq.n	8003dcc <std+0x48>
 8003dc6:	33d0      	adds	r3, #208	@ 0xd0
 8003dc8:	429c      	cmp	r4, r3
 8003dca:	d105      	bne.n	8003dd8 <std+0x54>
 8003dcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dd4:	f000 b978 	b.w	80040c8 <__retarget_lock_init_recursive>
 8003dd8:	bd10      	pop	{r4, pc}
 8003dda:	bf00      	nop
 8003ddc:	08003f49 	.word	0x08003f49
 8003de0:	08003f6b 	.word	0x08003f6b
 8003de4:	08003fa3 	.word	0x08003fa3
 8003de8:	08003fc7 	.word	0x08003fc7
 8003dec:	20000250 	.word	0x20000250

08003df0 <stdio_exit_handler>:
 8003df0:	4a02      	ldr	r2, [pc, #8]	@ (8003dfc <stdio_exit_handler+0xc>)
 8003df2:	4903      	ldr	r1, [pc, #12]	@ (8003e00 <stdio_exit_handler+0x10>)
 8003df4:	4803      	ldr	r0, [pc, #12]	@ (8003e04 <stdio_exit_handler+0x14>)
 8003df6:	f000 b869 	b.w	8003ecc <_fwalk_sglue>
 8003dfa:	bf00      	nop
 8003dfc:	2000001c 	.word	0x2000001c
 8003e00:	0800698d 	.word	0x0800698d
 8003e04:	2000002c 	.word	0x2000002c

08003e08 <cleanup_stdio>:
 8003e08:	6841      	ldr	r1, [r0, #4]
 8003e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e3c <cleanup_stdio+0x34>)
 8003e0c:	b510      	push	{r4, lr}
 8003e0e:	4299      	cmp	r1, r3
 8003e10:	4604      	mov	r4, r0
 8003e12:	d001      	beq.n	8003e18 <cleanup_stdio+0x10>
 8003e14:	f002 fdba 	bl	800698c <_fflush_r>
 8003e18:	68a1      	ldr	r1, [r4, #8]
 8003e1a:	4b09      	ldr	r3, [pc, #36]	@ (8003e40 <cleanup_stdio+0x38>)
 8003e1c:	4299      	cmp	r1, r3
 8003e1e:	d002      	beq.n	8003e26 <cleanup_stdio+0x1e>
 8003e20:	4620      	mov	r0, r4
 8003e22:	f002 fdb3 	bl	800698c <_fflush_r>
 8003e26:	68e1      	ldr	r1, [r4, #12]
 8003e28:	4b06      	ldr	r3, [pc, #24]	@ (8003e44 <cleanup_stdio+0x3c>)
 8003e2a:	4299      	cmp	r1, r3
 8003e2c:	d004      	beq.n	8003e38 <cleanup_stdio+0x30>
 8003e2e:	4620      	mov	r0, r4
 8003e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e34:	f002 bdaa 	b.w	800698c <_fflush_r>
 8003e38:	bd10      	pop	{r4, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000250 	.word	0x20000250
 8003e40:	200002b8 	.word	0x200002b8
 8003e44:	20000320 	.word	0x20000320

08003e48 <global_stdio_init.part.0>:
 8003e48:	b510      	push	{r4, lr}
 8003e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e78 <global_stdio_init.part.0+0x30>)
 8003e4c:	4c0b      	ldr	r4, [pc, #44]	@ (8003e7c <global_stdio_init.part.0+0x34>)
 8003e4e:	4a0c      	ldr	r2, [pc, #48]	@ (8003e80 <global_stdio_init.part.0+0x38>)
 8003e50:	4620      	mov	r0, r4
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	2104      	movs	r1, #4
 8003e56:	2200      	movs	r2, #0
 8003e58:	f7ff ff94 	bl	8003d84 <std>
 8003e5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003e60:	2201      	movs	r2, #1
 8003e62:	2109      	movs	r1, #9
 8003e64:	f7ff ff8e 	bl	8003d84 <std>
 8003e68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e72:	2112      	movs	r1, #18
 8003e74:	f7ff bf86 	b.w	8003d84 <std>
 8003e78:	20000388 	.word	0x20000388
 8003e7c:	20000250 	.word	0x20000250
 8003e80:	08003df1 	.word	0x08003df1

08003e84 <__sfp_lock_acquire>:
 8003e84:	4801      	ldr	r0, [pc, #4]	@ (8003e8c <__sfp_lock_acquire+0x8>)
 8003e86:	f000 b920 	b.w	80040ca <__retarget_lock_acquire_recursive>
 8003e8a:	bf00      	nop
 8003e8c:	20000391 	.word	0x20000391

08003e90 <__sfp_lock_release>:
 8003e90:	4801      	ldr	r0, [pc, #4]	@ (8003e98 <__sfp_lock_release+0x8>)
 8003e92:	f000 b91b 	b.w	80040cc <__retarget_lock_release_recursive>
 8003e96:	bf00      	nop
 8003e98:	20000391 	.word	0x20000391

08003e9c <__sinit>:
 8003e9c:	b510      	push	{r4, lr}
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	f7ff fff0 	bl	8003e84 <__sfp_lock_acquire>
 8003ea4:	6a23      	ldr	r3, [r4, #32]
 8003ea6:	b11b      	cbz	r3, 8003eb0 <__sinit+0x14>
 8003ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eac:	f7ff bff0 	b.w	8003e90 <__sfp_lock_release>
 8003eb0:	4b04      	ldr	r3, [pc, #16]	@ (8003ec4 <__sinit+0x28>)
 8003eb2:	6223      	str	r3, [r4, #32]
 8003eb4:	4b04      	ldr	r3, [pc, #16]	@ (8003ec8 <__sinit+0x2c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f5      	bne.n	8003ea8 <__sinit+0xc>
 8003ebc:	f7ff ffc4 	bl	8003e48 <global_stdio_init.part.0>
 8003ec0:	e7f2      	b.n	8003ea8 <__sinit+0xc>
 8003ec2:	bf00      	nop
 8003ec4:	08003e09 	.word	0x08003e09
 8003ec8:	20000388 	.word	0x20000388

08003ecc <_fwalk_sglue>:
 8003ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ed0:	4607      	mov	r7, r0
 8003ed2:	4688      	mov	r8, r1
 8003ed4:	4614      	mov	r4, r2
 8003ed6:	2600      	movs	r6, #0
 8003ed8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003edc:	f1b9 0901 	subs.w	r9, r9, #1
 8003ee0:	d505      	bpl.n	8003eee <_fwalk_sglue+0x22>
 8003ee2:	6824      	ldr	r4, [r4, #0]
 8003ee4:	2c00      	cmp	r4, #0
 8003ee6:	d1f7      	bne.n	8003ed8 <_fwalk_sglue+0xc>
 8003ee8:	4630      	mov	r0, r6
 8003eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003eee:	89ab      	ldrh	r3, [r5, #12]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d907      	bls.n	8003f04 <_fwalk_sglue+0x38>
 8003ef4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	d003      	beq.n	8003f04 <_fwalk_sglue+0x38>
 8003efc:	4629      	mov	r1, r5
 8003efe:	4638      	mov	r0, r7
 8003f00:	47c0      	blx	r8
 8003f02:	4306      	orrs	r6, r0
 8003f04:	3568      	adds	r5, #104	@ 0x68
 8003f06:	e7e9      	b.n	8003edc <_fwalk_sglue+0x10>

08003f08 <siprintf>:
 8003f08:	b40e      	push	{r1, r2, r3}
 8003f0a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003f0e:	b500      	push	{lr}
 8003f10:	b09c      	sub	sp, #112	@ 0x70
 8003f12:	ab1d      	add	r3, sp, #116	@ 0x74
 8003f14:	9002      	str	r0, [sp, #8]
 8003f16:	9006      	str	r0, [sp, #24]
 8003f18:	9107      	str	r1, [sp, #28]
 8003f1a:	9104      	str	r1, [sp, #16]
 8003f1c:	4808      	ldr	r0, [pc, #32]	@ (8003f40 <siprintf+0x38>)
 8003f1e:	4909      	ldr	r1, [pc, #36]	@ (8003f44 <siprintf+0x3c>)
 8003f20:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f24:	9105      	str	r1, [sp, #20]
 8003f26:	6800      	ldr	r0, [r0, #0]
 8003f28:	a902      	add	r1, sp, #8
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	f002 fbb2 	bl	8006694 <_svfiprintf_r>
 8003f30:	2200      	movs	r2, #0
 8003f32:	9b02      	ldr	r3, [sp, #8]
 8003f34:	701a      	strb	r2, [r3, #0]
 8003f36:	b01c      	add	sp, #112	@ 0x70
 8003f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f3c:	b003      	add	sp, #12
 8003f3e:	4770      	bx	lr
 8003f40:	20000028 	.word	0x20000028
 8003f44:	ffff0208 	.word	0xffff0208

08003f48 <__sread>:
 8003f48:	b510      	push	{r4, lr}
 8003f4a:	460c      	mov	r4, r1
 8003f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f50:	f000 f86c 	bl	800402c <_read_r>
 8003f54:	2800      	cmp	r0, #0
 8003f56:	bfab      	itete	ge
 8003f58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f5a:	89a3      	ldrhlt	r3, [r4, #12]
 8003f5c:	181b      	addge	r3, r3, r0
 8003f5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f62:	bfac      	ite	ge
 8003f64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003f66:	81a3      	strhlt	r3, [r4, #12]
 8003f68:	bd10      	pop	{r4, pc}

08003f6a <__swrite>:
 8003f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f6e:	461f      	mov	r7, r3
 8003f70:	898b      	ldrh	r3, [r1, #12]
 8003f72:	4605      	mov	r5, r0
 8003f74:	05db      	lsls	r3, r3, #23
 8003f76:	460c      	mov	r4, r1
 8003f78:	4616      	mov	r6, r2
 8003f7a:	d505      	bpl.n	8003f88 <__swrite+0x1e>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f84:	f000 f840 	bl	8004008 <_lseek_r>
 8003f88:	89a3      	ldrh	r3, [r4, #12]
 8003f8a:	4632      	mov	r2, r6
 8003f8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f90:	81a3      	strh	r3, [r4, #12]
 8003f92:	4628      	mov	r0, r5
 8003f94:	463b      	mov	r3, r7
 8003f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f9e:	f000 b857 	b.w	8004050 <_write_r>

08003fa2 <__sseek>:
 8003fa2:	b510      	push	{r4, lr}
 8003fa4:	460c      	mov	r4, r1
 8003fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003faa:	f000 f82d 	bl	8004008 <_lseek_r>
 8003fae:	1c43      	adds	r3, r0, #1
 8003fb0:	89a3      	ldrh	r3, [r4, #12]
 8003fb2:	bf15      	itete	ne
 8003fb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003fb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003fba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003fbe:	81a3      	strheq	r3, [r4, #12]
 8003fc0:	bf18      	it	ne
 8003fc2:	81a3      	strhne	r3, [r4, #12]
 8003fc4:	bd10      	pop	{r4, pc}

08003fc6 <__sclose>:
 8003fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fca:	f000 b80d 	b.w	8003fe8 <_close_r>

08003fce <memset>:
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4402      	add	r2, r0
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d100      	bne.n	8003fd8 <memset+0xa>
 8003fd6:	4770      	bx	lr
 8003fd8:	f803 1b01 	strb.w	r1, [r3], #1
 8003fdc:	e7f9      	b.n	8003fd2 <memset+0x4>
	...

08003fe0 <_localeconv_r>:
 8003fe0:	4800      	ldr	r0, [pc, #0]	@ (8003fe4 <_localeconv_r+0x4>)
 8003fe2:	4770      	bx	lr
 8003fe4:	20000168 	.word	0x20000168

08003fe8 <_close_r>:
 8003fe8:	b538      	push	{r3, r4, r5, lr}
 8003fea:	2300      	movs	r3, #0
 8003fec:	4d05      	ldr	r5, [pc, #20]	@ (8004004 <_close_r+0x1c>)
 8003fee:	4604      	mov	r4, r0
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	602b      	str	r3, [r5, #0]
 8003ff4:	f7fd f957 	bl	80012a6 <_close>
 8003ff8:	1c43      	adds	r3, r0, #1
 8003ffa:	d102      	bne.n	8004002 <_close_r+0x1a>
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	b103      	cbz	r3, 8004002 <_close_r+0x1a>
 8004000:	6023      	str	r3, [r4, #0]
 8004002:	bd38      	pop	{r3, r4, r5, pc}
 8004004:	2000038c 	.word	0x2000038c

08004008 <_lseek_r>:
 8004008:	b538      	push	{r3, r4, r5, lr}
 800400a:	4604      	mov	r4, r0
 800400c:	4608      	mov	r0, r1
 800400e:	4611      	mov	r1, r2
 8004010:	2200      	movs	r2, #0
 8004012:	4d05      	ldr	r5, [pc, #20]	@ (8004028 <_lseek_r+0x20>)
 8004014:	602a      	str	r2, [r5, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	f7fd f969 	bl	80012ee <_lseek>
 800401c:	1c43      	adds	r3, r0, #1
 800401e:	d102      	bne.n	8004026 <_lseek_r+0x1e>
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	b103      	cbz	r3, 8004026 <_lseek_r+0x1e>
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	bd38      	pop	{r3, r4, r5, pc}
 8004028:	2000038c 	.word	0x2000038c

0800402c <_read_r>:
 800402c:	b538      	push	{r3, r4, r5, lr}
 800402e:	4604      	mov	r4, r0
 8004030:	4608      	mov	r0, r1
 8004032:	4611      	mov	r1, r2
 8004034:	2200      	movs	r2, #0
 8004036:	4d05      	ldr	r5, [pc, #20]	@ (800404c <_read_r+0x20>)
 8004038:	602a      	str	r2, [r5, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	f7fd f8fa 	bl	8001234 <_read>
 8004040:	1c43      	adds	r3, r0, #1
 8004042:	d102      	bne.n	800404a <_read_r+0x1e>
 8004044:	682b      	ldr	r3, [r5, #0]
 8004046:	b103      	cbz	r3, 800404a <_read_r+0x1e>
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	bd38      	pop	{r3, r4, r5, pc}
 800404c:	2000038c 	.word	0x2000038c

08004050 <_write_r>:
 8004050:	b538      	push	{r3, r4, r5, lr}
 8004052:	4604      	mov	r4, r0
 8004054:	4608      	mov	r0, r1
 8004056:	4611      	mov	r1, r2
 8004058:	2200      	movs	r2, #0
 800405a:	4d05      	ldr	r5, [pc, #20]	@ (8004070 <_write_r+0x20>)
 800405c:	602a      	str	r2, [r5, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	f7fd f905 	bl	800126e <_write>
 8004064:	1c43      	adds	r3, r0, #1
 8004066:	d102      	bne.n	800406e <_write_r+0x1e>
 8004068:	682b      	ldr	r3, [r5, #0]
 800406a:	b103      	cbz	r3, 800406e <_write_r+0x1e>
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	bd38      	pop	{r3, r4, r5, pc}
 8004070:	2000038c 	.word	0x2000038c

08004074 <__errno>:
 8004074:	4b01      	ldr	r3, [pc, #4]	@ (800407c <__errno+0x8>)
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	20000028 	.word	0x20000028

08004080 <__libc_init_array>:
 8004080:	b570      	push	{r4, r5, r6, lr}
 8004082:	2600      	movs	r6, #0
 8004084:	4d0c      	ldr	r5, [pc, #48]	@ (80040b8 <__libc_init_array+0x38>)
 8004086:	4c0d      	ldr	r4, [pc, #52]	@ (80040bc <__libc_init_array+0x3c>)
 8004088:	1b64      	subs	r4, r4, r5
 800408a:	10a4      	asrs	r4, r4, #2
 800408c:	42a6      	cmp	r6, r4
 800408e:	d109      	bne.n	80040a4 <__libc_init_array+0x24>
 8004090:	f003 fb68 	bl	8007764 <_init>
 8004094:	2600      	movs	r6, #0
 8004096:	4d0a      	ldr	r5, [pc, #40]	@ (80040c0 <__libc_init_array+0x40>)
 8004098:	4c0a      	ldr	r4, [pc, #40]	@ (80040c4 <__libc_init_array+0x44>)
 800409a:	1b64      	subs	r4, r4, r5
 800409c:	10a4      	asrs	r4, r4, #2
 800409e:	42a6      	cmp	r6, r4
 80040a0:	d105      	bne.n	80040ae <__libc_init_array+0x2e>
 80040a2:	bd70      	pop	{r4, r5, r6, pc}
 80040a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a8:	4798      	blx	r3
 80040aa:	3601      	adds	r6, #1
 80040ac:	e7ee      	b.n	800408c <__libc_init_array+0xc>
 80040ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b2:	4798      	blx	r3
 80040b4:	3601      	adds	r6, #1
 80040b6:	e7f2      	b.n	800409e <__libc_init_array+0x1e>
 80040b8:	08007bd8 	.word	0x08007bd8
 80040bc:	08007bd8 	.word	0x08007bd8
 80040c0:	08007bd8 	.word	0x08007bd8
 80040c4:	08007bdc 	.word	0x08007bdc

080040c8 <__retarget_lock_init_recursive>:
 80040c8:	4770      	bx	lr

080040ca <__retarget_lock_acquire_recursive>:
 80040ca:	4770      	bx	lr

080040cc <__retarget_lock_release_recursive>:
 80040cc:	4770      	bx	lr

080040ce <memchr>:
 80040ce:	4603      	mov	r3, r0
 80040d0:	b510      	push	{r4, lr}
 80040d2:	b2c9      	uxtb	r1, r1
 80040d4:	4402      	add	r2, r0
 80040d6:	4293      	cmp	r3, r2
 80040d8:	4618      	mov	r0, r3
 80040da:	d101      	bne.n	80040e0 <memchr+0x12>
 80040dc:	2000      	movs	r0, #0
 80040de:	e003      	b.n	80040e8 <memchr+0x1a>
 80040e0:	7804      	ldrb	r4, [r0, #0]
 80040e2:	3301      	adds	r3, #1
 80040e4:	428c      	cmp	r4, r1
 80040e6:	d1f6      	bne.n	80040d6 <memchr+0x8>
 80040e8:	bd10      	pop	{r4, pc}
	...

080040ec <nanf>:
 80040ec:	4800      	ldr	r0, [pc, #0]	@ (80040f0 <nanf+0x4>)
 80040ee:	4770      	bx	lr
 80040f0:	7fc00000 	.word	0x7fc00000

080040f4 <quorem>:
 80040f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f8:	6903      	ldr	r3, [r0, #16]
 80040fa:	690c      	ldr	r4, [r1, #16]
 80040fc:	4607      	mov	r7, r0
 80040fe:	42a3      	cmp	r3, r4
 8004100:	db7e      	blt.n	8004200 <quorem+0x10c>
 8004102:	3c01      	subs	r4, #1
 8004104:	00a3      	lsls	r3, r4, #2
 8004106:	f100 0514 	add.w	r5, r0, #20
 800410a:	f101 0814 	add.w	r8, r1, #20
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004114:	9301      	str	r3, [sp, #4]
 8004116:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800411a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800411e:	3301      	adds	r3, #1
 8004120:	429a      	cmp	r2, r3
 8004122:	fbb2 f6f3 	udiv	r6, r2, r3
 8004126:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800412a:	d32e      	bcc.n	800418a <quorem+0x96>
 800412c:	f04f 0a00 	mov.w	sl, #0
 8004130:	46c4      	mov	ip, r8
 8004132:	46ae      	mov	lr, r5
 8004134:	46d3      	mov	fp, sl
 8004136:	f85c 3b04 	ldr.w	r3, [ip], #4
 800413a:	b298      	uxth	r0, r3
 800413c:	fb06 a000 	mla	r0, r6, r0, sl
 8004140:	0c1b      	lsrs	r3, r3, #16
 8004142:	0c02      	lsrs	r2, r0, #16
 8004144:	fb06 2303 	mla	r3, r6, r3, r2
 8004148:	f8de 2000 	ldr.w	r2, [lr]
 800414c:	b280      	uxth	r0, r0
 800414e:	b292      	uxth	r2, r2
 8004150:	1a12      	subs	r2, r2, r0
 8004152:	445a      	add	r2, fp
 8004154:	f8de 0000 	ldr.w	r0, [lr]
 8004158:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800415c:	b29b      	uxth	r3, r3
 800415e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004162:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004166:	b292      	uxth	r2, r2
 8004168:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800416c:	45e1      	cmp	r9, ip
 800416e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004172:	f84e 2b04 	str.w	r2, [lr], #4
 8004176:	d2de      	bcs.n	8004136 <quorem+0x42>
 8004178:	9b00      	ldr	r3, [sp, #0]
 800417a:	58eb      	ldr	r3, [r5, r3]
 800417c:	b92b      	cbnz	r3, 800418a <quorem+0x96>
 800417e:	9b01      	ldr	r3, [sp, #4]
 8004180:	3b04      	subs	r3, #4
 8004182:	429d      	cmp	r5, r3
 8004184:	461a      	mov	r2, r3
 8004186:	d32f      	bcc.n	80041e8 <quorem+0xf4>
 8004188:	613c      	str	r4, [r7, #16]
 800418a:	4638      	mov	r0, r7
 800418c:	f001 f9c4 	bl	8005518 <__mcmp>
 8004190:	2800      	cmp	r0, #0
 8004192:	db25      	blt.n	80041e0 <quorem+0xec>
 8004194:	4629      	mov	r1, r5
 8004196:	2000      	movs	r0, #0
 8004198:	f858 2b04 	ldr.w	r2, [r8], #4
 800419c:	f8d1 c000 	ldr.w	ip, [r1]
 80041a0:	fa1f fe82 	uxth.w	lr, r2
 80041a4:	fa1f f38c 	uxth.w	r3, ip
 80041a8:	eba3 030e 	sub.w	r3, r3, lr
 80041ac:	4403      	add	r3, r0
 80041ae:	0c12      	lsrs	r2, r2, #16
 80041b0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80041b4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041be:	45c1      	cmp	r9, r8
 80041c0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80041c4:	f841 3b04 	str.w	r3, [r1], #4
 80041c8:	d2e6      	bcs.n	8004198 <quorem+0xa4>
 80041ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80041ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80041d2:	b922      	cbnz	r2, 80041de <quorem+0xea>
 80041d4:	3b04      	subs	r3, #4
 80041d6:	429d      	cmp	r5, r3
 80041d8:	461a      	mov	r2, r3
 80041da:	d30b      	bcc.n	80041f4 <quorem+0x100>
 80041dc:	613c      	str	r4, [r7, #16]
 80041de:	3601      	adds	r6, #1
 80041e0:	4630      	mov	r0, r6
 80041e2:	b003      	add	sp, #12
 80041e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	3b04      	subs	r3, #4
 80041ec:	2a00      	cmp	r2, #0
 80041ee:	d1cb      	bne.n	8004188 <quorem+0x94>
 80041f0:	3c01      	subs	r4, #1
 80041f2:	e7c6      	b.n	8004182 <quorem+0x8e>
 80041f4:	6812      	ldr	r2, [r2, #0]
 80041f6:	3b04      	subs	r3, #4
 80041f8:	2a00      	cmp	r2, #0
 80041fa:	d1ef      	bne.n	80041dc <quorem+0xe8>
 80041fc:	3c01      	subs	r4, #1
 80041fe:	e7ea      	b.n	80041d6 <quorem+0xe2>
 8004200:	2000      	movs	r0, #0
 8004202:	e7ee      	b.n	80041e2 <quorem+0xee>
 8004204:	0000      	movs	r0, r0
	...

08004208 <_dtoa_r>:
 8004208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420c:	4614      	mov	r4, r2
 800420e:	461d      	mov	r5, r3
 8004210:	69c7      	ldr	r7, [r0, #28]
 8004212:	b097      	sub	sp, #92	@ 0x5c
 8004214:	4683      	mov	fp, r0
 8004216:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800421a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800421c:	b97f      	cbnz	r7, 800423e <_dtoa_r+0x36>
 800421e:	2010      	movs	r0, #16
 8004220:	f000 fe02 	bl	8004e28 <malloc>
 8004224:	4602      	mov	r2, r0
 8004226:	f8cb 001c 	str.w	r0, [fp, #28]
 800422a:	b920      	cbnz	r0, 8004236 <_dtoa_r+0x2e>
 800422c:	21ef      	movs	r1, #239	@ 0xef
 800422e:	4ba8      	ldr	r3, [pc, #672]	@ (80044d0 <_dtoa_r+0x2c8>)
 8004230:	48a8      	ldr	r0, [pc, #672]	@ (80044d4 <_dtoa_r+0x2cc>)
 8004232:	f002 fc23 	bl	8006a7c <__assert_func>
 8004236:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800423a:	6007      	str	r7, [r0, #0]
 800423c:	60c7      	str	r7, [r0, #12]
 800423e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004242:	6819      	ldr	r1, [r3, #0]
 8004244:	b159      	cbz	r1, 800425e <_dtoa_r+0x56>
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	2301      	movs	r3, #1
 800424a:	4093      	lsls	r3, r2
 800424c:	604a      	str	r2, [r1, #4]
 800424e:	608b      	str	r3, [r1, #8]
 8004250:	4658      	mov	r0, fp
 8004252:	f000 fedf 	bl	8005014 <_Bfree>
 8004256:	2200      	movs	r2, #0
 8004258:	f8db 301c 	ldr.w	r3, [fp, #28]
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	1e2b      	subs	r3, r5, #0
 8004260:	bfaf      	iteee	ge
 8004262:	2300      	movge	r3, #0
 8004264:	2201      	movlt	r2, #1
 8004266:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800426a:	9303      	strlt	r3, [sp, #12]
 800426c:	bfa8      	it	ge
 800426e:	6033      	strge	r3, [r6, #0]
 8004270:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004274:	4b98      	ldr	r3, [pc, #608]	@ (80044d8 <_dtoa_r+0x2d0>)
 8004276:	bfb8      	it	lt
 8004278:	6032      	strlt	r2, [r6, #0]
 800427a:	ea33 0308 	bics.w	r3, r3, r8
 800427e:	d112      	bne.n	80042a6 <_dtoa_r+0x9e>
 8004280:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004284:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800428c:	4323      	orrs	r3, r4
 800428e:	f000 8550 	beq.w	8004d32 <_dtoa_r+0xb2a>
 8004292:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004294:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80044dc <_dtoa_r+0x2d4>
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 8552 	beq.w	8004d42 <_dtoa_r+0xb3a>
 800429e:	f10a 0303 	add.w	r3, sl, #3
 80042a2:	f000 bd4c 	b.w	8004d3e <_dtoa_r+0xb36>
 80042a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80042ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80042b2:	2200      	movs	r2, #0
 80042b4:	2300      	movs	r3, #0
 80042b6:	f7fc fb77 	bl	80009a8 <__aeabi_dcmpeq>
 80042ba:	4607      	mov	r7, r0
 80042bc:	b158      	cbz	r0, 80042d6 <_dtoa_r+0xce>
 80042be:	2301      	movs	r3, #1
 80042c0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80042c6:	b113      	cbz	r3, 80042ce <_dtoa_r+0xc6>
 80042c8:	4b85      	ldr	r3, [pc, #532]	@ (80044e0 <_dtoa_r+0x2d8>)
 80042ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80044e4 <_dtoa_r+0x2dc>
 80042d2:	f000 bd36 	b.w	8004d42 <_dtoa_r+0xb3a>
 80042d6:	ab14      	add	r3, sp, #80	@ 0x50
 80042d8:	9301      	str	r3, [sp, #4]
 80042da:	ab15      	add	r3, sp, #84	@ 0x54
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	4658      	mov	r0, fp
 80042e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80042e4:	f001 fa30 	bl	8005748 <__d2b>
 80042e8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80042ec:	4681      	mov	r9, r0
 80042ee:	2e00      	cmp	r6, #0
 80042f0:	d077      	beq.n	80043e2 <_dtoa_r+0x1da>
 80042f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80042f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80042f8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80042fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004300:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004304:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004308:	9712      	str	r7, [sp, #72]	@ 0x48
 800430a:	4619      	mov	r1, r3
 800430c:	2200      	movs	r2, #0
 800430e:	4b76      	ldr	r3, [pc, #472]	@ (80044e8 <_dtoa_r+0x2e0>)
 8004310:	f7fb ff2a 	bl	8000168 <__aeabi_dsub>
 8004314:	a368      	add	r3, pc, #416	@ (adr r3, 80044b8 <_dtoa_r+0x2b0>)
 8004316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431a:	f7fc f8dd 	bl	80004d8 <__aeabi_dmul>
 800431e:	a368      	add	r3, pc, #416	@ (adr r3, 80044c0 <_dtoa_r+0x2b8>)
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	f7fb ff22 	bl	800016c <__adddf3>
 8004328:	4604      	mov	r4, r0
 800432a:	4630      	mov	r0, r6
 800432c:	460d      	mov	r5, r1
 800432e:	f7fc f869 	bl	8000404 <__aeabi_i2d>
 8004332:	a365      	add	r3, pc, #404	@ (adr r3, 80044c8 <_dtoa_r+0x2c0>)
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	f7fc f8ce 	bl	80004d8 <__aeabi_dmul>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4620      	mov	r0, r4
 8004342:	4629      	mov	r1, r5
 8004344:	f7fb ff12 	bl	800016c <__adddf3>
 8004348:	4604      	mov	r4, r0
 800434a:	460d      	mov	r5, r1
 800434c:	f7fc fb74 	bl	8000a38 <__aeabi_d2iz>
 8004350:	2200      	movs	r2, #0
 8004352:	4607      	mov	r7, r0
 8004354:	2300      	movs	r3, #0
 8004356:	4620      	mov	r0, r4
 8004358:	4629      	mov	r1, r5
 800435a:	f7fc fb2f 	bl	80009bc <__aeabi_dcmplt>
 800435e:	b140      	cbz	r0, 8004372 <_dtoa_r+0x16a>
 8004360:	4638      	mov	r0, r7
 8004362:	f7fc f84f 	bl	8000404 <__aeabi_i2d>
 8004366:	4622      	mov	r2, r4
 8004368:	462b      	mov	r3, r5
 800436a:	f7fc fb1d 	bl	80009a8 <__aeabi_dcmpeq>
 800436e:	b900      	cbnz	r0, 8004372 <_dtoa_r+0x16a>
 8004370:	3f01      	subs	r7, #1
 8004372:	2f16      	cmp	r7, #22
 8004374:	d853      	bhi.n	800441e <_dtoa_r+0x216>
 8004376:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800437a:	4b5c      	ldr	r3, [pc, #368]	@ (80044ec <_dtoa_r+0x2e4>)
 800437c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004384:	f7fc fb1a 	bl	80009bc <__aeabi_dcmplt>
 8004388:	2800      	cmp	r0, #0
 800438a:	d04a      	beq.n	8004422 <_dtoa_r+0x21a>
 800438c:	2300      	movs	r3, #0
 800438e:	3f01      	subs	r7, #1
 8004390:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004392:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004394:	1b9b      	subs	r3, r3, r6
 8004396:	1e5a      	subs	r2, r3, #1
 8004398:	bf46      	itte	mi
 800439a:	f1c3 0801 	rsbmi	r8, r3, #1
 800439e:	2300      	movmi	r3, #0
 80043a0:	f04f 0800 	movpl.w	r8, #0
 80043a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80043a6:	bf48      	it	mi
 80043a8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80043aa:	2f00      	cmp	r7, #0
 80043ac:	db3b      	blt.n	8004426 <_dtoa_r+0x21e>
 80043ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043b0:	970e      	str	r7, [sp, #56]	@ 0x38
 80043b2:	443b      	add	r3, r7
 80043b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80043b6:	2300      	movs	r3, #0
 80043b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80043ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80043bc:	2b09      	cmp	r3, #9
 80043be:	d866      	bhi.n	800448e <_dtoa_r+0x286>
 80043c0:	2b05      	cmp	r3, #5
 80043c2:	bfc4      	itt	gt
 80043c4:	3b04      	subgt	r3, #4
 80043c6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80043c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80043ca:	bfc8      	it	gt
 80043cc:	2400      	movgt	r4, #0
 80043ce:	f1a3 0302 	sub.w	r3, r3, #2
 80043d2:	bfd8      	it	le
 80043d4:	2401      	movle	r4, #1
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d864      	bhi.n	80044a4 <_dtoa_r+0x29c>
 80043da:	e8df f003 	tbb	[pc, r3]
 80043de:	382b      	.short	0x382b
 80043e0:	5636      	.short	0x5636
 80043e2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80043e6:	441e      	add	r6, r3
 80043e8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	bfc1      	itttt	gt
 80043f0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80043f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80043f8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80043fc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004400:	bfd6      	itet	le
 8004402:	f1c3 0320 	rsble	r3, r3, #32
 8004406:	ea48 0003 	orrgt.w	r0, r8, r3
 800440a:	fa04 f003 	lslle.w	r0, r4, r3
 800440e:	f7fb ffe9 	bl	80003e4 <__aeabi_ui2d>
 8004412:	2201      	movs	r2, #1
 8004414:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004418:	3e01      	subs	r6, #1
 800441a:	9212      	str	r2, [sp, #72]	@ 0x48
 800441c:	e775      	b.n	800430a <_dtoa_r+0x102>
 800441e:	2301      	movs	r3, #1
 8004420:	e7b6      	b.n	8004390 <_dtoa_r+0x188>
 8004422:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004424:	e7b5      	b.n	8004392 <_dtoa_r+0x18a>
 8004426:	427b      	negs	r3, r7
 8004428:	930a      	str	r3, [sp, #40]	@ 0x28
 800442a:	2300      	movs	r3, #0
 800442c:	eba8 0807 	sub.w	r8, r8, r7
 8004430:	930e      	str	r3, [sp, #56]	@ 0x38
 8004432:	e7c2      	b.n	80043ba <_dtoa_r+0x1b2>
 8004434:	2300      	movs	r3, #0
 8004436:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004438:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800443a:	2b00      	cmp	r3, #0
 800443c:	dc35      	bgt.n	80044aa <_dtoa_r+0x2a2>
 800443e:	2301      	movs	r3, #1
 8004440:	461a      	mov	r2, r3
 8004442:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004446:	9221      	str	r2, [sp, #132]	@ 0x84
 8004448:	e00b      	b.n	8004462 <_dtoa_r+0x25a>
 800444a:	2301      	movs	r3, #1
 800444c:	e7f3      	b.n	8004436 <_dtoa_r+0x22e>
 800444e:	2300      	movs	r3, #0
 8004450:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004452:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004454:	18fb      	adds	r3, r7, r3
 8004456:	9308      	str	r3, [sp, #32]
 8004458:	3301      	adds	r3, #1
 800445a:	2b01      	cmp	r3, #1
 800445c:	9307      	str	r3, [sp, #28]
 800445e:	bfb8      	it	lt
 8004460:	2301      	movlt	r3, #1
 8004462:	2100      	movs	r1, #0
 8004464:	2204      	movs	r2, #4
 8004466:	f8db 001c 	ldr.w	r0, [fp, #28]
 800446a:	f102 0514 	add.w	r5, r2, #20
 800446e:	429d      	cmp	r5, r3
 8004470:	d91f      	bls.n	80044b2 <_dtoa_r+0x2aa>
 8004472:	6041      	str	r1, [r0, #4]
 8004474:	4658      	mov	r0, fp
 8004476:	f000 fd8d 	bl	8004f94 <_Balloc>
 800447a:	4682      	mov	sl, r0
 800447c:	2800      	cmp	r0, #0
 800447e:	d139      	bne.n	80044f4 <_dtoa_r+0x2ec>
 8004480:	4602      	mov	r2, r0
 8004482:	f240 11af 	movw	r1, #431	@ 0x1af
 8004486:	4b1a      	ldr	r3, [pc, #104]	@ (80044f0 <_dtoa_r+0x2e8>)
 8004488:	e6d2      	b.n	8004230 <_dtoa_r+0x28>
 800448a:	2301      	movs	r3, #1
 800448c:	e7e0      	b.n	8004450 <_dtoa_r+0x248>
 800448e:	2401      	movs	r4, #1
 8004490:	2300      	movs	r3, #0
 8004492:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004494:	9320      	str	r3, [sp, #128]	@ 0x80
 8004496:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800449a:	2200      	movs	r2, #0
 800449c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80044a0:	2312      	movs	r3, #18
 80044a2:	e7d0      	b.n	8004446 <_dtoa_r+0x23e>
 80044a4:	2301      	movs	r3, #1
 80044a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80044a8:	e7f5      	b.n	8004496 <_dtoa_r+0x28e>
 80044aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80044ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80044b0:	e7d7      	b.n	8004462 <_dtoa_r+0x25a>
 80044b2:	3101      	adds	r1, #1
 80044b4:	0052      	lsls	r2, r2, #1
 80044b6:	e7d8      	b.n	800446a <_dtoa_r+0x262>
 80044b8:	636f4361 	.word	0x636f4361
 80044bc:	3fd287a7 	.word	0x3fd287a7
 80044c0:	8b60c8b3 	.word	0x8b60c8b3
 80044c4:	3fc68a28 	.word	0x3fc68a28
 80044c8:	509f79fb 	.word	0x509f79fb
 80044cc:	3fd34413 	.word	0x3fd34413
 80044d0:	080077e8 	.word	0x080077e8
 80044d4:	080077ff 	.word	0x080077ff
 80044d8:	7ff00000 	.word	0x7ff00000
 80044dc:	080077e4 	.word	0x080077e4
 80044e0:	080077b3 	.word	0x080077b3
 80044e4:	080077b2 	.word	0x080077b2
 80044e8:	3ff80000 	.word	0x3ff80000
 80044ec:	080078f8 	.word	0x080078f8
 80044f0:	08007857 	.word	0x08007857
 80044f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80044f8:	6018      	str	r0, [r3, #0]
 80044fa:	9b07      	ldr	r3, [sp, #28]
 80044fc:	2b0e      	cmp	r3, #14
 80044fe:	f200 80a4 	bhi.w	800464a <_dtoa_r+0x442>
 8004502:	2c00      	cmp	r4, #0
 8004504:	f000 80a1 	beq.w	800464a <_dtoa_r+0x442>
 8004508:	2f00      	cmp	r7, #0
 800450a:	dd33      	ble.n	8004574 <_dtoa_r+0x36c>
 800450c:	4b86      	ldr	r3, [pc, #536]	@ (8004728 <_dtoa_r+0x520>)
 800450e:	f007 020f 	and.w	r2, r7, #15
 8004512:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004516:	05f8      	lsls	r0, r7, #23
 8004518:	e9d3 3400 	ldrd	r3, r4, [r3]
 800451c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004520:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004524:	d516      	bpl.n	8004554 <_dtoa_r+0x34c>
 8004526:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800452a:	4b80      	ldr	r3, [pc, #512]	@ (800472c <_dtoa_r+0x524>)
 800452c:	2603      	movs	r6, #3
 800452e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004532:	f7fc f8fb 	bl	800072c <__aeabi_ddiv>
 8004536:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800453a:	f004 040f 	and.w	r4, r4, #15
 800453e:	4d7b      	ldr	r5, [pc, #492]	@ (800472c <_dtoa_r+0x524>)
 8004540:	b954      	cbnz	r4, 8004558 <_dtoa_r+0x350>
 8004542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800454a:	f7fc f8ef 	bl	800072c <__aeabi_ddiv>
 800454e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004552:	e028      	b.n	80045a6 <_dtoa_r+0x39e>
 8004554:	2602      	movs	r6, #2
 8004556:	e7f2      	b.n	800453e <_dtoa_r+0x336>
 8004558:	07e1      	lsls	r1, r4, #31
 800455a:	d508      	bpl.n	800456e <_dtoa_r+0x366>
 800455c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004560:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004564:	f7fb ffb8 	bl	80004d8 <__aeabi_dmul>
 8004568:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800456c:	3601      	adds	r6, #1
 800456e:	1064      	asrs	r4, r4, #1
 8004570:	3508      	adds	r5, #8
 8004572:	e7e5      	b.n	8004540 <_dtoa_r+0x338>
 8004574:	f000 80d2 	beq.w	800471c <_dtoa_r+0x514>
 8004578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800457c:	427c      	negs	r4, r7
 800457e:	4b6a      	ldr	r3, [pc, #424]	@ (8004728 <_dtoa_r+0x520>)
 8004580:	f004 020f 	and.w	r2, r4, #15
 8004584:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458c:	f7fb ffa4 	bl	80004d8 <__aeabi_dmul>
 8004590:	2602      	movs	r6, #2
 8004592:	2300      	movs	r3, #0
 8004594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004598:	4d64      	ldr	r5, [pc, #400]	@ (800472c <_dtoa_r+0x524>)
 800459a:	1124      	asrs	r4, r4, #4
 800459c:	2c00      	cmp	r4, #0
 800459e:	f040 80b2 	bne.w	8004706 <_dtoa_r+0x4fe>
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1d3      	bne.n	800454e <_dtoa_r+0x346>
 80045a6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80045aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80b7 	beq.w	8004720 <_dtoa_r+0x518>
 80045b2:	2200      	movs	r2, #0
 80045b4:	4620      	mov	r0, r4
 80045b6:	4629      	mov	r1, r5
 80045b8:	4b5d      	ldr	r3, [pc, #372]	@ (8004730 <_dtoa_r+0x528>)
 80045ba:	f7fc f9ff 	bl	80009bc <__aeabi_dcmplt>
 80045be:	2800      	cmp	r0, #0
 80045c0:	f000 80ae 	beq.w	8004720 <_dtoa_r+0x518>
 80045c4:	9b07      	ldr	r3, [sp, #28]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 80aa 	beq.w	8004720 <_dtoa_r+0x518>
 80045cc:	9b08      	ldr	r3, [sp, #32]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	dd37      	ble.n	8004642 <_dtoa_r+0x43a>
 80045d2:	1e7b      	subs	r3, r7, #1
 80045d4:	4620      	mov	r0, r4
 80045d6:	9304      	str	r3, [sp, #16]
 80045d8:	2200      	movs	r2, #0
 80045da:	4629      	mov	r1, r5
 80045dc:	4b55      	ldr	r3, [pc, #340]	@ (8004734 <_dtoa_r+0x52c>)
 80045de:	f7fb ff7b 	bl	80004d8 <__aeabi_dmul>
 80045e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045e6:	9c08      	ldr	r4, [sp, #32]
 80045e8:	3601      	adds	r6, #1
 80045ea:	4630      	mov	r0, r6
 80045ec:	f7fb ff0a 	bl	8000404 <__aeabi_i2d>
 80045f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045f4:	f7fb ff70 	bl	80004d8 <__aeabi_dmul>
 80045f8:	2200      	movs	r2, #0
 80045fa:	4b4f      	ldr	r3, [pc, #316]	@ (8004738 <_dtoa_r+0x530>)
 80045fc:	f7fb fdb6 	bl	800016c <__adddf3>
 8004600:	4605      	mov	r5, r0
 8004602:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004606:	2c00      	cmp	r4, #0
 8004608:	f040 809a 	bne.w	8004740 <_dtoa_r+0x538>
 800460c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004610:	2200      	movs	r2, #0
 8004612:	4b4a      	ldr	r3, [pc, #296]	@ (800473c <_dtoa_r+0x534>)
 8004614:	f7fb fda8 	bl	8000168 <__aeabi_dsub>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004620:	462a      	mov	r2, r5
 8004622:	4633      	mov	r3, r6
 8004624:	f7fc f9e8 	bl	80009f8 <__aeabi_dcmpgt>
 8004628:	2800      	cmp	r0, #0
 800462a:	f040 828e 	bne.w	8004b4a <_dtoa_r+0x942>
 800462e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004632:	462a      	mov	r2, r5
 8004634:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004638:	f7fc f9c0 	bl	80009bc <__aeabi_dcmplt>
 800463c:	2800      	cmp	r0, #0
 800463e:	f040 8127 	bne.w	8004890 <_dtoa_r+0x688>
 8004642:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004646:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800464a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800464c:	2b00      	cmp	r3, #0
 800464e:	f2c0 8163 	blt.w	8004918 <_dtoa_r+0x710>
 8004652:	2f0e      	cmp	r7, #14
 8004654:	f300 8160 	bgt.w	8004918 <_dtoa_r+0x710>
 8004658:	4b33      	ldr	r3, [pc, #204]	@ (8004728 <_dtoa_r+0x520>)
 800465a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800465e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004662:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004666:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004668:	2b00      	cmp	r3, #0
 800466a:	da03      	bge.n	8004674 <_dtoa_r+0x46c>
 800466c:	9b07      	ldr	r3, [sp, #28]
 800466e:	2b00      	cmp	r3, #0
 8004670:	f340 8100 	ble.w	8004874 <_dtoa_r+0x66c>
 8004674:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004678:	4656      	mov	r6, sl
 800467a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800467e:	4620      	mov	r0, r4
 8004680:	4629      	mov	r1, r5
 8004682:	f7fc f853 	bl	800072c <__aeabi_ddiv>
 8004686:	f7fc f9d7 	bl	8000a38 <__aeabi_d2iz>
 800468a:	4680      	mov	r8, r0
 800468c:	f7fb feba 	bl	8000404 <__aeabi_i2d>
 8004690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004694:	f7fb ff20 	bl	80004d8 <__aeabi_dmul>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4620      	mov	r0, r4
 800469e:	4629      	mov	r1, r5
 80046a0:	f7fb fd62 	bl	8000168 <__aeabi_dsub>
 80046a4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80046a8:	9d07      	ldr	r5, [sp, #28]
 80046aa:	f806 4b01 	strb.w	r4, [r6], #1
 80046ae:	eba6 040a 	sub.w	r4, r6, sl
 80046b2:	42a5      	cmp	r5, r4
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	f040 8116 	bne.w	80048e8 <_dtoa_r+0x6e0>
 80046bc:	f7fb fd56 	bl	800016c <__adddf3>
 80046c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046c4:	4604      	mov	r4, r0
 80046c6:	460d      	mov	r5, r1
 80046c8:	f7fc f996 	bl	80009f8 <__aeabi_dcmpgt>
 80046cc:	2800      	cmp	r0, #0
 80046ce:	f040 80f8 	bne.w	80048c2 <_dtoa_r+0x6ba>
 80046d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046d6:	4620      	mov	r0, r4
 80046d8:	4629      	mov	r1, r5
 80046da:	f7fc f965 	bl	80009a8 <__aeabi_dcmpeq>
 80046de:	b118      	cbz	r0, 80046e8 <_dtoa_r+0x4e0>
 80046e0:	f018 0f01 	tst.w	r8, #1
 80046e4:	f040 80ed 	bne.w	80048c2 <_dtoa_r+0x6ba>
 80046e8:	4649      	mov	r1, r9
 80046ea:	4658      	mov	r0, fp
 80046ec:	f000 fc92 	bl	8005014 <_Bfree>
 80046f0:	2300      	movs	r3, #0
 80046f2:	7033      	strb	r3, [r6, #0]
 80046f4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80046f6:	3701      	adds	r7, #1
 80046f8:	601f      	str	r7, [r3, #0]
 80046fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 8320 	beq.w	8004d42 <_dtoa_r+0xb3a>
 8004702:	601e      	str	r6, [r3, #0]
 8004704:	e31d      	b.n	8004d42 <_dtoa_r+0xb3a>
 8004706:	07e2      	lsls	r2, r4, #31
 8004708:	d505      	bpl.n	8004716 <_dtoa_r+0x50e>
 800470a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800470e:	f7fb fee3 	bl	80004d8 <__aeabi_dmul>
 8004712:	2301      	movs	r3, #1
 8004714:	3601      	adds	r6, #1
 8004716:	1064      	asrs	r4, r4, #1
 8004718:	3508      	adds	r5, #8
 800471a:	e73f      	b.n	800459c <_dtoa_r+0x394>
 800471c:	2602      	movs	r6, #2
 800471e:	e742      	b.n	80045a6 <_dtoa_r+0x39e>
 8004720:	9c07      	ldr	r4, [sp, #28]
 8004722:	9704      	str	r7, [sp, #16]
 8004724:	e761      	b.n	80045ea <_dtoa_r+0x3e2>
 8004726:	bf00      	nop
 8004728:	080078f8 	.word	0x080078f8
 800472c:	080078d0 	.word	0x080078d0
 8004730:	3ff00000 	.word	0x3ff00000
 8004734:	40240000 	.word	0x40240000
 8004738:	401c0000 	.word	0x401c0000
 800473c:	40140000 	.word	0x40140000
 8004740:	4b70      	ldr	r3, [pc, #448]	@ (8004904 <_dtoa_r+0x6fc>)
 8004742:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004744:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004748:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800474c:	4454      	add	r4, sl
 800474e:	2900      	cmp	r1, #0
 8004750:	d045      	beq.n	80047de <_dtoa_r+0x5d6>
 8004752:	2000      	movs	r0, #0
 8004754:	496c      	ldr	r1, [pc, #432]	@ (8004908 <_dtoa_r+0x700>)
 8004756:	f7fb ffe9 	bl	800072c <__aeabi_ddiv>
 800475a:	4633      	mov	r3, r6
 800475c:	462a      	mov	r2, r5
 800475e:	f7fb fd03 	bl	8000168 <__aeabi_dsub>
 8004762:	4656      	mov	r6, sl
 8004764:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004768:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800476c:	f7fc f964 	bl	8000a38 <__aeabi_d2iz>
 8004770:	4605      	mov	r5, r0
 8004772:	f7fb fe47 	bl	8000404 <__aeabi_i2d>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800477e:	f7fb fcf3 	bl	8000168 <__aeabi_dsub>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	3530      	adds	r5, #48	@ 0x30
 8004788:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800478c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004790:	f806 5b01 	strb.w	r5, [r6], #1
 8004794:	f7fc f912 	bl	80009bc <__aeabi_dcmplt>
 8004798:	2800      	cmp	r0, #0
 800479a:	d163      	bne.n	8004864 <_dtoa_r+0x65c>
 800479c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80047a0:	2000      	movs	r0, #0
 80047a2:	495a      	ldr	r1, [pc, #360]	@ (800490c <_dtoa_r+0x704>)
 80047a4:	f7fb fce0 	bl	8000168 <__aeabi_dsub>
 80047a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80047ac:	f7fc f906 	bl	80009bc <__aeabi_dcmplt>
 80047b0:	2800      	cmp	r0, #0
 80047b2:	f040 8087 	bne.w	80048c4 <_dtoa_r+0x6bc>
 80047b6:	42a6      	cmp	r6, r4
 80047b8:	f43f af43 	beq.w	8004642 <_dtoa_r+0x43a>
 80047bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80047c0:	2200      	movs	r2, #0
 80047c2:	4b53      	ldr	r3, [pc, #332]	@ (8004910 <_dtoa_r+0x708>)
 80047c4:	f7fb fe88 	bl	80004d8 <__aeabi_dmul>
 80047c8:	2200      	movs	r2, #0
 80047ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80047ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047d2:	4b4f      	ldr	r3, [pc, #316]	@ (8004910 <_dtoa_r+0x708>)
 80047d4:	f7fb fe80 	bl	80004d8 <__aeabi_dmul>
 80047d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047dc:	e7c4      	b.n	8004768 <_dtoa_r+0x560>
 80047de:	4631      	mov	r1, r6
 80047e0:	4628      	mov	r0, r5
 80047e2:	f7fb fe79 	bl	80004d8 <__aeabi_dmul>
 80047e6:	4656      	mov	r6, sl
 80047e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80047ec:	9413      	str	r4, [sp, #76]	@ 0x4c
 80047ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047f2:	f7fc f921 	bl	8000a38 <__aeabi_d2iz>
 80047f6:	4605      	mov	r5, r0
 80047f8:	f7fb fe04 	bl	8000404 <__aeabi_i2d>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004804:	f7fb fcb0 	bl	8000168 <__aeabi_dsub>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	3530      	adds	r5, #48	@ 0x30
 800480e:	f806 5b01 	strb.w	r5, [r6], #1
 8004812:	42a6      	cmp	r6, r4
 8004814:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	d124      	bne.n	8004868 <_dtoa_r+0x660>
 800481e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004822:	4b39      	ldr	r3, [pc, #228]	@ (8004908 <_dtoa_r+0x700>)
 8004824:	f7fb fca2 	bl	800016c <__adddf3>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004830:	f7fc f8e2 	bl	80009f8 <__aeabi_dcmpgt>
 8004834:	2800      	cmp	r0, #0
 8004836:	d145      	bne.n	80048c4 <_dtoa_r+0x6bc>
 8004838:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800483c:	2000      	movs	r0, #0
 800483e:	4932      	ldr	r1, [pc, #200]	@ (8004908 <_dtoa_r+0x700>)
 8004840:	f7fb fc92 	bl	8000168 <__aeabi_dsub>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800484c:	f7fc f8b6 	bl	80009bc <__aeabi_dcmplt>
 8004850:	2800      	cmp	r0, #0
 8004852:	f43f aef6 	beq.w	8004642 <_dtoa_r+0x43a>
 8004856:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004858:	1e73      	subs	r3, r6, #1
 800485a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800485c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004860:	2b30      	cmp	r3, #48	@ 0x30
 8004862:	d0f8      	beq.n	8004856 <_dtoa_r+0x64e>
 8004864:	9f04      	ldr	r7, [sp, #16]
 8004866:	e73f      	b.n	80046e8 <_dtoa_r+0x4e0>
 8004868:	4b29      	ldr	r3, [pc, #164]	@ (8004910 <_dtoa_r+0x708>)
 800486a:	f7fb fe35 	bl	80004d8 <__aeabi_dmul>
 800486e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004872:	e7bc      	b.n	80047ee <_dtoa_r+0x5e6>
 8004874:	d10c      	bne.n	8004890 <_dtoa_r+0x688>
 8004876:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800487a:	2200      	movs	r2, #0
 800487c:	4b25      	ldr	r3, [pc, #148]	@ (8004914 <_dtoa_r+0x70c>)
 800487e:	f7fb fe2b 	bl	80004d8 <__aeabi_dmul>
 8004882:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004886:	f7fc f8ad 	bl	80009e4 <__aeabi_dcmpge>
 800488a:	2800      	cmp	r0, #0
 800488c:	f000 815b 	beq.w	8004b46 <_dtoa_r+0x93e>
 8004890:	2400      	movs	r4, #0
 8004892:	4625      	mov	r5, r4
 8004894:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004896:	4656      	mov	r6, sl
 8004898:	43db      	mvns	r3, r3
 800489a:	9304      	str	r3, [sp, #16]
 800489c:	2700      	movs	r7, #0
 800489e:	4621      	mov	r1, r4
 80048a0:	4658      	mov	r0, fp
 80048a2:	f000 fbb7 	bl	8005014 <_Bfree>
 80048a6:	2d00      	cmp	r5, #0
 80048a8:	d0dc      	beq.n	8004864 <_dtoa_r+0x65c>
 80048aa:	b12f      	cbz	r7, 80048b8 <_dtoa_r+0x6b0>
 80048ac:	42af      	cmp	r7, r5
 80048ae:	d003      	beq.n	80048b8 <_dtoa_r+0x6b0>
 80048b0:	4639      	mov	r1, r7
 80048b2:	4658      	mov	r0, fp
 80048b4:	f000 fbae 	bl	8005014 <_Bfree>
 80048b8:	4629      	mov	r1, r5
 80048ba:	4658      	mov	r0, fp
 80048bc:	f000 fbaa 	bl	8005014 <_Bfree>
 80048c0:	e7d0      	b.n	8004864 <_dtoa_r+0x65c>
 80048c2:	9704      	str	r7, [sp, #16]
 80048c4:	4633      	mov	r3, r6
 80048c6:	461e      	mov	r6, r3
 80048c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80048cc:	2a39      	cmp	r2, #57	@ 0x39
 80048ce:	d107      	bne.n	80048e0 <_dtoa_r+0x6d8>
 80048d0:	459a      	cmp	sl, r3
 80048d2:	d1f8      	bne.n	80048c6 <_dtoa_r+0x6be>
 80048d4:	9a04      	ldr	r2, [sp, #16]
 80048d6:	3201      	adds	r2, #1
 80048d8:	9204      	str	r2, [sp, #16]
 80048da:	2230      	movs	r2, #48	@ 0x30
 80048dc:	f88a 2000 	strb.w	r2, [sl]
 80048e0:	781a      	ldrb	r2, [r3, #0]
 80048e2:	3201      	adds	r2, #1
 80048e4:	701a      	strb	r2, [r3, #0]
 80048e6:	e7bd      	b.n	8004864 <_dtoa_r+0x65c>
 80048e8:	2200      	movs	r2, #0
 80048ea:	4b09      	ldr	r3, [pc, #36]	@ (8004910 <_dtoa_r+0x708>)
 80048ec:	f7fb fdf4 	bl	80004d8 <__aeabi_dmul>
 80048f0:	2200      	movs	r2, #0
 80048f2:	2300      	movs	r3, #0
 80048f4:	4604      	mov	r4, r0
 80048f6:	460d      	mov	r5, r1
 80048f8:	f7fc f856 	bl	80009a8 <__aeabi_dcmpeq>
 80048fc:	2800      	cmp	r0, #0
 80048fe:	f43f aebc 	beq.w	800467a <_dtoa_r+0x472>
 8004902:	e6f1      	b.n	80046e8 <_dtoa_r+0x4e0>
 8004904:	080078f8 	.word	0x080078f8
 8004908:	3fe00000 	.word	0x3fe00000
 800490c:	3ff00000 	.word	0x3ff00000
 8004910:	40240000 	.word	0x40240000
 8004914:	40140000 	.word	0x40140000
 8004918:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800491a:	2a00      	cmp	r2, #0
 800491c:	f000 80db 	beq.w	8004ad6 <_dtoa_r+0x8ce>
 8004920:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004922:	2a01      	cmp	r2, #1
 8004924:	f300 80bf 	bgt.w	8004aa6 <_dtoa_r+0x89e>
 8004928:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800492a:	2a00      	cmp	r2, #0
 800492c:	f000 80b7 	beq.w	8004a9e <_dtoa_r+0x896>
 8004930:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004934:	4646      	mov	r6, r8
 8004936:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004938:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800493a:	2101      	movs	r1, #1
 800493c:	441a      	add	r2, r3
 800493e:	4658      	mov	r0, fp
 8004940:	4498      	add	r8, r3
 8004942:	9209      	str	r2, [sp, #36]	@ 0x24
 8004944:	f000 fc64 	bl	8005210 <__i2b>
 8004948:	4605      	mov	r5, r0
 800494a:	b15e      	cbz	r6, 8004964 <_dtoa_r+0x75c>
 800494c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800494e:	2b00      	cmp	r3, #0
 8004950:	dd08      	ble.n	8004964 <_dtoa_r+0x75c>
 8004952:	42b3      	cmp	r3, r6
 8004954:	bfa8      	it	ge
 8004956:	4633      	movge	r3, r6
 8004958:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800495a:	eba8 0803 	sub.w	r8, r8, r3
 800495e:	1af6      	subs	r6, r6, r3
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	9309      	str	r3, [sp, #36]	@ 0x24
 8004964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004966:	b1f3      	cbz	r3, 80049a6 <_dtoa_r+0x79e>
 8004968:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 80b7 	beq.w	8004ade <_dtoa_r+0x8d6>
 8004970:	b18c      	cbz	r4, 8004996 <_dtoa_r+0x78e>
 8004972:	4629      	mov	r1, r5
 8004974:	4622      	mov	r2, r4
 8004976:	4658      	mov	r0, fp
 8004978:	f000 fd08 	bl	800538c <__pow5mult>
 800497c:	464a      	mov	r2, r9
 800497e:	4601      	mov	r1, r0
 8004980:	4605      	mov	r5, r0
 8004982:	4658      	mov	r0, fp
 8004984:	f000 fc5a 	bl	800523c <__multiply>
 8004988:	4649      	mov	r1, r9
 800498a:	9004      	str	r0, [sp, #16]
 800498c:	4658      	mov	r0, fp
 800498e:	f000 fb41 	bl	8005014 <_Bfree>
 8004992:	9b04      	ldr	r3, [sp, #16]
 8004994:	4699      	mov	r9, r3
 8004996:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004998:	1b1a      	subs	r2, r3, r4
 800499a:	d004      	beq.n	80049a6 <_dtoa_r+0x79e>
 800499c:	4649      	mov	r1, r9
 800499e:	4658      	mov	r0, fp
 80049a0:	f000 fcf4 	bl	800538c <__pow5mult>
 80049a4:	4681      	mov	r9, r0
 80049a6:	2101      	movs	r1, #1
 80049a8:	4658      	mov	r0, fp
 80049aa:	f000 fc31 	bl	8005210 <__i2b>
 80049ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80049b0:	4604      	mov	r4, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 81c9 	beq.w	8004d4a <_dtoa_r+0xb42>
 80049b8:	461a      	mov	r2, r3
 80049ba:	4601      	mov	r1, r0
 80049bc:	4658      	mov	r0, fp
 80049be:	f000 fce5 	bl	800538c <__pow5mult>
 80049c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80049c4:	4604      	mov	r4, r0
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	f300 808f 	bgt.w	8004aea <_dtoa_r+0x8e2>
 80049cc:	9b02      	ldr	r3, [sp, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f040 8087 	bne.w	8004ae2 <_dtoa_r+0x8da>
 80049d4:	9b03      	ldr	r3, [sp, #12]
 80049d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f040 8083 	bne.w	8004ae6 <_dtoa_r+0x8de>
 80049e0:	9b03      	ldr	r3, [sp, #12]
 80049e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80049e6:	0d1b      	lsrs	r3, r3, #20
 80049e8:	051b      	lsls	r3, r3, #20
 80049ea:	b12b      	cbz	r3, 80049f8 <_dtoa_r+0x7f0>
 80049ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049ee:	f108 0801 	add.w	r8, r8, #1
 80049f2:	3301      	adds	r3, #1
 80049f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80049f6:	2301      	movs	r3, #1
 80049f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80049fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 81aa 	beq.w	8004d56 <_dtoa_r+0xb4e>
 8004a02:	6923      	ldr	r3, [r4, #16]
 8004a04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004a08:	6918      	ldr	r0, [r3, #16]
 8004a0a:	f000 fbb5 	bl	8005178 <__hi0bits>
 8004a0e:	f1c0 0020 	rsb	r0, r0, #32
 8004a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a14:	4418      	add	r0, r3
 8004a16:	f010 001f 	ands.w	r0, r0, #31
 8004a1a:	d071      	beq.n	8004b00 <_dtoa_r+0x8f8>
 8004a1c:	f1c0 0320 	rsb	r3, r0, #32
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	dd65      	ble.n	8004af0 <_dtoa_r+0x8e8>
 8004a24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a26:	f1c0 001c 	rsb	r0, r0, #28
 8004a2a:	4403      	add	r3, r0
 8004a2c:	4480      	add	r8, r0
 8004a2e:	4406      	add	r6, r0
 8004a30:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a32:	f1b8 0f00 	cmp.w	r8, #0
 8004a36:	dd05      	ble.n	8004a44 <_dtoa_r+0x83c>
 8004a38:	4649      	mov	r1, r9
 8004a3a:	4642      	mov	r2, r8
 8004a3c:	4658      	mov	r0, fp
 8004a3e:	f000 fcff 	bl	8005440 <__lshift>
 8004a42:	4681      	mov	r9, r0
 8004a44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	dd05      	ble.n	8004a56 <_dtoa_r+0x84e>
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	4658      	mov	r0, fp
 8004a50:	f000 fcf6 	bl	8005440 <__lshift>
 8004a54:	4604      	mov	r4, r0
 8004a56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d053      	beq.n	8004b04 <_dtoa_r+0x8fc>
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	4648      	mov	r0, r9
 8004a60:	f000 fd5a 	bl	8005518 <__mcmp>
 8004a64:	2800      	cmp	r0, #0
 8004a66:	da4d      	bge.n	8004b04 <_dtoa_r+0x8fc>
 8004a68:	1e7b      	subs	r3, r7, #1
 8004a6a:	4649      	mov	r1, r9
 8004a6c:	9304      	str	r3, [sp, #16]
 8004a6e:	220a      	movs	r2, #10
 8004a70:	2300      	movs	r3, #0
 8004a72:	4658      	mov	r0, fp
 8004a74:	f000 faf0 	bl	8005058 <__multadd>
 8004a78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a7a:	4681      	mov	r9, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 816c 	beq.w	8004d5a <_dtoa_r+0xb52>
 8004a82:	2300      	movs	r3, #0
 8004a84:	4629      	mov	r1, r5
 8004a86:	220a      	movs	r2, #10
 8004a88:	4658      	mov	r0, fp
 8004a8a:	f000 fae5 	bl	8005058 <__multadd>
 8004a8e:	9b08      	ldr	r3, [sp, #32]
 8004a90:	4605      	mov	r5, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	dc61      	bgt.n	8004b5a <_dtoa_r+0x952>
 8004a96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	dc3b      	bgt.n	8004b14 <_dtoa_r+0x90c>
 8004a9c:	e05d      	b.n	8004b5a <_dtoa_r+0x952>
 8004a9e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004aa0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004aa4:	e746      	b.n	8004934 <_dtoa_r+0x72c>
 8004aa6:	9b07      	ldr	r3, [sp, #28]
 8004aa8:	1e5c      	subs	r4, r3, #1
 8004aaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004aac:	42a3      	cmp	r3, r4
 8004aae:	bfbf      	itttt	lt
 8004ab0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004ab2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004ab4:	1ae3      	sublt	r3, r4, r3
 8004ab6:	18d2      	addlt	r2, r2, r3
 8004ab8:	bfa8      	it	ge
 8004aba:	1b1c      	subge	r4, r3, r4
 8004abc:	9b07      	ldr	r3, [sp, #28]
 8004abe:	bfbe      	ittt	lt
 8004ac0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004ac2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004ac4:	2400      	movlt	r4, #0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	bfb5      	itete	lt
 8004aca:	eba8 0603 	sublt.w	r6, r8, r3
 8004ace:	4646      	movge	r6, r8
 8004ad0:	2300      	movlt	r3, #0
 8004ad2:	9b07      	ldrge	r3, [sp, #28]
 8004ad4:	e730      	b.n	8004938 <_dtoa_r+0x730>
 8004ad6:	4646      	mov	r6, r8
 8004ad8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004ada:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004adc:	e735      	b.n	800494a <_dtoa_r+0x742>
 8004ade:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ae0:	e75c      	b.n	800499c <_dtoa_r+0x794>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	e788      	b.n	80049f8 <_dtoa_r+0x7f0>
 8004ae6:	9b02      	ldr	r3, [sp, #8]
 8004ae8:	e786      	b.n	80049f8 <_dtoa_r+0x7f0>
 8004aea:	2300      	movs	r3, #0
 8004aec:	930a      	str	r3, [sp, #40]	@ 0x28
 8004aee:	e788      	b.n	8004a02 <_dtoa_r+0x7fa>
 8004af0:	d09f      	beq.n	8004a32 <_dtoa_r+0x82a>
 8004af2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004af4:	331c      	adds	r3, #28
 8004af6:	441a      	add	r2, r3
 8004af8:	4498      	add	r8, r3
 8004afa:	441e      	add	r6, r3
 8004afc:	9209      	str	r2, [sp, #36]	@ 0x24
 8004afe:	e798      	b.n	8004a32 <_dtoa_r+0x82a>
 8004b00:	4603      	mov	r3, r0
 8004b02:	e7f6      	b.n	8004af2 <_dtoa_r+0x8ea>
 8004b04:	9b07      	ldr	r3, [sp, #28]
 8004b06:	9704      	str	r7, [sp, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	dc20      	bgt.n	8004b4e <_dtoa_r+0x946>
 8004b0c:	9308      	str	r3, [sp, #32]
 8004b0e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	dd1e      	ble.n	8004b52 <_dtoa_r+0x94a>
 8004b14:	9b08      	ldr	r3, [sp, #32]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f47f aebc 	bne.w	8004894 <_dtoa_r+0x68c>
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	2205      	movs	r2, #5
 8004b20:	4658      	mov	r0, fp
 8004b22:	f000 fa99 	bl	8005058 <__multadd>
 8004b26:	4601      	mov	r1, r0
 8004b28:	4604      	mov	r4, r0
 8004b2a:	4648      	mov	r0, r9
 8004b2c:	f000 fcf4 	bl	8005518 <__mcmp>
 8004b30:	2800      	cmp	r0, #0
 8004b32:	f77f aeaf 	ble.w	8004894 <_dtoa_r+0x68c>
 8004b36:	2331      	movs	r3, #49	@ 0x31
 8004b38:	4656      	mov	r6, sl
 8004b3a:	f806 3b01 	strb.w	r3, [r6], #1
 8004b3e:	9b04      	ldr	r3, [sp, #16]
 8004b40:	3301      	adds	r3, #1
 8004b42:	9304      	str	r3, [sp, #16]
 8004b44:	e6aa      	b.n	800489c <_dtoa_r+0x694>
 8004b46:	9c07      	ldr	r4, [sp, #28]
 8004b48:	9704      	str	r7, [sp, #16]
 8004b4a:	4625      	mov	r5, r4
 8004b4c:	e7f3      	b.n	8004b36 <_dtoa_r+0x92e>
 8004b4e:	9b07      	ldr	r3, [sp, #28]
 8004b50:	9308      	str	r3, [sp, #32]
 8004b52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 8104 	beq.w	8004d62 <_dtoa_r+0xb5a>
 8004b5a:	2e00      	cmp	r6, #0
 8004b5c:	dd05      	ble.n	8004b6a <_dtoa_r+0x962>
 8004b5e:	4629      	mov	r1, r5
 8004b60:	4632      	mov	r2, r6
 8004b62:	4658      	mov	r0, fp
 8004b64:	f000 fc6c 	bl	8005440 <__lshift>
 8004b68:	4605      	mov	r5, r0
 8004b6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d05a      	beq.n	8004c26 <_dtoa_r+0xa1e>
 8004b70:	4658      	mov	r0, fp
 8004b72:	6869      	ldr	r1, [r5, #4]
 8004b74:	f000 fa0e 	bl	8004f94 <_Balloc>
 8004b78:	4606      	mov	r6, r0
 8004b7a:	b928      	cbnz	r0, 8004b88 <_dtoa_r+0x980>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004b82:	4b83      	ldr	r3, [pc, #524]	@ (8004d90 <_dtoa_r+0xb88>)
 8004b84:	f7ff bb54 	b.w	8004230 <_dtoa_r+0x28>
 8004b88:	692a      	ldr	r2, [r5, #16]
 8004b8a:	f105 010c 	add.w	r1, r5, #12
 8004b8e:	3202      	adds	r2, #2
 8004b90:	0092      	lsls	r2, r2, #2
 8004b92:	300c      	adds	r0, #12
 8004b94:	f001 ff5e 	bl	8006a54 <memcpy>
 8004b98:	2201      	movs	r2, #1
 8004b9a:	4631      	mov	r1, r6
 8004b9c:	4658      	mov	r0, fp
 8004b9e:	f000 fc4f 	bl	8005440 <__lshift>
 8004ba2:	462f      	mov	r7, r5
 8004ba4:	4605      	mov	r5, r0
 8004ba6:	f10a 0301 	add.w	r3, sl, #1
 8004baa:	9307      	str	r3, [sp, #28]
 8004bac:	9b08      	ldr	r3, [sp, #32]
 8004bae:	4453      	add	r3, sl
 8004bb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004bb2:	9b02      	ldr	r3, [sp, #8]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004bba:	9b07      	ldr	r3, [sp, #28]
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	4648      	mov	r0, r9
 8004bc2:	9302      	str	r3, [sp, #8]
 8004bc4:	f7ff fa96 	bl	80040f4 <quorem>
 8004bc8:	4639      	mov	r1, r7
 8004bca:	9008      	str	r0, [sp, #32]
 8004bcc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004bd0:	4648      	mov	r0, r9
 8004bd2:	f000 fca1 	bl	8005518 <__mcmp>
 8004bd6:	462a      	mov	r2, r5
 8004bd8:	9009      	str	r0, [sp, #36]	@ 0x24
 8004bda:	4621      	mov	r1, r4
 8004bdc:	4658      	mov	r0, fp
 8004bde:	f000 fcb7 	bl	8005550 <__mdiff>
 8004be2:	68c2      	ldr	r2, [r0, #12]
 8004be4:	4606      	mov	r6, r0
 8004be6:	bb02      	cbnz	r2, 8004c2a <_dtoa_r+0xa22>
 8004be8:	4601      	mov	r1, r0
 8004bea:	4648      	mov	r0, r9
 8004bec:	f000 fc94 	bl	8005518 <__mcmp>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	4631      	mov	r1, r6
 8004bf4:	4658      	mov	r0, fp
 8004bf6:	920c      	str	r2, [sp, #48]	@ 0x30
 8004bf8:	f000 fa0c 	bl	8005014 <_Bfree>
 8004bfc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004bfe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004c00:	9e07      	ldr	r6, [sp, #28]
 8004c02:	ea43 0102 	orr.w	r1, r3, r2
 8004c06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c08:	4319      	orrs	r1, r3
 8004c0a:	d110      	bne.n	8004c2e <_dtoa_r+0xa26>
 8004c0c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004c10:	d029      	beq.n	8004c66 <_dtoa_r+0xa5e>
 8004c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	dd02      	ble.n	8004c1e <_dtoa_r+0xa16>
 8004c18:	9b08      	ldr	r3, [sp, #32]
 8004c1a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004c1e:	9b02      	ldr	r3, [sp, #8]
 8004c20:	f883 8000 	strb.w	r8, [r3]
 8004c24:	e63b      	b.n	800489e <_dtoa_r+0x696>
 8004c26:	4628      	mov	r0, r5
 8004c28:	e7bb      	b.n	8004ba2 <_dtoa_r+0x99a>
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	e7e1      	b.n	8004bf2 <_dtoa_r+0x9ea>
 8004c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	db04      	blt.n	8004c3e <_dtoa_r+0xa36>
 8004c34:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004c36:	430b      	orrs	r3, r1
 8004c38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004c3a:	430b      	orrs	r3, r1
 8004c3c:	d120      	bne.n	8004c80 <_dtoa_r+0xa78>
 8004c3e:	2a00      	cmp	r2, #0
 8004c40:	dded      	ble.n	8004c1e <_dtoa_r+0xa16>
 8004c42:	4649      	mov	r1, r9
 8004c44:	2201      	movs	r2, #1
 8004c46:	4658      	mov	r0, fp
 8004c48:	f000 fbfa 	bl	8005440 <__lshift>
 8004c4c:	4621      	mov	r1, r4
 8004c4e:	4681      	mov	r9, r0
 8004c50:	f000 fc62 	bl	8005518 <__mcmp>
 8004c54:	2800      	cmp	r0, #0
 8004c56:	dc03      	bgt.n	8004c60 <_dtoa_r+0xa58>
 8004c58:	d1e1      	bne.n	8004c1e <_dtoa_r+0xa16>
 8004c5a:	f018 0f01 	tst.w	r8, #1
 8004c5e:	d0de      	beq.n	8004c1e <_dtoa_r+0xa16>
 8004c60:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004c64:	d1d8      	bne.n	8004c18 <_dtoa_r+0xa10>
 8004c66:	2339      	movs	r3, #57	@ 0x39
 8004c68:	9a02      	ldr	r2, [sp, #8]
 8004c6a:	7013      	strb	r3, [r2, #0]
 8004c6c:	4633      	mov	r3, r6
 8004c6e:	461e      	mov	r6, r3
 8004c70:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004c74:	3b01      	subs	r3, #1
 8004c76:	2a39      	cmp	r2, #57	@ 0x39
 8004c78:	d052      	beq.n	8004d20 <_dtoa_r+0xb18>
 8004c7a:	3201      	adds	r2, #1
 8004c7c:	701a      	strb	r2, [r3, #0]
 8004c7e:	e60e      	b.n	800489e <_dtoa_r+0x696>
 8004c80:	2a00      	cmp	r2, #0
 8004c82:	dd07      	ble.n	8004c94 <_dtoa_r+0xa8c>
 8004c84:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004c88:	d0ed      	beq.n	8004c66 <_dtoa_r+0xa5e>
 8004c8a:	9a02      	ldr	r2, [sp, #8]
 8004c8c:	f108 0301 	add.w	r3, r8, #1
 8004c90:	7013      	strb	r3, [r2, #0]
 8004c92:	e604      	b.n	800489e <_dtoa_r+0x696>
 8004c94:	9b07      	ldr	r3, [sp, #28]
 8004c96:	9a07      	ldr	r2, [sp, #28]
 8004c98:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004c9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d028      	beq.n	8004cf4 <_dtoa_r+0xaec>
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	220a      	movs	r2, #10
 8004ca8:	4658      	mov	r0, fp
 8004caa:	f000 f9d5 	bl	8005058 <__multadd>
 8004cae:	42af      	cmp	r7, r5
 8004cb0:	4681      	mov	r9, r0
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	f04f 020a 	mov.w	r2, #10
 8004cba:	4639      	mov	r1, r7
 8004cbc:	4658      	mov	r0, fp
 8004cbe:	d107      	bne.n	8004cd0 <_dtoa_r+0xac8>
 8004cc0:	f000 f9ca 	bl	8005058 <__multadd>
 8004cc4:	4607      	mov	r7, r0
 8004cc6:	4605      	mov	r5, r0
 8004cc8:	9b07      	ldr	r3, [sp, #28]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	9307      	str	r3, [sp, #28]
 8004cce:	e774      	b.n	8004bba <_dtoa_r+0x9b2>
 8004cd0:	f000 f9c2 	bl	8005058 <__multadd>
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	4607      	mov	r7, r0
 8004cd8:	2300      	movs	r3, #0
 8004cda:	220a      	movs	r2, #10
 8004cdc:	4658      	mov	r0, fp
 8004cde:	f000 f9bb 	bl	8005058 <__multadd>
 8004ce2:	4605      	mov	r5, r0
 8004ce4:	e7f0      	b.n	8004cc8 <_dtoa_r+0xac0>
 8004ce6:	9b08      	ldr	r3, [sp, #32]
 8004ce8:	2700      	movs	r7, #0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	bfcc      	ite	gt
 8004cee:	461e      	movgt	r6, r3
 8004cf0:	2601      	movle	r6, #1
 8004cf2:	4456      	add	r6, sl
 8004cf4:	4649      	mov	r1, r9
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	4658      	mov	r0, fp
 8004cfa:	f000 fba1 	bl	8005440 <__lshift>
 8004cfe:	4621      	mov	r1, r4
 8004d00:	4681      	mov	r9, r0
 8004d02:	f000 fc09 	bl	8005518 <__mcmp>
 8004d06:	2800      	cmp	r0, #0
 8004d08:	dcb0      	bgt.n	8004c6c <_dtoa_r+0xa64>
 8004d0a:	d102      	bne.n	8004d12 <_dtoa_r+0xb0a>
 8004d0c:	f018 0f01 	tst.w	r8, #1
 8004d10:	d1ac      	bne.n	8004c6c <_dtoa_r+0xa64>
 8004d12:	4633      	mov	r3, r6
 8004d14:	461e      	mov	r6, r3
 8004d16:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d1a:	2a30      	cmp	r2, #48	@ 0x30
 8004d1c:	d0fa      	beq.n	8004d14 <_dtoa_r+0xb0c>
 8004d1e:	e5be      	b.n	800489e <_dtoa_r+0x696>
 8004d20:	459a      	cmp	sl, r3
 8004d22:	d1a4      	bne.n	8004c6e <_dtoa_r+0xa66>
 8004d24:	9b04      	ldr	r3, [sp, #16]
 8004d26:	3301      	adds	r3, #1
 8004d28:	9304      	str	r3, [sp, #16]
 8004d2a:	2331      	movs	r3, #49	@ 0x31
 8004d2c:	f88a 3000 	strb.w	r3, [sl]
 8004d30:	e5b5      	b.n	800489e <_dtoa_r+0x696>
 8004d32:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004d34:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004d94 <_dtoa_r+0xb8c>
 8004d38:	b11b      	cbz	r3, 8004d42 <_dtoa_r+0xb3a>
 8004d3a:	f10a 0308 	add.w	r3, sl, #8
 8004d3e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	4650      	mov	r0, sl
 8004d44:	b017      	add	sp, #92	@ 0x5c
 8004d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d4a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	f77f ae3d 	ble.w	80049cc <_dtoa_r+0x7c4>
 8004d52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d54:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d56:	2001      	movs	r0, #1
 8004d58:	e65b      	b.n	8004a12 <_dtoa_r+0x80a>
 8004d5a:	9b08      	ldr	r3, [sp, #32]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f77f aed6 	ble.w	8004b0e <_dtoa_r+0x906>
 8004d62:	4656      	mov	r6, sl
 8004d64:	4621      	mov	r1, r4
 8004d66:	4648      	mov	r0, r9
 8004d68:	f7ff f9c4 	bl	80040f4 <quorem>
 8004d6c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004d70:	9b08      	ldr	r3, [sp, #32]
 8004d72:	f806 8b01 	strb.w	r8, [r6], #1
 8004d76:	eba6 020a 	sub.w	r2, r6, sl
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	ddb3      	ble.n	8004ce6 <_dtoa_r+0xade>
 8004d7e:	4649      	mov	r1, r9
 8004d80:	2300      	movs	r3, #0
 8004d82:	220a      	movs	r2, #10
 8004d84:	4658      	mov	r0, fp
 8004d86:	f000 f967 	bl	8005058 <__multadd>
 8004d8a:	4681      	mov	r9, r0
 8004d8c:	e7ea      	b.n	8004d64 <_dtoa_r+0xb5c>
 8004d8e:	bf00      	nop
 8004d90:	08007857 	.word	0x08007857
 8004d94:	080077db 	.word	0x080077db

08004d98 <_free_r>:
 8004d98:	b538      	push	{r3, r4, r5, lr}
 8004d9a:	4605      	mov	r5, r0
 8004d9c:	2900      	cmp	r1, #0
 8004d9e:	d040      	beq.n	8004e22 <_free_r+0x8a>
 8004da0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004da4:	1f0c      	subs	r4, r1, #4
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	bfb8      	it	lt
 8004daa:	18e4      	addlt	r4, r4, r3
 8004dac:	f000 f8e6 	bl	8004f7c <__malloc_lock>
 8004db0:	4a1c      	ldr	r2, [pc, #112]	@ (8004e24 <_free_r+0x8c>)
 8004db2:	6813      	ldr	r3, [r2, #0]
 8004db4:	b933      	cbnz	r3, 8004dc4 <_free_r+0x2c>
 8004db6:	6063      	str	r3, [r4, #4]
 8004db8:	6014      	str	r4, [r2, #0]
 8004dba:	4628      	mov	r0, r5
 8004dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dc0:	f000 b8e2 	b.w	8004f88 <__malloc_unlock>
 8004dc4:	42a3      	cmp	r3, r4
 8004dc6:	d908      	bls.n	8004dda <_free_r+0x42>
 8004dc8:	6820      	ldr	r0, [r4, #0]
 8004dca:	1821      	adds	r1, r4, r0
 8004dcc:	428b      	cmp	r3, r1
 8004dce:	bf01      	itttt	eq
 8004dd0:	6819      	ldreq	r1, [r3, #0]
 8004dd2:	685b      	ldreq	r3, [r3, #4]
 8004dd4:	1809      	addeq	r1, r1, r0
 8004dd6:	6021      	streq	r1, [r4, #0]
 8004dd8:	e7ed      	b.n	8004db6 <_free_r+0x1e>
 8004dda:	461a      	mov	r2, r3
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	b10b      	cbz	r3, 8004de4 <_free_r+0x4c>
 8004de0:	42a3      	cmp	r3, r4
 8004de2:	d9fa      	bls.n	8004dda <_free_r+0x42>
 8004de4:	6811      	ldr	r1, [r2, #0]
 8004de6:	1850      	adds	r0, r2, r1
 8004de8:	42a0      	cmp	r0, r4
 8004dea:	d10b      	bne.n	8004e04 <_free_r+0x6c>
 8004dec:	6820      	ldr	r0, [r4, #0]
 8004dee:	4401      	add	r1, r0
 8004df0:	1850      	adds	r0, r2, r1
 8004df2:	4283      	cmp	r3, r0
 8004df4:	6011      	str	r1, [r2, #0]
 8004df6:	d1e0      	bne.n	8004dba <_free_r+0x22>
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	4408      	add	r0, r1
 8004dfe:	6010      	str	r0, [r2, #0]
 8004e00:	6053      	str	r3, [r2, #4]
 8004e02:	e7da      	b.n	8004dba <_free_r+0x22>
 8004e04:	d902      	bls.n	8004e0c <_free_r+0x74>
 8004e06:	230c      	movs	r3, #12
 8004e08:	602b      	str	r3, [r5, #0]
 8004e0a:	e7d6      	b.n	8004dba <_free_r+0x22>
 8004e0c:	6820      	ldr	r0, [r4, #0]
 8004e0e:	1821      	adds	r1, r4, r0
 8004e10:	428b      	cmp	r3, r1
 8004e12:	bf01      	itttt	eq
 8004e14:	6819      	ldreq	r1, [r3, #0]
 8004e16:	685b      	ldreq	r3, [r3, #4]
 8004e18:	1809      	addeq	r1, r1, r0
 8004e1a:	6021      	streq	r1, [r4, #0]
 8004e1c:	6063      	str	r3, [r4, #4]
 8004e1e:	6054      	str	r4, [r2, #4]
 8004e20:	e7cb      	b.n	8004dba <_free_r+0x22>
 8004e22:	bd38      	pop	{r3, r4, r5, pc}
 8004e24:	20000398 	.word	0x20000398

08004e28 <malloc>:
 8004e28:	4b02      	ldr	r3, [pc, #8]	@ (8004e34 <malloc+0xc>)
 8004e2a:	4601      	mov	r1, r0
 8004e2c:	6818      	ldr	r0, [r3, #0]
 8004e2e:	f000 b825 	b.w	8004e7c <_malloc_r>
 8004e32:	bf00      	nop
 8004e34:	20000028 	.word	0x20000028

08004e38 <sbrk_aligned>:
 8004e38:	b570      	push	{r4, r5, r6, lr}
 8004e3a:	4e0f      	ldr	r6, [pc, #60]	@ (8004e78 <sbrk_aligned+0x40>)
 8004e3c:	460c      	mov	r4, r1
 8004e3e:	6831      	ldr	r1, [r6, #0]
 8004e40:	4605      	mov	r5, r0
 8004e42:	b911      	cbnz	r1, 8004e4a <sbrk_aligned+0x12>
 8004e44:	f001 fdf6 	bl	8006a34 <_sbrk_r>
 8004e48:	6030      	str	r0, [r6, #0]
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	f001 fdf1 	bl	8006a34 <_sbrk_r>
 8004e52:	1c43      	adds	r3, r0, #1
 8004e54:	d103      	bne.n	8004e5e <sbrk_aligned+0x26>
 8004e56:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	bd70      	pop	{r4, r5, r6, pc}
 8004e5e:	1cc4      	adds	r4, r0, #3
 8004e60:	f024 0403 	bic.w	r4, r4, #3
 8004e64:	42a0      	cmp	r0, r4
 8004e66:	d0f8      	beq.n	8004e5a <sbrk_aligned+0x22>
 8004e68:	1a21      	subs	r1, r4, r0
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	f001 fde2 	bl	8006a34 <_sbrk_r>
 8004e70:	3001      	adds	r0, #1
 8004e72:	d1f2      	bne.n	8004e5a <sbrk_aligned+0x22>
 8004e74:	e7ef      	b.n	8004e56 <sbrk_aligned+0x1e>
 8004e76:	bf00      	nop
 8004e78:	20000394 	.word	0x20000394

08004e7c <_malloc_r>:
 8004e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e80:	1ccd      	adds	r5, r1, #3
 8004e82:	f025 0503 	bic.w	r5, r5, #3
 8004e86:	3508      	adds	r5, #8
 8004e88:	2d0c      	cmp	r5, #12
 8004e8a:	bf38      	it	cc
 8004e8c:	250c      	movcc	r5, #12
 8004e8e:	2d00      	cmp	r5, #0
 8004e90:	4606      	mov	r6, r0
 8004e92:	db01      	blt.n	8004e98 <_malloc_r+0x1c>
 8004e94:	42a9      	cmp	r1, r5
 8004e96:	d904      	bls.n	8004ea2 <_malloc_r+0x26>
 8004e98:	230c      	movs	r3, #12
 8004e9a:	6033      	str	r3, [r6, #0]
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ea2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f78 <_malloc_r+0xfc>
 8004ea6:	f000 f869 	bl	8004f7c <__malloc_lock>
 8004eaa:	f8d8 3000 	ldr.w	r3, [r8]
 8004eae:	461c      	mov	r4, r3
 8004eb0:	bb44      	cbnz	r4, 8004f04 <_malloc_r+0x88>
 8004eb2:	4629      	mov	r1, r5
 8004eb4:	4630      	mov	r0, r6
 8004eb6:	f7ff ffbf 	bl	8004e38 <sbrk_aligned>
 8004eba:	1c43      	adds	r3, r0, #1
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	d158      	bne.n	8004f72 <_malloc_r+0xf6>
 8004ec0:	f8d8 4000 	ldr.w	r4, [r8]
 8004ec4:	4627      	mov	r7, r4
 8004ec6:	2f00      	cmp	r7, #0
 8004ec8:	d143      	bne.n	8004f52 <_malloc_r+0xd6>
 8004eca:	2c00      	cmp	r4, #0
 8004ecc:	d04b      	beq.n	8004f66 <_malloc_r+0xea>
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	4639      	mov	r1, r7
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	eb04 0903 	add.w	r9, r4, r3
 8004ed8:	f001 fdac 	bl	8006a34 <_sbrk_r>
 8004edc:	4581      	cmp	r9, r0
 8004ede:	d142      	bne.n	8004f66 <_malloc_r+0xea>
 8004ee0:	6821      	ldr	r1, [r4, #0]
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	1a6d      	subs	r5, r5, r1
 8004ee6:	4629      	mov	r1, r5
 8004ee8:	f7ff ffa6 	bl	8004e38 <sbrk_aligned>
 8004eec:	3001      	adds	r0, #1
 8004eee:	d03a      	beq.n	8004f66 <_malloc_r+0xea>
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	442b      	add	r3, r5
 8004ef4:	6023      	str	r3, [r4, #0]
 8004ef6:	f8d8 3000 	ldr.w	r3, [r8]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	bb62      	cbnz	r2, 8004f58 <_malloc_r+0xdc>
 8004efe:	f8c8 7000 	str.w	r7, [r8]
 8004f02:	e00f      	b.n	8004f24 <_malloc_r+0xa8>
 8004f04:	6822      	ldr	r2, [r4, #0]
 8004f06:	1b52      	subs	r2, r2, r5
 8004f08:	d420      	bmi.n	8004f4c <_malloc_r+0xd0>
 8004f0a:	2a0b      	cmp	r2, #11
 8004f0c:	d917      	bls.n	8004f3e <_malloc_r+0xc2>
 8004f0e:	1961      	adds	r1, r4, r5
 8004f10:	42a3      	cmp	r3, r4
 8004f12:	6025      	str	r5, [r4, #0]
 8004f14:	bf18      	it	ne
 8004f16:	6059      	strne	r1, [r3, #4]
 8004f18:	6863      	ldr	r3, [r4, #4]
 8004f1a:	bf08      	it	eq
 8004f1c:	f8c8 1000 	streq.w	r1, [r8]
 8004f20:	5162      	str	r2, [r4, r5]
 8004f22:	604b      	str	r3, [r1, #4]
 8004f24:	4630      	mov	r0, r6
 8004f26:	f000 f82f 	bl	8004f88 <__malloc_unlock>
 8004f2a:	f104 000b 	add.w	r0, r4, #11
 8004f2e:	1d23      	adds	r3, r4, #4
 8004f30:	f020 0007 	bic.w	r0, r0, #7
 8004f34:	1ac2      	subs	r2, r0, r3
 8004f36:	bf1c      	itt	ne
 8004f38:	1a1b      	subne	r3, r3, r0
 8004f3a:	50a3      	strne	r3, [r4, r2]
 8004f3c:	e7af      	b.n	8004e9e <_malloc_r+0x22>
 8004f3e:	6862      	ldr	r2, [r4, #4]
 8004f40:	42a3      	cmp	r3, r4
 8004f42:	bf0c      	ite	eq
 8004f44:	f8c8 2000 	streq.w	r2, [r8]
 8004f48:	605a      	strne	r2, [r3, #4]
 8004f4a:	e7eb      	b.n	8004f24 <_malloc_r+0xa8>
 8004f4c:	4623      	mov	r3, r4
 8004f4e:	6864      	ldr	r4, [r4, #4]
 8004f50:	e7ae      	b.n	8004eb0 <_malloc_r+0x34>
 8004f52:	463c      	mov	r4, r7
 8004f54:	687f      	ldr	r7, [r7, #4]
 8004f56:	e7b6      	b.n	8004ec6 <_malloc_r+0x4a>
 8004f58:	461a      	mov	r2, r3
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	42a3      	cmp	r3, r4
 8004f5e:	d1fb      	bne.n	8004f58 <_malloc_r+0xdc>
 8004f60:	2300      	movs	r3, #0
 8004f62:	6053      	str	r3, [r2, #4]
 8004f64:	e7de      	b.n	8004f24 <_malloc_r+0xa8>
 8004f66:	230c      	movs	r3, #12
 8004f68:	4630      	mov	r0, r6
 8004f6a:	6033      	str	r3, [r6, #0]
 8004f6c:	f000 f80c 	bl	8004f88 <__malloc_unlock>
 8004f70:	e794      	b.n	8004e9c <_malloc_r+0x20>
 8004f72:	6005      	str	r5, [r0, #0]
 8004f74:	e7d6      	b.n	8004f24 <_malloc_r+0xa8>
 8004f76:	bf00      	nop
 8004f78:	20000398 	.word	0x20000398

08004f7c <__malloc_lock>:
 8004f7c:	4801      	ldr	r0, [pc, #4]	@ (8004f84 <__malloc_lock+0x8>)
 8004f7e:	f7ff b8a4 	b.w	80040ca <__retarget_lock_acquire_recursive>
 8004f82:	bf00      	nop
 8004f84:	20000390 	.word	0x20000390

08004f88 <__malloc_unlock>:
 8004f88:	4801      	ldr	r0, [pc, #4]	@ (8004f90 <__malloc_unlock+0x8>)
 8004f8a:	f7ff b89f 	b.w	80040cc <__retarget_lock_release_recursive>
 8004f8e:	bf00      	nop
 8004f90:	20000390 	.word	0x20000390

08004f94 <_Balloc>:
 8004f94:	b570      	push	{r4, r5, r6, lr}
 8004f96:	69c6      	ldr	r6, [r0, #28]
 8004f98:	4604      	mov	r4, r0
 8004f9a:	460d      	mov	r5, r1
 8004f9c:	b976      	cbnz	r6, 8004fbc <_Balloc+0x28>
 8004f9e:	2010      	movs	r0, #16
 8004fa0:	f7ff ff42 	bl	8004e28 <malloc>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	61e0      	str	r0, [r4, #28]
 8004fa8:	b920      	cbnz	r0, 8004fb4 <_Balloc+0x20>
 8004faa:	216b      	movs	r1, #107	@ 0x6b
 8004fac:	4b17      	ldr	r3, [pc, #92]	@ (800500c <_Balloc+0x78>)
 8004fae:	4818      	ldr	r0, [pc, #96]	@ (8005010 <_Balloc+0x7c>)
 8004fb0:	f001 fd64 	bl	8006a7c <__assert_func>
 8004fb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004fb8:	6006      	str	r6, [r0, #0]
 8004fba:	60c6      	str	r6, [r0, #12]
 8004fbc:	69e6      	ldr	r6, [r4, #28]
 8004fbe:	68f3      	ldr	r3, [r6, #12]
 8004fc0:	b183      	cbz	r3, 8004fe4 <_Balloc+0x50>
 8004fc2:	69e3      	ldr	r3, [r4, #28]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004fca:	b9b8      	cbnz	r0, 8004ffc <_Balloc+0x68>
 8004fcc:	2101      	movs	r1, #1
 8004fce:	fa01 f605 	lsl.w	r6, r1, r5
 8004fd2:	1d72      	adds	r2, r6, #5
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	0092      	lsls	r2, r2, #2
 8004fd8:	f001 fd6e 	bl	8006ab8 <_calloc_r>
 8004fdc:	b160      	cbz	r0, 8004ff8 <_Balloc+0x64>
 8004fde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004fe2:	e00e      	b.n	8005002 <_Balloc+0x6e>
 8004fe4:	2221      	movs	r2, #33	@ 0x21
 8004fe6:	2104      	movs	r1, #4
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f001 fd65 	bl	8006ab8 <_calloc_r>
 8004fee:	69e3      	ldr	r3, [r4, #28]
 8004ff0:	60f0      	str	r0, [r6, #12]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e4      	bne.n	8004fc2 <_Balloc+0x2e>
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
 8004ffc:	6802      	ldr	r2, [r0, #0]
 8004ffe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005002:	2300      	movs	r3, #0
 8005004:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005008:	e7f7      	b.n	8004ffa <_Balloc+0x66>
 800500a:	bf00      	nop
 800500c:	080077e8 	.word	0x080077e8
 8005010:	08007868 	.word	0x08007868

08005014 <_Bfree>:
 8005014:	b570      	push	{r4, r5, r6, lr}
 8005016:	69c6      	ldr	r6, [r0, #28]
 8005018:	4605      	mov	r5, r0
 800501a:	460c      	mov	r4, r1
 800501c:	b976      	cbnz	r6, 800503c <_Bfree+0x28>
 800501e:	2010      	movs	r0, #16
 8005020:	f7ff ff02 	bl	8004e28 <malloc>
 8005024:	4602      	mov	r2, r0
 8005026:	61e8      	str	r0, [r5, #28]
 8005028:	b920      	cbnz	r0, 8005034 <_Bfree+0x20>
 800502a:	218f      	movs	r1, #143	@ 0x8f
 800502c:	4b08      	ldr	r3, [pc, #32]	@ (8005050 <_Bfree+0x3c>)
 800502e:	4809      	ldr	r0, [pc, #36]	@ (8005054 <_Bfree+0x40>)
 8005030:	f001 fd24 	bl	8006a7c <__assert_func>
 8005034:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005038:	6006      	str	r6, [r0, #0]
 800503a:	60c6      	str	r6, [r0, #12]
 800503c:	b13c      	cbz	r4, 800504e <_Bfree+0x3a>
 800503e:	69eb      	ldr	r3, [r5, #28]
 8005040:	6862      	ldr	r2, [r4, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005048:	6021      	str	r1, [r4, #0]
 800504a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800504e:	bd70      	pop	{r4, r5, r6, pc}
 8005050:	080077e8 	.word	0x080077e8
 8005054:	08007868 	.word	0x08007868

08005058 <__multadd>:
 8005058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800505c:	4607      	mov	r7, r0
 800505e:	460c      	mov	r4, r1
 8005060:	461e      	mov	r6, r3
 8005062:	2000      	movs	r0, #0
 8005064:	690d      	ldr	r5, [r1, #16]
 8005066:	f101 0c14 	add.w	ip, r1, #20
 800506a:	f8dc 3000 	ldr.w	r3, [ip]
 800506e:	3001      	adds	r0, #1
 8005070:	b299      	uxth	r1, r3
 8005072:	fb02 6101 	mla	r1, r2, r1, r6
 8005076:	0c1e      	lsrs	r6, r3, #16
 8005078:	0c0b      	lsrs	r3, r1, #16
 800507a:	fb02 3306 	mla	r3, r2, r6, r3
 800507e:	b289      	uxth	r1, r1
 8005080:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005084:	4285      	cmp	r5, r0
 8005086:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800508a:	f84c 1b04 	str.w	r1, [ip], #4
 800508e:	dcec      	bgt.n	800506a <__multadd+0x12>
 8005090:	b30e      	cbz	r6, 80050d6 <__multadd+0x7e>
 8005092:	68a3      	ldr	r3, [r4, #8]
 8005094:	42ab      	cmp	r3, r5
 8005096:	dc19      	bgt.n	80050cc <__multadd+0x74>
 8005098:	6861      	ldr	r1, [r4, #4]
 800509a:	4638      	mov	r0, r7
 800509c:	3101      	adds	r1, #1
 800509e:	f7ff ff79 	bl	8004f94 <_Balloc>
 80050a2:	4680      	mov	r8, r0
 80050a4:	b928      	cbnz	r0, 80050b2 <__multadd+0x5a>
 80050a6:	4602      	mov	r2, r0
 80050a8:	21ba      	movs	r1, #186	@ 0xba
 80050aa:	4b0c      	ldr	r3, [pc, #48]	@ (80050dc <__multadd+0x84>)
 80050ac:	480c      	ldr	r0, [pc, #48]	@ (80050e0 <__multadd+0x88>)
 80050ae:	f001 fce5 	bl	8006a7c <__assert_func>
 80050b2:	6922      	ldr	r2, [r4, #16]
 80050b4:	f104 010c 	add.w	r1, r4, #12
 80050b8:	3202      	adds	r2, #2
 80050ba:	0092      	lsls	r2, r2, #2
 80050bc:	300c      	adds	r0, #12
 80050be:	f001 fcc9 	bl	8006a54 <memcpy>
 80050c2:	4621      	mov	r1, r4
 80050c4:	4638      	mov	r0, r7
 80050c6:	f7ff ffa5 	bl	8005014 <_Bfree>
 80050ca:	4644      	mov	r4, r8
 80050cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80050d0:	3501      	adds	r5, #1
 80050d2:	615e      	str	r6, [r3, #20]
 80050d4:	6125      	str	r5, [r4, #16]
 80050d6:	4620      	mov	r0, r4
 80050d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050dc:	08007857 	.word	0x08007857
 80050e0:	08007868 	.word	0x08007868

080050e4 <__s2b>:
 80050e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050e8:	4615      	mov	r5, r2
 80050ea:	2209      	movs	r2, #9
 80050ec:	461f      	mov	r7, r3
 80050ee:	3308      	adds	r3, #8
 80050f0:	460c      	mov	r4, r1
 80050f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80050f6:	4606      	mov	r6, r0
 80050f8:	2201      	movs	r2, #1
 80050fa:	2100      	movs	r1, #0
 80050fc:	429a      	cmp	r2, r3
 80050fe:	db09      	blt.n	8005114 <__s2b+0x30>
 8005100:	4630      	mov	r0, r6
 8005102:	f7ff ff47 	bl	8004f94 <_Balloc>
 8005106:	b940      	cbnz	r0, 800511a <__s2b+0x36>
 8005108:	4602      	mov	r2, r0
 800510a:	21d3      	movs	r1, #211	@ 0xd3
 800510c:	4b18      	ldr	r3, [pc, #96]	@ (8005170 <__s2b+0x8c>)
 800510e:	4819      	ldr	r0, [pc, #100]	@ (8005174 <__s2b+0x90>)
 8005110:	f001 fcb4 	bl	8006a7c <__assert_func>
 8005114:	0052      	lsls	r2, r2, #1
 8005116:	3101      	adds	r1, #1
 8005118:	e7f0      	b.n	80050fc <__s2b+0x18>
 800511a:	9b08      	ldr	r3, [sp, #32]
 800511c:	2d09      	cmp	r5, #9
 800511e:	6143      	str	r3, [r0, #20]
 8005120:	f04f 0301 	mov.w	r3, #1
 8005124:	6103      	str	r3, [r0, #16]
 8005126:	dd16      	ble.n	8005156 <__s2b+0x72>
 8005128:	f104 0909 	add.w	r9, r4, #9
 800512c:	46c8      	mov	r8, r9
 800512e:	442c      	add	r4, r5
 8005130:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005134:	4601      	mov	r1, r0
 8005136:	220a      	movs	r2, #10
 8005138:	4630      	mov	r0, r6
 800513a:	3b30      	subs	r3, #48	@ 0x30
 800513c:	f7ff ff8c 	bl	8005058 <__multadd>
 8005140:	45a0      	cmp	r8, r4
 8005142:	d1f5      	bne.n	8005130 <__s2b+0x4c>
 8005144:	f1a5 0408 	sub.w	r4, r5, #8
 8005148:	444c      	add	r4, r9
 800514a:	1b2d      	subs	r5, r5, r4
 800514c:	1963      	adds	r3, r4, r5
 800514e:	42bb      	cmp	r3, r7
 8005150:	db04      	blt.n	800515c <__s2b+0x78>
 8005152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005156:	2509      	movs	r5, #9
 8005158:	340a      	adds	r4, #10
 800515a:	e7f6      	b.n	800514a <__s2b+0x66>
 800515c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005160:	4601      	mov	r1, r0
 8005162:	220a      	movs	r2, #10
 8005164:	4630      	mov	r0, r6
 8005166:	3b30      	subs	r3, #48	@ 0x30
 8005168:	f7ff ff76 	bl	8005058 <__multadd>
 800516c:	e7ee      	b.n	800514c <__s2b+0x68>
 800516e:	bf00      	nop
 8005170:	08007857 	.word	0x08007857
 8005174:	08007868 	.word	0x08007868

08005178 <__hi0bits>:
 8005178:	4603      	mov	r3, r0
 800517a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800517e:	bf3a      	itte	cc
 8005180:	0403      	lslcc	r3, r0, #16
 8005182:	2010      	movcc	r0, #16
 8005184:	2000      	movcs	r0, #0
 8005186:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800518a:	bf3c      	itt	cc
 800518c:	021b      	lslcc	r3, r3, #8
 800518e:	3008      	addcc	r0, #8
 8005190:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005194:	bf3c      	itt	cc
 8005196:	011b      	lslcc	r3, r3, #4
 8005198:	3004      	addcc	r0, #4
 800519a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800519e:	bf3c      	itt	cc
 80051a0:	009b      	lslcc	r3, r3, #2
 80051a2:	3002      	addcc	r0, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	db05      	blt.n	80051b4 <__hi0bits+0x3c>
 80051a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80051ac:	f100 0001 	add.w	r0, r0, #1
 80051b0:	bf08      	it	eq
 80051b2:	2020      	moveq	r0, #32
 80051b4:	4770      	bx	lr

080051b6 <__lo0bits>:
 80051b6:	6803      	ldr	r3, [r0, #0]
 80051b8:	4602      	mov	r2, r0
 80051ba:	f013 0007 	ands.w	r0, r3, #7
 80051be:	d00b      	beq.n	80051d8 <__lo0bits+0x22>
 80051c0:	07d9      	lsls	r1, r3, #31
 80051c2:	d421      	bmi.n	8005208 <__lo0bits+0x52>
 80051c4:	0798      	lsls	r0, r3, #30
 80051c6:	bf49      	itett	mi
 80051c8:	085b      	lsrmi	r3, r3, #1
 80051ca:	089b      	lsrpl	r3, r3, #2
 80051cc:	2001      	movmi	r0, #1
 80051ce:	6013      	strmi	r3, [r2, #0]
 80051d0:	bf5c      	itt	pl
 80051d2:	2002      	movpl	r0, #2
 80051d4:	6013      	strpl	r3, [r2, #0]
 80051d6:	4770      	bx	lr
 80051d8:	b299      	uxth	r1, r3
 80051da:	b909      	cbnz	r1, 80051e0 <__lo0bits+0x2a>
 80051dc:	2010      	movs	r0, #16
 80051de:	0c1b      	lsrs	r3, r3, #16
 80051e0:	b2d9      	uxtb	r1, r3
 80051e2:	b909      	cbnz	r1, 80051e8 <__lo0bits+0x32>
 80051e4:	3008      	adds	r0, #8
 80051e6:	0a1b      	lsrs	r3, r3, #8
 80051e8:	0719      	lsls	r1, r3, #28
 80051ea:	bf04      	itt	eq
 80051ec:	091b      	lsreq	r3, r3, #4
 80051ee:	3004      	addeq	r0, #4
 80051f0:	0799      	lsls	r1, r3, #30
 80051f2:	bf04      	itt	eq
 80051f4:	089b      	lsreq	r3, r3, #2
 80051f6:	3002      	addeq	r0, #2
 80051f8:	07d9      	lsls	r1, r3, #31
 80051fa:	d403      	bmi.n	8005204 <__lo0bits+0x4e>
 80051fc:	085b      	lsrs	r3, r3, #1
 80051fe:	f100 0001 	add.w	r0, r0, #1
 8005202:	d003      	beq.n	800520c <__lo0bits+0x56>
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	4770      	bx	lr
 8005208:	2000      	movs	r0, #0
 800520a:	4770      	bx	lr
 800520c:	2020      	movs	r0, #32
 800520e:	4770      	bx	lr

08005210 <__i2b>:
 8005210:	b510      	push	{r4, lr}
 8005212:	460c      	mov	r4, r1
 8005214:	2101      	movs	r1, #1
 8005216:	f7ff febd 	bl	8004f94 <_Balloc>
 800521a:	4602      	mov	r2, r0
 800521c:	b928      	cbnz	r0, 800522a <__i2b+0x1a>
 800521e:	f240 1145 	movw	r1, #325	@ 0x145
 8005222:	4b04      	ldr	r3, [pc, #16]	@ (8005234 <__i2b+0x24>)
 8005224:	4804      	ldr	r0, [pc, #16]	@ (8005238 <__i2b+0x28>)
 8005226:	f001 fc29 	bl	8006a7c <__assert_func>
 800522a:	2301      	movs	r3, #1
 800522c:	6144      	str	r4, [r0, #20]
 800522e:	6103      	str	r3, [r0, #16]
 8005230:	bd10      	pop	{r4, pc}
 8005232:	bf00      	nop
 8005234:	08007857 	.word	0x08007857
 8005238:	08007868 	.word	0x08007868

0800523c <__multiply>:
 800523c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005240:	4614      	mov	r4, r2
 8005242:	690a      	ldr	r2, [r1, #16]
 8005244:	6923      	ldr	r3, [r4, #16]
 8005246:	460f      	mov	r7, r1
 8005248:	429a      	cmp	r2, r3
 800524a:	bfa2      	ittt	ge
 800524c:	4623      	movge	r3, r4
 800524e:	460c      	movge	r4, r1
 8005250:	461f      	movge	r7, r3
 8005252:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005256:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800525a:	68a3      	ldr	r3, [r4, #8]
 800525c:	6861      	ldr	r1, [r4, #4]
 800525e:	eb0a 0609 	add.w	r6, sl, r9
 8005262:	42b3      	cmp	r3, r6
 8005264:	b085      	sub	sp, #20
 8005266:	bfb8      	it	lt
 8005268:	3101      	addlt	r1, #1
 800526a:	f7ff fe93 	bl	8004f94 <_Balloc>
 800526e:	b930      	cbnz	r0, 800527e <__multiply+0x42>
 8005270:	4602      	mov	r2, r0
 8005272:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005276:	4b43      	ldr	r3, [pc, #268]	@ (8005384 <__multiply+0x148>)
 8005278:	4843      	ldr	r0, [pc, #268]	@ (8005388 <__multiply+0x14c>)
 800527a:	f001 fbff 	bl	8006a7c <__assert_func>
 800527e:	f100 0514 	add.w	r5, r0, #20
 8005282:	462b      	mov	r3, r5
 8005284:	2200      	movs	r2, #0
 8005286:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800528a:	4543      	cmp	r3, r8
 800528c:	d321      	bcc.n	80052d2 <__multiply+0x96>
 800528e:	f107 0114 	add.w	r1, r7, #20
 8005292:	f104 0214 	add.w	r2, r4, #20
 8005296:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800529a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800529e:	9302      	str	r3, [sp, #8]
 80052a0:	1b13      	subs	r3, r2, r4
 80052a2:	3b15      	subs	r3, #21
 80052a4:	f023 0303 	bic.w	r3, r3, #3
 80052a8:	3304      	adds	r3, #4
 80052aa:	f104 0715 	add.w	r7, r4, #21
 80052ae:	42ba      	cmp	r2, r7
 80052b0:	bf38      	it	cc
 80052b2:	2304      	movcc	r3, #4
 80052b4:	9301      	str	r3, [sp, #4]
 80052b6:	9b02      	ldr	r3, [sp, #8]
 80052b8:	9103      	str	r1, [sp, #12]
 80052ba:	428b      	cmp	r3, r1
 80052bc:	d80c      	bhi.n	80052d8 <__multiply+0x9c>
 80052be:	2e00      	cmp	r6, #0
 80052c0:	dd03      	ble.n	80052ca <__multiply+0x8e>
 80052c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d05a      	beq.n	8005380 <__multiply+0x144>
 80052ca:	6106      	str	r6, [r0, #16]
 80052cc:	b005      	add	sp, #20
 80052ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d2:	f843 2b04 	str.w	r2, [r3], #4
 80052d6:	e7d8      	b.n	800528a <__multiply+0x4e>
 80052d8:	f8b1 a000 	ldrh.w	sl, [r1]
 80052dc:	f1ba 0f00 	cmp.w	sl, #0
 80052e0:	d023      	beq.n	800532a <__multiply+0xee>
 80052e2:	46a9      	mov	r9, r5
 80052e4:	f04f 0c00 	mov.w	ip, #0
 80052e8:	f104 0e14 	add.w	lr, r4, #20
 80052ec:	f85e 7b04 	ldr.w	r7, [lr], #4
 80052f0:	f8d9 3000 	ldr.w	r3, [r9]
 80052f4:	fa1f fb87 	uxth.w	fp, r7
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	fb0a 330b 	mla	r3, sl, fp, r3
 80052fe:	4463      	add	r3, ip
 8005300:	f8d9 c000 	ldr.w	ip, [r9]
 8005304:	0c3f      	lsrs	r7, r7, #16
 8005306:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800530a:	fb0a c707 	mla	r7, sl, r7, ip
 800530e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005312:	b29b      	uxth	r3, r3
 8005314:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005318:	4572      	cmp	r2, lr
 800531a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800531e:	f849 3b04 	str.w	r3, [r9], #4
 8005322:	d8e3      	bhi.n	80052ec <__multiply+0xb0>
 8005324:	9b01      	ldr	r3, [sp, #4]
 8005326:	f845 c003 	str.w	ip, [r5, r3]
 800532a:	9b03      	ldr	r3, [sp, #12]
 800532c:	3104      	adds	r1, #4
 800532e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005332:	f1b9 0f00 	cmp.w	r9, #0
 8005336:	d021      	beq.n	800537c <__multiply+0x140>
 8005338:	46ae      	mov	lr, r5
 800533a:	f04f 0a00 	mov.w	sl, #0
 800533e:	682b      	ldr	r3, [r5, #0]
 8005340:	f104 0c14 	add.w	ip, r4, #20
 8005344:	f8bc b000 	ldrh.w	fp, [ip]
 8005348:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800534c:	b29b      	uxth	r3, r3
 800534e:	fb09 770b 	mla	r7, r9, fp, r7
 8005352:	4457      	add	r7, sl
 8005354:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005358:	f84e 3b04 	str.w	r3, [lr], #4
 800535c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005360:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005364:	f8be 3000 	ldrh.w	r3, [lr]
 8005368:	4562      	cmp	r2, ip
 800536a:	fb09 330a 	mla	r3, r9, sl, r3
 800536e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005372:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005376:	d8e5      	bhi.n	8005344 <__multiply+0x108>
 8005378:	9f01      	ldr	r7, [sp, #4]
 800537a:	51eb      	str	r3, [r5, r7]
 800537c:	3504      	adds	r5, #4
 800537e:	e79a      	b.n	80052b6 <__multiply+0x7a>
 8005380:	3e01      	subs	r6, #1
 8005382:	e79c      	b.n	80052be <__multiply+0x82>
 8005384:	08007857 	.word	0x08007857
 8005388:	08007868 	.word	0x08007868

0800538c <__pow5mult>:
 800538c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005390:	4615      	mov	r5, r2
 8005392:	f012 0203 	ands.w	r2, r2, #3
 8005396:	4607      	mov	r7, r0
 8005398:	460e      	mov	r6, r1
 800539a:	d007      	beq.n	80053ac <__pow5mult+0x20>
 800539c:	4c25      	ldr	r4, [pc, #148]	@ (8005434 <__pow5mult+0xa8>)
 800539e:	3a01      	subs	r2, #1
 80053a0:	2300      	movs	r3, #0
 80053a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80053a6:	f7ff fe57 	bl	8005058 <__multadd>
 80053aa:	4606      	mov	r6, r0
 80053ac:	10ad      	asrs	r5, r5, #2
 80053ae:	d03d      	beq.n	800542c <__pow5mult+0xa0>
 80053b0:	69fc      	ldr	r4, [r7, #28]
 80053b2:	b97c      	cbnz	r4, 80053d4 <__pow5mult+0x48>
 80053b4:	2010      	movs	r0, #16
 80053b6:	f7ff fd37 	bl	8004e28 <malloc>
 80053ba:	4602      	mov	r2, r0
 80053bc:	61f8      	str	r0, [r7, #28]
 80053be:	b928      	cbnz	r0, 80053cc <__pow5mult+0x40>
 80053c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80053c4:	4b1c      	ldr	r3, [pc, #112]	@ (8005438 <__pow5mult+0xac>)
 80053c6:	481d      	ldr	r0, [pc, #116]	@ (800543c <__pow5mult+0xb0>)
 80053c8:	f001 fb58 	bl	8006a7c <__assert_func>
 80053cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80053d0:	6004      	str	r4, [r0, #0]
 80053d2:	60c4      	str	r4, [r0, #12]
 80053d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80053d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80053dc:	b94c      	cbnz	r4, 80053f2 <__pow5mult+0x66>
 80053de:	f240 2171 	movw	r1, #625	@ 0x271
 80053e2:	4638      	mov	r0, r7
 80053e4:	f7ff ff14 	bl	8005210 <__i2b>
 80053e8:	2300      	movs	r3, #0
 80053ea:	4604      	mov	r4, r0
 80053ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80053f0:	6003      	str	r3, [r0, #0]
 80053f2:	f04f 0900 	mov.w	r9, #0
 80053f6:	07eb      	lsls	r3, r5, #31
 80053f8:	d50a      	bpl.n	8005410 <__pow5mult+0x84>
 80053fa:	4631      	mov	r1, r6
 80053fc:	4622      	mov	r2, r4
 80053fe:	4638      	mov	r0, r7
 8005400:	f7ff ff1c 	bl	800523c <__multiply>
 8005404:	4680      	mov	r8, r0
 8005406:	4631      	mov	r1, r6
 8005408:	4638      	mov	r0, r7
 800540a:	f7ff fe03 	bl	8005014 <_Bfree>
 800540e:	4646      	mov	r6, r8
 8005410:	106d      	asrs	r5, r5, #1
 8005412:	d00b      	beq.n	800542c <__pow5mult+0xa0>
 8005414:	6820      	ldr	r0, [r4, #0]
 8005416:	b938      	cbnz	r0, 8005428 <__pow5mult+0x9c>
 8005418:	4622      	mov	r2, r4
 800541a:	4621      	mov	r1, r4
 800541c:	4638      	mov	r0, r7
 800541e:	f7ff ff0d 	bl	800523c <__multiply>
 8005422:	6020      	str	r0, [r4, #0]
 8005424:	f8c0 9000 	str.w	r9, [r0]
 8005428:	4604      	mov	r4, r0
 800542a:	e7e4      	b.n	80053f6 <__pow5mult+0x6a>
 800542c:	4630      	mov	r0, r6
 800542e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005432:	bf00      	nop
 8005434:	080078c4 	.word	0x080078c4
 8005438:	080077e8 	.word	0x080077e8
 800543c:	08007868 	.word	0x08007868

08005440 <__lshift>:
 8005440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005444:	460c      	mov	r4, r1
 8005446:	4607      	mov	r7, r0
 8005448:	4691      	mov	r9, r2
 800544a:	6923      	ldr	r3, [r4, #16]
 800544c:	6849      	ldr	r1, [r1, #4]
 800544e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005452:	68a3      	ldr	r3, [r4, #8]
 8005454:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005458:	f108 0601 	add.w	r6, r8, #1
 800545c:	42b3      	cmp	r3, r6
 800545e:	db0b      	blt.n	8005478 <__lshift+0x38>
 8005460:	4638      	mov	r0, r7
 8005462:	f7ff fd97 	bl	8004f94 <_Balloc>
 8005466:	4605      	mov	r5, r0
 8005468:	b948      	cbnz	r0, 800547e <__lshift+0x3e>
 800546a:	4602      	mov	r2, r0
 800546c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005470:	4b27      	ldr	r3, [pc, #156]	@ (8005510 <__lshift+0xd0>)
 8005472:	4828      	ldr	r0, [pc, #160]	@ (8005514 <__lshift+0xd4>)
 8005474:	f001 fb02 	bl	8006a7c <__assert_func>
 8005478:	3101      	adds	r1, #1
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	e7ee      	b.n	800545c <__lshift+0x1c>
 800547e:	2300      	movs	r3, #0
 8005480:	f100 0114 	add.w	r1, r0, #20
 8005484:	f100 0210 	add.w	r2, r0, #16
 8005488:	4618      	mov	r0, r3
 800548a:	4553      	cmp	r3, sl
 800548c:	db33      	blt.n	80054f6 <__lshift+0xb6>
 800548e:	6920      	ldr	r0, [r4, #16]
 8005490:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005494:	f104 0314 	add.w	r3, r4, #20
 8005498:	f019 091f 	ands.w	r9, r9, #31
 800549c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80054a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80054a4:	d02b      	beq.n	80054fe <__lshift+0xbe>
 80054a6:	468a      	mov	sl, r1
 80054a8:	2200      	movs	r2, #0
 80054aa:	f1c9 0e20 	rsb	lr, r9, #32
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	fa00 f009 	lsl.w	r0, r0, r9
 80054b4:	4310      	orrs	r0, r2
 80054b6:	f84a 0b04 	str.w	r0, [sl], #4
 80054ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80054be:	459c      	cmp	ip, r3
 80054c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80054c4:	d8f3      	bhi.n	80054ae <__lshift+0x6e>
 80054c6:	ebac 0304 	sub.w	r3, ip, r4
 80054ca:	3b15      	subs	r3, #21
 80054cc:	f023 0303 	bic.w	r3, r3, #3
 80054d0:	3304      	adds	r3, #4
 80054d2:	f104 0015 	add.w	r0, r4, #21
 80054d6:	4584      	cmp	ip, r0
 80054d8:	bf38      	it	cc
 80054da:	2304      	movcc	r3, #4
 80054dc:	50ca      	str	r2, [r1, r3]
 80054de:	b10a      	cbz	r2, 80054e4 <__lshift+0xa4>
 80054e0:	f108 0602 	add.w	r6, r8, #2
 80054e4:	3e01      	subs	r6, #1
 80054e6:	4638      	mov	r0, r7
 80054e8:	4621      	mov	r1, r4
 80054ea:	612e      	str	r6, [r5, #16]
 80054ec:	f7ff fd92 	bl	8005014 <_Bfree>
 80054f0:	4628      	mov	r0, r5
 80054f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80054fa:	3301      	adds	r3, #1
 80054fc:	e7c5      	b.n	800548a <__lshift+0x4a>
 80054fe:	3904      	subs	r1, #4
 8005500:	f853 2b04 	ldr.w	r2, [r3], #4
 8005504:	459c      	cmp	ip, r3
 8005506:	f841 2f04 	str.w	r2, [r1, #4]!
 800550a:	d8f9      	bhi.n	8005500 <__lshift+0xc0>
 800550c:	e7ea      	b.n	80054e4 <__lshift+0xa4>
 800550e:	bf00      	nop
 8005510:	08007857 	.word	0x08007857
 8005514:	08007868 	.word	0x08007868

08005518 <__mcmp>:
 8005518:	4603      	mov	r3, r0
 800551a:	690a      	ldr	r2, [r1, #16]
 800551c:	6900      	ldr	r0, [r0, #16]
 800551e:	b530      	push	{r4, r5, lr}
 8005520:	1a80      	subs	r0, r0, r2
 8005522:	d10e      	bne.n	8005542 <__mcmp+0x2a>
 8005524:	3314      	adds	r3, #20
 8005526:	3114      	adds	r1, #20
 8005528:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800552c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005530:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005534:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005538:	4295      	cmp	r5, r2
 800553a:	d003      	beq.n	8005544 <__mcmp+0x2c>
 800553c:	d205      	bcs.n	800554a <__mcmp+0x32>
 800553e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005542:	bd30      	pop	{r4, r5, pc}
 8005544:	42a3      	cmp	r3, r4
 8005546:	d3f3      	bcc.n	8005530 <__mcmp+0x18>
 8005548:	e7fb      	b.n	8005542 <__mcmp+0x2a>
 800554a:	2001      	movs	r0, #1
 800554c:	e7f9      	b.n	8005542 <__mcmp+0x2a>
	...

08005550 <__mdiff>:
 8005550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005554:	4689      	mov	r9, r1
 8005556:	4606      	mov	r6, r0
 8005558:	4611      	mov	r1, r2
 800555a:	4648      	mov	r0, r9
 800555c:	4614      	mov	r4, r2
 800555e:	f7ff ffdb 	bl	8005518 <__mcmp>
 8005562:	1e05      	subs	r5, r0, #0
 8005564:	d112      	bne.n	800558c <__mdiff+0x3c>
 8005566:	4629      	mov	r1, r5
 8005568:	4630      	mov	r0, r6
 800556a:	f7ff fd13 	bl	8004f94 <_Balloc>
 800556e:	4602      	mov	r2, r0
 8005570:	b928      	cbnz	r0, 800557e <__mdiff+0x2e>
 8005572:	f240 2137 	movw	r1, #567	@ 0x237
 8005576:	4b3e      	ldr	r3, [pc, #248]	@ (8005670 <__mdiff+0x120>)
 8005578:	483e      	ldr	r0, [pc, #248]	@ (8005674 <__mdiff+0x124>)
 800557a:	f001 fa7f 	bl	8006a7c <__assert_func>
 800557e:	2301      	movs	r3, #1
 8005580:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005584:	4610      	mov	r0, r2
 8005586:	b003      	add	sp, #12
 8005588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800558c:	bfbc      	itt	lt
 800558e:	464b      	movlt	r3, r9
 8005590:	46a1      	movlt	r9, r4
 8005592:	4630      	mov	r0, r6
 8005594:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005598:	bfba      	itte	lt
 800559a:	461c      	movlt	r4, r3
 800559c:	2501      	movlt	r5, #1
 800559e:	2500      	movge	r5, #0
 80055a0:	f7ff fcf8 	bl	8004f94 <_Balloc>
 80055a4:	4602      	mov	r2, r0
 80055a6:	b918      	cbnz	r0, 80055b0 <__mdiff+0x60>
 80055a8:	f240 2145 	movw	r1, #581	@ 0x245
 80055ac:	4b30      	ldr	r3, [pc, #192]	@ (8005670 <__mdiff+0x120>)
 80055ae:	e7e3      	b.n	8005578 <__mdiff+0x28>
 80055b0:	f100 0b14 	add.w	fp, r0, #20
 80055b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80055b8:	f109 0310 	add.w	r3, r9, #16
 80055bc:	60c5      	str	r5, [r0, #12]
 80055be:	f04f 0c00 	mov.w	ip, #0
 80055c2:	f109 0514 	add.w	r5, r9, #20
 80055c6:	46d9      	mov	r9, fp
 80055c8:	6926      	ldr	r6, [r4, #16]
 80055ca:	f104 0e14 	add.w	lr, r4, #20
 80055ce:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80055d2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80055d6:	9301      	str	r3, [sp, #4]
 80055d8:	9b01      	ldr	r3, [sp, #4]
 80055da:	f85e 0b04 	ldr.w	r0, [lr], #4
 80055de:	f853 af04 	ldr.w	sl, [r3, #4]!
 80055e2:	b281      	uxth	r1, r0
 80055e4:	9301      	str	r3, [sp, #4]
 80055e6:	fa1f f38a 	uxth.w	r3, sl
 80055ea:	1a5b      	subs	r3, r3, r1
 80055ec:	0c00      	lsrs	r0, r0, #16
 80055ee:	4463      	add	r3, ip
 80055f0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80055f4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80055fe:	4576      	cmp	r6, lr
 8005600:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005604:	f849 3b04 	str.w	r3, [r9], #4
 8005608:	d8e6      	bhi.n	80055d8 <__mdiff+0x88>
 800560a:	1b33      	subs	r3, r6, r4
 800560c:	3b15      	subs	r3, #21
 800560e:	f023 0303 	bic.w	r3, r3, #3
 8005612:	3415      	adds	r4, #21
 8005614:	3304      	adds	r3, #4
 8005616:	42a6      	cmp	r6, r4
 8005618:	bf38      	it	cc
 800561a:	2304      	movcc	r3, #4
 800561c:	441d      	add	r5, r3
 800561e:	445b      	add	r3, fp
 8005620:	461e      	mov	r6, r3
 8005622:	462c      	mov	r4, r5
 8005624:	4544      	cmp	r4, r8
 8005626:	d30e      	bcc.n	8005646 <__mdiff+0xf6>
 8005628:	f108 0103 	add.w	r1, r8, #3
 800562c:	1b49      	subs	r1, r1, r5
 800562e:	f021 0103 	bic.w	r1, r1, #3
 8005632:	3d03      	subs	r5, #3
 8005634:	45a8      	cmp	r8, r5
 8005636:	bf38      	it	cc
 8005638:	2100      	movcc	r1, #0
 800563a:	440b      	add	r3, r1
 800563c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005640:	b199      	cbz	r1, 800566a <__mdiff+0x11a>
 8005642:	6117      	str	r7, [r2, #16]
 8005644:	e79e      	b.n	8005584 <__mdiff+0x34>
 8005646:	46e6      	mov	lr, ip
 8005648:	f854 1b04 	ldr.w	r1, [r4], #4
 800564c:	fa1f fc81 	uxth.w	ip, r1
 8005650:	44f4      	add	ip, lr
 8005652:	0c08      	lsrs	r0, r1, #16
 8005654:	4471      	add	r1, lr
 8005656:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800565a:	b289      	uxth	r1, r1
 800565c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005660:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005664:	f846 1b04 	str.w	r1, [r6], #4
 8005668:	e7dc      	b.n	8005624 <__mdiff+0xd4>
 800566a:	3f01      	subs	r7, #1
 800566c:	e7e6      	b.n	800563c <__mdiff+0xec>
 800566e:	bf00      	nop
 8005670:	08007857 	.word	0x08007857
 8005674:	08007868 	.word	0x08007868

08005678 <__ulp>:
 8005678:	4b0e      	ldr	r3, [pc, #56]	@ (80056b4 <__ulp+0x3c>)
 800567a:	400b      	ands	r3, r1
 800567c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005680:	2b00      	cmp	r3, #0
 8005682:	dc08      	bgt.n	8005696 <__ulp+0x1e>
 8005684:	425b      	negs	r3, r3
 8005686:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800568a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800568e:	da04      	bge.n	800569a <__ulp+0x22>
 8005690:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005694:	4113      	asrs	r3, r2
 8005696:	2200      	movs	r2, #0
 8005698:	e008      	b.n	80056ac <__ulp+0x34>
 800569a:	f1a2 0314 	sub.w	r3, r2, #20
 800569e:	2b1e      	cmp	r3, #30
 80056a0:	bfd6      	itet	le
 80056a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80056a6:	2201      	movgt	r2, #1
 80056a8:	40da      	lsrle	r2, r3
 80056aa:	2300      	movs	r3, #0
 80056ac:	4619      	mov	r1, r3
 80056ae:	4610      	mov	r0, r2
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	7ff00000 	.word	0x7ff00000

080056b8 <__b2d>:
 80056b8:	6902      	ldr	r2, [r0, #16]
 80056ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056bc:	f100 0614 	add.w	r6, r0, #20
 80056c0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80056c4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80056c8:	4f1e      	ldr	r7, [pc, #120]	@ (8005744 <__b2d+0x8c>)
 80056ca:	4620      	mov	r0, r4
 80056cc:	f7ff fd54 	bl	8005178 <__hi0bits>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f1c0 0020 	rsb	r0, r0, #32
 80056d6:	2b0a      	cmp	r3, #10
 80056d8:	f1a2 0504 	sub.w	r5, r2, #4
 80056dc:	6008      	str	r0, [r1, #0]
 80056de:	dc12      	bgt.n	8005706 <__b2d+0x4e>
 80056e0:	42ae      	cmp	r6, r5
 80056e2:	bf2c      	ite	cs
 80056e4:	2200      	movcs	r2, #0
 80056e6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80056ea:	f1c3 0c0b 	rsb	ip, r3, #11
 80056ee:	3315      	adds	r3, #21
 80056f0:	fa24 fe0c 	lsr.w	lr, r4, ip
 80056f4:	fa04 f303 	lsl.w	r3, r4, r3
 80056f8:	fa22 f20c 	lsr.w	r2, r2, ip
 80056fc:	ea4e 0107 	orr.w	r1, lr, r7
 8005700:	431a      	orrs	r2, r3
 8005702:	4610      	mov	r0, r2
 8005704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005706:	42ae      	cmp	r6, r5
 8005708:	bf36      	itet	cc
 800570a:	f1a2 0508 	subcc.w	r5, r2, #8
 800570e:	2200      	movcs	r2, #0
 8005710:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005714:	3b0b      	subs	r3, #11
 8005716:	d012      	beq.n	800573e <__b2d+0x86>
 8005718:	f1c3 0720 	rsb	r7, r3, #32
 800571c:	fa22 f107 	lsr.w	r1, r2, r7
 8005720:	409c      	lsls	r4, r3
 8005722:	430c      	orrs	r4, r1
 8005724:	42b5      	cmp	r5, r6
 8005726:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800572a:	bf94      	ite	ls
 800572c:	2400      	movls	r4, #0
 800572e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8005732:	409a      	lsls	r2, r3
 8005734:	40fc      	lsrs	r4, r7
 8005736:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800573a:	4322      	orrs	r2, r4
 800573c:	e7e1      	b.n	8005702 <__b2d+0x4a>
 800573e:	ea44 0107 	orr.w	r1, r4, r7
 8005742:	e7de      	b.n	8005702 <__b2d+0x4a>
 8005744:	3ff00000 	.word	0x3ff00000

08005748 <__d2b>:
 8005748:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800574c:	2101      	movs	r1, #1
 800574e:	4690      	mov	r8, r2
 8005750:	4699      	mov	r9, r3
 8005752:	9e08      	ldr	r6, [sp, #32]
 8005754:	f7ff fc1e 	bl	8004f94 <_Balloc>
 8005758:	4604      	mov	r4, r0
 800575a:	b930      	cbnz	r0, 800576a <__d2b+0x22>
 800575c:	4602      	mov	r2, r0
 800575e:	f240 310f 	movw	r1, #783	@ 0x30f
 8005762:	4b23      	ldr	r3, [pc, #140]	@ (80057f0 <__d2b+0xa8>)
 8005764:	4823      	ldr	r0, [pc, #140]	@ (80057f4 <__d2b+0xac>)
 8005766:	f001 f989 	bl	8006a7c <__assert_func>
 800576a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800576e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005772:	b10d      	cbz	r5, 8005778 <__d2b+0x30>
 8005774:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005778:	9301      	str	r3, [sp, #4]
 800577a:	f1b8 0300 	subs.w	r3, r8, #0
 800577e:	d024      	beq.n	80057ca <__d2b+0x82>
 8005780:	4668      	mov	r0, sp
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	f7ff fd17 	bl	80051b6 <__lo0bits>
 8005788:	e9dd 1200 	ldrd	r1, r2, [sp]
 800578c:	b1d8      	cbz	r0, 80057c6 <__d2b+0x7e>
 800578e:	f1c0 0320 	rsb	r3, r0, #32
 8005792:	fa02 f303 	lsl.w	r3, r2, r3
 8005796:	430b      	orrs	r3, r1
 8005798:	40c2      	lsrs	r2, r0
 800579a:	6163      	str	r3, [r4, #20]
 800579c:	9201      	str	r2, [sp, #4]
 800579e:	9b01      	ldr	r3, [sp, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	bf0c      	ite	eq
 80057a4:	2201      	moveq	r2, #1
 80057a6:	2202      	movne	r2, #2
 80057a8:	61a3      	str	r3, [r4, #24]
 80057aa:	6122      	str	r2, [r4, #16]
 80057ac:	b1ad      	cbz	r5, 80057da <__d2b+0x92>
 80057ae:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80057b2:	4405      	add	r5, r0
 80057b4:	6035      	str	r5, [r6, #0]
 80057b6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80057ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057bc:	6018      	str	r0, [r3, #0]
 80057be:	4620      	mov	r0, r4
 80057c0:	b002      	add	sp, #8
 80057c2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80057c6:	6161      	str	r1, [r4, #20]
 80057c8:	e7e9      	b.n	800579e <__d2b+0x56>
 80057ca:	a801      	add	r0, sp, #4
 80057cc:	f7ff fcf3 	bl	80051b6 <__lo0bits>
 80057d0:	9b01      	ldr	r3, [sp, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	6163      	str	r3, [r4, #20]
 80057d6:	3020      	adds	r0, #32
 80057d8:	e7e7      	b.n	80057aa <__d2b+0x62>
 80057da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80057de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80057e2:	6030      	str	r0, [r6, #0]
 80057e4:	6918      	ldr	r0, [r3, #16]
 80057e6:	f7ff fcc7 	bl	8005178 <__hi0bits>
 80057ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80057ee:	e7e4      	b.n	80057ba <__d2b+0x72>
 80057f0:	08007857 	.word	0x08007857
 80057f4:	08007868 	.word	0x08007868

080057f8 <__ratio>:
 80057f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fc:	b085      	sub	sp, #20
 80057fe:	e9cd 1000 	strd	r1, r0, [sp]
 8005802:	a902      	add	r1, sp, #8
 8005804:	f7ff ff58 	bl	80056b8 <__b2d>
 8005808:	468b      	mov	fp, r1
 800580a:	4606      	mov	r6, r0
 800580c:	460f      	mov	r7, r1
 800580e:	9800      	ldr	r0, [sp, #0]
 8005810:	a903      	add	r1, sp, #12
 8005812:	f7ff ff51 	bl	80056b8 <__b2d>
 8005816:	460d      	mov	r5, r1
 8005818:	9b01      	ldr	r3, [sp, #4]
 800581a:	4689      	mov	r9, r1
 800581c:	6919      	ldr	r1, [r3, #16]
 800581e:	9b00      	ldr	r3, [sp, #0]
 8005820:	4604      	mov	r4, r0
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	4630      	mov	r0, r6
 8005826:	1ac9      	subs	r1, r1, r3
 8005828:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800582c:	1a9b      	subs	r3, r3, r2
 800582e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005832:	2b00      	cmp	r3, #0
 8005834:	bfcd      	iteet	gt
 8005836:	463a      	movgt	r2, r7
 8005838:	462a      	movle	r2, r5
 800583a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800583e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8005842:	bfd8      	it	le
 8005844:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005848:	464b      	mov	r3, r9
 800584a:	4622      	mov	r2, r4
 800584c:	4659      	mov	r1, fp
 800584e:	f7fa ff6d 	bl	800072c <__aeabi_ddiv>
 8005852:	b005      	add	sp, #20
 8005854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005858 <__copybits>:
 8005858:	3901      	subs	r1, #1
 800585a:	b570      	push	{r4, r5, r6, lr}
 800585c:	1149      	asrs	r1, r1, #5
 800585e:	6914      	ldr	r4, [r2, #16]
 8005860:	3101      	adds	r1, #1
 8005862:	f102 0314 	add.w	r3, r2, #20
 8005866:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800586a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800586e:	1f05      	subs	r5, r0, #4
 8005870:	42a3      	cmp	r3, r4
 8005872:	d30c      	bcc.n	800588e <__copybits+0x36>
 8005874:	1aa3      	subs	r3, r4, r2
 8005876:	3b11      	subs	r3, #17
 8005878:	f023 0303 	bic.w	r3, r3, #3
 800587c:	3211      	adds	r2, #17
 800587e:	42a2      	cmp	r2, r4
 8005880:	bf88      	it	hi
 8005882:	2300      	movhi	r3, #0
 8005884:	4418      	add	r0, r3
 8005886:	2300      	movs	r3, #0
 8005888:	4288      	cmp	r0, r1
 800588a:	d305      	bcc.n	8005898 <__copybits+0x40>
 800588c:	bd70      	pop	{r4, r5, r6, pc}
 800588e:	f853 6b04 	ldr.w	r6, [r3], #4
 8005892:	f845 6f04 	str.w	r6, [r5, #4]!
 8005896:	e7eb      	b.n	8005870 <__copybits+0x18>
 8005898:	f840 3b04 	str.w	r3, [r0], #4
 800589c:	e7f4      	b.n	8005888 <__copybits+0x30>

0800589e <__any_on>:
 800589e:	f100 0214 	add.w	r2, r0, #20
 80058a2:	6900      	ldr	r0, [r0, #16]
 80058a4:	114b      	asrs	r3, r1, #5
 80058a6:	4298      	cmp	r0, r3
 80058a8:	b510      	push	{r4, lr}
 80058aa:	db11      	blt.n	80058d0 <__any_on+0x32>
 80058ac:	dd0a      	ble.n	80058c4 <__any_on+0x26>
 80058ae:	f011 011f 	ands.w	r1, r1, #31
 80058b2:	d007      	beq.n	80058c4 <__any_on+0x26>
 80058b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80058b8:	fa24 f001 	lsr.w	r0, r4, r1
 80058bc:	fa00 f101 	lsl.w	r1, r0, r1
 80058c0:	428c      	cmp	r4, r1
 80058c2:	d10b      	bne.n	80058dc <__any_on+0x3e>
 80058c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d803      	bhi.n	80058d4 <__any_on+0x36>
 80058cc:	2000      	movs	r0, #0
 80058ce:	bd10      	pop	{r4, pc}
 80058d0:	4603      	mov	r3, r0
 80058d2:	e7f7      	b.n	80058c4 <__any_on+0x26>
 80058d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80058d8:	2900      	cmp	r1, #0
 80058da:	d0f5      	beq.n	80058c8 <__any_on+0x2a>
 80058dc:	2001      	movs	r0, #1
 80058de:	e7f6      	b.n	80058ce <__any_on+0x30>

080058e0 <sulp>:
 80058e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e4:	460f      	mov	r7, r1
 80058e6:	4690      	mov	r8, r2
 80058e8:	f7ff fec6 	bl	8005678 <__ulp>
 80058ec:	4604      	mov	r4, r0
 80058ee:	460d      	mov	r5, r1
 80058f0:	f1b8 0f00 	cmp.w	r8, #0
 80058f4:	d011      	beq.n	800591a <sulp+0x3a>
 80058f6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80058fa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80058fe:	2b00      	cmp	r3, #0
 8005900:	dd0b      	ble.n	800591a <sulp+0x3a>
 8005902:	2400      	movs	r4, #0
 8005904:	051b      	lsls	r3, r3, #20
 8005906:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800590a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800590e:	4622      	mov	r2, r4
 8005910:	462b      	mov	r3, r5
 8005912:	f7fa fde1 	bl	80004d8 <__aeabi_dmul>
 8005916:	4604      	mov	r4, r0
 8005918:	460d      	mov	r5, r1
 800591a:	4620      	mov	r0, r4
 800591c:	4629      	mov	r1, r5
 800591e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005922:	0000      	movs	r0, r0
 8005924:	0000      	movs	r0, r0
	...

08005928 <_strtod_l>:
 8005928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592c:	b09f      	sub	sp, #124	@ 0x7c
 800592e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005930:	2200      	movs	r2, #0
 8005932:	460c      	mov	r4, r1
 8005934:	921a      	str	r2, [sp, #104]	@ 0x68
 8005936:	f04f 0a00 	mov.w	sl, #0
 800593a:	f04f 0b00 	mov.w	fp, #0
 800593e:	460a      	mov	r2, r1
 8005940:	9005      	str	r0, [sp, #20]
 8005942:	9219      	str	r2, [sp, #100]	@ 0x64
 8005944:	7811      	ldrb	r1, [r2, #0]
 8005946:	292b      	cmp	r1, #43	@ 0x2b
 8005948:	d048      	beq.n	80059dc <_strtod_l+0xb4>
 800594a:	d836      	bhi.n	80059ba <_strtod_l+0x92>
 800594c:	290d      	cmp	r1, #13
 800594e:	d830      	bhi.n	80059b2 <_strtod_l+0x8a>
 8005950:	2908      	cmp	r1, #8
 8005952:	d830      	bhi.n	80059b6 <_strtod_l+0x8e>
 8005954:	2900      	cmp	r1, #0
 8005956:	d039      	beq.n	80059cc <_strtod_l+0xa4>
 8005958:	2200      	movs	r2, #0
 800595a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800595c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800595e:	782a      	ldrb	r2, [r5, #0]
 8005960:	2a30      	cmp	r2, #48	@ 0x30
 8005962:	f040 80b1 	bne.w	8005ac8 <_strtod_l+0x1a0>
 8005966:	786a      	ldrb	r2, [r5, #1]
 8005968:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800596c:	2a58      	cmp	r2, #88	@ 0x58
 800596e:	d16c      	bne.n	8005a4a <_strtod_l+0x122>
 8005970:	9302      	str	r3, [sp, #8]
 8005972:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005974:	4a8e      	ldr	r2, [pc, #568]	@ (8005bb0 <_strtod_l+0x288>)
 8005976:	9301      	str	r3, [sp, #4]
 8005978:	ab1a      	add	r3, sp, #104	@ 0x68
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	9805      	ldr	r0, [sp, #20]
 800597e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005980:	a919      	add	r1, sp, #100	@ 0x64
 8005982:	f001 f915 	bl	8006bb0 <__gethex>
 8005986:	f010 060f 	ands.w	r6, r0, #15
 800598a:	4604      	mov	r4, r0
 800598c:	d005      	beq.n	800599a <_strtod_l+0x72>
 800598e:	2e06      	cmp	r6, #6
 8005990:	d126      	bne.n	80059e0 <_strtod_l+0xb8>
 8005992:	2300      	movs	r3, #0
 8005994:	3501      	adds	r5, #1
 8005996:	9519      	str	r5, [sp, #100]	@ 0x64
 8005998:	930b      	str	r3, [sp, #44]	@ 0x2c
 800599a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800599c:	2b00      	cmp	r3, #0
 800599e:	f040 8584 	bne.w	80064aa <_strtod_l+0xb82>
 80059a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059a4:	b1bb      	cbz	r3, 80059d6 <_strtod_l+0xae>
 80059a6:	4650      	mov	r0, sl
 80059a8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80059ac:	b01f      	add	sp, #124	@ 0x7c
 80059ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059b2:	2920      	cmp	r1, #32
 80059b4:	d1d0      	bne.n	8005958 <_strtod_l+0x30>
 80059b6:	3201      	adds	r2, #1
 80059b8:	e7c3      	b.n	8005942 <_strtod_l+0x1a>
 80059ba:	292d      	cmp	r1, #45	@ 0x2d
 80059bc:	d1cc      	bne.n	8005958 <_strtod_l+0x30>
 80059be:	2101      	movs	r1, #1
 80059c0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80059c2:	1c51      	adds	r1, r2, #1
 80059c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80059c6:	7852      	ldrb	r2, [r2, #1]
 80059c8:	2a00      	cmp	r2, #0
 80059ca:	d1c7      	bne.n	800595c <_strtod_l+0x34>
 80059cc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80059ce:	9419      	str	r4, [sp, #100]	@ 0x64
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f040 8568 	bne.w	80064a6 <_strtod_l+0xb7e>
 80059d6:	4650      	mov	r0, sl
 80059d8:	4659      	mov	r1, fp
 80059da:	e7e7      	b.n	80059ac <_strtod_l+0x84>
 80059dc:	2100      	movs	r1, #0
 80059de:	e7ef      	b.n	80059c0 <_strtod_l+0x98>
 80059e0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80059e2:	b13a      	cbz	r2, 80059f4 <_strtod_l+0xcc>
 80059e4:	2135      	movs	r1, #53	@ 0x35
 80059e6:	a81c      	add	r0, sp, #112	@ 0x70
 80059e8:	f7ff ff36 	bl	8005858 <__copybits>
 80059ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80059ee:	9805      	ldr	r0, [sp, #20]
 80059f0:	f7ff fb10 	bl	8005014 <_Bfree>
 80059f4:	3e01      	subs	r6, #1
 80059f6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80059f8:	2e04      	cmp	r6, #4
 80059fa:	d806      	bhi.n	8005a0a <_strtod_l+0xe2>
 80059fc:	e8df f006 	tbb	[pc, r6]
 8005a00:	201d0314 	.word	0x201d0314
 8005a04:	14          	.byte	0x14
 8005a05:	00          	.byte	0x00
 8005a06:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005a0a:	05e1      	lsls	r1, r4, #23
 8005a0c:	bf48      	it	mi
 8005a0e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005a12:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005a16:	0d1b      	lsrs	r3, r3, #20
 8005a18:	051b      	lsls	r3, r3, #20
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1bd      	bne.n	800599a <_strtod_l+0x72>
 8005a1e:	f7fe fb29 	bl	8004074 <__errno>
 8005a22:	2322      	movs	r3, #34	@ 0x22
 8005a24:	6003      	str	r3, [r0, #0]
 8005a26:	e7b8      	b.n	800599a <_strtod_l+0x72>
 8005a28:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005a2c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005a30:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005a34:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005a38:	e7e7      	b.n	8005a0a <_strtod_l+0xe2>
 8005a3a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8005bb4 <_strtod_l+0x28c>
 8005a3e:	e7e4      	b.n	8005a0a <_strtod_l+0xe2>
 8005a40:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005a44:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005a48:	e7df      	b.n	8005a0a <_strtod_l+0xe2>
 8005a4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005a50:	785b      	ldrb	r3, [r3, #1]
 8005a52:	2b30      	cmp	r3, #48	@ 0x30
 8005a54:	d0f9      	beq.n	8005a4a <_strtod_l+0x122>
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d09f      	beq.n	800599a <_strtod_l+0x72>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a60:	220a      	movs	r2, #10
 8005a62:	930c      	str	r3, [sp, #48]	@ 0x30
 8005a64:	2300      	movs	r3, #0
 8005a66:	461f      	mov	r7, r3
 8005a68:	9308      	str	r3, [sp, #32]
 8005a6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a6c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005a6e:	7805      	ldrb	r5, [r0, #0]
 8005a70:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005a74:	b2d9      	uxtb	r1, r3
 8005a76:	2909      	cmp	r1, #9
 8005a78:	d928      	bls.n	8005acc <_strtod_l+0x1a4>
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	494e      	ldr	r1, [pc, #312]	@ (8005bb8 <_strtod_l+0x290>)
 8005a7e:	f000 ffc7 	bl	8006a10 <strncmp>
 8005a82:	2800      	cmp	r0, #0
 8005a84:	d032      	beq.n	8005aec <_strtod_l+0x1c4>
 8005a86:	2000      	movs	r0, #0
 8005a88:	462a      	mov	r2, r5
 8005a8a:	4681      	mov	r9, r0
 8005a8c:	463d      	mov	r5, r7
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2a65      	cmp	r2, #101	@ 0x65
 8005a92:	d001      	beq.n	8005a98 <_strtod_l+0x170>
 8005a94:	2a45      	cmp	r2, #69	@ 0x45
 8005a96:	d114      	bne.n	8005ac2 <_strtod_l+0x19a>
 8005a98:	b91d      	cbnz	r5, 8005aa2 <_strtod_l+0x17a>
 8005a9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a9c:	4302      	orrs	r2, r0
 8005a9e:	d095      	beq.n	80059cc <_strtod_l+0xa4>
 8005aa0:	2500      	movs	r5, #0
 8005aa2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005aa4:	1c62      	adds	r2, r4, #1
 8005aa6:	9219      	str	r2, [sp, #100]	@ 0x64
 8005aa8:	7862      	ldrb	r2, [r4, #1]
 8005aaa:	2a2b      	cmp	r2, #43	@ 0x2b
 8005aac:	d077      	beq.n	8005b9e <_strtod_l+0x276>
 8005aae:	2a2d      	cmp	r2, #45	@ 0x2d
 8005ab0:	d07b      	beq.n	8005baa <_strtod_l+0x282>
 8005ab2:	f04f 0c00 	mov.w	ip, #0
 8005ab6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005aba:	2909      	cmp	r1, #9
 8005abc:	f240 8082 	bls.w	8005bc4 <_strtod_l+0x29c>
 8005ac0:	9419      	str	r4, [sp, #100]	@ 0x64
 8005ac2:	f04f 0800 	mov.w	r8, #0
 8005ac6:	e0a2      	b.n	8005c0e <_strtod_l+0x2e6>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	e7c7      	b.n	8005a5c <_strtod_l+0x134>
 8005acc:	2f08      	cmp	r7, #8
 8005ace:	bfd5      	itete	le
 8005ad0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005ad2:	9908      	ldrgt	r1, [sp, #32]
 8005ad4:	fb02 3301 	mlale	r3, r2, r1, r3
 8005ad8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005adc:	f100 0001 	add.w	r0, r0, #1
 8005ae0:	bfd4      	ite	le
 8005ae2:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005ae4:	9308      	strgt	r3, [sp, #32]
 8005ae6:	3701      	adds	r7, #1
 8005ae8:	9019      	str	r0, [sp, #100]	@ 0x64
 8005aea:	e7bf      	b.n	8005a6c <_strtod_l+0x144>
 8005aec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	9219      	str	r2, [sp, #100]	@ 0x64
 8005af2:	785a      	ldrb	r2, [r3, #1]
 8005af4:	b37f      	cbz	r7, 8005b56 <_strtod_l+0x22e>
 8005af6:	4681      	mov	r9, r0
 8005af8:	463d      	mov	r5, r7
 8005afa:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005afe:	2b09      	cmp	r3, #9
 8005b00:	d912      	bls.n	8005b28 <_strtod_l+0x200>
 8005b02:	2301      	movs	r3, #1
 8005b04:	e7c4      	b.n	8005a90 <_strtod_l+0x168>
 8005b06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b08:	3001      	adds	r0, #1
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	9219      	str	r2, [sp, #100]	@ 0x64
 8005b0e:	785a      	ldrb	r2, [r3, #1]
 8005b10:	2a30      	cmp	r2, #48	@ 0x30
 8005b12:	d0f8      	beq.n	8005b06 <_strtod_l+0x1de>
 8005b14:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	f200 84cb 	bhi.w	80064b4 <_strtod_l+0xb8c>
 8005b1e:	4681      	mov	r9, r0
 8005b20:	2000      	movs	r0, #0
 8005b22:	4605      	mov	r5, r0
 8005b24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b26:	930c      	str	r3, [sp, #48]	@ 0x30
 8005b28:	3a30      	subs	r2, #48	@ 0x30
 8005b2a:	f100 0301 	add.w	r3, r0, #1
 8005b2e:	d02a      	beq.n	8005b86 <_strtod_l+0x25e>
 8005b30:	4499      	add	r9, r3
 8005b32:	210a      	movs	r1, #10
 8005b34:	462b      	mov	r3, r5
 8005b36:	eb00 0c05 	add.w	ip, r0, r5
 8005b3a:	4563      	cmp	r3, ip
 8005b3c:	d10d      	bne.n	8005b5a <_strtod_l+0x232>
 8005b3e:	1c69      	adds	r1, r5, #1
 8005b40:	4401      	add	r1, r0
 8005b42:	4428      	add	r0, r5
 8005b44:	2808      	cmp	r0, #8
 8005b46:	dc16      	bgt.n	8005b76 <_strtod_l+0x24e>
 8005b48:	230a      	movs	r3, #10
 8005b4a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005b4c:	fb03 2300 	mla	r3, r3, r0, r2
 8005b50:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b52:	2300      	movs	r3, #0
 8005b54:	e018      	b.n	8005b88 <_strtod_l+0x260>
 8005b56:	4638      	mov	r0, r7
 8005b58:	e7da      	b.n	8005b10 <_strtod_l+0x1e8>
 8005b5a:	2b08      	cmp	r3, #8
 8005b5c:	f103 0301 	add.w	r3, r3, #1
 8005b60:	dc03      	bgt.n	8005b6a <_strtod_l+0x242>
 8005b62:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005b64:	434e      	muls	r6, r1
 8005b66:	960a      	str	r6, [sp, #40]	@ 0x28
 8005b68:	e7e7      	b.n	8005b3a <_strtod_l+0x212>
 8005b6a:	2b10      	cmp	r3, #16
 8005b6c:	bfde      	ittt	le
 8005b6e:	9e08      	ldrle	r6, [sp, #32]
 8005b70:	434e      	mulle	r6, r1
 8005b72:	9608      	strle	r6, [sp, #32]
 8005b74:	e7e1      	b.n	8005b3a <_strtod_l+0x212>
 8005b76:	280f      	cmp	r0, #15
 8005b78:	dceb      	bgt.n	8005b52 <_strtod_l+0x22a>
 8005b7a:	230a      	movs	r3, #10
 8005b7c:	9808      	ldr	r0, [sp, #32]
 8005b7e:	fb03 2300 	mla	r3, r3, r0, r2
 8005b82:	9308      	str	r3, [sp, #32]
 8005b84:	e7e5      	b.n	8005b52 <_strtod_l+0x22a>
 8005b86:	4629      	mov	r1, r5
 8005b88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005b8a:	460d      	mov	r5, r1
 8005b8c:	1c50      	adds	r0, r2, #1
 8005b8e:	9019      	str	r0, [sp, #100]	@ 0x64
 8005b90:	7852      	ldrb	r2, [r2, #1]
 8005b92:	4618      	mov	r0, r3
 8005b94:	e7b1      	b.n	8005afa <_strtod_l+0x1d2>
 8005b96:	f04f 0900 	mov.w	r9, #0
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e77d      	b.n	8005a9a <_strtod_l+0x172>
 8005b9e:	f04f 0c00 	mov.w	ip, #0
 8005ba2:	1ca2      	adds	r2, r4, #2
 8005ba4:	9219      	str	r2, [sp, #100]	@ 0x64
 8005ba6:	78a2      	ldrb	r2, [r4, #2]
 8005ba8:	e785      	b.n	8005ab6 <_strtod_l+0x18e>
 8005baa:	f04f 0c01 	mov.w	ip, #1
 8005bae:	e7f8      	b.n	8005ba2 <_strtod_l+0x27a>
 8005bb0:	080079d8 	.word	0x080079d8
 8005bb4:	7ff00000 	.word	0x7ff00000
 8005bb8:	080079c0 	.word	0x080079c0
 8005bbc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005bbe:	1c51      	adds	r1, r2, #1
 8005bc0:	9119      	str	r1, [sp, #100]	@ 0x64
 8005bc2:	7852      	ldrb	r2, [r2, #1]
 8005bc4:	2a30      	cmp	r2, #48	@ 0x30
 8005bc6:	d0f9      	beq.n	8005bbc <_strtod_l+0x294>
 8005bc8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005bcc:	2908      	cmp	r1, #8
 8005bce:	f63f af78 	bhi.w	8005ac2 <_strtod_l+0x19a>
 8005bd2:	f04f 080a 	mov.w	r8, #10
 8005bd6:	3a30      	subs	r2, #48	@ 0x30
 8005bd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8005bda:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005bdc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005bde:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005be0:	1c56      	adds	r6, r2, #1
 8005be2:	9619      	str	r6, [sp, #100]	@ 0x64
 8005be4:	7852      	ldrb	r2, [r2, #1]
 8005be6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005bea:	f1be 0f09 	cmp.w	lr, #9
 8005bee:	d939      	bls.n	8005c64 <_strtod_l+0x33c>
 8005bf0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005bf2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005bf6:	1a76      	subs	r6, r6, r1
 8005bf8:	2e08      	cmp	r6, #8
 8005bfa:	dc03      	bgt.n	8005c04 <_strtod_l+0x2dc>
 8005bfc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005bfe:	4588      	cmp	r8, r1
 8005c00:	bfa8      	it	ge
 8005c02:	4688      	movge	r8, r1
 8005c04:	f1bc 0f00 	cmp.w	ip, #0
 8005c08:	d001      	beq.n	8005c0e <_strtod_l+0x2e6>
 8005c0a:	f1c8 0800 	rsb	r8, r8, #0
 8005c0e:	2d00      	cmp	r5, #0
 8005c10:	d14e      	bne.n	8005cb0 <_strtod_l+0x388>
 8005c12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005c14:	4308      	orrs	r0, r1
 8005c16:	f47f aec0 	bne.w	800599a <_strtod_l+0x72>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f47f aed6 	bne.w	80059cc <_strtod_l+0xa4>
 8005c20:	2a69      	cmp	r2, #105	@ 0x69
 8005c22:	d028      	beq.n	8005c76 <_strtod_l+0x34e>
 8005c24:	dc25      	bgt.n	8005c72 <_strtod_l+0x34a>
 8005c26:	2a49      	cmp	r2, #73	@ 0x49
 8005c28:	d025      	beq.n	8005c76 <_strtod_l+0x34e>
 8005c2a:	2a4e      	cmp	r2, #78	@ 0x4e
 8005c2c:	f47f aece 	bne.w	80059cc <_strtod_l+0xa4>
 8005c30:	499a      	ldr	r1, [pc, #616]	@ (8005e9c <_strtod_l+0x574>)
 8005c32:	a819      	add	r0, sp, #100	@ 0x64
 8005c34:	f001 f9de 	bl	8006ff4 <__match>
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	f43f aec7 	beq.w	80059cc <_strtod_l+0xa4>
 8005c3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b28      	cmp	r3, #40	@ 0x28
 8005c44:	d12e      	bne.n	8005ca4 <_strtod_l+0x37c>
 8005c46:	4996      	ldr	r1, [pc, #600]	@ (8005ea0 <_strtod_l+0x578>)
 8005c48:	aa1c      	add	r2, sp, #112	@ 0x70
 8005c4a:	a819      	add	r0, sp, #100	@ 0x64
 8005c4c:	f001 f9e6 	bl	800701c <__hexnan>
 8005c50:	2805      	cmp	r0, #5
 8005c52:	d127      	bne.n	8005ca4 <_strtod_l+0x37c>
 8005c54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005c56:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005c5a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005c5e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005c62:	e69a      	b.n	800599a <_strtod_l+0x72>
 8005c64:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005c66:	fb08 2101 	mla	r1, r8, r1, r2
 8005c6a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005c6e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c70:	e7b5      	b.n	8005bde <_strtod_l+0x2b6>
 8005c72:	2a6e      	cmp	r2, #110	@ 0x6e
 8005c74:	e7da      	b.n	8005c2c <_strtod_l+0x304>
 8005c76:	498b      	ldr	r1, [pc, #556]	@ (8005ea4 <_strtod_l+0x57c>)
 8005c78:	a819      	add	r0, sp, #100	@ 0x64
 8005c7a:	f001 f9bb 	bl	8006ff4 <__match>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	f43f aea4 	beq.w	80059cc <_strtod_l+0xa4>
 8005c84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c86:	4988      	ldr	r1, [pc, #544]	@ (8005ea8 <_strtod_l+0x580>)
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	a819      	add	r0, sp, #100	@ 0x64
 8005c8c:	9319      	str	r3, [sp, #100]	@ 0x64
 8005c8e:	f001 f9b1 	bl	8006ff4 <__match>
 8005c92:	b910      	cbnz	r0, 8005c9a <_strtod_l+0x372>
 8005c94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c96:	3301      	adds	r3, #1
 8005c98:	9319      	str	r3, [sp, #100]	@ 0x64
 8005c9a:	f04f 0a00 	mov.w	sl, #0
 8005c9e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8005eac <_strtod_l+0x584>
 8005ca2:	e67a      	b.n	800599a <_strtod_l+0x72>
 8005ca4:	4882      	ldr	r0, [pc, #520]	@ (8005eb0 <_strtod_l+0x588>)
 8005ca6:	f000 fee3 	bl	8006a70 <nan>
 8005caa:	4682      	mov	sl, r0
 8005cac:	468b      	mov	fp, r1
 8005cae:	e674      	b.n	800599a <_strtod_l+0x72>
 8005cb0:	eba8 0309 	sub.w	r3, r8, r9
 8005cb4:	2f00      	cmp	r7, #0
 8005cb6:	bf08      	it	eq
 8005cb8:	462f      	moveq	r7, r5
 8005cba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005cbc:	2d10      	cmp	r5, #16
 8005cbe:	462c      	mov	r4, r5
 8005cc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cc2:	bfa8      	it	ge
 8005cc4:	2410      	movge	r4, #16
 8005cc6:	f7fa fb8d 	bl	80003e4 <__aeabi_ui2d>
 8005cca:	2d09      	cmp	r5, #9
 8005ccc:	4682      	mov	sl, r0
 8005cce:	468b      	mov	fp, r1
 8005cd0:	dc11      	bgt.n	8005cf6 <_strtod_l+0x3ce>
 8005cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f43f ae60 	beq.w	800599a <_strtod_l+0x72>
 8005cda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cdc:	dd76      	ble.n	8005dcc <_strtod_l+0x4a4>
 8005cde:	2b16      	cmp	r3, #22
 8005ce0:	dc5d      	bgt.n	8005d9e <_strtod_l+0x476>
 8005ce2:	4974      	ldr	r1, [pc, #464]	@ (8005eb4 <_strtod_l+0x58c>)
 8005ce4:	4652      	mov	r2, sl
 8005ce6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005cea:	465b      	mov	r3, fp
 8005cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cf0:	f7fa fbf2 	bl	80004d8 <__aeabi_dmul>
 8005cf4:	e7d9      	b.n	8005caa <_strtod_l+0x382>
 8005cf6:	4b6f      	ldr	r3, [pc, #444]	@ (8005eb4 <_strtod_l+0x58c>)
 8005cf8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005cfc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005d00:	f7fa fbea 	bl	80004d8 <__aeabi_dmul>
 8005d04:	4682      	mov	sl, r0
 8005d06:	9808      	ldr	r0, [sp, #32]
 8005d08:	468b      	mov	fp, r1
 8005d0a:	f7fa fb6b 	bl	80003e4 <__aeabi_ui2d>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	460b      	mov	r3, r1
 8005d12:	4650      	mov	r0, sl
 8005d14:	4659      	mov	r1, fp
 8005d16:	f7fa fa29 	bl	800016c <__adddf3>
 8005d1a:	2d0f      	cmp	r5, #15
 8005d1c:	4682      	mov	sl, r0
 8005d1e:	468b      	mov	fp, r1
 8005d20:	ddd7      	ble.n	8005cd2 <_strtod_l+0x3aa>
 8005d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d24:	1b2c      	subs	r4, r5, r4
 8005d26:	441c      	add	r4, r3
 8005d28:	2c00      	cmp	r4, #0
 8005d2a:	f340 8096 	ble.w	8005e5a <_strtod_l+0x532>
 8005d2e:	f014 030f 	ands.w	r3, r4, #15
 8005d32:	d00a      	beq.n	8005d4a <_strtod_l+0x422>
 8005d34:	495f      	ldr	r1, [pc, #380]	@ (8005eb4 <_strtod_l+0x58c>)
 8005d36:	4652      	mov	r2, sl
 8005d38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d40:	465b      	mov	r3, fp
 8005d42:	f7fa fbc9 	bl	80004d8 <__aeabi_dmul>
 8005d46:	4682      	mov	sl, r0
 8005d48:	468b      	mov	fp, r1
 8005d4a:	f034 040f 	bics.w	r4, r4, #15
 8005d4e:	d073      	beq.n	8005e38 <_strtod_l+0x510>
 8005d50:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005d54:	dd48      	ble.n	8005de8 <_strtod_l+0x4c0>
 8005d56:	2400      	movs	r4, #0
 8005d58:	46a0      	mov	r8, r4
 8005d5a:	46a1      	mov	r9, r4
 8005d5c:	940a      	str	r4, [sp, #40]	@ 0x28
 8005d5e:	2322      	movs	r3, #34	@ 0x22
 8005d60:	f04f 0a00 	mov.w	sl, #0
 8005d64:	9a05      	ldr	r2, [sp, #20]
 8005d66:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8005eac <_strtod_l+0x584>
 8005d6a:	6013      	str	r3, [r2, #0]
 8005d6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f43f ae13 	beq.w	800599a <_strtod_l+0x72>
 8005d74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005d76:	9805      	ldr	r0, [sp, #20]
 8005d78:	f7ff f94c 	bl	8005014 <_Bfree>
 8005d7c:	4649      	mov	r1, r9
 8005d7e:	9805      	ldr	r0, [sp, #20]
 8005d80:	f7ff f948 	bl	8005014 <_Bfree>
 8005d84:	4641      	mov	r1, r8
 8005d86:	9805      	ldr	r0, [sp, #20]
 8005d88:	f7ff f944 	bl	8005014 <_Bfree>
 8005d8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005d8e:	9805      	ldr	r0, [sp, #20]
 8005d90:	f7ff f940 	bl	8005014 <_Bfree>
 8005d94:	4621      	mov	r1, r4
 8005d96:	9805      	ldr	r0, [sp, #20]
 8005d98:	f7ff f93c 	bl	8005014 <_Bfree>
 8005d9c:	e5fd      	b.n	800599a <_strtod_l+0x72>
 8005d9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005da0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005da4:	4293      	cmp	r3, r2
 8005da6:	dbbc      	blt.n	8005d22 <_strtod_l+0x3fa>
 8005da8:	4c42      	ldr	r4, [pc, #264]	@ (8005eb4 <_strtod_l+0x58c>)
 8005daa:	f1c5 050f 	rsb	r5, r5, #15
 8005dae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005db2:	4652      	mov	r2, sl
 8005db4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005db8:	465b      	mov	r3, fp
 8005dba:	f7fa fb8d 	bl	80004d8 <__aeabi_dmul>
 8005dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dc0:	1b5d      	subs	r5, r3, r5
 8005dc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005dc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005dca:	e791      	b.n	8005cf0 <_strtod_l+0x3c8>
 8005dcc:	3316      	adds	r3, #22
 8005dce:	dba8      	blt.n	8005d22 <_strtod_l+0x3fa>
 8005dd0:	4b38      	ldr	r3, [pc, #224]	@ (8005eb4 <_strtod_l+0x58c>)
 8005dd2:	eba9 0808 	sub.w	r8, r9, r8
 8005dd6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005dda:	4650      	mov	r0, sl
 8005ddc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005de0:	4659      	mov	r1, fp
 8005de2:	f7fa fca3 	bl	800072c <__aeabi_ddiv>
 8005de6:	e760      	b.n	8005caa <_strtod_l+0x382>
 8005de8:	4b33      	ldr	r3, [pc, #204]	@ (8005eb8 <_strtod_l+0x590>)
 8005dea:	4650      	mov	r0, sl
 8005dec:	9308      	str	r3, [sp, #32]
 8005dee:	2300      	movs	r3, #0
 8005df0:	4659      	mov	r1, fp
 8005df2:	461e      	mov	r6, r3
 8005df4:	1124      	asrs	r4, r4, #4
 8005df6:	2c01      	cmp	r4, #1
 8005df8:	dc21      	bgt.n	8005e3e <_strtod_l+0x516>
 8005dfa:	b10b      	cbz	r3, 8005e00 <_strtod_l+0x4d8>
 8005dfc:	4682      	mov	sl, r0
 8005dfe:	468b      	mov	fp, r1
 8005e00:	492d      	ldr	r1, [pc, #180]	@ (8005eb8 <_strtod_l+0x590>)
 8005e02:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005e06:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005e0a:	4652      	mov	r2, sl
 8005e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e10:	465b      	mov	r3, fp
 8005e12:	f7fa fb61 	bl	80004d8 <__aeabi_dmul>
 8005e16:	4b25      	ldr	r3, [pc, #148]	@ (8005eac <_strtod_l+0x584>)
 8005e18:	460a      	mov	r2, r1
 8005e1a:	400b      	ands	r3, r1
 8005e1c:	4927      	ldr	r1, [pc, #156]	@ (8005ebc <_strtod_l+0x594>)
 8005e1e:	4682      	mov	sl, r0
 8005e20:	428b      	cmp	r3, r1
 8005e22:	d898      	bhi.n	8005d56 <_strtod_l+0x42e>
 8005e24:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005e28:	428b      	cmp	r3, r1
 8005e2a:	bf86      	itte	hi
 8005e2c:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8005e30:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8005ec0 <_strtod_l+0x598>
 8005e34:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005e38:	2300      	movs	r3, #0
 8005e3a:	9308      	str	r3, [sp, #32]
 8005e3c:	e07a      	b.n	8005f34 <_strtod_l+0x60c>
 8005e3e:	07e2      	lsls	r2, r4, #31
 8005e40:	d505      	bpl.n	8005e4e <_strtod_l+0x526>
 8005e42:	9b08      	ldr	r3, [sp, #32]
 8005e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e48:	f7fa fb46 	bl	80004d8 <__aeabi_dmul>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	9a08      	ldr	r2, [sp, #32]
 8005e50:	3601      	adds	r6, #1
 8005e52:	3208      	adds	r2, #8
 8005e54:	1064      	asrs	r4, r4, #1
 8005e56:	9208      	str	r2, [sp, #32]
 8005e58:	e7cd      	b.n	8005df6 <_strtod_l+0x4ce>
 8005e5a:	d0ed      	beq.n	8005e38 <_strtod_l+0x510>
 8005e5c:	4264      	negs	r4, r4
 8005e5e:	f014 020f 	ands.w	r2, r4, #15
 8005e62:	d00a      	beq.n	8005e7a <_strtod_l+0x552>
 8005e64:	4b13      	ldr	r3, [pc, #76]	@ (8005eb4 <_strtod_l+0x58c>)
 8005e66:	4650      	mov	r0, sl
 8005e68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e6c:	4659      	mov	r1, fp
 8005e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e72:	f7fa fc5b 	bl	800072c <__aeabi_ddiv>
 8005e76:	4682      	mov	sl, r0
 8005e78:	468b      	mov	fp, r1
 8005e7a:	1124      	asrs	r4, r4, #4
 8005e7c:	d0dc      	beq.n	8005e38 <_strtod_l+0x510>
 8005e7e:	2c1f      	cmp	r4, #31
 8005e80:	dd20      	ble.n	8005ec4 <_strtod_l+0x59c>
 8005e82:	2400      	movs	r4, #0
 8005e84:	46a0      	mov	r8, r4
 8005e86:	46a1      	mov	r9, r4
 8005e88:	940a      	str	r4, [sp, #40]	@ 0x28
 8005e8a:	2322      	movs	r3, #34	@ 0x22
 8005e8c:	9a05      	ldr	r2, [sp, #20]
 8005e8e:	f04f 0a00 	mov.w	sl, #0
 8005e92:	f04f 0b00 	mov.w	fp, #0
 8005e96:	6013      	str	r3, [r2, #0]
 8005e98:	e768      	b.n	8005d6c <_strtod_l+0x444>
 8005e9a:	bf00      	nop
 8005e9c:	080077af 	.word	0x080077af
 8005ea0:	080079c4 	.word	0x080079c4
 8005ea4:	080077a7 	.word	0x080077a7
 8005ea8:	080077de 	.word	0x080077de
 8005eac:	7ff00000 	.word	0x7ff00000
 8005eb0:	08007b6d 	.word	0x08007b6d
 8005eb4:	080078f8 	.word	0x080078f8
 8005eb8:	080078d0 	.word	0x080078d0
 8005ebc:	7ca00000 	.word	0x7ca00000
 8005ec0:	7fefffff 	.word	0x7fefffff
 8005ec4:	f014 0310 	ands.w	r3, r4, #16
 8005ec8:	bf18      	it	ne
 8005eca:	236a      	movne	r3, #106	@ 0x6a
 8005ecc:	4650      	mov	r0, sl
 8005ece:	9308      	str	r3, [sp, #32]
 8005ed0:	4659      	mov	r1, fp
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	4ea9      	ldr	r6, [pc, #676]	@ (800617c <_strtod_l+0x854>)
 8005ed6:	07e2      	lsls	r2, r4, #31
 8005ed8:	d504      	bpl.n	8005ee4 <_strtod_l+0x5bc>
 8005eda:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ede:	f7fa fafb 	bl	80004d8 <__aeabi_dmul>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	1064      	asrs	r4, r4, #1
 8005ee6:	f106 0608 	add.w	r6, r6, #8
 8005eea:	d1f4      	bne.n	8005ed6 <_strtod_l+0x5ae>
 8005eec:	b10b      	cbz	r3, 8005ef2 <_strtod_l+0x5ca>
 8005eee:	4682      	mov	sl, r0
 8005ef0:	468b      	mov	fp, r1
 8005ef2:	9b08      	ldr	r3, [sp, #32]
 8005ef4:	b1b3      	cbz	r3, 8005f24 <_strtod_l+0x5fc>
 8005ef6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005efa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	4659      	mov	r1, fp
 8005f02:	dd0f      	ble.n	8005f24 <_strtod_l+0x5fc>
 8005f04:	2b1f      	cmp	r3, #31
 8005f06:	dd57      	ble.n	8005fb8 <_strtod_l+0x690>
 8005f08:	2b34      	cmp	r3, #52	@ 0x34
 8005f0a:	bfd8      	it	le
 8005f0c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8005f10:	f04f 0a00 	mov.w	sl, #0
 8005f14:	bfcf      	iteee	gt
 8005f16:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005f1a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005f1e:	4093      	lslle	r3, r2
 8005f20:	ea03 0b01 	andle.w	fp, r3, r1
 8005f24:	2200      	movs	r2, #0
 8005f26:	2300      	movs	r3, #0
 8005f28:	4650      	mov	r0, sl
 8005f2a:	4659      	mov	r1, fp
 8005f2c:	f7fa fd3c 	bl	80009a8 <__aeabi_dcmpeq>
 8005f30:	2800      	cmp	r0, #0
 8005f32:	d1a6      	bne.n	8005e82 <_strtod_l+0x55a>
 8005f34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f36:	463a      	mov	r2, r7
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005f3c:	462b      	mov	r3, r5
 8005f3e:	9805      	ldr	r0, [sp, #20]
 8005f40:	f7ff f8d0 	bl	80050e4 <__s2b>
 8005f44:	900a      	str	r0, [sp, #40]	@ 0x28
 8005f46:	2800      	cmp	r0, #0
 8005f48:	f43f af05 	beq.w	8005d56 <_strtod_l+0x42e>
 8005f4c:	2400      	movs	r4, #0
 8005f4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f50:	eba9 0308 	sub.w	r3, r9, r8
 8005f54:	2a00      	cmp	r2, #0
 8005f56:	bfa8      	it	ge
 8005f58:	2300      	movge	r3, #0
 8005f5a:	46a0      	mov	r8, r4
 8005f5c:	9312      	str	r3, [sp, #72]	@ 0x48
 8005f5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005f62:	9316      	str	r3, [sp, #88]	@ 0x58
 8005f64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f66:	9805      	ldr	r0, [sp, #20]
 8005f68:	6859      	ldr	r1, [r3, #4]
 8005f6a:	f7ff f813 	bl	8004f94 <_Balloc>
 8005f6e:	4681      	mov	r9, r0
 8005f70:	2800      	cmp	r0, #0
 8005f72:	f43f aef4 	beq.w	8005d5e <_strtod_l+0x436>
 8005f76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f78:	300c      	adds	r0, #12
 8005f7a:	691a      	ldr	r2, [r3, #16]
 8005f7c:	f103 010c 	add.w	r1, r3, #12
 8005f80:	3202      	adds	r2, #2
 8005f82:	0092      	lsls	r2, r2, #2
 8005f84:	f000 fd66 	bl	8006a54 <memcpy>
 8005f88:	ab1c      	add	r3, sp, #112	@ 0x70
 8005f8a:	9301      	str	r3, [sp, #4]
 8005f8c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	4652      	mov	r2, sl
 8005f92:	465b      	mov	r3, fp
 8005f94:	9805      	ldr	r0, [sp, #20]
 8005f96:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005f9a:	f7ff fbd5 	bl	8005748 <__d2b>
 8005f9e:	901a      	str	r0, [sp, #104]	@ 0x68
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	f43f aedc 	beq.w	8005d5e <_strtod_l+0x436>
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	9805      	ldr	r0, [sp, #20]
 8005faa:	f7ff f931 	bl	8005210 <__i2b>
 8005fae:	4680      	mov	r8, r0
 8005fb0:	b948      	cbnz	r0, 8005fc6 <_strtod_l+0x69e>
 8005fb2:	f04f 0800 	mov.w	r8, #0
 8005fb6:	e6d2      	b.n	8005d5e <_strtod_l+0x436>
 8005fb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc0:	ea03 0a0a 	and.w	sl, r3, sl
 8005fc4:	e7ae      	b.n	8005f24 <_strtod_l+0x5fc>
 8005fc6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005fc8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005fca:	2d00      	cmp	r5, #0
 8005fcc:	bfab      	itete	ge
 8005fce:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005fd0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005fd2:	18ef      	addge	r7, r5, r3
 8005fd4:	1b5e      	sublt	r6, r3, r5
 8005fd6:	9b08      	ldr	r3, [sp, #32]
 8005fd8:	bfa8      	it	ge
 8005fda:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005fdc:	eba5 0503 	sub.w	r5, r5, r3
 8005fe0:	4415      	add	r5, r2
 8005fe2:	4b67      	ldr	r3, [pc, #412]	@ (8006180 <_strtod_l+0x858>)
 8005fe4:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 8005fe8:	bfb8      	it	lt
 8005fea:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005fec:	429d      	cmp	r5, r3
 8005fee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005ff2:	da50      	bge.n	8006096 <_strtod_l+0x76e>
 8005ff4:	1b5b      	subs	r3, r3, r5
 8005ff6:	2b1f      	cmp	r3, #31
 8005ff8:	f04f 0101 	mov.w	r1, #1
 8005ffc:	eba2 0203 	sub.w	r2, r2, r3
 8006000:	dc3d      	bgt.n	800607e <_strtod_l+0x756>
 8006002:	fa01 f303 	lsl.w	r3, r1, r3
 8006006:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006008:	2300      	movs	r3, #0
 800600a:	9310      	str	r3, [sp, #64]	@ 0x40
 800600c:	18bd      	adds	r5, r7, r2
 800600e:	9b08      	ldr	r3, [sp, #32]
 8006010:	42af      	cmp	r7, r5
 8006012:	4416      	add	r6, r2
 8006014:	441e      	add	r6, r3
 8006016:	463b      	mov	r3, r7
 8006018:	bfa8      	it	ge
 800601a:	462b      	movge	r3, r5
 800601c:	42b3      	cmp	r3, r6
 800601e:	bfa8      	it	ge
 8006020:	4633      	movge	r3, r6
 8006022:	2b00      	cmp	r3, #0
 8006024:	bfc2      	ittt	gt
 8006026:	1aed      	subgt	r5, r5, r3
 8006028:	1af6      	subgt	r6, r6, r3
 800602a:	1aff      	subgt	r7, r7, r3
 800602c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800602e:	2b00      	cmp	r3, #0
 8006030:	dd16      	ble.n	8006060 <_strtod_l+0x738>
 8006032:	4641      	mov	r1, r8
 8006034:	461a      	mov	r2, r3
 8006036:	9805      	ldr	r0, [sp, #20]
 8006038:	f7ff f9a8 	bl	800538c <__pow5mult>
 800603c:	4680      	mov	r8, r0
 800603e:	2800      	cmp	r0, #0
 8006040:	d0b7      	beq.n	8005fb2 <_strtod_l+0x68a>
 8006042:	4601      	mov	r1, r0
 8006044:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006046:	9805      	ldr	r0, [sp, #20]
 8006048:	f7ff f8f8 	bl	800523c <__multiply>
 800604c:	900e      	str	r0, [sp, #56]	@ 0x38
 800604e:	2800      	cmp	r0, #0
 8006050:	f43f ae85 	beq.w	8005d5e <_strtod_l+0x436>
 8006054:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006056:	9805      	ldr	r0, [sp, #20]
 8006058:	f7fe ffdc 	bl	8005014 <_Bfree>
 800605c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800605e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006060:	2d00      	cmp	r5, #0
 8006062:	dc1d      	bgt.n	80060a0 <_strtod_l+0x778>
 8006064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006066:	2b00      	cmp	r3, #0
 8006068:	dd23      	ble.n	80060b2 <_strtod_l+0x78a>
 800606a:	4649      	mov	r1, r9
 800606c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800606e:	9805      	ldr	r0, [sp, #20]
 8006070:	f7ff f98c 	bl	800538c <__pow5mult>
 8006074:	4681      	mov	r9, r0
 8006076:	b9e0      	cbnz	r0, 80060b2 <_strtod_l+0x78a>
 8006078:	f04f 0900 	mov.w	r9, #0
 800607c:	e66f      	b.n	8005d5e <_strtod_l+0x436>
 800607e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006082:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006086:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800608a:	35e2      	adds	r5, #226	@ 0xe2
 800608c:	fa01 f305 	lsl.w	r3, r1, r5
 8006090:	9310      	str	r3, [sp, #64]	@ 0x40
 8006092:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006094:	e7ba      	b.n	800600c <_strtod_l+0x6e4>
 8006096:	2300      	movs	r3, #0
 8006098:	9310      	str	r3, [sp, #64]	@ 0x40
 800609a:	2301      	movs	r3, #1
 800609c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800609e:	e7b5      	b.n	800600c <_strtod_l+0x6e4>
 80060a0:	462a      	mov	r2, r5
 80060a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80060a4:	9805      	ldr	r0, [sp, #20]
 80060a6:	f7ff f9cb 	bl	8005440 <__lshift>
 80060aa:	901a      	str	r0, [sp, #104]	@ 0x68
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d1d9      	bne.n	8006064 <_strtod_l+0x73c>
 80060b0:	e655      	b.n	8005d5e <_strtod_l+0x436>
 80060b2:	2e00      	cmp	r6, #0
 80060b4:	dd07      	ble.n	80060c6 <_strtod_l+0x79e>
 80060b6:	4649      	mov	r1, r9
 80060b8:	4632      	mov	r2, r6
 80060ba:	9805      	ldr	r0, [sp, #20]
 80060bc:	f7ff f9c0 	bl	8005440 <__lshift>
 80060c0:	4681      	mov	r9, r0
 80060c2:	2800      	cmp	r0, #0
 80060c4:	d0d8      	beq.n	8006078 <_strtod_l+0x750>
 80060c6:	2f00      	cmp	r7, #0
 80060c8:	dd08      	ble.n	80060dc <_strtod_l+0x7b4>
 80060ca:	4641      	mov	r1, r8
 80060cc:	463a      	mov	r2, r7
 80060ce:	9805      	ldr	r0, [sp, #20]
 80060d0:	f7ff f9b6 	bl	8005440 <__lshift>
 80060d4:	4680      	mov	r8, r0
 80060d6:	2800      	cmp	r0, #0
 80060d8:	f43f ae41 	beq.w	8005d5e <_strtod_l+0x436>
 80060dc:	464a      	mov	r2, r9
 80060de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80060e0:	9805      	ldr	r0, [sp, #20]
 80060e2:	f7ff fa35 	bl	8005550 <__mdiff>
 80060e6:	4604      	mov	r4, r0
 80060e8:	2800      	cmp	r0, #0
 80060ea:	f43f ae38 	beq.w	8005d5e <_strtod_l+0x436>
 80060ee:	68c3      	ldr	r3, [r0, #12]
 80060f0:	4641      	mov	r1, r8
 80060f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80060f4:	2300      	movs	r3, #0
 80060f6:	60c3      	str	r3, [r0, #12]
 80060f8:	f7ff fa0e 	bl	8005518 <__mcmp>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	da45      	bge.n	800618c <_strtod_l+0x864>
 8006100:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006102:	ea53 030a 	orrs.w	r3, r3, sl
 8006106:	d16b      	bne.n	80061e0 <_strtod_l+0x8b8>
 8006108:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800610c:	2b00      	cmp	r3, #0
 800610e:	d167      	bne.n	80061e0 <_strtod_l+0x8b8>
 8006110:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006114:	0d1b      	lsrs	r3, r3, #20
 8006116:	051b      	lsls	r3, r3, #20
 8006118:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800611c:	d960      	bls.n	80061e0 <_strtod_l+0x8b8>
 800611e:	6963      	ldr	r3, [r4, #20]
 8006120:	b913      	cbnz	r3, 8006128 <_strtod_l+0x800>
 8006122:	6923      	ldr	r3, [r4, #16]
 8006124:	2b01      	cmp	r3, #1
 8006126:	dd5b      	ble.n	80061e0 <_strtod_l+0x8b8>
 8006128:	4621      	mov	r1, r4
 800612a:	2201      	movs	r2, #1
 800612c:	9805      	ldr	r0, [sp, #20]
 800612e:	f7ff f987 	bl	8005440 <__lshift>
 8006132:	4641      	mov	r1, r8
 8006134:	4604      	mov	r4, r0
 8006136:	f7ff f9ef 	bl	8005518 <__mcmp>
 800613a:	2800      	cmp	r0, #0
 800613c:	dd50      	ble.n	80061e0 <_strtod_l+0x8b8>
 800613e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006142:	9a08      	ldr	r2, [sp, #32]
 8006144:	0d1b      	lsrs	r3, r3, #20
 8006146:	051b      	lsls	r3, r3, #20
 8006148:	2a00      	cmp	r2, #0
 800614a:	d06a      	beq.n	8006222 <_strtod_l+0x8fa>
 800614c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006150:	d867      	bhi.n	8006222 <_strtod_l+0x8fa>
 8006152:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006156:	f67f ae98 	bls.w	8005e8a <_strtod_l+0x562>
 800615a:	4650      	mov	r0, sl
 800615c:	4659      	mov	r1, fp
 800615e:	4b09      	ldr	r3, [pc, #36]	@ (8006184 <_strtod_l+0x85c>)
 8006160:	2200      	movs	r2, #0
 8006162:	f7fa f9b9 	bl	80004d8 <__aeabi_dmul>
 8006166:	4b08      	ldr	r3, [pc, #32]	@ (8006188 <_strtod_l+0x860>)
 8006168:	4682      	mov	sl, r0
 800616a:	400b      	ands	r3, r1
 800616c:	468b      	mov	fp, r1
 800616e:	2b00      	cmp	r3, #0
 8006170:	f47f ae00 	bne.w	8005d74 <_strtod_l+0x44c>
 8006174:	2322      	movs	r3, #34	@ 0x22
 8006176:	9a05      	ldr	r2, [sp, #20]
 8006178:	6013      	str	r3, [r2, #0]
 800617a:	e5fb      	b.n	8005d74 <_strtod_l+0x44c>
 800617c:	080079f0 	.word	0x080079f0
 8006180:	fffffc02 	.word	0xfffffc02
 8006184:	39500000 	.word	0x39500000
 8006188:	7ff00000 	.word	0x7ff00000
 800618c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006190:	d165      	bne.n	800625e <_strtod_l+0x936>
 8006192:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006194:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006198:	b35a      	cbz	r2, 80061f2 <_strtod_l+0x8ca>
 800619a:	4a99      	ldr	r2, [pc, #612]	@ (8006400 <_strtod_l+0xad8>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d12b      	bne.n	80061f8 <_strtod_l+0x8d0>
 80061a0:	9b08      	ldr	r3, [sp, #32]
 80061a2:	4651      	mov	r1, sl
 80061a4:	b303      	cbz	r3, 80061e8 <_strtod_l+0x8c0>
 80061a6:	465a      	mov	r2, fp
 80061a8:	4b96      	ldr	r3, [pc, #600]	@ (8006404 <_strtod_l+0xadc>)
 80061aa:	4013      	ands	r3, r2
 80061ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80061b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80061b4:	d81b      	bhi.n	80061ee <_strtod_l+0x8c6>
 80061b6:	0d1b      	lsrs	r3, r3, #20
 80061b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80061bc:	fa02 f303 	lsl.w	r3, r2, r3
 80061c0:	4299      	cmp	r1, r3
 80061c2:	d119      	bne.n	80061f8 <_strtod_l+0x8d0>
 80061c4:	4b90      	ldr	r3, [pc, #576]	@ (8006408 <_strtod_l+0xae0>)
 80061c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d102      	bne.n	80061d2 <_strtod_l+0x8aa>
 80061cc:	3101      	adds	r1, #1
 80061ce:	f43f adc6 	beq.w	8005d5e <_strtod_l+0x436>
 80061d2:	f04f 0a00 	mov.w	sl, #0
 80061d6:	4b8b      	ldr	r3, [pc, #556]	@ (8006404 <_strtod_l+0xadc>)
 80061d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061da:	401a      	ands	r2, r3
 80061dc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80061e0:	9b08      	ldr	r3, [sp, #32]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1b9      	bne.n	800615a <_strtod_l+0x832>
 80061e6:	e5c5      	b.n	8005d74 <_strtod_l+0x44c>
 80061e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80061ec:	e7e8      	b.n	80061c0 <_strtod_l+0x898>
 80061ee:	4613      	mov	r3, r2
 80061f0:	e7e6      	b.n	80061c0 <_strtod_l+0x898>
 80061f2:	ea53 030a 	orrs.w	r3, r3, sl
 80061f6:	d0a2      	beq.n	800613e <_strtod_l+0x816>
 80061f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80061fa:	b1db      	cbz	r3, 8006234 <_strtod_l+0x90c>
 80061fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061fe:	4213      	tst	r3, r2
 8006200:	d0ee      	beq.n	80061e0 <_strtod_l+0x8b8>
 8006202:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006204:	4650      	mov	r0, sl
 8006206:	4659      	mov	r1, fp
 8006208:	9a08      	ldr	r2, [sp, #32]
 800620a:	b1bb      	cbz	r3, 800623c <_strtod_l+0x914>
 800620c:	f7ff fb68 	bl	80058e0 <sulp>
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006218:	f7f9 ffa8 	bl	800016c <__adddf3>
 800621c:	4682      	mov	sl, r0
 800621e:	468b      	mov	fp, r1
 8006220:	e7de      	b.n	80061e0 <_strtod_l+0x8b8>
 8006222:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006226:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800622a:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800622e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006232:	e7d5      	b.n	80061e0 <_strtod_l+0x8b8>
 8006234:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006236:	ea13 0f0a 	tst.w	r3, sl
 800623a:	e7e1      	b.n	8006200 <_strtod_l+0x8d8>
 800623c:	f7ff fb50 	bl	80058e0 <sulp>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006248:	f7f9 ff8e 	bl	8000168 <__aeabi_dsub>
 800624c:	2200      	movs	r2, #0
 800624e:	2300      	movs	r3, #0
 8006250:	4682      	mov	sl, r0
 8006252:	468b      	mov	fp, r1
 8006254:	f7fa fba8 	bl	80009a8 <__aeabi_dcmpeq>
 8006258:	2800      	cmp	r0, #0
 800625a:	d0c1      	beq.n	80061e0 <_strtod_l+0x8b8>
 800625c:	e615      	b.n	8005e8a <_strtod_l+0x562>
 800625e:	4641      	mov	r1, r8
 8006260:	4620      	mov	r0, r4
 8006262:	f7ff fac9 	bl	80057f8 <__ratio>
 8006266:	2200      	movs	r2, #0
 8006268:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800626c:	4606      	mov	r6, r0
 800626e:	460f      	mov	r7, r1
 8006270:	f7fa fbae 	bl	80009d0 <__aeabi_dcmple>
 8006274:	2800      	cmp	r0, #0
 8006276:	d06d      	beq.n	8006354 <_strtod_l+0xa2c>
 8006278:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800627a:	2b00      	cmp	r3, #0
 800627c:	d178      	bne.n	8006370 <_strtod_l+0xa48>
 800627e:	f1ba 0f00 	cmp.w	sl, #0
 8006282:	d156      	bne.n	8006332 <_strtod_l+0xa0a>
 8006284:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006286:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800628a:	2b00      	cmp	r3, #0
 800628c:	d158      	bne.n	8006340 <_strtod_l+0xa18>
 800628e:	2200      	movs	r2, #0
 8006290:	4630      	mov	r0, r6
 8006292:	4639      	mov	r1, r7
 8006294:	4b5d      	ldr	r3, [pc, #372]	@ (800640c <_strtod_l+0xae4>)
 8006296:	f7fa fb91 	bl	80009bc <__aeabi_dcmplt>
 800629a:	2800      	cmp	r0, #0
 800629c:	d157      	bne.n	800634e <_strtod_l+0xa26>
 800629e:	4630      	mov	r0, r6
 80062a0:	4639      	mov	r1, r7
 80062a2:	2200      	movs	r2, #0
 80062a4:	4b5a      	ldr	r3, [pc, #360]	@ (8006410 <_strtod_l+0xae8>)
 80062a6:	f7fa f917 	bl	80004d8 <__aeabi_dmul>
 80062aa:	4606      	mov	r6, r0
 80062ac:	460f      	mov	r7, r1
 80062ae:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80062b2:	9606      	str	r6, [sp, #24]
 80062b4:	9307      	str	r3, [sp, #28]
 80062b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062ba:	4d52      	ldr	r5, [pc, #328]	@ (8006404 <_strtod_l+0xadc>)
 80062bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80062c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062c2:	401d      	ands	r5, r3
 80062c4:	4b53      	ldr	r3, [pc, #332]	@ (8006414 <_strtod_l+0xaec>)
 80062c6:	429d      	cmp	r5, r3
 80062c8:	f040 80aa 	bne.w	8006420 <_strtod_l+0xaf8>
 80062cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062ce:	4650      	mov	r0, sl
 80062d0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80062d4:	4659      	mov	r1, fp
 80062d6:	f7ff f9cf 	bl	8005678 <__ulp>
 80062da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062de:	f7fa f8fb 	bl	80004d8 <__aeabi_dmul>
 80062e2:	4652      	mov	r2, sl
 80062e4:	465b      	mov	r3, fp
 80062e6:	f7f9 ff41 	bl	800016c <__adddf3>
 80062ea:	460b      	mov	r3, r1
 80062ec:	4945      	ldr	r1, [pc, #276]	@ (8006404 <_strtod_l+0xadc>)
 80062ee:	4a4a      	ldr	r2, [pc, #296]	@ (8006418 <_strtod_l+0xaf0>)
 80062f0:	4019      	ands	r1, r3
 80062f2:	4291      	cmp	r1, r2
 80062f4:	4682      	mov	sl, r0
 80062f6:	d942      	bls.n	800637e <_strtod_l+0xa56>
 80062f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80062fa:	4b43      	ldr	r3, [pc, #268]	@ (8006408 <_strtod_l+0xae0>)
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d103      	bne.n	8006308 <_strtod_l+0x9e0>
 8006300:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006302:	3301      	adds	r3, #1
 8006304:	f43f ad2b 	beq.w	8005d5e <_strtod_l+0x436>
 8006308:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800630c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006408 <_strtod_l+0xae0>
 8006310:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006312:	9805      	ldr	r0, [sp, #20]
 8006314:	f7fe fe7e 	bl	8005014 <_Bfree>
 8006318:	4649      	mov	r1, r9
 800631a:	9805      	ldr	r0, [sp, #20]
 800631c:	f7fe fe7a 	bl	8005014 <_Bfree>
 8006320:	4641      	mov	r1, r8
 8006322:	9805      	ldr	r0, [sp, #20]
 8006324:	f7fe fe76 	bl	8005014 <_Bfree>
 8006328:	4621      	mov	r1, r4
 800632a:	9805      	ldr	r0, [sp, #20]
 800632c:	f7fe fe72 	bl	8005014 <_Bfree>
 8006330:	e618      	b.n	8005f64 <_strtod_l+0x63c>
 8006332:	f1ba 0f01 	cmp.w	sl, #1
 8006336:	d103      	bne.n	8006340 <_strtod_l+0xa18>
 8006338:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800633a:	2b00      	cmp	r3, #0
 800633c:	f43f ada5 	beq.w	8005e8a <_strtod_l+0x562>
 8006340:	2200      	movs	r2, #0
 8006342:	4b36      	ldr	r3, [pc, #216]	@ (800641c <_strtod_l+0xaf4>)
 8006344:	2600      	movs	r6, #0
 8006346:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800634a:	4f30      	ldr	r7, [pc, #192]	@ (800640c <_strtod_l+0xae4>)
 800634c:	e7b3      	b.n	80062b6 <_strtod_l+0x98e>
 800634e:	2600      	movs	r6, #0
 8006350:	4f2f      	ldr	r7, [pc, #188]	@ (8006410 <_strtod_l+0xae8>)
 8006352:	e7ac      	b.n	80062ae <_strtod_l+0x986>
 8006354:	4630      	mov	r0, r6
 8006356:	4639      	mov	r1, r7
 8006358:	4b2d      	ldr	r3, [pc, #180]	@ (8006410 <_strtod_l+0xae8>)
 800635a:	2200      	movs	r2, #0
 800635c:	f7fa f8bc 	bl	80004d8 <__aeabi_dmul>
 8006360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006362:	4606      	mov	r6, r0
 8006364:	460f      	mov	r7, r1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0a1      	beq.n	80062ae <_strtod_l+0x986>
 800636a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800636e:	e7a2      	b.n	80062b6 <_strtod_l+0x98e>
 8006370:	2200      	movs	r2, #0
 8006372:	4b26      	ldr	r3, [pc, #152]	@ (800640c <_strtod_l+0xae4>)
 8006374:	4616      	mov	r6, r2
 8006376:	461f      	mov	r7, r3
 8006378:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800637c:	e79b      	b.n	80062b6 <_strtod_l+0x98e>
 800637e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006382:	9b08      	ldr	r3, [sp, #32]
 8006384:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1c1      	bne.n	8006310 <_strtod_l+0x9e8>
 800638c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006390:	0d1b      	lsrs	r3, r3, #20
 8006392:	051b      	lsls	r3, r3, #20
 8006394:	429d      	cmp	r5, r3
 8006396:	d1bb      	bne.n	8006310 <_strtod_l+0x9e8>
 8006398:	4630      	mov	r0, r6
 800639a:	4639      	mov	r1, r7
 800639c:	f7fa fbe4 	bl	8000b68 <__aeabi_d2lz>
 80063a0:	f7fa f86c 	bl	800047c <__aeabi_l2d>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	4630      	mov	r0, r6
 80063aa:	4639      	mov	r1, r7
 80063ac:	f7f9 fedc 	bl	8000168 <__aeabi_dsub>
 80063b0:	460b      	mov	r3, r1
 80063b2:	4602      	mov	r2, r0
 80063b4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80063b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80063bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063be:	ea46 060a 	orr.w	r6, r6, sl
 80063c2:	431e      	orrs	r6, r3
 80063c4:	d069      	beq.n	800649a <_strtod_l+0xb72>
 80063c6:	a30a      	add	r3, pc, #40	@ (adr r3, 80063f0 <_strtod_l+0xac8>)
 80063c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063cc:	f7fa faf6 	bl	80009bc <__aeabi_dcmplt>
 80063d0:	2800      	cmp	r0, #0
 80063d2:	f47f accf 	bne.w	8005d74 <_strtod_l+0x44c>
 80063d6:	a308      	add	r3, pc, #32	@ (adr r3, 80063f8 <_strtod_l+0xad0>)
 80063d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063e0:	f7fa fb0a 	bl	80009f8 <__aeabi_dcmpgt>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d093      	beq.n	8006310 <_strtod_l+0x9e8>
 80063e8:	e4c4      	b.n	8005d74 <_strtod_l+0x44c>
 80063ea:	bf00      	nop
 80063ec:	f3af 8000 	nop.w
 80063f0:	94a03595 	.word	0x94a03595
 80063f4:	3fdfffff 	.word	0x3fdfffff
 80063f8:	35afe535 	.word	0x35afe535
 80063fc:	3fe00000 	.word	0x3fe00000
 8006400:	000fffff 	.word	0x000fffff
 8006404:	7ff00000 	.word	0x7ff00000
 8006408:	7fefffff 	.word	0x7fefffff
 800640c:	3ff00000 	.word	0x3ff00000
 8006410:	3fe00000 	.word	0x3fe00000
 8006414:	7fe00000 	.word	0x7fe00000
 8006418:	7c9fffff 	.word	0x7c9fffff
 800641c:	bff00000 	.word	0xbff00000
 8006420:	9b08      	ldr	r3, [sp, #32]
 8006422:	b323      	cbz	r3, 800646e <_strtod_l+0xb46>
 8006424:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006428:	d821      	bhi.n	800646e <_strtod_l+0xb46>
 800642a:	a327      	add	r3, pc, #156	@ (adr r3, 80064c8 <_strtod_l+0xba0>)
 800642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006430:	4630      	mov	r0, r6
 8006432:	4639      	mov	r1, r7
 8006434:	f7fa facc 	bl	80009d0 <__aeabi_dcmple>
 8006438:	b1a0      	cbz	r0, 8006464 <_strtod_l+0xb3c>
 800643a:	4639      	mov	r1, r7
 800643c:	4630      	mov	r0, r6
 800643e:	f7fa fb23 	bl	8000a88 <__aeabi_d2uiz>
 8006442:	2801      	cmp	r0, #1
 8006444:	bf38      	it	cc
 8006446:	2001      	movcc	r0, #1
 8006448:	f7f9 ffcc 	bl	80003e4 <__aeabi_ui2d>
 800644c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800644e:	4606      	mov	r6, r0
 8006450:	460f      	mov	r7, r1
 8006452:	b9fb      	cbnz	r3, 8006494 <_strtod_l+0xb6c>
 8006454:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006458:	9014      	str	r0, [sp, #80]	@ 0x50
 800645a:	9315      	str	r3, [sp, #84]	@ 0x54
 800645c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006460:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006464:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006466:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800646a:	1b5b      	subs	r3, r3, r5
 800646c:	9311      	str	r3, [sp, #68]	@ 0x44
 800646e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006472:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006476:	f7ff f8ff 	bl	8005678 <__ulp>
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	4650      	mov	r0, sl
 8006480:	4659      	mov	r1, fp
 8006482:	f7fa f829 	bl	80004d8 <__aeabi_dmul>
 8006486:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800648a:	f7f9 fe6f 	bl	800016c <__adddf3>
 800648e:	4682      	mov	sl, r0
 8006490:	468b      	mov	fp, r1
 8006492:	e776      	b.n	8006382 <_strtod_l+0xa5a>
 8006494:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006498:	e7e0      	b.n	800645c <_strtod_l+0xb34>
 800649a:	a30d      	add	r3, pc, #52	@ (adr r3, 80064d0 <_strtod_l+0xba8>)
 800649c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a0:	f7fa fa8c 	bl	80009bc <__aeabi_dcmplt>
 80064a4:	e79e      	b.n	80063e4 <_strtod_l+0xabc>
 80064a6:	2300      	movs	r3, #0
 80064a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80064aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80064ac:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80064ae:	6013      	str	r3, [r2, #0]
 80064b0:	f7ff ba77 	b.w	80059a2 <_strtod_l+0x7a>
 80064b4:	2a65      	cmp	r2, #101	@ 0x65
 80064b6:	f43f ab6e 	beq.w	8005b96 <_strtod_l+0x26e>
 80064ba:	2a45      	cmp	r2, #69	@ 0x45
 80064bc:	f43f ab6b 	beq.w	8005b96 <_strtod_l+0x26e>
 80064c0:	2301      	movs	r3, #1
 80064c2:	f7ff bba6 	b.w	8005c12 <_strtod_l+0x2ea>
 80064c6:	bf00      	nop
 80064c8:	ffc00000 	.word	0xffc00000
 80064cc:	41dfffff 	.word	0x41dfffff
 80064d0:	94a03595 	.word	0x94a03595
 80064d4:	3fcfffff 	.word	0x3fcfffff

080064d8 <_strtod_r>:
 80064d8:	4b01      	ldr	r3, [pc, #4]	@ (80064e0 <_strtod_r+0x8>)
 80064da:	f7ff ba25 	b.w	8005928 <_strtod_l>
 80064de:	bf00      	nop
 80064e0:	20000078 	.word	0x20000078

080064e4 <_strtol_l.constprop.0>:
 80064e4:	2b24      	cmp	r3, #36	@ 0x24
 80064e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064ea:	4686      	mov	lr, r0
 80064ec:	4690      	mov	r8, r2
 80064ee:	d801      	bhi.n	80064f4 <_strtol_l.constprop.0+0x10>
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d106      	bne.n	8006502 <_strtol_l.constprop.0+0x1e>
 80064f4:	f7fd fdbe 	bl	8004074 <__errno>
 80064f8:	2316      	movs	r3, #22
 80064fa:	6003      	str	r3, [r0, #0]
 80064fc:	2000      	movs	r0, #0
 80064fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006502:	460d      	mov	r5, r1
 8006504:	4833      	ldr	r0, [pc, #204]	@ (80065d4 <_strtol_l.constprop.0+0xf0>)
 8006506:	462a      	mov	r2, r5
 8006508:	f815 4b01 	ldrb.w	r4, [r5], #1
 800650c:	5d06      	ldrb	r6, [r0, r4]
 800650e:	f016 0608 	ands.w	r6, r6, #8
 8006512:	d1f8      	bne.n	8006506 <_strtol_l.constprop.0+0x22>
 8006514:	2c2d      	cmp	r4, #45	@ 0x2d
 8006516:	d12d      	bne.n	8006574 <_strtol_l.constprop.0+0x90>
 8006518:	2601      	movs	r6, #1
 800651a:	782c      	ldrb	r4, [r5, #0]
 800651c:	1c95      	adds	r5, r2, #2
 800651e:	f033 0210 	bics.w	r2, r3, #16
 8006522:	d109      	bne.n	8006538 <_strtol_l.constprop.0+0x54>
 8006524:	2c30      	cmp	r4, #48	@ 0x30
 8006526:	d12a      	bne.n	800657e <_strtol_l.constprop.0+0x9a>
 8006528:	782a      	ldrb	r2, [r5, #0]
 800652a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800652e:	2a58      	cmp	r2, #88	@ 0x58
 8006530:	d125      	bne.n	800657e <_strtol_l.constprop.0+0x9a>
 8006532:	2310      	movs	r3, #16
 8006534:	786c      	ldrb	r4, [r5, #1]
 8006536:	3502      	adds	r5, #2
 8006538:	2200      	movs	r2, #0
 800653a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800653e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8006542:	fbbc f9f3 	udiv	r9, ip, r3
 8006546:	4610      	mov	r0, r2
 8006548:	fb03 ca19 	mls	sl, r3, r9, ip
 800654c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006550:	2f09      	cmp	r7, #9
 8006552:	d81b      	bhi.n	800658c <_strtol_l.constprop.0+0xa8>
 8006554:	463c      	mov	r4, r7
 8006556:	42a3      	cmp	r3, r4
 8006558:	dd27      	ble.n	80065aa <_strtol_l.constprop.0+0xc6>
 800655a:	1c57      	adds	r7, r2, #1
 800655c:	d007      	beq.n	800656e <_strtol_l.constprop.0+0x8a>
 800655e:	4581      	cmp	r9, r0
 8006560:	d320      	bcc.n	80065a4 <_strtol_l.constprop.0+0xc0>
 8006562:	d101      	bne.n	8006568 <_strtol_l.constprop.0+0x84>
 8006564:	45a2      	cmp	sl, r4
 8006566:	db1d      	blt.n	80065a4 <_strtol_l.constprop.0+0xc0>
 8006568:	2201      	movs	r2, #1
 800656a:	fb00 4003 	mla	r0, r0, r3, r4
 800656e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006572:	e7eb      	b.n	800654c <_strtol_l.constprop.0+0x68>
 8006574:	2c2b      	cmp	r4, #43	@ 0x2b
 8006576:	bf04      	itt	eq
 8006578:	782c      	ldrbeq	r4, [r5, #0]
 800657a:	1c95      	addeq	r5, r2, #2
 800657c:	e7cf      	b.n	800651e <_strtol_l.constprop.0+0x3a>
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1da      	bne.n	8006538 <_strtol_l.constprop.0+0x54>
 8006582:	2c30      	cmp	r4, #48	@ 0x30
 8006584:	bf0c      	ite	eq
 8006586:	2308      	moveq	r3, #8
 8006588:	230a      	movne	r3, #10
 800658a:	e7d5      	b.n	8006538 <_strtol_l.constprop.0+0x54>
 800658c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006590:	2f19      	cmp	r7, #25
 8006592:	d801      	bhi.n	8006598 <_strtol_l.constprop.0+0xb4>
 8006594:	3c37      	subs	r4, #55	@ 0x37
 8006596:	e7de      	b.n	8006556 <_strtol_l.constprop.0+0x72>
 8006598:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800659c:	2f19      	cmp	r7, #25
 800659e:	d804      	bhi.n	80065aa <_strtol_l.constprop.0+0xc6>
 80065a0:	3c57      	subs	r4, #87	@ 0x57
 80065a2:	e7d8      	b.n	8006556 <_strtol_l.constprop.0+0x72>
 80065a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80065a8:	e7e1      	b.n	800656e <_strtol_l.constprop.0+0x8a>
 80065aa:	1c53      	adds	r3, r2, #1
 80065ac:	d108      	bne.n	80065c0 <_strtol_l.constprop.0+0xdc>
 80065ae:	2322      	movs	r3, #34	@ 0x22
 80065b0:	4660      	mov	r0, ip
 80065b2:	f8ce 3000 	str.w	r3, [lr]
 80065b6:	f1b8 0f00 	cmp.w	r8, #0
 80065ba:	d0a0      	beq.n	80064fe <_strtol_l.constprop.0+0x1a>
 80065bc:	1e69      	subs	r1, r5, #1
 80065be:	e006      	b.n	80065ce <_strtol_l.constprop.0+0xea>
 80065c0:	b106      	cbz	r6, 80065c4 <_strtol_l.constprop.0+0xe0>
 80065c2:	4240      	negs	r0, r0
 80065c4:	f1b8 0f00 	cmp.w	r8, #0
 80065c8:	d099      	beq.n	80064fe <_strtol_l.constprop.0+0x1a>
 80065ca:	2a00      	cmp	r2, #0
 80065cc:	d1f6      	bne.n	80065bc <_strtol_l.constprop.0+0xd8>
 80065ce:	f8c8 1000 	str.w	r1, [r8]
 80065d2:	e794      	b.n	80064fe <_strtol_l.constprop.0+0x1a>
 80065d4:	08007a19 	.word	0x08007a19

080065d8 <_strtol_r>:
 80065d8:	f7ff bf84 	b.w	80064e4 <_strtol_l.constprop.0>

080065dc <__ssputs_r>:
 80065dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065e0:	461f      	mov	r7, r3
 80065e2:	688e      	ldr	r6, [r1, #8]
 80065e4:	4682      	mov	sl, r0
 80065e6:	42be      	cmp	r6, r7
 80065e8:	460c      	mov	r4, r1
 80065ea:	4690      	mov	r8, r2
 80065ec:	680b      	ldr	r3, [r1, #0]
 80065ee:	d82d      	bhi.n	800664c <__ssputs_r+0x70>
 80065f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80065f8:	d026      	beq.n	8006648 <__ssputs_r+0x6c>
 80065fa:	6965      	ldr	r5, [r4, #20]
 80065fc:	6909      	ldr	r1, [r1, #16]
 80065fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006602:	eba3 0901 	sub.w	r9, r3, r1
 8006606:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800660a:	1c7b      	adds	r3, r7, #1
 800660c:	444b      	add	r3, r9
 800660e:	106d      	asrs	r5, r5, #1
 8006610:	429d      	cmp	r5, r3
 8006612:	bf38      	it	cc
 8006614:	461d      	movcc	r5, r3
 8006616:	0553      	lsls	r3, r2, #21
 8006618:	d527      	bpl.n	800666a <__ssputs_r+0x8e>
 800661a:	4629      	mov	r1, r5
 800661c:	f7fe fc2e 	bl	8004e7c <_malloc_r>
 8006620:	4606      	mov	r6, r0
 8006622:	b360      	cbz	r0, 800667e <__ssputs_r+0xa2>
 8006624:	464a      	mov	r2, r9
 8006626:	6921      	ldr	r1, [r4, #16]
 8006628:	f000 fa14 	bl	8006a54 <memcpy>
 800662c:	89a3      	ldrh	r3, [r4, #12]
 800662e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006636:	81a3      	strh	r3, [r4, #12]
 8006638:	6126      	str	r6, [r4, #16]
 800663a:	444e      	add	r6, r9
 800663c:	6026      	str	r6, [r4, #0]
 800663e:	463e      	mov	r6, r7
 8006640:	6165      	str	r5, [r4, #20]
 8006642:	eba5 0509 	sub.w	r5, r5, r9
 8006646:	60a5      	str	r5, [r4, #8]
 8006648:	42be      	cmp	r6, r7
 800664a:	d900      	bls.n	800664e <__ssputs_r+0x72>
 800664c:	463e      	mov	r6, r7
 800664e:	4632      	mov	r2, r6
 8006650:	4641      	mov	r1, r8
 8006652:	6820      	ldr	r0, [r4, #0]
 8006654:	f000 f9c2 	bl	80069dc <memmove>
 8006658:	2000      	movs	r0, #0
 800665a:	68a3      	ldr	r3, [r4, #8]
 800665c:	1b9b      	subs	r3, r3, r6
 800665e:	60a3      	str	r3, [r4, #8]
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	4433      	add	r3, r6
 8006664:	6023      	str	r3, [r4, #0]
 8006666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800666a:	462a      	mov	r2, r5
 800666c:	f000 fd83 	bl	8007176 <_realloc_r>
 8006670:	4606      	mov	r6, r0
 8006672:	2800      	cmp	r0, #0
 8006674:	d1e0      	bne.n	8006638 <__ssputs_r+0x5c>
 8006676:	4650      	mov	r0, sl
 8006678:	6921      	ldr	r1, [r4, #16]
 800667a:	f7fe fb8d 	bl	8004d98 <_free_r>
 800667e:	230c      	movs	r3, #12
 8006680:	f8ca 3000 	str.w	r3, [sl]
 8006684:	89a3      	ldrh	r3, [r4, #12]
 8006686:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800668a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800668e:	81a3      	strh	r3, [r4, #12]
 8006690:	e7e9      	b.n	8006666 <__ssputs_r+0x8a>
	...

08006694 <_svfiprintf_r>:
 8006694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006698:	4698      	mov	r8, r3
 800669a:	898b      	ldrh	r3, [r1, #12]
 800669c:	4607      	mov	r7, r0
 800669e:	061b      	lsls	r3, r3, #24
 80066a0:	460d      	mov	r5, r1
 80066a2:	4614      	mov	r4, r2
 80066a4:	b09d      	sub	sp, #116	@ 0x74
 80066a6:	d510      	bpl.n	80066ca <_svfiprintf_r+0x36>
 80066a8:	690b      	ldr	r3, [r1, #16]
 80066aa:	b973      	cbnz	r3, 80066ca <_svfiprintf_r+0x36>
 80066ac:	2140      	movs	r1, #64	@ 0x40
 80066ae:	f7fe fbe5 	bl	8004e7c <_malloc_r>
 80066b2:	6028      	str	r0, [r5, #0]
 80066b4:	6128      	str	r0, [r5, #16]
 80066b6:	b930      	cbnz	r0, 80066c6 <_svfiprintf_r+0x32>
 80066b8:	230c      	movs	r3, #12
 80066ba:	603b      	str	r3, [r7, #0]
 80066bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066c0:	b01d      	add	sp, #116	@ 0x74
 80066c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c6:	2340      	movs	r3, #64	@ 0x40
 80066c8:	616b      	str	r3, [r5, #20]
 80066ca:	2300      	movs	r3, #0
 80066cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80066ce:	2320      	movs	r3, #32
 80066d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066d4:	2330      	movs	r3, #48	@ 0x30
 80066d6:	f04f 0901 	mov.w	r9, #1
 80066da:	f8cd 800c 	str.w	r8, [sp, #12]
 80066de:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006878 <_svfiprintf_r+0x1e4>
 80066e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066e6:	4623      	mov	r3, r4
 80066e8:	469a      	mov	sl, r3
 80066ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066ee:	b10a      	cbz	r2, 80066f4 <_svfiprintf_r+0x60>
 80066f0:	2a25      	cmp	r2, #37	@ 0x25
 80066f2:	d1f9      	bne.n	80066e8 <_svfiprintf_r+0x54>
 80066f4:	ebba 0b04 	subs.w	fp, sl, r4
 80066f8:	d00b      	beq.n	8006712 <_svfiprintf_r+0x7e>
 80066fa:	465b      	mov	r3, fp
 80066fc:	4622      	mov	r2, r4
 80066fe:	4629      	mov	r1, r5
 8006700:	4638      	mov	r0, r7
 8006702:	f7ff ff6b 	bl	80065dc <__ssputs_r>
 8006706:	3001      	adds	r0, #1
 8006708:	f000 80a7 	beq.w	800685a <_svfiprintf_r+0x1c6>
 800670c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800670e:	445a      	add	r2, fp
 8006710:	9209      	str	r2, [sp, #36]	@ 0x24
 8006712:	f89a 3000 	ldrb.w	r3, [sl]
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 809f 	beq.w	800685a <_svfiprintf_r+0x1c6>
 800671c:	2300      	movs	r3, #0
 800671e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006726:	f10a 0a01 	add.w	sl, sl, #1
 800672a:	9304      	str	r3, [sp, #16]
 800672c:	9307      	str	r3, [sp, #28]
 800672e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006732:	931a      	str	r3, [sp, #104]	@ 0x68
 8006734:	4654      	mov	r4, sl
 8006736:	2205      	movs	r2, #5
 8006738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800673c:	484e      	ldr	r0, [pc, #312]	@ (8006878 <_svfiprintf_r+0x1e4>)
 800673e:	f7fd fcc6 	bl	80040ce <memchr>
 8006742:	9a04      	ldr	r2, [sp, #16]
 8006744:	b9d8      	cbnz	r0, 800677e <_svfiprintf_r+0xea>
 8006746:	06d0      	lsls	r0, r2, #27
 8006748:	bf44      	itt	mi
 800674a:	2320      	movmi	r3, #32
 800674c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006750:	0711      	lsls	r1, r2, #28
 8006752:	bf44      	itt	mi
 8006754:	232b      	movmi	r3, #43	@ 0x2b
 8006756:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800675a:	f89a 3000 	ldrb.w	r3, [sl]
 800675e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006760:	d015      	beq.n	800678e <_svfiprintf_r+0xfa>
 8006762:	4654      	mov	r4, sl
 8006764:	2000      	movs	r0, #0
 8006766:	f04f 0c0a 	mov.w	ip, #10
 800676a:	9a07      	ldr	r2, [sp, #28]
 800676c:	4621      	mov	r1, r4
 800676e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006772:	3b30      	subs	r3, #48	@ 0x30
 8006774:	2b09      	cmp	r3, #9
 8006776:	d94b      	bls.n	8006810 <_svfiprintf_r+0x17c>
 8006778:	b1b0      	cbz	r0, 80067a8 <_svfiprintf_r+0x114>
 800677a:	9207      	str	r2, [sp, #28]
 800677c:	e014      	b.n	80067a8 <_svfiprintf_r+0x114>
 800677e:	eba0 0308 	sub.w	r3, r0, r8
 8006782:	fa09 f303 	lsl.w	r3, r9, r3
 8006786:	4313      	orrs	r3, r2
 8006788:	46a2      	mov	sl, r4
 800678a:	9304      	str	r3, [sp, #16]
 800678c:	e7d2      	b.n	8006734 <_svfiprintf_r+0xa0>
 800678e:	9b03      	ldr	r3, [sp, #12]
 8006790:	1d19      	adds	r1, r3, #4
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	9103      	str	r1, [sp, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	bfbb      	ittet	lt
 800679a:	425b      	neglt	r3, r3
 800679c:	f042 0202 	orrlt.w	r2, r2, #2
 80067a0:	9307      	strge	r3, [sp, #28]
 80067a2:	9307      	strlt	r3, [sp, #28]
 80067a4:	bfb8      	it	lt
 80067a6:	9204      	strlt	r2, [sp, #16]
 80067a8:	7823      	ldrb	r3, [r4, #0]
 80067aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80067ac:	d10a      	bne.n	80067c4 <_svfiprintf_r+0x130>
 80067ae:	7863      	ldrb	r3, [r4, #1]
 80067b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80067b2:	d132      	bne.n	800681a <_svfiprintf_r+0x186>
 80067b4:	9b03      	ldr	r3, [sp, #12]
 80067b6:	3402      	adds	r4, #2
 80067b8:	1d1a      	adds	r2, r3, #4
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	9203      	str	r2, [sp, #12]
 80067be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067c2:	9305      	str	r3, [sp, #20]
 80067c4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800687c <_svfiprintf_r+0x1e8>
 80067c8:	2203      	movs	r2, #3
 80067ca:	4650      	mov	r0, sl
 80067cc:	7821      	ldrb	r1, [r4, #0]
 80067ce:	f7fd fc7e 	bl	80040ce <memchr>
 80067d2:	b138      	cbz	r0, 80067e4 <_svfiprintf_r+0x150>
 80067d4:	2240      	movs	r2, #64	@ 0x40
 80067d6:	9b04      	ldr	r3, [sp, #16]
 80067d8:	eba0 000a 	sub.w	r0, r0, sl
 80067dc:	4082      	lsls	r2, r0
 80067de:	4313      	orrs	r3, r2
 80067e0:	3401      	adds	r4, #1
 80067e2:	9304      	str	r3, [sp, #16]
 80067e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067e8:	2206      	movs	r2, #6
 80067ea:	4825      	ldr	r0, [pc, #148]	@ (8006880 <_svfiprintf_r+0x1ec>)
 80067ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067f0:	f7fd fc6d 	bl	80040ce <memchr>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d036      	beq.n	8006866 <_svfiprintf_r+0x1d2>
 80067f8:	4b22      	ldr	r3, [pc, #136]	@ (8006884 <_svfiprintf_r+0x1f0>)
 80067fa:	bb1b      	cbnz	r3, 8006844 <_svfiprintf_r+0x1b0>
 80067fc:	9b03      	ldr	r3, [sp, #12]
 80067fe:	3307      	adds	r3, #7
 8006800:	f023 0307 	bic.w	r3, r3, #7
 8006804:	3308      	adds	r3, #8
 8006806:	9303      	str	r3, [sp, #12]
 8006808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800680a:	4433      	add	r3, r6
 800680c:	9309      	str	r3, [sp, #36]	@ 0x24
 800680e:	e76a      	b.n	80066e6 <_svfiprintf_r+0x52>
 8006810:	460c      	mov	r4, r1
 8006812:	2001      	movs	r0, #1
 8006814:	fb0c 3202 	mla	r2, ip, r2, r3
 8006818:	e7a8      	b.n	800676c <_svfiprintf_r+0xd8>
 800681a:	2300      	movs	r3, #0
 800681c:	f04f 0c0a 	mov.w	ip, #10
 8006820:	4619      	mov	r1, r3
 8006822:	3401      	adds	r4, #1
 8006824:	9305      	str	r3, [sp, #20]
 8006826:	4620      	mov	r0, r4
 8006828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800682c:	3a30      	subs	r2, #48	@ 0x30
 800682e:	2a09      	cmp	r2, #9
 8006830:	d903      	bls.n	800683a <_svfiprintf_r+0x1a6>
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0c6      	beq.n	80067c4 <_svfiprintf_r+0x130>
 8006836:	9105      	str	r1, [sp, #20]
 8006838:	e7c4      	b.n	80067c4 <_svfiprintf_r+0x130>
 800683a:	4604      	mov	r4, r0
 800683c:	2301      	movs	r3, #1
 800683e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006842:	e7f0      	b.n	8006826 <_svfiprintf_r+0x192>
 8006844:	ab03      	add	r3, sp, #12
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	462a      	mov	r2, r5
 800684a:	4638      	mov	r0, r7
 800684c:	4b0e      	ldr	r3, [pc, #56]	@ (8006888 <_svfiprintf_r+0x1f4>)
 800684e:	a904      	add	r1, sp, #16
 8006850:	f7fc fcca 	bl	80031e8 <_printf_float>
 8006854:	1c42      	adds	r2, r0, #1
 8006856:	4606      	mov	r6, r0
 8006858:	d1d6      	bne.n	8006808 <_svfiprintf_r+0x174>
 800685a:	89ab      	ldrh	r3, [r5, #12]
 800685c:	065b      	lsls	r3, r3, #25
 800685e:	f53f af2d 	bmi.w	80066bc <_svfiprintf_r+0x28>
 8006862:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006864:	e72c      	b.n	80066c0 <_svfiprintf_r+0x2c>
 8006866:	ab03      	add	r3, sp, #12
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	462a      	mov	r2, r5
 800686c:	4638      	mov	r0, r7
 800686e:	4b06      	ldr	r3, [pc, #24]	@ (8006888 <_svfiprintf_r+0x1f4>)
 8006870:	a904      	add	r1, sp, #16
 8006872:	f7fc ff57 	bl	8003724 <_printf_i>
 8006876:	e7ed      	b.n	8006854 <_svfiprintf_r+0x1c0>
 8006878:	08007b19 	.word	0x08007b19
 800687c:	08007b1f 	.word	0x08007b1f
 8006880:	08007b23 	.word	0x08007b23
 8006884:	080031e9 	.word	0x080031e9
 8006888:	080065dd 	.word	0x080065dd

0800688c <__sflush_r>:
 800688c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	0716      	lsls	r6, r2, #28
 8006894:	4605      	mov	r5, r0
 8006896:	460c      	mov	r4, r1
 8006898:	d454      	bmi.n	8006944 <__sflush_r+0xb8>
 800689a:	684b      	ldr	r3, [r1, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	dc02      	bgt.n	80068a6 <__sflush_r+0x1a>
 80068a0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	dd48      	ble.n	8006938 <__sflush_r+0xac>
 80068a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80068a8:	2e00      	cmp	r6, #0
 80068aa:	d045      	beq.n	8006938 <__sflush_r+0xac>
 80068ac:	2300      	movs	r3, #0
 80068ae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80068b2:	682f      	ldr	r7, [r5, #0]
 80068b4:	6a21      	ldr	r1, [r4, #32]
 80068b6:	602b      	str	r3, [r5, #0]
 80068b8:	d030      	beq.n	800691c <__sflush_r+0x90>
 80068ba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80068bc:	89a3      	ldrh	r3, [r4, #12]
 80068be:	0759      	lsls	r1, r3, #29
 80068c0:	d505      	bpl.n	80068ce <__sflush_r+0x42>
 80068c2:	6863      	ldr	r3, [r4, #4]
 80068c4:	1ad2      	subs	r2, r2, r3
 80068c6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80068c8:	b10b      	cbz	r3, 80068ce <__sflush_r+0x42>
 80068ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80068cc:	1ad2      	subs	r2, r2, r3
 80068ce:	2300      	movs	r3, #0
 80068d0:	4628      	mov	r0, r5
 80068d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80068d4:	6a21      	ldr	r1, [r4, #32]
 80068d6:	47b0      	blx	r6
 80068d8:	1c43      	adds	r3, r0, #1
 80068da:	89a3      	ldrh	r3, [r4, #12]
 80068dc:	d106      	bne.n	80068ec <__sflush_r+0x60>
 80068de:	6829      	ldr	r1, [r5, #0]
 80068e0:	291d      	cmp	r1, #29
 80068e2:	d82b      	bhi.n	800693c <__sflush_r+0xb0>
 80068e4:	4a28      	ldr	r2, [pc, #160]	@ (8006988 <__sflush_r+0xfc>)
 80068e6:	410a      	asrs	r2, r1
 80068e8:	07d6      	lsls	r6, r2, #31
 80068ea:	d427      	bmi.n	800693c <__sflush_r+0xb0>
 80068ec:	2200      	movs	r2, #0
 80068ee:	6062      	str	r2, [r4, #4]
 80068f0:	6922      	ldr	r2, [r4, #16]
 80068f2:	04d9      	lsls	r1, r3, #19
 80068f4:	6022      	str	r2, [r4, #0]
 80068f6:	d504      	bpl.n	8006902 <__sflush_r+0x76>
 80068f8:	1c42      	adds	r2, r0, #1
 80068fa:	d101      	bne.n	8006900 <__sflush_r+0x74>
 80068fc:	682b      	ldr	r3, [r5, #0]
 80068fe:	b903      	cbnz	r3, 8006902 <__sflush_r+0x76>
 8006900:	6560      	str	r0, [r4, #84]	@ 0x54
 8006902:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006904:	602f      	str	r7, [r5, #0]
 8006906:	b1b9      	cbz	r1, 8006938 <__sflush_r+0xac>
 8006908:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800690c:	4299      	cmp	r1, r3
 800690e:	d002      	beq.n	8006916 <__sflush_r+0x8a>
 8006910:	4628      	mov	r0, r5
 8006912:	f7fe fa41 	bl	8004d98 <_free_r>
 8006916:	2300      	movs	r3, #0
 8006918:	6363      	str	r3, [r4, #52]	@ 0x34
 800691a:	e00d      	b.n	8006938 <__sflush_r+0xac>
 800691c:	2301      	movs	r3, #1
 800691e:	4628      	mov	r0, r5
 8006920:	47b0      	blx	r6
 8006922:	4602      	mov	r2, r0
 8006924:	1c50      	adds	r0, r2, #1
 8006926:	d1c9      	bne.n	80068bc <__sflush_r+0x30>
 8006928:	682b      	ldr	r3, [r5, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d0c6      	beq.n	80068bc <__sflush_r+0x30>
 800692e:	2b1d      	cmp	r3, #29
 8006930:	d001      	beq.n	8006936 <__sflush_r+0xaa>
 8006932:	2b16      	cmp	r3, #22
 8006934:	d11d      	bne.n	8006972 <__sflush_r+0xe6>
 8006936:	602f      	str	r7, [r5, #0]
 8006938:	2000      	movs	r0, #0
 800693a:	e021      	b.n	8006980 <__sflush_r+0xf4>
 800693c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006940:	b21b      	sxth	r3, r3
 8006942:	e01a      	b.n	800697a <__sflush_r+0xee>
 8006944:	690f      	ldr	r7, [r1, #16]
 8006946:	2f00      	cmp	r7, #0
 8006948:	d0f6      	beq.n	8006938 <__sflush_r+0xac>
 800694a:	0793      	lsls	r3, r2, #30
 800694c:	bf18      	it	ne
 800694e:	2300      	movne	r3, #0
 8006950:	680e      	ldr	r6, [r1, #0]
 8006952:	bf08      	it	eq
 8006954:	694b      	ldreq	r3, [r1, #20]
 8006956:	1bf6      	subs	r6, r6, r7
 8006958:	600f      	str	r7, [r1, #0]
 800695a:	608b      	str	r3, [r1, #8]
 800695c:	2e00      	cmp	r6, #0
 800695e:	ddeb      	ble.n	8006938 <__sflush_r+0xac>
 8006960:	4633      	mov	r3, r6
 8006962:	463a      	mov	r2, r7
 8006964:	4628      	mov	r0, r5
 8006966:	6a21      	ldr	r1, [r4, #32]
 8006968:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800696c:	47e0      	blx	ip
 800696e:	2800      	cmp	r0, #0
 8006970:	dc07      	bgt.n	8006982 <__sflush_r+0xf6>
 8006972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800697a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800697e:	81a3      	strh	r3, [r4, #12]
 8006980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006982:	4407      	add	r7, r0
 8006984:	1a36      	subs	r6, r6, r0
 8006986:	e7e9      	b.n	800695c <__sflush_r+0xd0>
 8006988:	dfbffffe 	.word	0xdfbffffe

0800698c <_fflush_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	690b      	ldr	r3, [r1, #16]
 8006990:	4605      	mov	r5, r0
 8006992:	460c      	mov	r4, r1
 8006994:	b913      	cbnz	r3, 800699c <_fflush_r+0x10>
 8006996:	2500      	movs	r5, #0
 8006998:	4628      	mov	r0, r5
 800699a:	bd38      	pop	{r3, r4, r5, pc}
 800699c:	b118      	cbz	r0, 80069a6 <_fflush_r+0x1a>
 800699e:	6a03      	ldr	r3, [r0, #32]
 80069a0:	b90b      	cbnz	r3, 80069a6 <_fflush_r+0x1a>
 80069a2:	f7fd fa7b 	bl	8003e9c <__sinit>
 80069a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d0f3      	beq.n	8006996 <_fflush_r+0xa>
 80069ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80069b0:	07d0      	lsls	r0, r2, #31
 80069b2:	d404      	bmi.n	80069be <_fflush_r+0x32>
 80069b4:	0599      	lsls	r1, r3, #22
 80069b6:	d402      	bmi.n	80069be <_fflush_r+0x32>
 80069b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069ba:	f7fd fb86 	bl	80040ca <__retarget_lock_acquire_recursive>
 80069be:	4628      	mov	r0, r5
 80069c0:	4621      	mov	r1, r4
 80069c2:	f7ff ff63 	bl	800688c <__sflush_r>
 80069c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069c8:	4605      	mov	r5, r0
 80069ca:	07da      	lsls	r2, r3, #31
 80069cc:	d4e4      	bmi.n	8006998 <_fflush_r+0xc>
 80069ce:	89a3      	ldrh	r3, [r4, #12]
 80069d0:	059b      	lsls	r3, r3, #22
 80069d2:	d4e1      	bmi.n	8006998 <_fflush_r+0xc>
 80069d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069d6:	f7fd fb79 	bl	80040cc <__retarget_lock_release_recursive>
 80069da:	e7dd      	b.n	8006998 <_fflush_r+0xc>

080069dc <memmove>:
 80069dc:	4288      	cmp	r0, r1
 80069de:	b510      	push	{r4, lr}
 80069e0:	eb01 0402 	add.w	r4, r1, r2
 80069e4:	d902      	bls.n	80069ec <memmove+0x10>
 80069e6:	4284      	cmp	r4, r0
 80069e8:	4623      	mov	r3, r4
 80069ea:	d807      	bhi.n	80069fc <memmove+0x20>
 80069ec:	1e43      	subs	r3, r0, #1
 80069ee:	42a1      	cmp	r1, r4
 80069f0:	d008      	beq.n	8006a04 <memmove+0x28>
 80069f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069fa:	e7f8      	b.n	80069ee <memmove+0x12>
 80069fc:	4601      	mov	r1, r0
 80069fe:	4402      	add	r2, r0
 8006a00:	428a      	cmp	r2, r1
 8006a02:	d100      	bne.n	8006a06 <memmove+0x2a>
 8006a04:	bd10      	pop	{r4, pc}
 8006a06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a0e:	e7f7      	b.n	8006a00 <memmove+0x24>

08006a10 <strncmp>:
 8006a10:	b510      	push	{r4, lr}
 8006a12:	b16a      	cbz	r2, 8006a30 <strncmp+0x20>
 8006a14:	3901      	subs	r1, #1
 8006a16:	1884      	adds	r4, r0, r2
 8006a18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a1c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d103      	bne.n	8006a2c <strncmp+0x1c>
 8006a24:	42a0      	cmp	r0, r4
 8006a26:	d001      	beq.n	8006a2c <strncmp+0x1c>
 8006a28:	2a00      	cmp	r2, #0
 8006a2a:	d1f5      	bne.n	8006a18 <strncmp+0x8>
 8006a2c:	1ad0      	subs	r0, r2, r3
 8006a2e:	bd10      	pop	{r4, pc}
 8006a30:	4610      	mov	r0, r2
 8006a32:	e7fc      	b.n	8006a2e <strncmp+0x1e>

08006a34 <_sbrk_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	2300      	movs	r3, #0
 8006a38:	4d05      	ldr	r5, [pc, #20]	@ (8006a50 <_sbrk_r+0x1c>)
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	4608      	mov	r0, r1
 8006a3e:	602b      	str	r3, [r5, #0]
 8006a40:	f7fa fc62 	bl	8001308 <_sbrk>
 8006a44:	1c43      	adds	r3, r0, #1
 8006a46:	d102      	bne.n	8006a4e <_sbrk_r+0x1a>
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	b103      	cbz	r3, 8006a4e <_sbrk_r+0x1a>
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	bd38      	pop	{r3, r4, r5, pc}
 8006a50:	2000038c 	.word	0x2000038c

08006a54 <memcpy>:
 8006a54:	440a      	add	r2, r1
 8006a56:	4291      	cmp	r1, r2
 8006a58:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006a5c:	d100      	bne.n	8006a60 <memcpy+0xc>
 8006a5e:	4770      	bx	lr
 8006a60:	b510      	push	{r4, lr}
 8006a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a66:	4291      	cmp	r1, r2
 8006a68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a6c:	d1f9      	bne.n	8006a62 <memcpy+0xe>
 8006a6e:	bd10      	pop	{r4, pc}

08006a70 <nan>:
 8006a70:	2000      	movs	r0, #0
 8006a72:	4901      	ldr	r1, [pc, #4]	@ (8006a78 <nan+0x8>)
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	7ff80000 	.word	0x7ff80000

08006a7c <__assert_func>:
 8006a7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a7e:	4614      	mov	r4, r2
 8006a80:	461a      	mov	r2, r3
 8006a82:	4b09      	ldr	r3, [pc, #36]	@ (8006aa8 <__assert_func+0x2c>)
 8006a84:	4605      	mov	r5, r0
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68d8      	ldr	r0, [r3, #12]
 8006a8a:	b954      	cbnz	r4, 8006aa2 <__assert_func+0x26>
 8006a8c:	4b07      	ldr	r3, [pc, #28]	@ (8006aac <__assert_func+0x30>)
 8006a8e:	461c      	mov	r4, r3
 8006a90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a94:	9100      	str	r1, [sp, #0]
 8006a96:	462b      	mov	r3, r5
 8006a98:	4905      	ldr	r1, [pc, #20]	@ (8006ab0 <__assert_func+0x34>)
 8006a9a:	f000 fba7 	bl	80071ec <fiprintf>
 8006a9e:	f000 fbb7 	bl	8007210 <abort>
 8006aa2:	4b04      	ldr	r3, [pc, #16]	@ (8006ab4 <__assert_func+0x38>)
 8006aa4:	e7f4      	b.n	8006a90 <__assert_func+0x14>
 8006aa6:	bf00      	nop
 8006aa8:	20000028 	.word	0x20000028
 8006aac:	08007b6d 	.word	0x08007b6d
 8006ab0:	08007b3f 	.word	0x08007b3f
 8006ab4:	08007b32 	.word	0x08007b32

08006ab8 <_calloc_r>:
 8006ab8:	b570      	push	{r4, r5, r6, lr}
 8006aba:	fba1 5402 	umull	r5, r4, r1, r2
 8006abe:	b93c      	cbnz	r4, 8006ad0 <_calloc_r+0x18>
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	f7fe f9db 	bl	8004e7c <_malloc_r>
 8006ac6:	4606      	mov	r6, r0
 8006ac8:	b928      	cbnz	r0, 8006ad6 <_calloc_r+0x1e>
 8006aca:	2600      	movs	r6, #0
 8006acc:	4630      	mov	r0, r6
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
 8006ad0:	220c      	movs	r2, #12
 8006ad2:	6002      	str	r2, [r0, #0]
 8006ad4:	e7f9      	b.n	8006aca <_calloc_r+0x12>
 8006ad6:	462a      	mov	r2, r5
 8006ad8:	4621      	mov	r1, r4
 8006ada:	f7fd fa78 	bl	8003fce <memset>
 8006ade:	e7f5      	b.n	8006acc <_calloc_r+0x14>

08006ae0 <rshift>:
 8006ae0:	6903      	ldr	r3, [r0, #16]
 8006ae2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ae6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006aea:	f100 0414 	add.w	r4, r0, #20
 8006aee:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006af2:	dd46      	ble.n	8006b82 <rshift+0xa2>
 8006af4:	f011 011f 	ands.w	r1, r1, #31
 8006af8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006afc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006b00:	d10c      	bne.n	8006b1c <rshift+0x3c>
 8006b02:	4629      	mov	r1, r5
 8006b04:	f100 0710 	add.w	r7, r0, #16
 8006b08:	42b1      	cmp	r1, r6
 8006b0a:	d335      	bcc.n	8006b78 <rshift+0x98>
 8006b0c:	1a9b      	subs	r3, r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	1eea      	subs	r2, r5, #3
 8006b12:	4296      	cmp	r6, r2
 8006b14:	bf38      	it	cc
 8006b16:	2300      	movcc	r3, #0
 8006b18:	4423      	add	r3, r4
 8006b1a:	e015      	b.n	8006b48 <rshift+0x68>
 8006b1c:	46a1      	mov	r9, r4
 8006b1e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006b22:	f1c1 0820 	rsb	r8, r1, #32
 8006b26:	40cf      	lsrs	r7, r1
 8006b28:	f105 0e04 	add.w	lr, r5, #4
 8006b2c:	4576      	cmp	r6, lr
 8006b2e:	46f4      	mov	ip, lr
 8006b30:	d816      	bhi.n	8006b60 <rshift+0x80>
 8006b32:	1a9a      	subs	r2, r3, r2
 8006b34:	0092      	lsls	r2, r2, #2
 8006b36:	3a04      	subs	r2, #4
 8006b38:	3501      	adds	r5, #1
 8006b3a:	42ae      	cmp	r6, r5
 8006b3c:	bf38      	it	cc
 8006b3e:	2200      	movcc	r2, #0
 8006b40:	18a3      	adds	r3, r4, r2
 8006b42:	50a7      	str	r7, [r4, r2]
 8006b44:	b107      	cbz	r7, 8006b48 <rshift+0x68>
 8006b46:	3304      	adds	r3, #4
 8006b48:	42a3      	cmp	r3, r4
 8006b4a:	eba3 0204 	sub.w	r2, r3, r4
 8006b4e:	bf08      	it	eq
 8006b50:	2300      	moveq	r3, #0
 8006b52:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006b56:	6102      	str	r2, [r0, #16]
 8006b58:	bf08      	it	eq
 8006b5a:	6143      	streq	r3, [r0, #20]
 8006b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b60:	f8dc c000 	ldr.w	ip, [ip]
 8006b64:	fa0c fc08 	lsl.w	ip, ip, r8
 8006b68:	ea4c 0707 	orr.w	r7, ip, r7
 8006b6c:	f849 7b04 	str.w	r7, [r9], #4
 8006b70:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006b74:	40cf      	lsrs	r7, r1
 8006b76:	e7d9      	b.n	8006b2c <rshift+0x4c>
 8006b78:	f851 cb04 	ldr.w	ip, [r1], #4
 8006b7c:	f847 cf04 	str.w	ip, [r7, #4]!
 8006b80:	e7c2      	b.n	8006b08 <rshift+0x28>
 8006b82:	4623      	mov	r3, r4
 8006b84:	e7e0      	b.n	8006b48 <rshift+0x68>

08006b86 <__hexdig_fun>:
 8006b86:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006b8a:	2b09      	cmp	r3, #9
 8006b8c:	d802      	bhi.n	8006b94 <__hexdig_fun+0xe>
 8006b8e:	3820      	subs	r0, #32
 8006b90:	b2c0      	uxtb	r0, r0
 8006b92:	4770      	bx	lr
 8006b94:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006b98:	2b05      	cmp	r3, #5
 8006b9a:	d801      	bhi.n	8006ba0 <__hexdig_fun+0x1a>
 8006b9c:	3847      	subs	r0, #71	@ 0x47
 8006b9e:	e7f7      	b.n	8006b90 <__hexdig_fun+0xa>
 8006ba0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006ba4:	2b05      	cmp	r3, #5
 8006ba6:	d801      	bhi.n	8006bac <__hexdig_fun+0x26>
 8006ba8:	3827      	subs	r0, #39	@ 0x27
 8006baa:	e7f1      	b.n	8006b90 <__hexdig_fun+0xa>
 8006bac:	2000      	movs	r0, #0
 8006bae:	4770      	bx	lr

08006bb0 <__gethex>:
 8006bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb4:	468a      	mov	sl, r1
 8006bb6:	4690      	mov	r8, r2
 8006bb8:	b085      	sub	sp, #20
 8006bba:	9302      	str	r3, [sp, #8]
 8006bbc:	680b      	ldr	r3, [r1, #0]
 8006bbe:	9001      	str	r0, [sp, #4]
 8006bc0:	1c9c      	adds	r4, r3, #2
 8006bc2:	46a1      	mov	r9, r4
 8006bc4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006bc8:	2830      	cmp	r0, #48	@ 0x30
 8006bca:	d0fa      	beq.n	8006bc2 <__gethex+0x12>
 8006bcc:	eba9 0303 	sub.w	r3, r9, r3
 8006bd0:	f1a3 0b02 	sub.w	fp, r3, #2
 8006bd4:	f7ff ffd7 	bl	8006b86 <__hexdig_fun>
 8006bd8:	4605      	mov	r5, r0
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	d168      	bne.n	8006cb0 <__gethex+0x100>
 8006bde:	2201      	movs	r2, #1
 8006be0:	4648      	mov	r0, r9
 8006be2:	499f      	ldr	r1, [pc, #636]	@ (8006e60 <__gethex+0x2b0>)
 8006be4:	f7ff ff14 	bl	8006a10 <strncmp>
 8006be8:	4607      	mov	r7, r0
 8006bea:	2800      	cmp	r0, #0
 8006bec:	d167      	bne.n	8006cbe <__gethex+0x10e>
 8006bee:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006bf2:	4626      	mov	r6, r4
 8006bf4:	f7ff ffc7 	bl	8006b86 <__hexdig_fun>
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	d062      	beq.n	8006cc2 <__gethex+0x112>
 8006bfc:	4623      	mov	r3, r4
 8006bfe:	7818      	ldrb	r0, [r3, #0]
 8006c00:	4699      	mov	r9, r3
 8006c02:	2830      	cmp	r0, #48	@ 0x30
 8006c04:	f103 0301 	add.w	r3, r3, #1
 8006c08:	d0f9      	beq.n	8006bfe <__gethex+0x4e>
 8006c0a:	f7ff ffbc 	bl	8006b86 <__hexdig_fun>
 8006c0e:	fab0 f580 	clz	r5, r0
 8006c12:	f04f 0b01 	mov.w	fp, #1
 8006c16:	096d      	lsrs	r5, r5, #5
 8006c18:	464a      	mov	r2, r9
 8006c1a:	4616      	mov	r6, r2
 8006c1c:	7830      	ldrb	r0, [r6, #0]
 8006c1e:	3201      	adds	r2, #1
 8006c20:	f7ff ffb1 	bl	8006b86 <__hexdig_fun>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d1f8      	bne.n	8006c1a <__gethex+0x6a>
 8006c28:	2201      	movs	r2, #1
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	498c      	ldr	r1, [pc, #560]	@ (8006e60 <__gethex+0x2b0>)
 8006c2e:	f7ff feef 	bl	8006a10 <strncmp>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d13f      	bne.n	8006cb6 <__gethex+0x106>
 8006c36:	b944      	cbnz	r4, 8006c4a <__gethex+0x9a>
 8006c38:	1c74      	adds	r4, r6, #1
 8006c3a:	4622      	mov	r2, r4
 8006c3c:	4616      	mov	r6, r2
 8006c3e:	7830      	ldrb	r0, [r6, #0]
 8006c40:	3201      	adds	r2, #1
 8006c42:	f7ff ffa0 	bl	8006b86 <__hexdig_fun>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	d1f8      	bne.n	8006c3c <__gethex+0x8c>
 8006c4a:	1ba4      	subs	r4, r4, r6
 8006c4c:	00a7      	lsls	r7, r4, #2
 8006c4e:	7833      	ldrb	r3, [r6, #0]
 8006c50:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006c54:	2b50      	cmp	r3, #80	@ 0x50
 8006c56:	d13e      	bne.n	8006cd6 <__gethex+0x126>
 8006c58:	7873      	ldrb	r3, [r6, #1]
 8006c5a:	2b2b      	cmp	r3, #43	@ 0x2b
 8006c5c:	d033      	beq.n	8006cc6 <__gethex+0x116>
 8006c5e:	2b2d      	cmp	r3, #45	@ 0x2d
 8006c60:	d034      	beq.n	8006ccc <__gethex+0x11c>
 8006c62:	2400      	movs	r4, #0
 8006c64:	1c71      	adds	r1, r6, #1
 8006c66:	7808      	ldrb	r0, [r1, #0]
 8006c68:	f7ff ff8d 	bl	8006b86 <__hexdig_fun>
 8006c6c:	1e43      	subs	r3, r0, #1
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b18      	cmp	r3, #24
 8006c72:	d830      	bhi.n	8006cd6 <__gethex+0x126>
 8006c74:	f1a0 0210 	sub.w	r2, r0, #16
 8006c78:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006c7c:	f7ff ff83 	bl	8006b86 <__hexdig_fun>
 8006c80:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8006c84:	fa5f fc8c 	uxtb.w	ip, ip
 8006c88:	f1bc 0f18 	cmp.w	ip, #24
 8006c8c:	f04f 030a 	mov.w	r3, #10
 8006c90:	d91e      	bls.n	8006cd0 <__gethex+0x120>
 8006c92:	b104      	cbz	r4, 8006c96 <__gethex+0xe6>
 8006c94:	4252      	negs	r2, r2
 8006c96:	4417      	add	r7, r2
 8006c98:	f8ca 1000 	str.w	r1, [sl]
 8006c9c:	b1ed      	cbz	r5, 8006cda <__gethex+0x12a>
 8006c9e:	f1bb 0f00 	cmp.w	fp, #0
 8006ca2:	bf0c      	ite	eq
 8006ca4:	2506      	moveq	r5, #6
 8006ca6:	2500      	movne	r5, #0
 8006ca8:	4628      	mov	r0, r5
 8006caa:	b005      	add	sp, #20
 8006cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb0:	2500      	movs	r5, #0
 8006cb2:	462c      	mov	r4, r5
 8006cb4:	e7b0      	b.n	8006c18 <__gethex+0x68>
 8006cb6:	2c00      	cmp	r4, #0
 8006cb8:	d1c7      	bne.n	8006c4a <__gethex+0x9a>
 8006cba:	4627      	mov	r7, r4
 8006cbc:	e7c7      	b.n	8006c4e <__gethex+0x9e>
 8006cbe:	464e      	mov	r6, r9
 8006cc0:	462f      	mov	r7, r5
 8006cc2:	2501      	movs	r5, #1
 8006cc4:	e7c3      	b.n	8006c4e <__gethex+0x9e>
 8006cc6:	2400      	movs	r4, #0
 8006cc8:	1cb1      	adds	r1, r6, #2
 8006cca:	e7cc      	b.n	8006c66 <__gethex+0xb6>
 8006ccc:	2401      	movs	r4, #1
 8006cce:	e7fb      	b.n	8006cc8 <__gethex+0x118>
 8006cd0:	fb03 0002 	mla	r0, r3, r2, r0
 8006cd4:	e7ce      	b.n	8006c74 <__gethex+0xc4>
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	e7de      	b.n	8006c98 <__gethex+0xe8>
 8006cda:	4629      	mov	r1, r5
 8006cdc:	eba6 0309 	sub.w	r3, r6, r9
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	2b07      	cmp	r3, #7
 8006ce4:	dc0a      	bgt.n	8006cfc <__gethex+0x14c>
 8006ce6:	9801      	ldr	r0, [sp, #4]
 8006ce8:	f7fe f954 	bl	8004f94 <_Balloc>
 8006cec:	4604      	mov	r4, r0
 8006cee:	b940      	cbnz	r0, 8006d02 <__gethex+0x152>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	21e4      	movs	r1, #228	@ 0xe4
 8006cf4:	4b5b      	ldr	r3, [pc, #364]	@ (8006e64 <__gethex+0x2b4>)
 8006cf6:	485c      	ldr	r0, [pc, #368]	@ (8006e68 <__gethex+0x2b8>)
 8006cf8:	f7ff fec0 	bl	8006a7c <__assert_func>
 8006cfc:	3101      	adds	r1, #1
 8006cfe:	105b      	asrs	r3, r3, #1
 8006d00:	e7ef      	b.n	8006ce2 <__gethex+0x132>
 8006d02:	2300      	movs	r3, #0
 8006d04:	f100 0a14 	add.w	sl, r0, #20
 8006d08:	4655      	mov	r5, sl
 8006d0a:	469b      	mov	fp, r3
 8006d0c:	45b1      	cmp	r9, r6
 8006d0e:	d337      	bcc.n	8006d80 <__gethex+0x1d0>
 8006d10:	f845 bb04 	str.w	fp, [r5], #4
 8006d14:	eba5 050a 	sub.w	r5, r5, sl
 8006d18:	10ad      	asrs	r5, r5, #2
 8006d1a:	6125      	str	r5, [r4, #16]
 8006d1c:	4658      	mov	r0, fp
 8006d1e:	f7fe fa2b 	bl	8005178 <__hi0bits>
 8006d22:	016d      	lsls	r5, r5, #5
 8006d24:	f8d8 6000 	ldr.w	r6, [r8]
 8006d28:	1a2d      	subs	r5, r5, r0
 8006d2a:	42b5      	cmp	r5, r6
 8006d2c:	dd54      	ble.n	8006dd8 <__gethex+0x228>
 8006d2e:	1bad      	subs	r5, r5, r6
 8006d30:	4629      	mov	r1, r5
 8006d32:	4620      	mov	r0, r4
 8006d34:	f7fe fdb3 	bl	800589e <__any_on>
 8006d38:	4681      	mov	r9, r0
 8006d3a:	b178      	cbz	r0, 8006d5c <__gethex+0x1ac>
 8006d3c:	f04f 0901 	mov.w	r9, #1
 8006d40:	1e6b      	subs	r3, r5, #1
 8006d42:	1159      	asrs	r1, r3, #5
 8006d44:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006d48:	f003 021f 	and.w	r2, r3, #31
 8006d4c:	fa09 f202 	lsl.w	r2, r9, r2
 8006d50:	420a      	tst	r2, r1
 8006d52:	d003      	beq.n	8006d5c <__gethex+0x1ac>
 8006d54:	454b      	cmp	r3, r9
 8006d56:	dc36      	bgt.n	8006dc6 <__gethex+0x216>
 8006d58:	f04f 0902 	mov.w	r9, #2
 8006d5c:	4629      	mov	r1, r5
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f7ff febe 	bl	8006ae0 <rshift>
 8006d64:	442f      	add	r7, r5
 8006d66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d6a:	42bb      	cmp	r3, r7
 8006d6c:	da42      	bge.n	8006df4 <__gethex+0x244>
 8006d6e:	4621      	mov	r1, r4
 8006d70:	9801      	ldr	r0, [sp, #4]
 8006d72:	f7fe f94f 	bl	8005014 <_Bfree>
 8006d76:	2300      	movs	r3, #0
 8006d78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d7a:	25a3      	movs	r5, #163	@ 0xa3
 8006d7c:	6013      	str	r3, [r2, #0]
 8006d7e:	e793      	b.n	8006ca8 <__gethex+0xf8>
 8006d80:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006d84:	2a2e      	cmp	r2, #46	@ 0x2e
 8006d86:	d012      	beq.n	8006dae <__gethex+0x1fe>
 8006d88:	2b20      	cmp	r3, #32
 8006d8a:	d104      	bne.n	8006d96 <__gethex+0x1e6>
 8006d8c:	f845 bb04 	str.w	fp, [r5], #4
 8006d90:	f04f 0b00 	mov.w	fp, #0
 8006d94:	465b      	mov	r3, fp
 8006d96:	7830      	ldrb	r0, [r6, #0]
 8006d98:	9303      	str	r3, [sp, #12]
 8006d9a:	f7ff fef4 	bl	8006b86 <__hexdig_fun>
 8006d9e:	9b03      	ldr	r3, [sp, #12]
 8006da0:	f000 000f 	and.w	r0, r0, #15
 8006da4:	4098      	lsls	r0, r3
 8006da6:	ea4b 0b00 	orr.w	fp, fp, r0
 8006daa:	3304      	adds	r3, #4
 8006dac:	e7ae      	b.n	8006d0c <__gethex+0x15c>
 8006dae:	45b1      	cmp	r9, r6
 8006db0:	d8ea      	bhi.n	8006d88 <__gethex+0x1d8>
 8006db2:	2201      	movs	r2, #1
 8006db4:	4630      	mov	r0, r6
 8006db6:	492a      	ldr	r1, [pc, #168]	@ (8006e60 <__gethex+0x2b0>)
 8006db8:	9303      	str	r3, [sp, #12]
 8006dba:	f7ff fe29 	bl	8006a10 <strncmp>
 8006dbe:	9b03      	ldr	r3, [sp, #12]
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	d1e1      	bne.n	8006d88 <__gethex+0x1d8>
 8006dc4:	e7a2      	b.n	8006d0c <__gethex+0x15c>
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	1ea9      	subs	r1, r5, #2
 8006dca:	f7fe fd68 	bl	800589e <__any_on>
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	d0c2      	beq.n	8006d58 <__gethex+0x1a8>
 8006dd2:	f04f 0903 	mov.w	r9, #3
 8006dd6:	e7c1      	b.n	8006d5c <__gethex+0x1ac>
 8006dd8:	da09      	bge.n	8006dee <__gethex+0x23e>
 8006dda:	1b75      	subs	r5, r6, r5
 8006ddc:	4621      	mov	r1, r4
 8006dde:	462a      	mov	r2, r5
 8006de0:	9801      	ldr	r0, [sp, #4]
 8006de2:	f7fe fb2d 	bl	8005440 <__lshift>
 8006de6:	4604      	mov	r4, r0
 8006de8:	1b7f      	subs	r7, r7, r5
 8006dea:	f100 0a14 	add.w	sl, r0, #20
 8006dee:	f04f 0900 	mov.w	r9, #0
 8006df2:	e7b8      	b.n	8006d66 <__gethex+0x1b6>
 8006df4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006df8:	42bd      	cmp	r5, r7
 8006dfa:	dd6f      	ble.n	8006edc <__gethex+0x32c>
 8006dfc:	1bed      	subs	r5, r5, r7
 8006dfe:	42ae      	cmp	r6, r5
 8006e00:	dc34      	bgt.n	8006e6c <__gethex+0x2bc>
 8006e02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d022      	beq.n	8006e50 <__gethex+0x2a0>
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d024      	beq.n	8006e58 <__gethex+0x2a8>
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d115      	bne.n	8006e3e <__gethex+0x28e>
 8006e12:	42ae      	cmp	r6, r5
 8006e14:	d113      	bne.n	8006e3e <__gethex+0x28e>
 8006e16:	2e01      	cmp	r6, #1
 8006e18:	d10b      	bne.n	8006e32 <__gethex+0x282>
 8006e1a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006e1e:	9a02      	ldr	r2, [sp, #8]
 8006e20:	2562      	movs	r5, #98	@ 0x62
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	2301      	movs	r3, #1
 8006e26:	6123      	str	r3, [r4, #16]
 8006e28:	f8ca 3000 	str.w	r3, [sl]
 8006e2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e2e:	601c      	str	r4, [r3, #0]
 8006e30:	e73a      	b.n	8006ca8 <__gethex+0xf8>
 8006e32:	4620      	mov	r0, r4
 8006e34:	1e71      	subs	r1, r6, #1
 8006e36:	f7fe fd32 	bl	800589e <__any_on>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	d1ed      	bne.n	8006e1a <__gethex+0x26a>
 8006e3e:	4621      	mov	r1, r4
 8006e40:	9801      	ldr	r0, [sp, #4]
 8006e42:	f7fe f8e7 	bl	8005014 <_Bfree>
 8006e46:	2300      	movs	r3, #0
 8006e48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e4a:	2550      	movs	r5, #80	@ 0x50
 8006e4c:	6013      	str	r3, [r2, #0]
 8006e4e:	e72b      	b.n	8006ca8 <__gethex+0xf8>
 8006e50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1f3      	bne.n	8006e3e <__gethex+0x28e>
 8006e56:	e7e0      	b.n	8006e1a <__gethex+0x26a>
 8006e58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1dd      	bne.n	8006e1a <__gethex+0x26a>
 8006e5e:	e7ee      	b.n	8006e3e <__gethex+0x28e>
 8006e60:	080079c0 	.word	0x080079c0
 8006e64:	08007857 	.word	0x08007857
 8006e68:	08007b6e 	.word	0x08007b6e
 8006e6c:	1e6f      	subs	r7, r5, #1
 8006e6e:	f1b9 0f00 	cmp.w	r9, #0
 8006e72:	d130      	bne.n	8006ed6 <__gethex+0x326>
 8006e74:	b127      	cbz	r7, 8006e80 <__gethex+0x2d0>
 8006e76:	4639      	mov	r1, r7
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f7fe fd10 	bl	800589e <__any_on>
 8006e7e:	4681      	mov	r9, r0
 8006e80:	2301      	movs	r3, #1
 8006e82:	4629      	mov	r1, r5
 8006e84:	1b76      	subs	r6, r6, r5
 8006e86:	2502      	movs	r5, #2
 8006e88:	117a      	asrs	r2, r7, #5
 8006e8a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006e8e:	f007 071f 	and.w	r7, r7, #31
 8006e92:	40bb      	lsls	r3, r7
 8006e94:	4213      	tst	r3, r2
 8006e96:	4620      	mov	r0, r4
 8006e98:	bf18      	it	ne
 8006e9a:	f049 0902 	orrne.w	r9, r9, #2
 8006e9e:	f7ff fe1f 	bl	8006ae0 <rshift>
 8006ea2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006ea6:	f1b9 0f00 	cmp.w	r9, #0
 8006eaa:	d047      	beq.n	8006f3c <__gethex+0x38c>
 8006eac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d015      	beq.n	8006ee0 <__gethex+0x330>
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	d017      	beq.n	8006ee8 <__gethex+0x338>
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d109      	bne.n	8006ed0 <__gethex+0x320>
 8006ebc:	f019 0f02 	tst.w	r9, #2
 8006ec0:	d006      	beq.n	8006ed0 <__gethex+0x320>
 8006ec2:	f8da 3000 	ldr.w	r3, [sl]
 8006ec6:	ea49 0903 	orr.w	r9, r9, r3
 8006eca:	f019 0f01 	tst.w	r9, #1
 8006ece:	d10e      	bne.n	8006eee <__gethex+0x33e>
 8006ed0:	f045 0510 	orr.w	r5, r5, #16
 8006ed4:	e032      	b.n	8006f3c <__gethex+0x38c>
 8006ed6:	f04f 0901 	mov.w	r9, #1
 8006eda:	e7d1      	b.n	8006e80 <__gethex+0x2d0>
 8006edc:	2501      	movs	r5, #1
 8006ede:	e7e2      	b.n	8006ea6 <__gethex+0x2f6>
 8006ee0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ee2:	f1c3 0301 	rsb	r3, r3, #1
 8006ee6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006ee8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0f0      	beq.n	8006ed0 <__gethex+0x320>
 8006eee:	f04f 0c00 	mov.w	ip, #0
 8006ef2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006ef6:	f104 0314 	add.w	r3, r4, #20
 8006efa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006efe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006f02:	4618      	mov	r0, r3
 8006f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f08:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8006f0c:	d01b      	beq.n	8006f46 <__gethex+0x396>
 8006f0e:	3201      	adds	r2, #1
 8006f10:	6002      	str	r2, [r0, #0]
 8006f12:	2d02      	cmp	r5, #2
 8006f14:	f104 0314 	add.w	r3, r4, #20
 8006f18:	d13c      	bne.n	8006f94 <__gethex+0x3e4>
 8006f1a:	f8d8 2000 	ldr.w	r2, [r8]
 8006f1e:	3a01      	subs	r2, #1
 8006f20:	42b2      	cmp	r2, r6
 8006f22:	d109      	bne.n	8006f38 <__gethex+0x388>
 8006f24:	2201      	movs	r2, #1
 8006f26:	1171      	asrs	r1, r6, #5
 8006f28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006f2c:	f006 061f 	and.w	r6, r6, #31
 8006f30:	fa02 f606 	lsl.w	r6, r2, r6
 8006f34:	421e      	tst	r6, r3
 8006f36:	d13a      	bne.n	8006fae <__gethex+0x3fe>
 8006f38:	f045 0520 	orr.w	r5, r5, #32
 8006f3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f3e:	601c      	str	r4, [r3, #0]
 8006f40:	9b02      	ldr	r3, [sp, #8]
 8006f42:	601f      	str	r7, [r3, #0]
 8006f44:	e6b0      	b.n	8006ca8 <__gethex+0xf8>
 8006f46:	4299      	cmp	r1, r3
 8006f48:	f843 cc04 	str.w	ip, [r3, #-4]
 8006f4c:	d8d9      	bhi.n	8006f02 <__gethex+0x352>
 8006f4e:	68a3      	ldr	r3, [r4, #8]
 8006f50:	459b      	cmp	fp, r3
 8006f52:	db17      	blt.n	8006f84 <__gethex+0x3d4>
 8006f54:	6861      	ldr	r1, [r4, #4]
 8006f56:	9801      	ldr	r0, [sp, #4]
 8006f58:	3101      	adds	r1, #1
 8006f5a:	f7fe f81b 	bl	8004f94 <_Balloc>
 8006f5e:	4681      	mov	r9, r0
 8006f60:	b918      	cbnz	r0, 8006f6a <__gethex+0x3ba>
 8006f62:	4602      	mov	r2, r0
 8006f64:	2184      	movs	r1, #132	@ 0x84
 8006f66:	4b19      	ldr	r3, [pc, #100]	@ (8006fcc <__gethex+0x41c>)
 8006f68:	e6c5      	b.n	8006cf6 <__gethex+0x146>
 8006f6a:	6922      	ldr	r2, [r4, #16]
 8006f6c:	f104 010c 	add.w	r1, r4, #12
 8006f70:	3202      	adds	r2, #2
 8006f72:	0092      	lsls	r2, r2, #2
 8006f74:	300c      	adds	r0, #12
 8006f76:	f7ff fd6d 	bl	8006a54 <memcpy>
 8006f7a:	4621      	mov	r1, r4
 8006f7c:	9801      	ldr	r0, [sp, #4]
 8006f7e:	f7fe f849 	bl	8005014 <_Bfree>
 8006f82:	464c      	mov	r4, r9
 8006f84:	6923      	ldr	r3, [r4, #16]
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	6122      	str	r2, [r4, #16]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f90:	615a      	str	r2, [r3, #20]
 8006f92:	e7be      	b.n	8006f12 <__gethex+0x362>
 8006f94:	6922      	ldr	r2, [r4, #16]
 8006f96:	455a      	cmp	r2, fp
 8006f98:	dd0b      	ble.n	8006fb2 <__gethex+0x402>
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f7ff fd9f 	bl	8006ae0 <rshift>
 8006fa2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006fa6:	3701      	adds	r7, #1
 8006fa8:	42bb      	cmp	r3, r7
 8006faa:	f6ff aee0 	blt.w	8006d6e <__gethex+0x1be>
 8006fae:	2501      	movs	r5, #1
 8006fb0:	e7c2      	b.n	8006f38 <__gethex+0x388>
 8006fb2:	f016 061f 	ands.w	r6, r6, #31
 8006fb6:	d0fa      	beq.n	8006fae <__gethex+0x3fe>
 8006fb8:	4453      	add	r3, sl
 8006fba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006fbe:	f7fe f8db 	bl	8005178 <__hi0bits>
 8006fc2:	f1c6 0620 	rsb	r6, r6, #32
 8006fc6:	42b0      	cmp	r0, r6
 8006fc8:	dbe7      	blt.n	8006f9a <__gethex+0x3ea>
 8006fca:	e7f0      	b.n	8006fae <__gethex+0x3fe>
 8006fcc:	08007857 	.word	0x08007857

08006fd0 <L_shift>:
 8006fd0:	f1c2 0208 	rsb	r2, r2, #8
 8006fd4:	0092      	lsls	r2, r2, #2
 8006fd6:	b570      	push	{r4, r5, r6, lr}
 8006fd8:	f1c2 0620 	rsb	r6, r2, #32
 8006fdc:	6843      	ldr	r3, [r0, #4]
 8006fde:	6804      	ldr	r4, [r0, #0]
 8006fe0:	fa03 f506 	lsl.w	r5, r3, r6
 8006fe4:	432c      	orrs	r4, r5
 8006fe6:	40d3      	lsrs	r3, r2
 8006fe8:	6004      	str	r4, [r0, #0]
 8006fea:	f840 3f04 	str.w	r3, [r0, #4]!
 8006fee:	4288      	cmp	r0, r1
 8006ff0:	d3f4      	bcc.n	8006fdc <L_shift+0xc>
 8006ff2:	bd70      	pop	{r4, r5, r6, pc}

08006ff4 <__match>:
 8006ff4:	b530      	push	{r4, r5, lr}
 8006ff6:	6803      	ldr	r3, [r0, #0]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ffe:	b914      	cbnz	r4, 8007006 <__match+0x12>
 8007000:	6003      	str	r3, [r0, #0]
 8007002:	2001      	movs	r0, #1
 8007004:	bd30      	pop	{r4, r5, pc}
 8007006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800700a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800700e:	2d19      	cmp	r5, #25
 8007010:	bf98      	it	ls
 8007012:	3220      	addls	r2, #32
 8007014:	42a2      	cmp	r2, r4
 8007016:	d0f0      	beq.n	8006ffa <__match+0x6>
 8007018:	2000      	movs	r0, #0
 800701a:	e7f3      	b.n	8007004 <__match+0x10>

0800701c <__hexnan>:
 800701c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007020:	2500      	movs	r5, #0
 8007022:	680b      	ldr	r3, [r1, #0]
 8007024:	4682      	mov	sl, r0
 8007026:	115e      	asrs	r6, r3, #5
 8007028:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800702c:	f013 031f 	ands.w	r3, r3, #31
 8007030:	bf18      	it	ne
 8007032:	3604      	addne	r6, #4
 8007034:	1f37      	subs	r7, r6, #4
 8007036:	4690      	mov	r8, r2
 8007038:	46b9      	mov	r9, r7
 800703a:	463c      	mov	r4, r7
 800703c:	46ab      	mov	fp, r5
 800703e:	b087      	sub	sp, #28
 8007040:	6801      	ldr	r1, [r0, #0]
 8007042:	9301      	str	r3, [sp, #4]
 8007044:	f846 5c04 	str.w	r5, [r6, #-4]
 8007048:	9502      	str	r5, [sp, #8]
 800704a:	784a      	ldrb	r2, [r1, #1]
 800704c:	1c4b      	adds	r3, r1, #1
 800704e:	9303      	str	r3, [sp, #12]
 8007050:	b342      	cbz	r2, 80070a4 <__hexnan+0x88>
 8007052:	4610      	mov	r0, r2
 8007054:	9105      	str	r1, [sp, #20]
 8007056:	9204      	str	r2, [sp, #16]
 8007058:	f7ff fd95 	bl	8006b86 <__hexdig_fun>
 800705c:	2800      	cmp	r0, #0
 800705e:	d151      	bne.n	8007104 <__hexnan+0xe8>
 8007060:	9a04      	ldr	r2, [sp, #16]
 8007062:	9905      	ldr	r1, [sp, #20]
 8007064:	2a20      	cmp	r2, #32
 8007066:	d818      	bhi.n	800709a <__hexnan+0x7e>
 8007068:	9b02      	ldr	r3, [sp, #8]
 800706a:	459b      	cmp	fp, r3
 800706c:	dd13      	ble.n	8007096 <__hexnan+0x7a>
 800706e:	454c      	cmp	r4, r9
 8007070:	d206      	bcs.n	8007080 <__hexnan+0x64>
 8007072:	2d07      	cmp	r5, #7
 8007074:	dc04      	bgt.n	8007080 <__hexnan+0x64>
 8007076:	462a      	mov	r2, r5
 8007078:	4649      	mov	r1, r9
 800707a:	4620      	mov	r0, r4
 800707c:	f7ff ffa8 	bl	8006fd0 <L_shift>
 8007080:	4544      	cmp	r4, r8
 8007082:	d952      	bls.n	800712a <__hexnan+0x10e>
 8007084:	2300      	movs	r3, #0
 8007086:	f1a4 0904 	sub.w	r9, r4, #4
 800708a:	f844 3c04 	str.w	r3, [r4, #-4]
 800708e:	461d      	mov	r5, r3
 8007090:	464c      	mov	r4, r9
 8007092:	f8cd b008 	str.w	fp, [sp, #8]
 8007096:	9903      	ldr	r1, [sp, #12]
 8007098:	e7d7      	b.n	800704a <__hexnan+0x2e>
 800709a:	2a29      	cmp	r2, #41	@ 0x29
 800709c:	d157      	bne.n	800714e <__hexnan+0x132>
 800709e:	3102      	adds	r1, #2
 80070a0:	f8ca 1000 	str.w	r1, [sl]
 80070a4:	f1bb 0f00 	cmp.w	fp, #0
 80070a8:	d051      	beq.n	800714e <__hexnan+0x132>
 80070aa:	454c      	cmp	r4, r9
 80070ac:	d206      	bcs.n	80070bc <__hexnan+0xa0>
 80070ae:	2d07      	cmp	r5, #7
 80070b0:	dc04      	bgt.n	80070bc <__hexnan+0xa0>
 80070b2:	462a      	mov	r2, r5
 80070b4:	4649      	mov	r1, r9
 80070b6:	4620      	mov	r0, r4
 80070b8:	f7ff ff8a 	bl	8006fd0 <L_shift>
 80070bc:	4544      	cmp	r4, r8
 80070be:	d936      	bls.n	800712e <__hexnan+0x112>
 80070c0:	4623      	mov	r3, r4
 80070c2:	f1a8 0204 	sub.w	r2, r8, #4
 80070c6:	f853 1b04 	ldr.w	r1, [r3], #4
 80070ca:	429f      	cmp	r7, r3
 80070cc:	f842 1f04 	str.w	r1, [r2, #4]!
 80070d0:	d2f9      	bcs.n	80070c6 <__hexnan+0xaa>
 80070d2:	1b3b      	subs	r3, r7, r4
 80070d4:	f023 0303 	bic.w	r3, r3, #3
 80070d8:	3304      	adds	r3, #4
 80070da:	3401      	adds	r4, #1
 80070dc:	3e03      	subs	r6, #3
 80070de:	42b4      	cmp	r4, r6
 80070e0:	bf88      	it	hi
 80070e2:	2304      	movhi	r3, #4
 80070e4:	2200      	movs	r2, #0
 80070e6:	4443      	add	r3, r8
 80070e8:	f843 2b04 	str.w	r2, [r3], #4
 80070ec:	429f      	cmp	r7, r3
 80070ee:	d2fb      	bcs.n	80070e8 <__hexnan+0xcc>
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	b91b      	cbnz	r3, 80070fc <__hexnan+0xe0>
 80070f4:	4547      	cmp	r7, r8
 80070f6:	d128      	bne.n	800714a <__hexnan+0x12e>
 80070f8:	2301      	movs	r3, #1
 80070fa:	603b      	str	r3, [r7, #0]
 80070fc:	2005      	movs	r0, #5
 80070fe:	b007      	add	sp, #28
 8007100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007104:	3501      	adds	r5, #1
 8007106:	2d08      	cmp	r5, #8
 8007108:	f10b 0b01 	add.w	fp, fp, #1
 800710c:	dd06      	ble.n	800711c <__hexnan+0x100>
 800710e:	4544      	cmp	r4, r8
 8007110:	d9c1      	bls.n	8007096 <__hexnan+0x7a>
 8007112:	2300      	movs	r3, #0
 8007114:	2501      	movs	r5, #1
 8007116:	f844 3c04 	str.w	r3, [r4, #-4]
 800711a:	3c04      	subs	r4, #4
 800711c:	6822      	ldr	r2, [r4, #0]
 800711e:	f000 000f 	and.w	r0, r0, #15
 8007122:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007126:	6020      	str	r0, [r4, #0]
 8007128:	e7b5      	b.n	8007096 <__hexnan+0x7a>
 800712a:	2508      	movs	r5, #8
 800712c:	e7b3      	b.n	8007096 <__hexnan+0x7a>
 800712e:	9b01      	ldr	r3, [sp, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d0dd      	beq.n	80070f0 <__hexnan+0xd4>
 8007134:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007138:	f1c3 0320 	rsb	r3, r3, #32
 800713c:	40da      	lsrs	r2, r3
 800713e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007142:	4013      	ands	r3, r2
 8007144:	f846 3c04 	str.w	r3, [r6, #-4]
 8007148:	e7d2      	b.n	80070f0 <__hexnan+0xd4>
 800714a:	3f04      	subs	r7, #4
 800714c:	e7d0      	b.n	80070f0 <__hexnan+0xd4>
 800714e:	2004      	movs	r0, #4
 8007150:	e7d5      	b.n	80070fe <__hexnan+0xe2>

08007152 <__ascii_mbtowc>:
 8007152:	b082      	sub	sp, #8
 8007154:	b901      	cbnz	r1, 8007158 <__ascii_mbtowc+0x6>
 8007156:	a901      	add	r1, sp, #4
 8007158:	b142      	cbz	r2, 800716c <__ascii_mbtowc+0x1a>
 800715a:	b14b      	cbz	r3, 8007170 <__ascii_mbtowc+0x1e>
 800715c:	7813      	ldrb	r3, [r2, #0]
 800715e:	600b      	str	r3, [r1, #0]
 8007160:	7812      	ldrb	r2, [r2, #0]
 8007162:	1e10      	subs	r0, r2, #0
 8007164:	bf18      	it	ne
 8007166:	2001      	movne	r0, #1
 8007168:	b002      	add	sp, #8
 800716a:	4770      	bx	lr
 800716c:	4610      	mov	r0, r2
 800716e:	e7fb      	b.n	8007168 <__ascii_mbtowc+0x16>
 8007170:	f06f 0001 	mvn.w	r0, #1
 8007174:	e7f8      	b.n	8007168 <__ascii_mbtowc+0x16>

08007176 <_realloc_r>:
 8007176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800717a:	4680      	mov	r8, r0
 800717c:	4615      	mov	r5, r2
 800717e:	460c      	mov	r4, r1
 8007180:	b921      	cbnz	r1, 800718c <_realloc_r+0x16>
 8007182:	4611      	mov	r1, r2
 8007184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007188:	f7fd be78 	b.w	8004e7c <_malloc_r>
 800718c:	b92a      	cbnz	r2, 800719a <_realloc_r+0x24>
 800718e:	f7fd fe03 	bl	8004d98 <_free_r>
 8007192:	2400      	movs	r4, #0
 8007194:	4620      	mov	r0, r4
 8007196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800719a:	f000 f840 	bl	800721e <_malloc_usable_size_r>
 800719e:	4285      	cmp	r5, r0
 80071a0:	4606      	mov	r6, r0
 80071a2:	d802      	bhi.n	80071aa <_realloc_r+0x34>
 80071a4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80071a8:	d8f4      	bhi.n	8007194 <_realloc_r+0x1e>
 80071aa:	4629      	mov	r1, r5
 80071ac:	4640      	mov	r0, r8
 80071ae:	f7fd fe65 	bl	8004e7c <_malloc_r>
 80071b2:	4607      	mov	r7, r0
 80071b4:	2800      	cmp	r0, #0
 80071b6:	d0ec      	beq.n	8007192 <_realloc_r+0x1c>
 80071b8:	42b5      	cmp	r5, r6
 80071ba:	462a      	mov	r2, r5
 80071bc:	4621      	mov	r1, r4
 80071be:	bf28      	it	cs
 80071c0:	4632      	movcs	r2, r6
 80071c2:	f7ff fc47 	bl	8006a54 <memcpy>
 80071c6:	4621      	mov	r1, r4
 80071c8:	4640      	mov	r0, r8
 80071ca:	f7fd fde5 	bl	8004d98 <_free_r>
 80071ce:	463c      	mov	r4, r7
 80071d0:	e7e0      	b.n	8007194 <_realloc_r+0x1e>

080071d2 <__ascii_wctomb>:
 80071d2:	4603      	mov	r3, r0
 80071d4:	4608      	mov	r0, r1
 80071d6:	b141      	cbz	r1, 80071ea <__ascii_wctomb+0x18>
 80071d8:	2aff      	cmp	r2, #255	@ 0xff
 80071da:	d904      	bls.n	80071e6 <__ascii_wctomb+0x14>
 80071dc:	228a      	movs	r2, #138	@ 0x8a
 80071de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	4770      	bx	lr
 80071e6:	2001      	movs	r0, #1
 80071e8:	700a      	strb	r2, [r1, #0]
 80071ea:	4770      	bx	lr

080071ec <fiprintf>:
 80071ec:	b40e      	push	{r1, r2, r3}
 80071ee:	b503      	push	{r0, r1, lr}
 80071f0:	4601      	mov	r1, r0
 80071f2:	ab03      	add	r3, sp, #12
 80071f4:	4805      	ldr	r0, [pc, #20]	@ (800720c <fiprintf+0x20>)
 80071f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80071fa:	6800      	ldr	r0, [r0, #0]
 80071fc:	9301      	str	r3, [sp, #4]
 80071fe:	f000 f83d 	bl	800727c <_vfiprintf_r>
 8007202:	b002      	add	sp, #8
 8007204:	f85d eb04 	ldr.w	lr, [sp], #4
 8007208:	b003      	add	sp, #12
 800720a:	4770      	bx	lr
 800720c:	20000028 	.word	0x20000028

08007210 <abort>:
 8007210:	2006      	movs	r0, #6
 8007212:	b508      	push	{r3, lr}
 8007214:	f000 fa06 	bl	8007624 <raise>
 8007218:	2001      	movs	r0, #1
 800721a:	f7fa f800 	bl	800121e <_exit>

0800721e <_malloc_usable_size_r>:
 800721e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007222:	1f18      	subs	r0, r3, #4
 8007224:	2b00      	cmp	r3, #0
 8007226:	bfbc      	itt	lt
 8007228:	580b      	ldrlt	r3, [r1, r0]
 800722a:	18c0      	addlt	r0, r0, r3
 800722c:	4770      	bx	lr

0800722e <__sfputc_r>:
 800722e:	6893      	ldr	r3, [r2, #8]
 8007230:	b410      	push	{r4}
 8007232:	3b01      	subs	r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	6093      	str	r3, [r2, #8]
 8007238:	da07      	bge.n	800724a <__sfputc_r+0x1c>
 800723a:	6994      	ldr	r4, [r2, #24]
 800723c:	42a3      	cmp	r3, r4
 800723e:	db01      	blt.n	8007244 <__sfputc_r+0x16>
 8007240:	290a      	cmp	r1, #10
 8007242:	d102      	bne.n	800724a <__sfputc_r+0x1c>
 8007244:	bc10      	pop	{r4}
 8007246:	f000 b931 	b.w	80074ac <__swbuf_r>
 800724a:	6813      	ldr	r3, [r2, #0]
 800724c:	1c58      	adds	r0, r3, #1
 800724e:	6010      	str	r0, [r2, #0]
 8007250:	7019      	strb	r1, [r3, #0]
 8007252:	4608      	mov	r0, r1
 8007254:	bc10      	pop	{r4}
 8007256:	4770      	bx	lr

08007258 <__sfputs_r>:
 8007258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725a:	4606      	mov	r6, r0
 800725c:	460f      	mov	r7, r1
 800725e:	4614      	mov	r4, r2
 8007260:	18d5      	adds	r5, r2, r3
 8007262:	42ac      	cmp	r4, r5
 8007264:	d101      	bne.n	800726a <__sfputs_r+0x12>
 8007266:	2000      	movs	r0, #0
 8007268:	e007      	b.n	800727a <__sfputs_r+0x22>
 800726a:	463a      	mov	r2, r7
 800726c:	4630      	mov	r0, r6
 800726e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007272:	f7ff ffdc 	bl	800722e <__sfputc_r>
 8007276:	1c43      	adds	r3, r0, #1
 8007278:	d1f3      	bne.n	8007262 <__sfputs_r+0xa>
 800727a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800727c <_vfiprintf_r>:
 800727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007280:	460d      	mov	r5, r1
 8007282:	4614      	mov	r4, r2
 8007284:	4698      	mov	r8, r3
 8007286:	4606      	mov	r6, r0
 8007288:	b09d      	sub	sp, #116	@ 0x74
 800728a:	b118      	cbz	r0, 8007294 <_vfiprintf_r+0x18>
 800728c:	6a03      	ldr	r3, [r0, #32]
 800728e:	b90b      	cbnz	r3, 8007294 <_vfiprintf_r+0x18>
 8007290:	f7fc fe04 	bl	8003e9c <__sinit>
 8007294:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007296:	07d9      	lsls	r1, r3, #31
 8007298:	d405      	bmi.n	80072a6 <_vfiprintf_r+0x2a>
 800729a:	89ab      	ldrh	r3, [r5, #12]
 800729c:	059a      	lsls	r2, r3, #22
 800729e:	d402      	bmi.n	80072a6 <_vfiprintf_r+0x2a>
 80072a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072a2:	f7fc ff12 	bl	80040ca <__retarget_lock_acquire_recursive>
 80072a6:	89ab      	ldrh	r3, [r5, #12]
 80072a8:	071b      	lsls	r3, r3, #28
 80072aa:	d501      	bpl.n	80072b0 <_vfiprintf_r+0x34>
 80072ac:	692b      	ldr	r3, [r5, #16]
 80072ae:	b99b      	cbnz	r3, 80072d8 <_vfiprintf_r+0x5c>
 80072b0:	4629      	mov	r1, r5
 80072b2:	4630      	mov	r0, r6
 80072b4:	f000 f938 	bl	8007528 <__swsetup_r>
 80072b8:	b170      	cbz	r0, 80072d8 <_vfiprintf_r+0x5c>
 80072ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072bc:	07dc      	lsls	r4, r3, #31
 80072be:	d504      	bpl.n	80072ca <_vfiprintf_r+0x4e>
 80072c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072c4:	b01d      	add	sp, #116	@ 0x74
 80072c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ca:	89ab      	ldrh	r3, [r5, #12]
 80072cc:	0598      	lsls	r0, r3, #22
 80072ce:	d4f7      	bmi.n	80072c0 <_vfiprintf_r+0x44>
 80072d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072d2:	f7fc fefb 	bl	80040cc <__retarget_lock_release_recursive>
 80072d6:	e7f3      	b.n	80072c0 <_vfiprintf_r+0x44>
 80072d8:	2300      	movs	r3, #0
 80072da:	9309      	str	r3, [sp, #36]	@ 0x24
 80072dc:	2320      	movs	r3, #32
 80072de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072e2:	2330      	movs	r3, #48	@ 0x30
 80072e4:	f04f 0901 	mov.w	r9, #1
 80072e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80072ec:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007498 <_vfiprintf_r+0x21c>
 80072f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072f4:	4623      	mov	r3, r4
 80072f6:	469a      	mov	sl, r3
 80072f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072fc:	b10a      	cbz	r2, 8007302 <_vfiprintf_r+0x86>
 80072fe:	2a25      	cmp	r2, #37	@ 0x25
 8007300:	d1f9      	bne.n	80072f6 <_vfiprintf_r+0x7a>
 8007302:	ebba 0b04 	subs.w	fp, sl, r4
 8007306:	d00b      	beq.n	8007320 <_vfiprintf_r+0xa4>
 8007308:	465b      	mov	r3, fp
 800730a:	4622      	mov	r2, r4
 800730c:	4629      	mov	r1, r5
 800730e:	4630      	mov	r0, r6
 8007310:	f7ff ffa2 	bl	8007258 <__sfputs_r>
 8007314:	3001      	adds	r0, #1
 8007316:	f000 80a7 	beq.w	8007468 <_vfiprintf_r+0x1ec>
 800731a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800731c:	445a      	add	r2, fp
 800731e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007320:	f89a 3000 	ldrb.w	r3, [sl]
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 809f 	beq.w	8007468 <_vfiprintf_r+0x1ec>
 800732a:	2300      	movs	r3, #0
 800732c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007334:	f10a 0a01 	add.w	sl, sl, #1
 8007338:	9304      	str	r3, [sp, #16]
 800733a:	9307      	str	r3, [sp, #28]
 800733c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007340:	931a      	str	r3, [sp, #104]	@ 0x68
 8007342:	4654      	mov	r4, sl
 8007344:	2205      	movs	r2, #5
 8007346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800734a:	4853      	ldr	r0, [pc, #332]	@ (8007498 <_vfiprintf_r+0x21c>)
 800734c:	f7fc febf 	bl	80040ce <memchr>
 8007350:	9a04      	ldr	r2, [sp, #16]
 8007352:	b9d8      	cbnz	r0, 800738c <_vfiprintf_r+0x110>
 8007354:	06d1      	lsls	r1, r2, #27
 8007356:	bf44      	itt	mi
 8007358:	2320      	movmi	r3, #32
 800735a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800735e:	0713      	lsls	r3, r2, #28
 8007360:	bf44      	itt	mi
 8007362:	232b      	movmi	r3, #43	@ 0x2b
 8007364:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007368:	f89a 3000 	ldrb.w	r3, [sl]
 800736c:	2b2a      	cmp	r3, #42	@ 0x2a
 800736e:	d015      	beq.n	800739c <_vfiprintf_r+0x120>
 8007370:	4654      	mov	r4, sl
 8007372:	2000      	movs	r0, #0
 8007374:	f04f 0c0a 	mov.w	ip, #10
 8007378:	9a07      	ldr	r2, [sp, #28]
 800737a:	4621      	mov	r1, r4
 800737c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007380:	3b30      	subs	r3, #48	@ 0x30
 8007382:	2b09      	cmp	r3, #9
 8007384:	d94b      	bls.n	800741e <_vfiprintf_r+0x1a2>
 8007386:	b1b0      	cbz	r0, 80073b6 <_vfiprintf_r+0x13a>
 8007388:	9207      	str	r2, [sp, #28]
 800738a:	e014      	b.n	80073b6 <_vfiprintf_r+0x13a>
 800738c:	eba0 0308 	sub.w	r3, r0, r8
 8007390:	fa09 f303 	lsl.w	r3, r9, r3
 8007394:	4313      	orrs	r3, r2
 8007396:	46a2      	mov	sl, r4
 8007398:	9304      	str	r3, [sp, #16]
 800739a:	e7d2      	b.n	8007342 <_vfiprintf_r+0xc6>
 800739c:	9b03      	ldr	r3, [sp, #12]
 800739e:	1d19      	adds	r1, r3, #4
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	9103      	str	r1, [sp, #12]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	bfbb      	ittet	lt
 80073a8:	425b      	neglt	r3, r3
 80073aa:	f042 0202 	orrlt.w	r2, r2, #2
 80073ae:	9307      	strge	r3, [sp, #28]
 80073b0:	9307      	strlt	r3, [sp, #28]
 80073b2:	bfb8      	it	lt
 80073b4:	9204      	strlt	r2, [sp, #16]
 80073b6:	7823      	ldrb	r3, [r4, #0]
 80073b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80073ba:	d10a      	bne.n	80073d2 <_vfiprintf_r+0x156>
 80073bc:	7863      	ldrb	r3, [r4, #1]
 80073be:	2b2a      	cmp	r3, #42	@ 0x2a
 80073c0:	d132      	bne.n	8007428 <_vfiprintf_r+0x1ac>
 80073c2:	9b03      	ldr	r3, [sp, #12]
 80073c4:	3402      	adds	r4, #2
 80073c6:	1d1a      	adds	r2, r3, #4
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	9203      	str	r2, [sp, #12]
 80073cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073d0:	9305      	str	r3, [sp, #20]
 80073d2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800749c <_vfiprintf_r+0x220>
 80073d6:	2203      	movs	r2, #3
 80073d8:	4650      	mov	r0, sl
 80073da:	7821      	ldrb	r1, [r4, #0]
 80073dc:	f7fc fe77 	bl	80040ce <memchr>
 80073e0:	b138      	cbz	r0, 80073f2 <_vfiprintf_r+0x176>
 80073e2:	2240      	movs	r2, #64	@ 0x40
 80073e4:	9b04      	ldr	r3, [sp, #16]
 80073e6:	eba0 000a 	sub.w	r0, r0, sl
 80073ea:	4082      	lsls	r2, r0
 80073ec:	4313      	orrs	r3, r2
 80073ee:	3401      	adds	r4, #1
 80073f0:	9304      	str	r3, [sp, #16]
 80073f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073f6:	2206      	movs	r2, #6
 80073f8:	4829      	ldr	r0, [pc, #164]	@ (80074a0 <_vfiprintf_r+0x224>)
 80073fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073fe:	f7fc fe66 	bl	80040ce <memchr>
 8007402:	2800      	cmp	r0, #0
 8007404:	d03f      	beq.n	8007486 <_vfiprintf_r+0x20a>
 8007406:	4b27      	ldr	r3, [pc, #156]	@ (80074a4 <_vfiprintf_r+0x228>)
 8007408:	bb1b      	cbnz	r3, 8007452 <_vfiprintf_r+0x1d6>
 800740a:	9b03      	ldr	r3, [sp, #12]
 800740c:	3307      	adds	r3, #7
 800740e:	f023 0307 	bic.w	r3, r3, #7
 8007412:	3308      	adds	r3, #8
 8007414:	9303      	str	r3, [sp, #12]
 8007416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007418:	443b      	add	r3, r7
 800741a:	9309      	str	r3, [sp, #36]	@ 0x24
 800741c:	e76a      	b.n	80072f4 <_vfiprintf_r+0x78>
 800741e:	460c      	mov	r4, r1
 8007420:	2001      	movs	r0, #1
 8007422:	fb0c 3202 	mla	r2, ip, r2, r3
 8007426:	e7a8      	b.n	800737a <_vfiprintf_r+0xfe>
 8007428:	2300      	movs	r3, #0
 800742a:	f04f 0c0a 	mov.w	ip, #10
 800742e:	4619      	mov	r1, r3
 8007430:	3401      	adds	r4, #1
 8007432:	9305      	str	r3, [sp, #20]
 8007434:	4620      	mov	r0, r4
 8007436:	f810 2b01 	ldrb.w	r2, [r0], #1
 800743a:	3a30      	subs	r2, #48	@ 0x30
 800743c:	2a09      	cmp	r2, #9
 800743e:	d903      	bls.n	8007448 <_vfiprintf_r+0x1cc>
 8007440:	2b00      	cmp	r3, #0
 8007442:	d0c6      	beq.n	80073d2 <_vfiprintf_r+0x156>
 8007444:	9105      	str	r1, [sp, #20]
 8007446:	e7c4      	b.n	80073d2 <_vfiprintf_r+0x156>
 8007448:	4604      	mov	r4, r0
 800744a:	2301      	movs	r3, #1
 800744c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007450:	e7f0      	b.n	8007434 <_vfiprintf_r+0x1b8>
 8007452:	ab03      	add	r3, sp, #12
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	462a      	mov	r2, r5
 8007458:	4630      	mov	r0, r6
 800745a:	4b13      	ldr	r3, [pc, #76]	@ (80074a8 <_vfiprintf_r+0x22c>)
 800745c:	a904      	add	r1, sp, #16
 800745e:	f7fb fec3 	bl	80031e8 <_printf_float>
 8007462:	4607      	mov	r7, r0
 8007464:	1c78      	adds	r0, r7, #1
 8007466:	d1d6      	bne.n	8007416 <_vfiprintf_r+0x19a>
 8007468:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800746a:	07d9      	lsls	r1, r3, #31
 800746c:	d405      	bmi.n	800747a <_vfiprintf_r+0x1fe>
 800746e:	89ab      	ldrh	r3, [r5, #12]
 8007470:	059a      	lsls	r2, r3, #22
 8007472:	d402      	bmi.n	800747a <_vfiprintf_r+0x1fe>
 8007474:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007476:	f7fc fe29 	bl	80040cc <__retarget_lock_release_recursive>
 800747a:	89ab      	ldrh	r3, [r5, #12]
 800747c:	065b      	lsls	r3, r3, #25
 800747e:	f53f af1f 	bmi.w	80072c0 <_vfiprintf_r+0x44>
 8007482:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007484:	e71e      	b.n	80072c4 <_vfiprintf_r+0x48>
 8007486:	ab03      	add	r3, sp, #12
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	462a      	mov	r2, r5
 800748c:	4630      	mov	r0, r6
 800748e:	4b06      	ldr	r3, [pc, #24]	@ (80074a8 <_vfiprintf_r+0x22c>)
 8007490:	a904      	add	r1, sp, #16
 8007492:	f7fc f947 	bl	8003724 <_printf_i>
 8007496:	e7e4      	b.n	8007462 <_vfiprintf_r+0x1e6>
 8007498:	08007b19 	.word	0x08007b19
 800749c:	08007b1f 	.word	0x08007b1f
 80074a0:	08007b23 	.word	0x08007b23
 80074a4:	080031e9 	.word	0x080031e9
 80074a8:	08007259 	.word	0x08007259

080074ac <__swbuf_r>:
 80074ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ae:	460e      	mov	r6, r1
 80074b0:	4614      	mov	r4, r2
 80074b2:	4605      	mov	r5, r0
 80074b4:	b118      	cbz	r0, 80074be <__swbuf_r+0x12>
 80074b6:	6a03      	ldr	r3, [r0, #32]
 80074b8:	b90b      	cbnz	r3, 80074be <__swbuf_r+0x12>
 80074ba:	f7fc fcef 	bl	8003e9c <__sinit>
 80074be:	69a3      	ldr	r3, [r4, #24]
 80074c0:	60a3      	str	r3, [r4, #8]
 80074c2:	89a3      	ldrh	r3, [r4, #12]
 80074c4:	071a      	lsls	r2, r3, #28
 80074c6:	d501      	bpl.n	80074cc <__swbuf_r+0x20>
 80074c8:	6923      	ldr	r3, [r4, #16]
 80074ca:	b943      	cbnz	r3, 80074de <__swbuf_r+0x32>
 80074cc:	4621      	mov	r1, r4
 80074ce:	4628      	mov	r0, r5
 80074d0:	f000 f82a 	bl	8007528 <__swsetup_r>
 80074d4:	b118      	cbz	r0, 80074de <__swbuf_r+0x32>
 80074d6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80074da:	4638      	mov	r0, r7
 80074dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	6922      	ldr	r2, [r4, #16]
 80074e2:	b2f6      	uxtb	r6, r6
 80074e4:	1a98      	subs	r0, r3, r2
 80074e6:	6963      	ldr	r3, [r4, #20]
 80074e8:	4637      	mov	r7, r6
 80074ea:	4283      	cmp	r3, r0
 80074ec:	dc05      	bgt.n	80074fa <__swbuf_r+0x4e>
 80074ee:	4621      	mov	r1, r4
 80074f0:	4628      	mov	r0, r5
 80074f2:	f7ff fa4b 	bl	800698c <_fflush_r>
 80074f6:	2800      	cmp	r0, #0
 80074f8:	d1ed      	bne.n	80074d6 <__swbuf_r+0x2a>
 80074fa:	68a3      	ldr	r3, [r4, #8]
 80074fc:	3b01      	subs	r3, #1
 80074fe:	60a3      	str	r3, [r4, #8]
 8007500:	6823      	ldr	r3, [r4, #0]
 8007502:	1c5a      	adds	r2, r3, #1
 8007504:	6022      	str	r2, [r4, #0]
 8007506:	701e      	strb	r6, [r3, #0]
 8007508:	6962      	ldr	r2, [r4, #20]
 800750a:	1c43      	adds	r3, r0, #1
 800750c:	429a      	cmp	r2, r3
 800750e:	d004      	beq.n	800751a <__swbuf_r+0x6e>
 8007510:	89a3      	ldrh	r3, [r4, #12]
 8007512:	07db      	lsls	r3, r3, #31
 8007514:	d5e1      	bpl.n	80074da <__swbuf_r+0x2e>
 8007516:	2e0a      	cmp	r6, #10
 8007518:	d1df      	bne.n	80074da <__swbuf_r+0x2e>
 800751a:	4621      	mov	r1, r4
 800751c:	4628      	mov	r0, r5
 800751e:	f7ff fa35 	bl	800698c <_fflush_r>
 8007522:	2800      	cmp	r0, #0
 8007524:	d0d9      	beq.n	80074da <__swbuf_r+0x2e>
 8007526:	e7d6      	b.n	80074d6 <__swbuf_r+0x2a>

08007528 <__swsetup_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4b29      	ldr	r3, [pc, #164]	@ (80075d0 <__swsetup_r+0xa8>)
 800752c:	4605      	mov	r5, r0
 800752e:	6818      	ldr	r0, [r3, #0]
 8007530:	460c      	mov	r4, r1
 8007532:	b118      	cbz	r0, 800753c <__swsetup_r+0x14>
 8007534:	6a03      	ldr	r3, [r0, #32]
 8007536:	b90b      	cbnz	r3, 800753c <__swsetup_r+0x14>
 8007538:	f7fc fcb0 	bl	8003e9c <__sinit>
 800753c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007540:	0719      	lsls	r1, r3, #28
 8007542:	d422      	bmi.n	800758a <__swsetup_r+0x62>
 8007544:	06da      	lsls	r2, r3, #27
 8007546:	d407      	bmi.n	8007558 <__swsetup_r+0x30>
 8007548:	2209      	movs	r2, #9
 800754a:	602a      	str	r2, [r5, #0]
 800754c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007550:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007554:	81a3      	strh	r3, [r4, #12]
 8007556:	e033      	b.n	80075c0 <__swsetup_r+0x98>
 8007558:	0758      	lsls	r0, r3, #29
 800755a:	d512      	bpl.n	8007582 <__swsetup_r+0x5a>
 800755c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800755e:	b141      	cbz	r1, 8007572 <__swsetup_r+0x4a>
 8007560:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007564:	4299      	cmp	r1, r3
 8007566:	d002      	beq.n	800756e <__swsetup_r+0x46>
 8007568:	4628      	mov	r0, r5
 800756a:	f7fd fc15 	bl	8004d98 <_free_r>
 800756e:	2300      	movs	r3, #0
 8007570:	6363      	str	r3, [r4, #52]	@ 0x34
 8007572:	89a3      	ldrh	r3, [r4, #12]
 8007574:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007578:	81a3      	strh	r3, [r4, #12]
 800757a:	2300      	movs	r3, #0
 800757c:	6063      	str	r3, [r4, #4]
 800757e:	6923      	ldr	r3, [r4, #16]
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	89a3      	ldrh	r3, [r4, #12]
 8007584:	f043 0308 	orr.w	r3, r3, #8
 8007588:	81a3      	strh	r3, [r4, #12]
 800758a:	6923      	ldr	r3, [r4, #16]
 800758c:	b94b      	cbnz	r3, 80075a2 <__swsetup_r+0x7a>
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007598:	d003      	beq.n	80075a2 <__swsetup_r+0x7a>
 800759a:	4621      	mov	r1, r4
 800759c:	4628      	mov	r0, r5
 800759e:	f000 f882 	bl	80076a6 <__smakebuf_r>
 80075a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075a6:	f013 0201 	ands.w	r2, r3, #1
 80075aa:	d00a      	beq.n	80075c2 <__swsetup_r+0x9a>
 80075ac:	2200      	movs	r2, #0
 80075ae:	60a2      	str	r2, [r4, #8]
 80075b0:	6962      	ldr	r2, [r4, #20]
 80075b2:	4252      	negs	r2, r2
 80075b4:	61a2      	str	r2, [r4, #24]
 80075b6:	6922      	ldr	r2, [r4, #16]
 80075b8:	b942      	cbnz	r2, 80075cc <__swsetup_r+0xa4>
 80075ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80075be:	d1c5      	bne.n	800754c <__swsetup_r+0x24>
 80075c0:	bd38      	pop	{r3, r4, r5, pc}
 80075c2:	0799      	lsls	r1, r3, #30
 80075c4:	bf58      	it	pl
 80075c6:	6962      	ldrpl	r2, [r4, #20]
 80075c8:	60a2      	str	r2, [r4, #8]
 80075ca:	e7f4      	b.n	80075b6 <__swsetup_r+0x8e>
 80075cc:	2000      	movs	r0, #0
 80075ce:	e7f7      	b.n	80075c0 <__swsetup_r+0x98>
 80075d0:	20000028 	.word	0x20000028

080075d4 <_raise_r>:
 80075d4:	291f      	cmp	r1, #31
 80075d6:	b538      	push	{r3, r4, r5, lr}
 80075d8:	4605      	mov	r5, r0
 80075da:	460c      	mov	r4, r1
 80075dc:	d904      	bls.n	80075e8 <_raise_r+0x14>
 80075de:	2316      	movs	r3, #22
 80075e0:	6003      	str	r3, [r0, #0]
 80075e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075e6:	bd38      	pop	{r3, r4, r5, pc}
 80075e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80075ea:	b112      	cbz	r2, 80075f2 <_raise_r+0x1e>
 80075ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075f0:	b94b      	cbnz	r3, 8007606 <_raise_r+0x32>
 80075f2:	4628      	mov	r0, r5
 80075f4:	f000 f830 	bl	8007658 <_getpid_r>
 80075f8:	4622      	mov	r2, r4
 80075fa:	4601      	mov	r1, r0
 80075fc:	4628      	mov	r0, r5
 80075fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007602:	f000 b817 	b.w	8007634 <_kill_r>
 8007606:	2b01      	cmp	r3, #1
 8007608:	d00a      	beq.n	8007620 <_raise_r+0x4c>
 800760a:	1c59      	adds	r1, r3, #1
 800760c:	d103      	bne.n	8007616 <_raise_r+0x42>
 800760e:	2316      	movs	r3, #22
 8007610:	6003      	str	r3, [r0, #0]
 8007612:	2001      	movs	r0, #1
 8007614:	e7e7      	b.n	80075e6 <_raise_r+0x12>
 8007616:	2100      	movs	r1, #0
 8007618:	4620      	mov	r0, r4
 800761a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800761e:	4798      	blx	r3
 8007620:	2000      	movs	r0, #0
 8007622:	e7e0      	b.n	80075e6 <_raise_r+0x12>

08007624 <raise>:
 8007624:	4b02      	ldr	r3, [pc, #8]	@ (8007630 <raise+0xc>)
 8007626:	4601      	mov	r1, r0
 8007628:	6818      	ldr	r0, [r3, #0]
 800762a:	f7ff bfd3 	b.w	80075d4 <_raise_r>
 800762e:	bf00      	nop
 8007630:	20000028 	.word	0x20000028

08007634 <_kill_r>:
 8007634:	b538      	push	{r3, r4, r5, lr}
 8007636:	2300      	movs	r3, #0
 8007638:	4d06      	ldr	r5, [pc, #24]	@ (8007654 <_kill_r+0x20>)
 800763a:	4604      	mov	r4, r0
 800763c:	4608      	mov	r0, r1
 800763e:	4611      	mov	r1, r2
 8007640:	602b      	str	r3, [r5, #0]
 8007642:	f7f9 fddc 	bl	80011fe <_kill>
 8007646:	1c43      	adds	r3, r0, #1
 8007648:	d102      	bne.n	8007650 <_kill_r+0x1c>
 800764a:	682b      	ldr	r3, [r5, #0]
 800764c:	b103      	cbz	r3, 8007650 <_kill_r+0x1c>
 800764e:	6023      	str	r3, [r4, #0]
 8007650:	bd38      	pop	{r3, r4, r5, pc}
 8007652:	bf00      	nop
 8007654:	2000038c 	.word	0x2000038c

08007658 <_getpid_r>:
 8007658:	f7f9 bdca 	b.w	80011f0 <_getpid>

0800765c <__swhatbuf_r>:
 800765c:	b570      	push	{r4, r5, r6, lr}
 800765e:	460c      	mov	r4, r1
 8007660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007664:	4615      	mov	r5, r2
 8007666:	2900      	cmp	r1, #0
 8007668:	461e      	mov	r6, r3
 800766a:	b096      	sub	sp, #88	@ 0x58
 800766c:	da0c      	bge.n	8007688 <__swhatbuf_r+0x2c>
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	2100      	movs	r1, #0
 8007672:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007676:	bf14      	ite	ne
 8007678:	2340      	movne	r3, #64	@ 0x40
 800767a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800767e:	2000      	movs	r0, #0
 8007680:	6031      	str	r1, [r6, #0]
 8007682:	602b      	str	r3, [r5, #0]
 8007684:	b016      	add	sp, #88	@ 0x58
 8007686:	bd70      	pop	{r4, r5, r6, pc}
 8007688:	466a      	mov	r2, sp
 800768a:	f000 f849 	bl	8007720 <_fstat_r>
 800768e:	2800      	cmp	r0, #0
 8007690:	dbed      	blt.n	800766e <__swhatbuf_r+0x12>
 8007692:	9901      	ldr	r1, [sp, #4]
 8007694:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007698:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800769c:	4259      	negs	r1, r3
 800769e:	4159      	adcs	r1, r3
 80076a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80076a4:	e7eb      	b.n	800767e <__swhatbuf_r+0x22>

080076a6 <__smakebuf_r>:
 80076a6:	898b      	ldrh	r3, [r1, #12]
 80076a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076aa:	079d      	lsls	r5, r3, #30
 80076ac:	4606      	mov	r6, r0
 80076ae:	460c      	mov	r4, r1
 80076b0:	d507      	bpl.n	80076c2 <__smakebuf_r+0x1c>
 80076b2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80076b6:	6023      	str	r3, [r4, #0]
 80076b8:	6123      	str	r3, [r4, #16]
 80076ba:	2301      	movs	r3, #1
 80076bc:	6163      	str	r3, [r4, #20]
 80076be:	b003      	add	sp, #12
 80076c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076c2:	466a      	mov	r2, sp
 80076c4:	ab01      	add	r3, sp, #4
 80076c6:	f7ff ffc9 	bl	800765c <__swhatbuf_r>
 80076ca:	9f00      	ldr	r7, [sp, #0]
 80076cc:	4605      	mov	r5, r0
 80076ce:	4639      	mov	r1, r7
 80076d0:	4630      	mov	r0, r6
 80076d2:	f7fd fbd3 	bl	8004e7c <_malloc_r>
 80076d6:	b948      	cbnz	r0, 80076ec <__smakebuf_r+0x46>
 80076d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076dc:	059a      	lsls	r2, r3, #22
 80076de:	d4ee      	bmi.n	80076be <__smakebuf_r+0x18>
 80076e0:	f023 0303 	bic.w	r3, r3, #3
 80076e4:	f043 0302 	orr.w	r3, r3, #2
 80076e8:	81a3      	strh	r3, [r4, #12]
 80076ea:	e7e2      	b.n	80076b2 <__smakebuf_r+0xc>
 80076ec:	89a3      	ldrh	r3, [r4, #12]
 80076ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80076f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076f6:	81a3      	strh	r3, [r4, #12]
 80076f8:	9b01      	ldr	r3, [sp, #4]
 80076fa:	6020      	str	r0, [r4, #0]
 80076fc:	b15b      	cbz	r3, 8007716 <__smakebuf_r+0x70>
 80076fe:	4630      	mov	r0, r6
 8007700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007704:	f000 f81e 	bl	8007744 <_isatty_r>
 8007708:	b128      	cbz	r0, 8007716 <__smakebuf_r+0x70>
 800770a:	89a3      	ldrh	r3, [r4, #12]
 800770c:	f023 0303 	bic.w	r3, r3, #3
 8007710:	f043 0301 	orr.w	r3, r3, #1
 8007714:	81a3      	strh	r3, [r4, #12]
 8007716:	89a3      	ldrh	r3, [r4, #12]
 8007718:	431d      	orrs	r5, r3
 800771a:	81a5      	strh	r5, [r4, #12]
 800771c:	e7cf      	b.n	80076be <__smakebuf_r+0x18>
	...

08007720 <_fstat_r>:
 8007720:	b538      	push	{r3, r4, r5, lr}
 8007722:	2300      	movs	r3, #0
 8007724:	4d06      	ldr	r5, [pc, #24]	@ (8007740 <_fstat_r+0x20>)
 8007726:	4604      	mov	r4, r0
 8007728:	4608      	mov	r0, r1
 800772a:	4611      	mov	r1, r2
 800772c:	602b      	str	r3, [r5, #0]
 800772e:	f7f9 fdc5 	bl	80012bc <_fstat>
 8007732:	1c43      	adds	r3, r0, #1
 8007734:	d102      	bne.n	800773c <_fstat_r+0x1c>
 8007736:	682b      	ldr	r3, [r5, #0]
 8007738:	b103      	cbz	r3, 800773c <_fstat_r+0x1c>
 800773a:	6023      	str	r3, [r4, #0]
 800773c:	bd38      	pop	{r3, r4, r5, pc}
 800773e:	bf00      	nop
 8007740:	2000038c 	.word	0x2000038c

08007744 <_isatty_r>:
 8007744:	b538      	push	{r3, r4, r5, lr}
 8007746:	2300      	movs	r3, #0
 8007748:	4d05      	ldr	r5, [pc, #20]	@ (8007760 <_isatty_r+0x1c>)
 800774a:	4604      	mov	r4, r0
 800774c:	4608      	mov	r0, r1
 800774e:	602b      	str	r3, [r5, #0]
 8007750:	f7f9 fdc3 	bl	80012da <_isatty>
 8007754:	1c43      	adds	r3, r0, #1
 8007756:	d102      	bne.n	800775e <_isatty_r+0x1a>
 8007758:	682b      	ldr	r3, [r5, #0]
 800775a:	b103      	cbz	r3, 800775e <_isatty_r+0x1a>
 800775c:	6023      	str	r3, [r4, #0]
 800775e:	bd38      	pop	{r3, r4, r5, pc}
 8007760:	2000038c 	.word	0x2000038c

08007764 <_init>:
 8007764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007766:	bf00      	nop
 8007768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776a:	bc08      	pop	{r3}
 800776c:	469e      	mov	lr, r3
 800776e:	4770      	bx	lr

08007770 <_fini>:
 8007770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007772:	bf00      	nop
 8007774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007776:	bc08      	pop	{r3}
 8007778:	469e      	mov	lr, r3
 800777a:	4770      	bx	lr
